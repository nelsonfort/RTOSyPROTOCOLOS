
mis_proyectos/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf:     file format elf32-littlearm
mis_proyectos/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a003259

Program Header:
0x70000001 off    0x000139a0 vaddr 0x1a0039a0 paddr 0x1a0039a0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002b98 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000039a8 memsz 0x000039a8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0039a8 align 2**16
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039a0  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a0039a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
  6 .bss          00002ac8  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0039a0  1a0039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 17 .noinit       00000000  10002b98  10002b98  000200cc  2**2
                  CONTENTS
 18 .debug_info   00028caf  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000554a  00000000  00000000  00048d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000aaa3  00000000  00000000  0004e2c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000eb0  00000000  00000000  00058d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000fd8  00000000  00000000  00059c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000ee57  00000000  00000000  0005abf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00011e8d  00000000  00000000  00069a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002cc3e  00000000  00000000  0007b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000a8512  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000a8591  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002638  00000000  00000000  000a85c8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0039a0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b98 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
100000d0 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 heap_1.c
100000d8 l     O .bss	00002000 ucHeap
100000d4 l     O .bss	00000004 pucAlignedHeap.11323
100020d8 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000426 l     F .text	0000001e prvIsQueueFull
1a000444 l     F .text	0000001a prvIsQueueEmpty
1a00045e l     F .text	00000076 prvCopyDataToQueue
1a0004d4 l     F .text	00000024 prvCopyDataFromQueue
1a0004f8 l     F .text	0000006e prvUnlockQueue
1a0005ec l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020dc l     O .bss	00000168 uxIdleTaskStack.10613
10002244 l     O .bss	000005a0 uxTimerTaskStack.10620
100027e4 l     O .bss	00000060 xIdleTaskTCB.10612
10002844 l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000b80 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000bac l     F .text	00000092 prvInitialiseNewTask
1a000c40 l     F .text	00000068 prvInitialiseTaskLists
1a000ca8 l     F .text	000000ac prvAddNewTaskToReadyList
1a000d54 l     F .text	00000038 prvDeleteTCB
1a000d8c l     F .text	0000004c prvCheckTasksWaitingTermination
1a000dd8 l     F .text	00000028 prvIdleTask
1a000e00 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100028a8 l     O .bss	00000004 pxDelayedTaskList
100028ac l     O .bss	00000004 pxOverflowDelayedTaskList
100028b0 l     O .bss	0000008c pxReadyTasksLists
1000293c l     O .bss	00000004 uxCurrentNumberOfTasks
10002940 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002944 l     O .bss	00000004 uxPendedTicks
10002948 l     O .bss	00000004 uxSchedulerSuspended
1000294c l     O .bss	00000004 uxTaskNumber
10002950 l     O .bss	00000004 uxTopReadyPriority
10002954 l     O .bss	00000014 xDelayedTaskList1
10002968 l     O .bss	00000014 xDelayedTaskList2
1000297c l     O .bss	00000004 xNextTaskUnblockTime
10002980 l     O .bss	00000004 xNumOfOverflows
10002984 l     O .bss	00000014 xPendingReadyList
10002998 l     O .bss	00000004 xSchedulerRunning
1000299c l     O .bss	00000014 xSuspendedTaskList
100029b0 l     O .bss	00000014 xTasksWaitingTermination
100029c4 l     O .bss	00000004 xTickCount
100029c8 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a00164c l     F .text	00000020 prvGetNextExpireTime
1a00166c l     F .text	00000048 prvInsertTimerInActiveList
1a0016b4 l     F .text	00000070 prvCheckForValidListAndQueue
1a001724 l     F .text	00000040 prvInitialiseNewTimer
1a001af4 l     F .text	00000016 prvTimerTask
1a001880 l     F .text	00000078 prvSwitchTimerLists
1a0018f8 l     F .text	0000002c prvSampleTimeNow
1a001924 l     F .text	00000060 prvProcessExpiredTimer
1a001984 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0019f8 l     F .text	000000fc prvProcessReceivedCommands
100029cc l     O .bss	00000004 pxCurrentTimerList
100029d0 l     O .bss	00000004 pxOverflowTimerList
100029d4 l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002a74 l     O .bss	00000014 xActiveTimerList1
10002a88 l     O .bss	00000014 xActiveTimerList2
10002a9c l     O .bss	00000004 xLastTime.11662
10002aa0 l     O .bss	00000050 xStaticTimerQueue.11712
10002af0 l     O .bss	00000004 xTimerQueue
10002af4 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001b0c l     F .text	00000040 prvTaskExitError
1a001b4c l     F .text	00000022 prvPortStartFirstTask
1a001b74 l     F .text	0000000e vPortEnableVFP
1a001be0 l       .text	00000000 pxCurrentTCBConst2
1a001cc0 l       .text	00000000 pxCurrentTCBConst
10002af8 l     O .bss	00000001 ucMaxSysCallPriority
10002afc l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003694 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002b00 l     O .bss	00000004 callBackFuncParams
10002b08 l     O .bss	00000008 tickCounter
10002b10 l     O .bss	00000004 tickHookFunction
10002b14 l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00200c l     F .text	00000002 errorOcurred
1a00200e l     F .text	00000002 doNothing
1000000c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002118 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b44 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002470 l     F .text	00000010 clearInterrupt
1a002480 l     F .text	0000005c serveInterrupt
1000004c l     O .data	00000048 ultrasonicSensors
1a003824 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 board.c
1a0024fc l     F .text	00000044 Board_LED_Init
1a002540 l     F .text	00000040 Board_TEC_Init
1a002580 l     F .text	00000040 Board_GPIO_Init
1a0025c0 l     F .text	00000038 Board_SPI_Init
1a0025f8 l     F .text	00000024 Board_I2C_Init
1a00261c l     F .text	00000030 Board_ADC_Init
1a00382c l     O .text	00000008 GpioButtons
1a003834 l     O .text	0000000c GpioLeds
1a003840 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003858 l     O .text	00000004 InitClkStates
1a00385c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002768 l     F .text	0000002c Chip_UART_GetIndex
1a0038d0 l     O .text	00000008 UART_BClock
1a0038d8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002910 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002924 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0029ec l     F .text	000000a4 pll_calc_divs
1a002a90 l     F .text	0000010c pll_get_frac
1a002b9c l     F .text	0000004c Chip_Clock_FindBaseClock
1a002e10 l     F .text	00000022 Chip_Clock_GetDivRate
10002b48 l     O .bss	00000008 audio_usb_pll_freq
1a0038ec l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003958 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0031a4 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0031b8 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a0039a0 l       .bss_RAM5	00000000 __init_array_end
1a0039a0 l       .bss_RAM5	00000000 __preinit_array_end
1a0039a0 l       .bss_RAM5	00000000 __init_array_start
1a0039a0 l       .bss_RAM5	00000000 __preinit_array_start
1a002c34 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002090 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001c28 g     F .text	0000002c vPortExitCritical
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a000a68 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a0029ca g     F .text	0000000c Chip_ADC_SetResolution
1a001cc4 g     F .text	0000002c SysTick_Handler
1a0027e8 g     F .text	00000040 Chip_UART_SetBaud
1a002458 g     F .text	00000008 printString
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a001c60 g     F .text	00000064 PendSV_Handler
1a00081c g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a0039a8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
100028a4 g     O .bss	00000004 pxCurrentTCB
53ff4636 g       *ABS*	00000000 __valid_user_code_checksum
1a0039a8 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a0014d8 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0020d4 g     F .text	00000044 TIMER3_IRQHandler
1a002eb2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a001d28 g     F .text	00000110 xPortStartScheduler
1a003628 g     F .text	00000016 memcpy
1a0013e4 g     F .text	00000030 vTaskPlaceOnEventList
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a001cf0  w    F .text	00000038 vPortSetupTimerInterrupt
1a0032e0 g     F .text	00000000 .hidden __aeabi_uldivmod
10002b98 g       .noinit	00000000 _noinit
1a000410 g     F .text	00000016 vPortFree
1a001f72 g     F .text	00000018 uartWriteString
10002b94 g     O .bss	00000004 SystemCoreClock
1a002794 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a001f8c g     F .text	00000034 tickerCallback
1a001e38 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002f30 g     F .text	0000004c Chip_Clock_GetRate
1a000ad6 g     F .text	00000018 vListInsertEnd
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a002448 g     F .text	00000010 printInitUart
1a0026f0 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003310 g     F .text	000002cc .hidden __udivmoddi4
1a003828 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000ad0 g     F .text	00000006 vListInitialiseItem
1a000300 g     F .text	0000004c myTask
1a0024e6 g     F .text	0000000a GPIO1_IRQHandler
1a0008e8 g     F .text	00000158 xQueueReceive
10002b50 g     O .bss	00000040 xQueueRegistry
1a000b64 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a0039a0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0035e0 g     F .text	00000048 __libc_init_array
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a0003a0 g     F .text	00000070 pvPortMalloc
1a002670 g     F .text	0000002c Board_Init
1a0032dc g     F .text	00000002 _init
1a000aba g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001014 g     F .text	0000000c xTaskGetTickCount
1a0006a0 g     F .text	0000017c xQueueGenericSend
1a00018a  w    F .text	00000002 RTC_IRQHandler
10002b98 g       .bss	00000000 _ebss
1a002010 g     F .text	00000040 TIMER0_IRQHandler
1a001fc0 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00316c g     F .text	00000038 Chip_I2C_SetClockRate
1a00159c g     F .text	000000b0 xTaskPriorityDisinherit
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a002be8 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00144c g     F .text	0000008c xTaskRemoveFromEventList
1a000b7e g     F .text	00000002 vApplicationMallocFailedHook
1a00018c g     F .text	0000001e data_init
1a002050 g     F .text	00000040 TIMER1_IRQHandler
1a003148 g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a002460 g     F .text	00000010 printEnter
1a002da4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0036e8 g     O .text	00000136 gpioPinsInit
1a001f58 g     F .text	0000001a uartWriteByte
1a0031d0 g     F .text	00000012 Chip_SSP_SetClockRate
1a0024f0 g     F .text	0000000a GPIO2_IRQHandler
1a0014f0 g     F .text	00000080 xTaskCheckForTimeOut
1a002e8c g     F .text	00000026 Chip_Clock_GetBaseClock
100000d0 g       .bss	00000000 _bss
1a002998 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001004 g     F .text	00000010 vTaskSuspendAll
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a0031e2 g     F .text	0000003e Chip_SSP_SetBitRate
1a000b22 g     F .text	00000028 uxListRemove
1a002fd0 g     F .text	00000002 Chip_GPIO_Init
1a003854 g     O .text	00000004 OscRateIn
1a001edc g     F .text	0000007c uartInit
1a000e98 g     F .text	00000072 xTaskCreateStatic
10002b98 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00131c g     F .text	000000c8 vTaskSwitchContext
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a00060e g     F .text	00000090 xQueueGenericCreateStatic
1a001414 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00214c g     F .text	00000194 gpioInit
1a000b4c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001814 g     F .text	0000006c xTimerGenericCommand
1a000b7c g     F .text	00000002 vApplicationStackOverflowHook
1a0035dc  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002338 g     F .text	0000001c USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a002c50 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00363e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00034c g     F .text	00000054 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
1a000aee g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001bc0 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a001764 g     F .text	00000064 xTimerCreateTimerTask
1a001eb0 g     F .text	00000018 uartTxReady
1a00122c g     F .text	000000a4 vTaskDelayUntil
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a002ec0 g     F .text	0000003c Chip_Clock_EnableOpts
1a002c6c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002f7c g     F .text	00000054 fpuInit
1a002d24 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00269c g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0022e0 g     F .text	00000056 gpioWrite
1a001138 g     F .text	000000f4 xTaskResumeAll
1a000f70 g     F .text	00000094 vTaskStartScheduler
1a002958 g     F .text	00000040 Chip_ADC_Init
10002b90 g     O .bss	00000004 g_pUsbApi
1a0026b8 g     F .text	00000038 Board_SetupMuxing
1a002828 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001ec8 g     F .text	00000014 uartTxWrite
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001570 g     F .text	0000000c vTaskMissedYield
10002b98 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003220 g     F .text	00000038 Chip_SSP_Init
1a000a40 g     F .text	00000028 vQueueAddToRegistry
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a001020 g     F .text	00000118 xTaskIncrementTick
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a00264c g     F .text	00000024 Board_Debug_Init
1a000568 g     F .text	00000084 xQueueGenericReset
100000cc g       .data	00000000 _edata
1a003128 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000f0a g     F .text	00000066 xTaskCreate
1a002fd4 g     F .text	00000154 Chip_SetupCoreClock
1a0024dc g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a003258 g     F .text	00000084 ResetISR
1a0029d8 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a0012d0 g     F .text	0000004c vTaskDelay
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00157c g     F .text	00000020 xTaskGetSchedulerState
1a0035dc  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001b88 g     F .text	0000002c pxPortInitialiseStack
1a002efc g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a0017c8 g     F .text	0000004c xTimerCreateStatic
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a002354 g     F .text	000000f4 boardInit
1a001be4 g     F .text	00000044 vPortEnterCritical
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a002e34 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001e94 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a00275c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 59 32 00 1a 79 01 00 1a 7b 01 00 1a     ....Y2..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 36 46 ff 53     }...........6F.S
	...
1a00002c:	c1 1b 00 1a 85 01 00 1a 00 00 00 00 61 1c 00 1a     ............a...
1a00003c:	c5 1c 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 39 23 00 1a 8b 01 00 1a 8b 01 00 1a     ....9#..........
1a00006c:	8b 01 00 1a 11 20 00 1a 51 20 00 1a 91 20 00 1a     ..... ..Q ... ..
1a00007c:	d5 20 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     . ..............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a dd 24 00 1a e7 24 00 1a f1 24 00 1a     .....$...$...$..
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a0039a8 	.word	0x1a0039a8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a0039a8 	.word	0x1a0039a8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0039a8 	.word	0x1a0039a8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0039a8 	.word	0x1a0039a8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0039a8 	.word	0x1a0039a8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	00002ac8 	.word	0x00002ac8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTask>:

   }
}*/
// ----------------- CON vTaskDelayUntil----------------------------
void myTask( void* taskParmPtr )
{
1a000300:	b530      	push	{r4, r5, lr}
1a000302:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000304:	f000 fe86 	bl	1a001014 <xTaskGetTickCount>
1a000308:	9001      	str	r0, [sp, #4]
	uint8_t delay_on =100;
1a00030a:	2464      	movs	r4, #100	; 0x64

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      // Intercambia el estado del LEDB
      gpioWrite( LED2, HIGH );
1a00030c:	2101      	movs	r1, #1
1a00030e:	202c      	movs	r0, #44	; 0x2c
1a000310:	f001 ffe6 	bl	1a0022e0 <gpioWrite>
      debugPrintlnString( "Blink!" );
1a000314:	4d0b      	ldr	r5, [pc, #44]	; (1a000344 <myTask+0x44>)
1a000316:	490c      	ldr	r1, [pc, #48]	; (1a000348 <myTask+0x48>)
1a000318:	7828      	ldrb	r0, [r5, #0]
1a00031a:	f002 f89d 	bl	1a002458 <printString>
1a00031e:	7828      	ldrb	r0, [r5, #0]
1a000320:	f002 f89e 	bl	1a002460 <printEnter>
      // Envia la tarea al estado bloqueado durante 500ms
      vTaskDelay( delay_on / portTICK_RATE_MS );
1a000324:	4620      	mov	r0, r4
1a000326:	f000 ffd3 	bl	1a0012d0 <vTaskDelay>
      gpioWrite( LED2, LOW);
1a00032a:	2100      	movs	r1, #0
1a00032c:	202c      	movs	r0, #44	; 0x2c
1a00032e:	f001 ffd7 	bl	1a0022e0 <gpioWrite>
      delay_on += 100;
1a000332:	3464      	adds	r4, #100	; 0x64
1a000334:	b2e4      	uxtb	r4, r4
      if( delay_on == 1000) delay_on = 0;

      vTaskDelayUntil(&tiempo_inicio_ciclo,1000/ portTICK_RATE_MS);
1a000336:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a00033a:	a801      	add	r0, sp, #4
1a00033c:	f000 ff76 	bl	1a00122c <vTaskDelayUntil>
1a000340:	e7e4      	b.n	1a00030c <myTask+0xc>
1a000342:	bf00      	nop
1a000344:	100000d0 	.word	0x100000d0
1a000348:	1a003674 	.word	0x1a003674

1a00034c <main>:
{
1a00034c:	b500      	push	{lr}
1a00034e:	b083      	sub	sp, #12
   boardConfig();
1a000350:	f002 f800 	bl	1a002354 <boardInit>
   debugPrintConfigUart( UART_USB, 115200 );
1a000354:	4c0e      	ldr	r4, [pc, #56]	; (1a000390 <main+0x44>)
1a000356:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00035a:	2103      	movs	r1, #3
1a00035c:	4620      	mov	r0, r4
1a00035e:	f002 f873 	bl	1a002448 <printInitUart>
   debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a000362:	490c      	ldr	r1, [pc, #48]	; (1a000394 <main+0x48>)
1a000364:	7820      	ldrb	r0, [r4, #0]
1a000366:	f002 f877 	bl	1a002458 <printString>
1a00036a:	7820      	ldrb	r0, [r4, #0]
1a00036c:	f002 f878 	bl	1a002460 <printEnter>
   gpioWrite( LED3, ON );
1a000370:	2101      	movs	r1, #1
1a000372:	202d      	movs	r0, #45	; 0x2d
1a000374:	f001 ffb4 	bl	1a0022e0 <gpioWrite>
   xTaskCreate(
1a000378:	2300      	movs	r3, #0
1a00037a:	9301      	str	r3, [sp, #4]
1a00037c:	2201      	movs	r2, #1
1a00037e:	9200      	str	r2, [sp, #0]
1a000380:	22b4      	movs	r2, #180	; 0xb4
1a000382:	4905      	ldr	r1, [pc, #20]	; (1a000398 <main+0x4c>)
1a000384:	4805      	ldr	r0, [pc, #20]	; (1a00039c <main+0x50>)
1a000386:	f000 fdc0 	bl	1a000f0a <xTaskCreate>
   vTaskStartScheduler();
1a00038a:	f000 fdf1 	bl	1a000f70 <vTaskStartScheduler>
1a00038e:	e7fe      	b.n	1a00038e <main+0x42>
1a000390:	100000d0 	.word	0x100000d0
1a000394:	1a003650 	.word	0x1a003650
1a000398:	1a00366c 	.word	0x1a00366c
1a00039c:	1a000301 	.word	0x1a000301

1a0003a0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0003a0:	b538      	push	{r3, r4, r5, lr}
1a0003a2:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0003a4:	f010 0f07 	tst.w	r0, #7
1a0003a8:	d002      	beq.n	1a0003b0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0003aa:	f020 0407 	bic.w	r4, r0, #7
1a0003ae:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0003b0:	f000 fe28 	bl	1a001004 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0003b4:	4b13      	ldr	r3, [pc, #76]	; (1a000404 <pvPortMalloc+0x64>)
1a0003b6:	681b      	ldr	r3, [r3, #0]
1a0003b8:	b17b      	cbz	r3, 1a0003da <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0003ba:	4b13      	ldr	r3, [pc, #76]	; (1a000408 <pvPortMalloc+0x68>)
1a0003bc:	681b      	ldr	r3, [r3, #0]
1a0003be:	441c      	add	r4, r3
1a0003c0:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0003c4:	4294      	cmp	r4, r2
1a0003c6:	d80e      	bhi.n	1a0003e6 <pvPortMalloc+0x46>
1a0003c8:	42a3      	cmp	r3, r4
1a0003ca:	d310      	bcc.n	1a0003ee <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0003cc:	f000 feb4 	bl	1a001138 <xTaskResumeAll>
void *pvReturn = NULL;
1a0003d0:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0003d2:	f000 fbd4 	bl	1a000b7e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a0003d6:	4628      	mov	r0, r5
1a0003d8:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a0003da:	4b0c      	ldr	r3, [pc, #48]	; (1a00040c <pvPortMalloc+0x6c>)
1a0003dc:	f023 0307 	bic.w	r3, r3, #7
1a0003e0:	4a08      	ldr	r2, [pc, #32]	; (1a000404 <pvPortMalloc+0x64>)
1a0003e2:	6013      	str	r3, [r2, #0]
1a0003e4:	e7e9      	b.n	1a0003ba <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a0003e6:	f000 fea7 	bl	1a001138 <xTaskResumeAll>
void *pvReturn = NULL;
1a0003ea:	2500      	movs	r5, #0
1a0003ec:	e7f1      	b.n	1a0003d2 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0003ee:	4a05      	ldr	r2, [pc, #20]	; (1a000404 <pvPortMalloc+0x64>)
1a0003f0:	6815      	ldr	r5, [r2, #0]
1a0003f2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a0003f4:	4b04      	ldr	r3, [pc, #16]	; (1a000408 <pvPortMalloc+0x68>)
1a0003f6:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a0003f8:	f000 fe9e 	bl	1a001138 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0003fc:	2d00      	cmp	r5, #0
1a0003fe:	d1ea      	bne.n	1a0003d6 <pvPortMalloc+0x36>
1a000400:	e7e7      	b.n	1a0003d2 <pvPortMalloc+0x32>
1a000402:	bf00      	nop
1a000404:	100000d4 	.word	0x100000d4
1a000408:	100020d8 	.word	0x100020d8
1a00040c:	100000e0 	.word	0x100000e0

1a000410 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000410:	b140      	cbz	r0, 1a000424 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000412:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000416:	f383 8811 	msr	BASEPRI, r3
1a00041a:	f3bf 8f6f 	isb	sy
1a00041e:	f3bf 8f4f 	dsb	sy
1a000422:	e7fe      	b.n	1a000422 <vPortFree+0x12>
}
1a000424:	4770      	bx	lr

1a000426 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000426:	b510      	push	{r4, lr}
1a000428:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00042a:	f001 fbdb 	bl	1a001be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00042e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000430:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000432:	429a      	cmp	r2, r3
1a000434:	d004      	beq.n	1a000440 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000436:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000438:	f001 fbf6 	bl	1a001c28 <vPortExitCritical>

	return xReturn;
}
1a00043c:	4620      	mov	r0, r4
1a00043e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000440:	2401      	movs	r4, #1
1a000442:	e7f9      	b.n	1a000438 <prvIsQueueFull+0x12>

1a000444 <prvIsQueueEmpty>:
{
1a000444:	b510      	push	{r4, lr}
1a000446:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000448:	f001 fbcc 	bl	1a001be4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00044c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00044e:	b123      	cbz	r3, 1a00045a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000450:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000452:	f001 fbe9 	bl	1a001c28 <vPortExitCritical>
}
1a000456:	4620      	mov	r0, r4
1a000458:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00045a:	2401      	movs	r4, #1
1a00045c:	e7f9      	b.n	1a000452 <prvIsQueueEmpty+0xe>

1a00045e <prvCopyDataToQueue>:
{
1a00045e:	b570      	push	{r4, r5, r6, lr}
1a000460:	4604      	mov	r4, r0
1a000462:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000464:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000466:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000468:	b95a      	cbnz	r2, 1a000482 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00046a:	6803      	ldr	r3, [r0, #0]
1a00046c:	b11b      	cbz	r3, 1a000476 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00046e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000470:	3501      	adds	r5, #1
1a000472:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000474:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000476:	6840      	ldr	r0, [r0, #4]
1a000478:	f001 f890 	bl	1a00159c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00047c:	2300      	movs	r3, #0
1a00047e:	6063      	str	r3, [r4, #4]
1a000480:	e7f6      	b.n	1a000470 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000482:	b96e      	cbnz	r6, 1a0004a0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000484:	6880      	ldr	r0, [r0, #8]
1a000486:	f003 f8cf 	bl	1a003628 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a00048a:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00048c:	68a3      	ldr	r3, [r4, #8]
1a00048e:	4413      	add	r3, r2
1a000490:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000492:	6862      	ldr	r2, [r4, #4]
1a000494:	4293      	cmp	r3, r2
1a000496:	d319      	bcc.n	1a0004cc <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000498:	6823      	ldr	r3, [r4, #0]
1a00049a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00049c:	2000      	movs	r0, #0
1a00049e:	e7e7      	b.n	1a000470 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0004a0:	68c0      	ldr	r0, [r0, #12]
1a0004a2:	f003 f8c1 	bl	1a003628 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0004a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0004a8:	4252      	negs	r2, r2
1a0004aa:	68e3      	ldr	r3, [r4, #12]
1a0004ac:	4413      	add	r3, r2
1a0004ae:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0004b0:	6821      	ldr	r1, [r4, #0]
1a0004b2:	428b      	cmp	r3, r1
1a0004b4:	d202      	bcs.n	1a0004bc <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0004b6:	6863      	ldr	r3, [r4, #4]
1a0004b8:	441a      	add	r2, r3
1a0004ba:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0004bc:	2e02      	cmp	r6, #2
1a0004be:	d001      	beq.n	1a0004c4 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0004c0:	2000      	movs	r0, #0
1a0004c2:	e7d5      	b.n	1a000470 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0004c4:	b125      	cbz	r5, 1a0004d0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0004c6:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0004c8:	2000      	movs	r0, #0
1a0004ca:	e7d1      	b.n	1a000470 <prvCopyDataToQueue+0x12>
1a0004cc:	2000      	movs	r0, #0
1a0004ce:	e7cf      	b.n	1a000470 <prvCopyDataToQueue+0x12>
1a0004d0:	2000      	movs	r0, #0
1a0004d2:	e7cd      	b.n	1a000470 <prvCopyDataToQueue+0x12>

1a0004d4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0004d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0004d6:	b172      	cbz	r2, 1a0004f6 <prvCopyDataFromQueue+0x22>
{
1a0004d8:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0004da:	68c3      	ldr	r3, [r0, #12]
1a0004dc:	4413      	add	r3, r2
1a0004de:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0004e0:	6844      	ldr	r4, [r0, #4]
1a0004e2:	42a3      	cmp	r3, r4
1a0004e4:	d301      	bcc.n	1a0004ea <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0004e6:	6803      	ldr	r3, [r0, #0]
1a0004e8:	60c3      	str	r3, [r0, #12]
1a0004ea:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0004ec:	68c1      	ldr	r1, [r0, #12]
1a0004ee:	4620      	mov	r0, r4
1a0004f0:	f003 f89a 	bl	1a003628 <memcpy>
}
1a0004f4:	bd10      	pop	{r4, pc}
1a0004f6:	4770      	bx	lr

1a0004f8 <prvUnlockQueue>:
{
1a0004f8:	b538      	push	{r3, r4, r5, lr}
1a0004fa:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0004fc:	f001 fb72 	bl	1a001be4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000500:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000504:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000506:	e003      	b.n	1a000510 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000508:	f001 f832 	bl	1a001570 <vTaskMissedYield>
			--cTxLock;
1a00050c:	3c01      	subs	r4, #1
1a00050e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000510:	2c00      	cmp	r4, #0
1a000512:	dd08      	ble.n	1a000526 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000514:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000516:	b133      	cbz	r3, 1a000526 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000518:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00051c:	f000 ff96 	bl	1a00144c <xTaskRemoveFromEventList>
1a000520:	2800      	cmp	r0, #0
1a000522:	d0f3      	beq.n	1a00050c <prvUnlockQueue+0x14>
1a000524:	e7f0      	b.n	1a000508 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000526:	23ff      	movs	r3, #255	; 0xff
1a000528:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00052c:	f001 fb7c 	bl	1a001c28 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000530:	f001 fb58 	bl	1a001be4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000534:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000538:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00053a:	e003      	b.n	1a000544 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00053c:	f001 f818 	bl	1a001570 <vTaskMissedYield>
				--cRxLock;
1a000540:	3c01      	subs	r4, #1
1a000542:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000544:	2c00      	cmp	r4, #0
1a000546:	dd08      	ble.n	1a00055a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000548:	692b      	ldr	r3, [r5, #16]
1a00054a:	b133      	cbz	r3, 1a00055a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00054c:	f105 0010 	add.w	r0, r5, #16
1a000550:	f000 ff7c 	bl	1a00144c <xTaskRemoveFromEventList>
1a000554:	2800      	cmp	r0, #0
1a000556:	d0f3      	beq.n	1a000540 <prvUnlockQueue+0x48>
1a000558:	e7f0      	b.n	1a00053c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00055a:	23ff      	movs	r3, #255	; 0xff
1a00055c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000560:	f001 fb62 	bl	1a001c28 <vPortExitCritical>
}
1a000564:	bd38      	pop	{r3, r4, r5, pc}
1a000566:	Address 0x000000001a000566 is out of bounds.


1a000568 <xQueueGenericReset>:
{
1a000568:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00056a:	b940      	cbnz	r0, 1a00057e <xQueueGenericReset+0x16>
1a00056c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000570:	f383 8811 	msr	BASEPRI, r3
1a000574:	f3bf 8f6f 	isb	sy
1a000578:	f3bf 8f4f 	dsb	sy
1a00057c:	e7fe      	b.n	1a00057c <xQueueGenericReset+0x14>
1a00057e:	4604      	mov	r4, r0
1a000580:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000582:	f001 fb2f 	bl	1a001be4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000586:	6821      	ldr	r1, [r4, #0]
1a000588:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00058a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00058c:	fb03 1002 	mla	r0, r3, r2, r1
1a000590:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000592:	2000      	movs	r0, #0
1a000594:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000596:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000598:	3a01      	subs	r2, #1
1a00059a:	fb02 1303 	mla	r3, r2, r3, r1
1a00059e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0005a0:	23ff      	movs	r3, #255	; 0xff
1a0005a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0005a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0005aa:	b9a5      	cbnz	r5, 1a0005d6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0005ac:	6923      	ldr	r3, [r4, #16]
1a0005ae:	b91b      	cbnz	r3, 1a0005b8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0005b0:	f001 fb3a 	bl	1a001c28 <vPortExitCritical>
}
1a0005b4:	2001      	movs	r0, #1
1a0005b6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0005b8:	f104 0010 	add.w	r0, r4, #16
1a0005bc:	f000 ff46 	bl	1a00144c <xTaskRemoveFromEventList>
1a0005c0:	2800      	cmp	r0, #0
1a0005c2:	d0f5      	beq.n	1a0005b0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0005c4:	4b08      	ldr	r3, [pc, #32]	; (1a0005e8 <xQueueGenericReset+0x80>)
1a0005c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0005ca:	601a      	str	r2, [r3, #0]
1a0005cc:	f3bf 8f4f 	dsb	sy
1a0005d0:	f3bf 8f6f 	isb	sy
1a0005d4:	e7ec      	b.n	1a0005b0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0005d6:	f104 0010 	add.w	r0, r4, #16
1a0005da:	f000 fa6e 	bl	1a000aba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0005de:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0005e2:	f000 fa6a 	bl	1a000aba <vListInitialise>
1a0005e6:	e7e3      	b.n	1a0005b0 <xQueueGenericReset+0x48>
1a0005e8:	e000ed04 	.word	0xe000ed04

1a0005ec <prvInitialiseNewQueue>:
{
1a0005ec:	b538      	push	{r3, r4, r5, lr}
1a0005ee:	461d      	mov	r5, r3
1a0005f0:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0005f2:	460b      	mov	r3, r1
1a0005f4:	b149      	cbz	r1, 1a00060a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0005f6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0005f8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0005fa:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0005fc:	2101      	movs	r1, #1
1a0005fe:	4620      	mov	r0, r4
1a000600:	f7ff ffb2 	bl	1a000568 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000604:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000608:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00060a:	6024      	str	r4, [r4, #0]
1a00060c:	e7f4      	b.n	1a0005f8 <prvInitialiseNewQueue+0xc>

1a00060e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00060e:	b940      	cbnz	r0, 1a000622 <xQueueGenericCreateStatic+0x14>
1a000610:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000614:	f383 8811 	msr	BASEPRI, r3
1a000618:	f3bf 8f6f 	isb	sy
1a00061c:	f3bf 8f4f 	dsb	sy
1a000620:	e7fe      	b.n	1a000620 <xQueueGenericCreateStatic+0x12>
	{
1a000622:	b510      	push	{r4, lr}
1a000624:	b084      	sub	sp, #16
1a000626:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000628:	b153      	cbz	r3, 1a000640 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00062a:	b192      	cbz	r2, 1a000652 <xQueueGenericCreateStatic+0x44>
1a00062c:	b989      	cbnz	r1, 1a000652 <xQueueGenericCreateStatic+0x44>
1a00062e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000632:	f383 8811 	msr	BASEPRI, r3
1a000636:	f3bf 8f6f 	isb	sy
1a00063a:	f3bf 8f4f 	dsb	sy
1a00063e:	e7fe      	b.n	1a00063e <xQueueGenericCreateStatic+0x30>
1a000640:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000644:	f383 8811 	msr	BASEPRI, r3
1a000648:	f3bf 8f6f 	isb	sy
1a00064c:	f3bf 8f4f 	dsb	sy
1a000650:	e7fe      	b.n	1a000650 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000652:	b94a      	cbnz	r2, 1a000668 <xQueueGenericCreateStatic+0x5a>
1a000654:	b141      	cbz	r1, 1a000668 <xQueueGenericCreateStatic+0x5a>
1a000656:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00065a:	f383 8811 	msr	BASEPRI, r3
1a00065e:	f3bf 8f6f 	isb	sy
1a000662:	f3bf 8f4f 	dsb	sy
1a000666:	e7fe      	b.n	1a000666 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000668:	2050      	movs	r0, #80	; 0x50
1a00066a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a00066c:	9803      	ldr	r0, [sp, #12]
1a00066e:	2850      	cmp	r0, #80	; 0x50
1a000670:	d008      	beq.n	1a000684 <xQueueGenericCreateStatic+0x76>
1a000672:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000676:	f383 8811 	msr	BASEPRI, r3
1a00067a:	f3bf 8f6f 	isb	sy
1a00067e:	f3bf 8f4f 	dsb	sy
1a000682:	e7fe      	b.n	1a000682 <xQueueGenericCreateStatic+0x74>
1a000684:	4620      	mov	r0, r4
1a000686:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000688:	2301      	movs	r3, #1
1a00068a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00068e:	9400      	str	r4, [sp, #0]
1a000690:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000694:	f7ff ffaa 	bl	1a0005ec <prvInitialiseNewQueue>
	}
1a000698:	4620      	mov	r0, r4
1a00069a:	b004      	add	sp, #16
1a00069c:	bd10      	pop	{r4, pc}
1a00069e:	Address 0x000000001a00069e is out of bounds.


1a0006a0 <xQueueGenericSend>:
{
1a0006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0006a2:	b085      	sub	sp, #20
1a0006a4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0006a6:	b160      	cbz	r0, 1a0006c2 <xQueueGenericSend+0x22>
1a0006a8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0006aa:	b999      	cbnz	r1, 1a0006d4 <xQueueGenericSend+0x34>
1a0006ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0006ae:	b18a      	cbz	r2, 1a0006d4 <xQueueGenericSend+0x34>
1a0006b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006b4:	f383 8811 	msr	BASEPRI, r3
1a0006b8:	f3bf 8f6f 	isb	sy
1a0006bc:	f3bf 8f4f 	dsb	sy
1a0006c0:	e7fe      	b.n	1a0006c0 <xQueueGenericSend+0x20>
1a0006c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006c6:	f383 8811 	msr	BASEPRI, r3
1a0006ca:	f3bf 8f6f 	isb	sy
1a0006ce:	f3bf 8f4f 	dsb	sy
1a0006d2:	e7fe      	b.n	1a0006d2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0006d4:	2b02      	cmp	r3, #2
1a0006d6:	d10b      	bne.n	1a0006f0 <xQueueGenericSend+0x50>
1a0006d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0006da:	2a01      	cmp	r2, #1
1a0006dc:	d008      	beq.n	1a0006f0 <xQueueGenericSend+0x50>
1a0006de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006e2:	f383 8811 	msr	BASEPRI, r3
1a0006e6:	f3bf 8f6f 	isb	sy
1a0006ea:	f3bf 8f4f 	dsb	sy
1a0006ee:	e7fe      	b.n	1a0006ee <xQueueGenericSend+0x4e>
1a0006f0:	461e      	mov	r6, r3
1a0006f2:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0006f4:	f000 ff42 	bl	1a00157c <xTaskGetSchedulerState>
1a0006f8:	b950      	cbnz	r0, 1a000710 <xQueueGenericSend+0x70>
1a0006fa:	9b01      	ldr	r3, [sp, #4]
1a0006fc:	b153      	cbz	r3, 1a000714 <xQueueGenericSend+0x74>
1a0006fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000702:	f383 8811 	msr	BASEPRI, r3
1a000706:	f3bf 8f6f 	isb	sy
1a00070a:	f3bf 8f4f 	dsb	sy
1a00070e:	e7fe      	b.n	1a00070e <xQueueGenericSend+0x6e>
1a000710:	2500      	movs	r5, #0
1a000712:	e03a      	b.n	1a00078a <xQueueGenericSend+0xea>
1a000714:	2500      	movs	r5, #0
1a000716:	e038      	b.n	1a00078a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000718:	4632      	mov	r2, r6
1a00071a:	4639      	mov	r1, r7
1a00071c:	4620      	mov	r0, r4
1a00071e:	f7ff fe9e 	bl	1a00045e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000722:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000724:	b94b      	cbnz	r3, 1a00073a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000726:	b1a8      	cbz	r0, 1a000754 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000728:	4b3b      	ldr	r3, [pc, #236]	; (1a000818 <xQueueGenericSend+0x178>)
1a00072a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00072e:	601a      	str	r2, [r3, #0]
1a000730:	f3bf 8f4f 	dsb	sy
1a000734:	f3bf 8f6f 	isb	sy
1a000738:	e00c      	b.n	1a000754 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00073a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00073e:	f000 fe85 	bl	1a00144c <xTaskRemoveFromEventList>
1a000742:	b138      	cbz	r0, 1a000754 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000744:	4b34      	ldr	r3, [pc, #208]	; (1a000818 <xQueueGenericSend+0x178>)
1a000746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00074a:	601a      	str	r2, [r3, #0]
1a00074c:	f3bf 8f4f 	dsb	sy
1a000750:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000754:	f001 fa68 	bl	1a001c28 <vPortExitCritical>
				return pdPASS;
1a000758:	2001      	movs	r0, #1
}
1a00075a:	b005      	add	sp, #20
1a00075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a00075e:	f001 fa63 	bl	1a001c28 <vPortExitCritical>
					return errQUEUE_FULL;
1a000762:	2000      	movs	r0, #0
1a000764:	e7f9      	b.n	1a00075a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000766:	a802      	add	r0, sp, #8
1a000768:	f000 feb6 	bl	1a0014d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00076c:	2501      	movs	r5, #1
1a00076e:	e019      	b.n	1a0007a4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000770:	2300      	movs	r3, #0
1a000772:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000776:	e021      	b.n	1a0007bc <xQueueGenericSend+0x11c>
1a000778:	2300      	movs	r3, #0
1a00077a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00077e:	e023      	b.n	1a0007c8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000780:	4620      	mov	r0, r4
1a000782:	f7ff feb9 	bl	1a0004f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000786:	f000 fcd7 	bl	1a001138 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a00078a:	f001 fa2b 	bl	1a001be4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00078e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000792:	429a      	cmp	r2, r3
1a000794:	d3c0      	bcc.n	1a000718 <xQueueGenericSend+0x78>
1a000796:	2e02      	cmp	r6, #2
1a000798:	d0be      	beq.n	1a000718 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00079a:	9b01      	ldr	r3, [sp, #4]
1a00079c:	2b00      	cmp	r3, #0
1a00079e:	d0de      	beq.n	1a00075e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0007a0:	2d00      	cmp	r5, #0
1a0007a2:	d0e0      	beq.n	1a000766 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0007a4:	f001 fa40 	bl	1a001c28 <vPortExitCritical>
		vTaskSuspendAll();
1a0007a8:	f000 fc2c 	bl	1a001004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0007ac:	f001 fa1a 	bl	1a001be4 <vPortEnterCritical>
1a0007b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0007b4:	b25b      	sxtb	r3, r3
1a0007b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0007ba:	d0d9      	beq.n	1a000770 <xQueueGenericSend+0xd0>
1a0007bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0007c0:	b25b      	sxtb	r3, r3
1a0007c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0007c6:	d0d7      	beq.n	1a000778 <xQueueGenericSend+0xd8>
1a0007c8:	f001 fa2e 	bl	1a001c28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0007cc:	a901      	add	r1, sp, #4
1a0007ce:	a802      	add	r0, sp, #8
1a0007d0:	f000 fe8e 	bl	1a0014f0 <xTaskCheckForTimeOut>
1a0007d4:	b9c8      	cbnz	r0, 1a00080a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0007d6:	4620      	mov	r0, r4
1a0007d8:	f7ff fe25 	bl	1a000426 <prvIsQueueFull>
1a0007dc:	2800      	cmp	r0, #0
1a0007de:	d0cf      	beq.n	1a000780 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0007e0:	9901      	ldr	r1, [sp, #4]
1a0007e2:	f104 0010 	add.w	r0, r4, #16
1a0007e6:	f000 fdfd 	bl	1a0013e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0007ea:	4620      	mov	r0, r4
1a0007ec:	f7ff fe84 	bl	1a0004f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0007f0:	f000 fca2 	bl	1a001138 <xTaskResumeAll>
1a0007f4:	2800      	cmp	r0, #0
1a0007f6:	d1c8      	bne.n	1a00078a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a0007f8:	4b07      	ldr	r3, [pc, #28]	; (1a000818 <xQueueGenericSend+0x178>)
1a0007fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0007fe:	601a      	str	r2, [r3, #0]
1a000800:	f3bf 8f4f 	dsb	sy
1a000804:	f3bf 8f6f 	isb	sy
1a000808:	e7bf      	b.n	1a00078a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00080a:	4620      	mov	r0, r4
1a00080c:	f7ff fe74 	bl	1a0004f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000810:	f000 fc92 	bl	1a001138 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000814:	2000      	movs	r0, #0
1a000816:	e7a0      	b.n	1a00075a <xQueueGenericSend+0xba>
1a000818:	e000ed04 	.word	0xe000ed04

1a00081c <xQueueGenericSendFromISR>:
{
1a00081c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000820:	b160      	cbz	r0, 1a00083c <xQueueGenericSendFromISR+0x20>
1a000822:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000824:	b999      	cbnz	r1, 1a00084e <xQueueGenericSendFromISR+0x32>
1a000826:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000828:	b188      	cbz	r0, 1a00084e <xQueueGenericSendFromISR+0x32>
1a00082a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00082e:	f383 8811 	msr	BASEPRI, r3
1a000832:	f3bf 8f6f 	isb	sy
1a000836:	f3bf 8f4f 	dsb	sy
1a00083a:	e7fe      	b.n	1a00083a <xQueueGenericSendFromISR+0x1e>
1a00083c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000840:	f383 8811 	msr	BASEPRI, r3
1a000844:	f3bf 8f6f 	isb	sy
1a000848:	f3bf 8f4f 	dsb	sy
1a00084c:	e7fe      	b.n	1a00084c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00084e:	2b02      	cmp	r3, #2
1a000850:	d10b      	bne.n	1a00086a <xQueueGenericSendFromISR+0x4e>
1a000852:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000854:	2801      	cmp	r0, #1
1a000856:	d008      	beq.n	1a00086a <xQueueGenericSendFromISR+0x4e>
1a000858:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00085c:	f383 8811 	msr	BASEPRI, r3
1a000860:	f3bf 8f6f 	isb	sy
1a000864:	f3bf 8f4f 	dsb	sy
1a000868:	e7fe      	b.n	1a000868 <xQueueGenericSendFromISR+0x4c>
1a00086a:	461f      	mov	r7, r3
1a00086c:	4690      	mov	r8, r2
1a00086e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000870:	f001 fae2 	bl	1a001e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000874:	f3ef 8611 	mrs	r6, BASEPRI
1a000878:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00087c:	f383 8811 	msr	BASEPRI, r3
1a000880:	f3bf 8f6f 	isb	sy
1a000884:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000888:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00088a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00088c:	429a      	cmp	r2, r3
1a00088e:	d303      	bcc.n	1a000898 <xQueueGenericSendFromISR+0x7c>
1a000890:	2f02      	cmp	r7, #2
1a000892:	d001      	beq.n	1a000898 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000894:	2000      	movs	r0, #0
1a000896:	e00f      	b.n	1a0008b8 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000898:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a00089c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00089e:	463a      	mov	r2, r7
1a0008a0:	4649      	mov	r1, r9
1a0008a2:	4620      	mov	r0, r4
1a0008a4:	f7ff fddb 	bl	1a00045e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0008a8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0008ac:	d008      	beq.n	1a0008c0 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0008ae:	1c6b      	adds	r3, r5, #1
1a0008b0:	b25b      	sxtb	r3, r3
1a0008b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0008b6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0008b8:	f386 8811 	msr	BASEPRI, r6
}
1a0008bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0008c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0008c2:	b15b      	cbz	r3, 1a0008dc <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0008c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0008c8:	f000 fdc0 	bl	1a00144c <xTaskRemoveFromEventList>
1a0008cc:	b140      	cbz	r0, 1a0008e0 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a0008ce:	f1b8 0f00 	cmp.w	r8, #0
1a0008d2:	d007      	beq.n	1a0008e4 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0008d4:	2001      	movs	r0, #1
1a0008d6:	f8c8 0000 	str.w	r0, [r8]
1a0008da:	e7ed      	b.n	1a0008b8 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0008dc:	2001      	movs	r0, #1
1a0008de:	e7eb      	b.n	1a0008b8 <xQueueGenericSendFromISR+0x9c>
1a0008e0:	2001      	movs	r0, #1
1a0008e2:	e7e9      	b.n	1a0008b8 <xQueueGenericSendFromISR+0x9c>
1a0008e4:	2001      	movs	r0, #1
1a0008e6:	e7e7      	b.n	1a0008b8 <xQueueGenericSendFromISR+0x9c>

1a0008e8 <xQueueReceive>:
{
1a0008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0008ea:	b085      	sub	sp, #20
1a0008ec:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0008ee:	b160      	cbz	r0, 1a00090a <xQueueReceive+0x22>
1a0008f0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0008f2:	b999      	cbnz	r1, 1a00091c <xQueueReceive+0x34>
1a0008f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0008f6:	b18b      	cbz	r3, 1a00091c <xQueueReceive+0x34>
	__asm volatile
1a0008f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008fc:	f383 8811 	msr	BASEPRI, r3
1a000900:	f3bf 8f6f 	isb	sy
1a000904:	f3bf 8f4f 	dsb	sy
1a000908:	e7fe      	b.n	1a000908 <xQueueReceive+0x20>
1a00090a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00090e:	f383 8811 	msr	BASEPRI, r3
1a000912:	f3bf 8f6f 	isb	sy
1a000916:	f3bf 8f4f 	dsb	sy
1a00091a:	e7fe      	b.n	1a00091a <xQueueReceive+0x32>
1a00091c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00091e:	f000 fe2d 	bl	1a00157c <xTaskGetSchedulerState>
1a000922:	b950      	cbnz	r0, 1a00093a <xQueueReceive+0x52>
1a000924:	9b01      	ldr	r3, [sp, #4]
1a000926:	b153      	cbz	r3, 1a00093e <xQueueReceive+0x56>
1a000928:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00092c:	f383 8811 	msr	BASEPRI, r3
1a000930:	f3bf 8f6f 	isb	sy
1a000934:	f3bf 8f4f 	dsb	sy
1a000938:	e7fe      	b.n	1a000938 <xQueueReceive+0x50>
1a00093a:	2600      	movs	r6, #0
1a00093c:	e03e      	b.n	1a0009bc <xQueueReceive+0xd4>
1a00093e:	2600      	movs	r6, #0
1a000940:	e03c      	b.n	1a0009bc <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000942:	4639      	mov	r1, r7
1a000944:	4620      	mov	r0, r4
1a000946:	f7ff fdc5 	bl	1a0004d4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00094a:	3d01      	subs	r5, #1
1a00094c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00094e:	6923      	ldr	r3, [r4, #16]
1a000950:	b923      	cbnz	r3, 1a00095c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000952:	f001 f969 	bl	1a001c28 <vPortExitCritical>
				return pdPASS;
1a000956:	2001      	movs	r0, #1
}
1a000958:	b005      	add	sp, #20
1a00095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00095c:	f104 0010 	add.w	r0, r4, #16
1a000960:	f000 fd74 	bl	1a00144c <xTaskRemoveFromEventList>
1a000964:	2800      	cmp	r0, #0
1a000966:	d0f4      	beq.n	1a000952 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000968:	4b34      	ldr	r3, [pc, #208]	; (1a000a3c <xQueueReceive+0x154>)
1a00096a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00096e:	601a      	str	r2, [r3, #0]
1a000970:	f3bf 8f4f 	dsb	sy
1a000974:	f3bf 8f6f 	isb	sy
1a000978:	e7eb      	b.n	1a000952 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a00097a:	f001 f955 	bl	1a001c28 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00097e:	2000      	movs	r0, #0
1a000980:	e7ea      	b.n	1a000958 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000982:	a802      	add	r0, sp, #8
1a000984:	f000 fda8 	bl	1a0014d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000988:	2601      	movs	r6, #1
1a00098a:	e021      	b.n	1a0009d0 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a00098c:	2300      	movs	r3, #0
1a00098e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000992:	e029      	b.n	1a0009e8 <xQueueReceive+0x100>
1a000994:	2300      	movs	r3, #0
1a000996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00099a:	e02b      	b.n	1a0009f4 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a00099c:	4620      	mov	r0, r4
1a00099e:	f7ff fdab 	bl	1a0004f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0009a2:	f000 fbc9 	bl	1a001138 <xTaskResumeAll>
1a0009a6:	e009      	b.n	1a0009bc <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0009a8:	4620      	mov	r0, r4
1a0009aa:	f7ff fda5 	bl	1a0004f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0009ae:	f000 fbc3 	bl	1a001138 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0009b2:	4620      	mov	r0, r4
1a0009b4:	f7ff fd46 	bl	1a000444 <prvIsQueueEmpty>
1a0009b8:	2800      	cmp	r0, #0
1a0009ba:	d13d      	bne.n	1a000a38 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0009bc:	f001 f912 	bl	1a001be4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0009c0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0009c2:	2d00      	cmp	r5, #0
1a0009c4:	d1bd      	bne.n	1a000942 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0009c6:	9b01      	ldr	r3, [sp, #4]
1a0009c8:	2b00      	cmp	r3, #0
1a0009ca:	d0d6      	beq.n	1a00097a <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0009cc:	2e00      	cmp	r6, #0
1a0009ce:	d0d8      	beq.n	1a000982 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0009d0:	f001 f92a 	bl	1a001c28 <vPortExitCritical>
		vTaskSuspendAll();
1a0009d4:	f000 fb16 	bl	1a001004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0009d8:	f001 f904 	bl	1a001be4 <vPortEnterCritical>
1a0009dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0009e0:	b25b      	sxtb	r3, r3
1a0009e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0009e6:	d0d1      	beq.n	1a00098c <xQueueReceive+0xa4>
1a0009e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0009ec:	b25b      	sxtb	r3, r3
1a0009ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0009f2:	d0cf      	beq.n	1a000994 <xQueueReceive+0xac>
1a0009f4:	f001 f918 	bl	1a001c28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0009f8:	a901      	add	r1, sp, #4
1a0009fa:	a802      	add	r0, sp, #8
1a0009fc:	f000 fd78 	bl	1a0014f0 <xTaskCheckForTimeOut>
1a000a00:	2800      	cmp	r0, #0
1a000a02:	d1d1      	bne.n	1a0009a8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000a04:	4620      	mov	r0, r4
1a000a06:	f7ff fd1d 	bl	1a000444 <prvIsQueueEmpty>
1a000a0a:	2800      	cmp	r0, #0
1a000a0c:	d0c6      	beq.n	1a00099c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000a0e:	9901      	ldr	r1, [sp, #4]
1a000a10:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a14:	f000 fce6 	bl	1a0013e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000a18:	4620      	mov	r0, r4
1a000a1a:	f7ff fd6d 	bl	1a0004f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000a1e:	f000 fb8b 	bl	1a001138 <xTaskResumeAll>
1a000a22:	2800      	cmp	r0, #0
1a000a24:	d1ca      	bne.n	1a0009bc <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000a26:	4b05      	ldr	r3, [pc, #20]	; (1a000a3c <xQueueReceive+0x154>)
1a000a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a2c:	601a      	str	r2, [r3, #0]
1a000a2e:	f3bf 8f4f 	dsb	sy
1a000a32:	f3bf 8f6f 	isb	sy
1a000a36:	e7c1      	b.n	1a0009bc <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000a38:	2000      	movs	r0, #0
1a000a3a:	e78d      	b.n	1a000958 <xQueueReceive+0x70>
1a000a3c:	e000ed04 	.word	0xe000ed04

1a000a40 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000a40:	2300      	movs	r3, #0
1a000a42:	2b07      	cmp	r3, #7
1a000a44:	d80c      	bhi.n	1a000a60 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000a46:	4a07      	ldr	r2, [pc, #28]	; (1a000a64 <vQueueAddToRegistry+0x24>)
1a000a48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000a4c:	b10a      	cbz	r2, 1a000a52 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000a4e:	3301      	adds	r3, #1
1a000a50:	e7f7      	b.n	1a000a42 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000a52:	4a04      	ldr	r2, [pc, #16]	; (1a000a64 <vQueueAddToRegistry+0x24>)
1a000a54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000a58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000a5c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000a5e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000a60:	4770      	bx	lr
1a000a62:	bf00      	nop
1a000a64:	10002b50 	.word	0x10002b50

1a000a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000a68:	b570      	push	{r4, r5, r6, lr}
1a000a6a:	4604      	mov	r4, r0
1a000a6c:	460d      	mov	r5, r1
1a000a6e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000a70:	f001 f8b8 	bl	1a001be4 <vPortEnterCritical>
1a000a74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000a78:	b25b      	sxtb	r3, r3
1a000a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a7e:	d00d      	beq.n	1a000a9c <vQueueWaitForMessageRestricted+0x34>
1a000a80:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000a84:	b25b      	sxtb	r3, r3
1a000a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a8a:	d00b      	beq.n	1a000aa4 <vQueueWaitForMessageRestricted+0x3c>
1a000a8c:	f001 f8cc 	bl	1a001c28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000a92:	b15b      	cbz	r3, 1a000aac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000a94:	4620      	mov	r0, r4
1a000a96:	f7ff fd2f 	bl	1a0004f8 <prvUnlockQueue>
	}
1a000a9a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000a9c:	2300      	movs	r3, #0
1a000a9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000aa2:	e7ed      	b.n	1a000a80 <vQueueWaitForMessageRestricted+0x18>
1a000aa4:	2300      	movs	r3, #0
1a000aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000aaa:	e7ef      	b.n	1a000a8c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000aac:	4632      	mov	r2, r6
1a000aae:	4629      	mov	r1, r5
1a000ab0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ab4:	f000 fcae 	bl	1a001414 <vTaskPlaceOnEventListRestricted>
1a000ab8:	e7ec      	b.n	1a000a94 <vQueueWaitForMessageRestricted+0x2c>

1a000aba <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000aba:	f100 0308 	add.w	r3, r0, #8
1a000abe:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ac4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ac6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ac8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000aca:	2300      	movs	r3, #0
1a000acc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000ace:	4770      	bx	lr

1a000ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000ad0:	2300      	movs	r3, #0
1a000ad2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000ad4:	4770      	bx	lr

1a000ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000ad6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000ad8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000ada:	689a      	ldr	r2, [r3, #8]
1a000adc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000ade:	689a      	ldr	r2, [r3, #8]
1a000ae0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000ae2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000ae4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000ae6:	6803      	ldr	r3, [r0, #0]
1a000ae8:	3301      	adds	r3, #1
1a000aea:	6003      	str	r3, [r0, #0]
}
1a000aec:	4770      	bx	lr

1a000aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000aee:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000af0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000af2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000af6:	d002      	beq.n	1a000afe <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000af8:	f100 0208 	add.w	r2, r0, #8
1a000afc:	e002      	b.n	1a000b04 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000afe:	6902      	ldr	r2, [r0, #16]
1a000b00:	e004      	b.n	1a000b0c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000b02:	461a      	mov	r2, r3
1a000b04:	6853      	ldr	r3, [r2, #4]
1a000b06:	681c      	ldr	r4, [r3, #0]
1a000b08:	42ac      	cmp	r4, r5
1a000b0a:	d9fa      	bls.n	1a000b02 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000b0c:	6853      	ldr	r3, [r2, #4]
1a000b0e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000b10:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000b12:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000b14:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000b16:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000b18:	6803      	ldr	r3, [r0, #0]
1a000b1a:	3301      	adds	r3, #1
1a000b1c:	6003      	str	r3, [r0, #0]
}
1a000b1e:	bc30      	pop	{r4, r5}
1a000b20:	4770      	bx	lr

1a000b22 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000b22:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000b24:	6842      	ldr	r2, [r0, #4]
1a000b26:	6881      	ldr	r1, [r0, #8]
1a000b28:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000b2a:	6882      	ldr	r2, [r0, #8]
1a000b2c:	6841      	ldr	r1, [r0, #4]
1a000b2e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000b30:	685a      	ldr	r2, [r3, #4]
1a000b32:	4282      	cmp	r2, r0
1a000b34:	d006      	beq.n	1a000b44 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000b36:	2200      	movs	r2, #0
1a000b38:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000b3a:	681a      	ldr	r2, [r3, #0]
1a000b3c:	3a01      	subs	r2, #1
1a000b3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000b40:	6818      	ldr	r0, [r3, #0]
}
1a000b42:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000b44:	6882      	ldr	r2, [r0, #8]
1a000b46:	605a      	str	r2, [r3, #4]
1a000b48:	e7f5      	b.n	1a000b36 <uxListRemove+0x14>
1a000b4a:	Address 0x000000001a000b4a is out of bounds.


1a000b4c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000b4c:	4b03      	ldr	r3, [pc, #12]	; (1a000b5c <vApplicationGetIdleTaskMemory+0x10>)
1a000b4e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000b50:	4b03      	ldr	r3, [pc, #12]	; (1a000b60 <vApplicationGetIdleTaskMemory+0x14>)
1a000b52:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000b54:	235a      	movs	r3, #90	; 0x5a
1a000b56:	6013      	str	r3, [r2, #0]
}
1a000b58:	4770      	bx	lr
1a000b5a:	bf00      	nop
1a000b5c:	100027e4 	.word	0x100027e4
1a000b60:	100020dc 	.word	0x100020dc

1a000b64 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000b64:	4b03      	ldr	r3, [pc, #12]	; (1a000b74 <vApplicationGetTimerTaskMemory+0x10>)
1a000b66:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000b68:	4b03      	ldr	r3, [pc, #12]	; (1a000b78 <vApplicationGetTimerTaskMemory+0x14>)
1a000b6a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000b6c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000b70:	6013      	str	r3, [r2, #0]
1a000b72:	4770      	bx	lr
1a000b74:	10002844 	.word	0x10002844
1a000b78:	10002244 	.word	0x10002244

1a000b7c <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a000b7c:	e7fe      	b.n	1a000b7c <vApplicationStackOverflowHook>

1a000b7e <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a000b7e:	e7fe      	b.n	1a000b7e <vApplicationMallocFailedHook>

1a000b80 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000b80:	4b08      	ldr	r3, [pc, #32]	; (1a000ba4 <prvResetNextTaskUnblockTime+0x24>)
1a000b82:	681b      	ldr	r3, [r3, #0]
1a000b84:	681b      	ldr	r3, [r3, #0]
1a000b86:	b13b      	cbz	r3, 1a000b98 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000b88:	4b06      	ldr	r3, [pc, #24]	; (1a000ba4 <prvResetNextTaskUnblockTime+0x24>)
1a000b8a:	681b      	ldr	r3, [r3, #0]
1a000b8c:	68db      	ldr	r3, [r3, #12]
1a000b8e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000b90:	685a      	ldr	r2, [r3, #4]
1a000b92:	4b05      	ldr	r3, [pc, #20]	; (1a000ba8 <prvResetNextTaskUnblockTime+0x28>)
1a000b94:	601a      	str	r2, [r3, #0]
	}
}
1a000b96:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000b98:	4b03      	ldr	r3, [pc, #12]	; (1a000ba8 <prvResetNextTaskUnblockTime+0x28>)
1a000b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b9e:	601a      	str	r2, [r3, #0]
1a000ba0:	4770      	bx	lr
1a000ba2:	bf00      	nop
1a000ba4:	100028a8 	.word	0x100028a8
1a000ba8:	1000297c 	.word	0x1000297c

1a000bac <prvInitialiseNewTask>:
{
1a000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000bb0:	4681      	mov	r9, r0
1a000bb2:	460d      	mov	r5, r1
1a000bb4:	4617      	mov	r7, r2
1a000bb6:	469a      	mov	sl, r3
1a000bb8:	9e08      	ldr	r6, [sp, #32]
1a000bba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000bbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000bc0:	0092      	lsls	r2, r2, #2
1a000bc2:	21a5      	movs	r1, #165	; 0xa5
1a000bc4:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000bc6:	f002 fd3a 	bl	1a00363e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000bca:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000bcc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000bd0:	3a01      	subs	r2, #1
1a000bd2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000bd6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000bda:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000bdc:	2300      	movs	r3, #0
1a000bde:	2b0f      	cmp	r3, #15
1a000be0:	d807      	bhi.n	1a000bf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000be2:	5ce9      	ldrb	r1, [r5, r3]
1a000be4:	18e2      	adds	r2, r4, r3
1a000be6:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000bea:	5cea      	ldrb	r2, [r5, r3]
1a000bec:	b10a      	cbz	r2, 1a000bf2 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000bee:	3301      	adds	r3, #1
1a000bf0:	e7f5      	b.n	1a000bde <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000bf2:	2300      	movs	r3, #0
1a000bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000bf8:	2e06      	cmp	r6, #6
1a000bfa:	d900      	bls.n	1a000bfe <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000bfc:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000bfe:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000c00:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000c02:	2500      	movs	r5, #0
1a000c04:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000c06:	1d20      	adds	r0, r4, #4
1a000c08:	f7ff ff62 	bl	1a000ad0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000c0c:	f104 0018 	add.w	r0, r4, #24
1a000c10:	f7ff ff5e 	bl	1a000ad0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000c14:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000c16:	f1c6 0607 	rsb	r6, r6, #7
1a000c1a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000c1c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a000c1e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000c20:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000c24:	4652      	mov	r2, sl
1a000c26:	4649      	mov	r1, r9
1a000c28:	4638      	mov	r0, r7
1a000c2a:	f000 ffad 	bl	1a001b88 <pxPortInitialiseStack>
1a000c2e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000c30:	f1b8 0f00 	cmp.w	r8, #0
1a000c34:	d001      	beq.n	1a000c3a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000c36:	f8c8 4000 	str.w	r4, [r8]
}
1a000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000c3e:	Address 0x000000001a000c3e is out of bounds.


1a000c40 <prvInitialiseTaskLists>:
{
1a000c40:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000c42:	2400      	movs	r4, #0
1a000c44:	e007      	b.n	1a000c56 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000c46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000c4a:	0093      	lsls	r3, r2, #2
1a000c4c:	480e      	ldr	r0, [pc, #56]	; (1a000c88 <prvInitialiseTaskLists+0x48>)
1a000c4e:	4418      	add	r0, r3
1a000c50:	f7ff ff33 	bl	1a000aba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000c54:	3401      	adds	r4, #1
1a000c56:	2c06      	cmp	r4, #6
1a000c58:	d9f5      	bls.n	1a000c46 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a000c5a:	4d0c      	ldr	r5, [pc, #48]	; (1a000c8c <prvInitialiseTaskLists+0x4c>)
1a000c5c:	4628      	mov	r0, r5
1a000c5e:	f7ff ff2c 	bl	1a000aba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000c62:	4c0b      	ldr	r4, [pc, #44]	; (1a000c90 <prvInitialiseTaskLists+0x50>)
1a000c64:	4620      	mov	r0, r4
1a000c66:	f7ff ff28 	bl	1a000aba <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000c6a:	480a      	ldr	r0, [pc, #40]	; (1a000c94 <prvInitialiseTaskLists+0x54>)
1a000c6c:	f7ff ff25 	bl	1a000aba <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a000c70:	4809      	ldr	r0, [pc, #36]	; (1a000c98 <prvInitialiseTaskLists+0x58>)
1a000c72:	f7ff ff22 	bl	1a000aba <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a000c76:	4809      	ldr	r0, [pc, #36]	; (1a000c9c <prvInitialiseTaskLists+0x5c>)
1a000c78:	f7ff ff1f 	bl	1a000aba <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a000c7c:	4b08      	ldr	r3, [pc, #32]	; (1a000ca0 <prvInitialiseTaskLists+0x60>)
1a000c7e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000c80:	4b08      	ldr	r3, [pc, #32]	; (1a000ca4 <prvInitialiseTaskLists+0x64>)
1a000c82:	601c      	str	r4, [r3, #0]
}
1a000c84:	bd38      	pop	{r3, r4, r5, pc}
1a000c86:	bf00      	nop
1a000c88:	100028b0 	.word	0x100028b0
1a000c8c:	10002954 	.word	0x10002954
1a000c90:	10002968 	.word	0x10002968
1a000c94:	10002984 	.word	0x10002984
1a000c98:	100029b0 	.word	0x100029b0
1a000c9c:	1000299c 	.word	0x1000299c
1a000ca0:	100028a8 	.word	0x100028a8
1a000ca4:	100028ac 	.word	0x100028ac

1a000ca8 <prvAddNewTaskToReadyList>:
{
1a000ca8:	b510      	push	{r4, lr}
1a000caa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000cac:	f000 ff9a 	bl	1a001be4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000cb0:	4a21      	ldr	r2, [pc, #132]	; (1a000d38 <prvAddNewTaskToReadyList+0x90>)
1a000cb2:	6813      	ldr	r3, [r2, #0]
1a000cb4:	3301      	adds	r3, #1
1a000cb6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000cb8:	4b20      	ldr	r3, [pc, #128]	; (1a000d3c <prvAddNewTaskToReadyList+0x94>)
1a000cba:	681b      	ldr	r3, [r3, #0]
1a000cbc:	b15b      	cbz	r3, 1a000cd6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a000cbe:	4b20      	ldr	r3, [pc, #128]	; (1a000d40 <prvAddNewTaskToReadyList+0x98>)
1a000cc0:	681b      	ldr	r3, [r3, #0]
1a000cc2:	b96b      	cbnz	r3, 1a000ce0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000cc4:	4b1d      	ldr	r3, [pc, #116]	; (1a000d3c <prvAddNewTaskToReadyList+0x94>)
1a000cc6:	681b      	ldr	r3, [r3, #0]
1a000cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000cca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000ccc:	429a      	cmp	r2, r3
1a000cce:	d807      	bhi.n	1a000ce0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a000cd0:	4b1a      	ldr	r3, [pc, #104]	; (1a000d3c <prvAddNewTaskToReadyList+0x94>)
1a000cd2:	601c      	str	r4, [r3, #0]
1a000cd4:	e004      	b.n	1a000ce0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a000cd6:	4b19      	ldr	r3, [pc, #100]	; (1a000d3c <prvAddNewTaskToReadyList+0x94>)
1a000cd8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000cda:	6813      	ldr	r3, [r2, #0]
1a000cdc:	2b01      	cmp	r3, #1
1a000cde:	d027      	beq.n	1a000d30 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a000ce0:	4a18      	ldr	r2, [pc, #96]	; (1a000d44 <prvAddNewTaskToReadyList+0x9c>)
1a000ce2:	6813      	ldr	r3, [r2, #0]
1a000ce4:	3301      	adds	r3, #1
1a000ce6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a000ce8:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a000cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000cec:	2201      	movs	r2, #1
1a000cee:	409a      	lsls	r2, r3
1a000cf0:	4915      	ldr	r1, [pc, #84]	; (1a000d48 <prvAddNewTaskToReadyList+0xa0>)
1a000cf2:	6808      	ldr	r0, [r1, #0]
1a000cf4:	4302      	orrs	r2, r0
1a000cf6:	600a      	str	r2, [r1, #0]
1a000cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000cfc:	009a      	lsls	r2, r3, #2
1a000cfe:	1d21      	adds	r1, r4, #4
1a000d00:	4812      	ldr	r0, [pc, #72]	; (1a000d4c <prvAddNewTaskToReadyList+0xa4>)
1a000d02:	4410      	add	r0, r2
1a000d04:	f7ff fee7 	bl	1a000ad6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a000d08:	f000 ff8e 	bl	1a001c28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a000d0c:	4b0c      	ldr	r3, [pc, #48]	; (1a000d40 <prvAddNewTaskToReadyList+0x98>)
1a000d0e:	681b      	ldr	r3, [r3, #0]
1a000d10:	b16b      	cbz	r3, 1a000d2e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a000d12:	4b0a      	ldr	r3, [pc, #40]	; (1a000d3c <prvAddNewTaskToReadyList+0x94>)
1a000d14:	681b      	ldr	r3, [r3, #0]
1a000d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000d1a:	429a      	cmp	r2, r3
1a000d1c:	d207      	bcs.n	1a000d2e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a000d1e:	4b0c      	ldr	r3, [pc, #48]	; (1a000d50 <prvAddNewTaskToReadyList+0xa8>)
1a000d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d24:	601a      	str	r2, [r3, #0]
1a000d26:	f3bf 8f4f 	dsb	sy
1a000d2a:	f3bf 8f6f 	isb	sy
}
1a000d2e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a000d30:	f7ff ff86 	bl	1a000c40 <prvInitialiseTaskLists>
1a000d34:	e7d4      	b.n	1a000ce0 <prvAddNewTaskToReadyList+0x38>
1a000d36:	bf00      	nop
1a000d38:	1000293c 	.word	0x1000293c
1a000d3c:	100028a4 	.word	0x100028a4
1a000d40:	10002998 	.word	0x10002998
1a000d44:	1000294c 	.word	0x1000294c
1a000d48:	10002950 	.word	0x10002950
1a000d4c:	100028b0 	.word	0x100028b0
1a000d50:	e000ed04 	.word	0xe000ed04

1a000d54 <prvDeleteTCB>:
	{
1a000d54:	b510      	push	{r4, lr}
1a000d56:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a000d58:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a000d5c:	b933      	cbnz	r3, 1a000d6c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a000d5e:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000d60:	f7ff fb56 	bl	1a000410 <vPortFree>
				vPortFree( pxTCB );
1a000d64:	4620      	mov	r0, r4
1a000d66:	f7ff fb53 	bl	1a000410 <vPortFree>
	}
1a000d6a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a000d6c:	2b01      	cmp	r3, #1
1a000d6e:	d00a      	beq.n	1a000d86 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a000d70:	2b02      	cmp	r3, #2
1a000d72:	d0fa      	beq.n	1a000d6a <prvDeleteTCB+0x16>
1a000d74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d78:	f383 8811 	msr	BASEPRI, r3
1a000d7c:	f3bf 8f6f 	isb	sy
1a000d80:	f3bf 8f4f 	dsb	sy
1a000d84:	e7fe      	b.n	1a000d84 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a000d86:	f7ff fb43 	bl	1a000410 <vPortFree>
1a000d8a:	e7ee      	b.n	1a000d6a <prvDeleteTCB+0x16>

1a000d8c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000d8c:	4b0f      	ldr	r3, [pc, #60]	; (1a000dcc <prvCheckTasksWaitingTermination+0x40>)
1a000d8e:	681b      	ldr	r3, [r3, #0]
1a000d90:	b1d3      	cbz	r3, 1a000dc8 <prvCheckTasksWaitingTermination+0x3c>
{
1a000d92:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a000d94:	f000 ff26 	bl	1a001be4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000d98:	4b0d      	ldr	r3, [pc, #52]	; (1a000dd0 <prvCheckTasksWaitingTermination+0x44>)
1a000d9a:	68db      	ldr	r3, [r3, #12]
1a000d9c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000d9e:	1d20      	adds	r0, r4, #4
1a000da0:	f7ff febf 	bl	1a000b22 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000da4:	4a0b      	ldr	r2, [pc, #44]	; (1a000dd4 <prvCheckTasksWaitingTermination+0x48>)
1a000da6:	6813      	ldr	r3, [r2, #0]
1a000da8:	3b01      	subs	r3, #1
1a000daa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000dac:	4a07      	ldr	r2, [pc, #28]	; (1a000dcc <prvCheckTasksWaitingTermination+0x40>)
1a000dae:	6813      	ldr	r3, [r2, #0]
1a000db0:	3b01      	subs	r3, #1
1a000db2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a000db4:	f000 ff38 	bl	1a001c28 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a000db8:	4620      	mov	r0, r4
1a000dba:	f7ff ffcb 	bl	1a000d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000dbe:	4b03      	ldr	r3, [pc, #12]	; (1a000dcc <prvCheckTasksWaitingTermination+0x40>)
1a000dc0:	681b      	ldr	r3, [r3, #0]
1a000dc2:	2b00      	cmp	r3, #0
1a000dc4:	d1e6      	bne.n	1a000d94 <prvCheckTasksWaitingTermination+0x8>
}
1a000dc6:	bd10      	pop	{r4, pc}
1a000dc8:	4770      	bx	lr
1a000dca:	bf00      	nop
1a000dcc:	10002940 	.word	0x10002940
1a000dd0:	100029b0 	.word	0x100029b0
1a000dd4:	1000293c 	.word	0x1000293c

1a000dd8 <prvIdleTask>:
{
1a000dd8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a000dda:	f7ff ffd7 	bl	1a000d8c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000dde:	4b06      	ldr	r3, [pc, #24]	; (1a000df8 <prvIdleTask+0x20>)
1a000de0:	681b      	ldr	r3, [r3, #0]
1a000de2:	2b01      	cmp	r3, #1
1a000de4:	d9f9      	bls.n	1a000dda <prvIdleTask+0x2>
				taskYIELD();
1a000de6:	4b05      	ldr	r3, [pc, #20]	; (1a000dfc <prvIdleTask+0x24>)
1a000de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000dec:	601a      	str	r2, [r3, #0]
1a000dee:	f3bf 8f4f 	dsb	sy
1a000df2:	f3bf 8f6f 	isb	sy
1a000df6:	e7f0      	b.n	1a000dda <prvIdleTask+0x2>
1a000df8:	100028b0 	.word	0x100028b0
1a000dfc:	e000ed04 	.word	0xe000ed04

1a000e00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a000e00:	b570      	push	{r4, r5, r6, lr}
1a000e02:	4604      	mov	r4, r0
1a000e04:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a000e06:	4b1d      	ldr	r3, [pc, #116]	; (1a000e7c <prvAddCurrentTaskToDelayedList+0x7c>)
1a000e08:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000e0a:	4b1d      	ldr	r3, [pc, #116]	; (1a000e80 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e0c:	6818      	ldr	r0, [r3, #0]
1a000e0e:	3004      	adds	r0, #4
1a000e10:	f7ff fe87 	bl	1a000b22 <uxListRemove>
1a000e14:	b950      	cbnz	r0, 1a000e2c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a000e16:	4b1a      	ldr	r3, [pc, #104]	; (1a000e80 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e18:	681b      	ldr	r3, [r3, #0]
1a000e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000e1c:	2301      	movs	r3, #1
1a000e1e:	fa03 f202 	lsl.w	r2, r3, r2
1a000e22:	4918      	ldr	r1, [pc, #96]	; (1a000e84 <prvAddCurrentTaskToDelayedList+0x84>)
1a000e24:	680b      	ldr	r3, [r1, #0]
1a000e26:	ea23 0302 	bic.w	r3, r3, r2
1a000e2a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000e2c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a000e30:	d013      	beq.n	1a000e5a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a000e32:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a000e34:	4b12      	ldr	r3, [pc, #72]	; (1a000e80 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e36:	681b      	ldr	r3, [r3, #0]
1a000e38:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a000e3a:	42a5      	cmp	r5, r4
1a000e3c:	d816      	bhi.n	1a000e6c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000e3e:	4b12      	ldr	r3, [pc, #72]	; (1a000e88 <prvAddCurrentTaskToDelayedList+0x88>)
1a000e40:	6818      	ldr	r0, [r3, #0]
1a000e42:	4b0f      	ldr	r3, [pc, #60]	; (1a000e80 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e44:	6819      	ldr	r1, [r3, #0]
1a000e46:	3104      	adds	r1, #4
1a000e48:	f7ff fe51 	bl	1a000aee <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a000e4c:	4b0f      	ldr	r3, [pc, #60]	; (1a000e8c <prvAddCurrentTaskToDelayedList+0x8c>)
1a000e4e:	681b      	ldr	r3, [r3, #0]
1a000e50:	42a3      	cmp	r3, r4
1a000e52:	d912      	bls.n	1a000e7a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a000e54:	4b0d      	ldr	r3, [pc, #52]	; (1a000e8c <prvAddCurrentTaskToDelayedList+0x8c>)
1a000e56:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a000e58:	e00f      	b.n	1a000e7a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000e5a:	2e00      	cmp	r6, #0
1a000e5c:	d0e9      	beq.n	1a000e32 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000e5e:	4b08      	ldr	r3, [pc, #32]	; (1a000e80 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e60:	6819      	ldr	r1, [r3, #0]
1a000e62:	3104      	adds	r1, #4
1a000e64:	480a      	ldr	r0, [pc, #40]	; (1a000e90 <prvAddCurrentTaskToDelayedList+0x90>)
1a000e66:	f7ff fe36 	bl	1a000ad6 <vListInsertEnd>
1a000e6a:	e006      	b.n	1a000e7a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000e6c:	4b09      	ldr	r3, [pc, #36]	; (1a000e94 <prvAddCurrentTaskToDelayedList+0x94>)
1a000e6e:	6818      	ldr	r0, [r3, #0]
1a000e70:	4b03      	ldr	r3, [pc, #12]	; (1a000e80 <prvAddCurrentTaskToDelayedList+0x80>)
1a000e72:	6819      	ldr	r1, [r3, #0]
1a000e74:	3104      	adds	r1, #4
1a000e76:	f7ff fe3a 	bl	1a000aee <vListInsert>
}
1a000e7a:	bd70      	pop	{r4, r5, r6, pc}
1a000e7c:	100029c4 	.word	0x100029c4
1a000e80:	100028a4 	.word	0x100028a4
1a000e84:	10002950 	.word	0x10002950
1a000e88:	100028a8 	.word	0x100028a8
1a000e8c:	1000297c 	.word	0x1000297c
1a000e90:	1000299c 	.word	0x1000299c
1a000e94:	100028ac 	.word	0x100028ac

1a000e98 <xTaskCreateStatic>:
	{
1a000e98:	b570      	push	{r4, r5, r6, lr}
1a000e9a:	b086      	sub	sp, #24
1a000e9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a000e9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a000ea0:	b945      	cbnz	r5, 1a000eb4 <xTaskCreateStatic+0x1c>
1a000ea2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ea6:	f383 8811 	msr	BASEPRI, r3
1a000eaa:	f3bf 8f6f 	isb	sy
1a000eae:	f3bf 8f4f 	dsb	sy
1a000eb2:	e7fe      	b.n	1a000eb2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a000eb4:	b944      	cbnz	r4, 1a000ec8 <xTaskCreateStatic+0x30>
1a000eb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eba:	f383 8811 	msr	BASEPRI, r3
1a000ebe:	f3bf 8f6f 	isb	sy
1a000ec2:	f3bf 8f4f 	dsb	sy
1a000ec6:	e7fe      	b.n	1a000ec6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a000ec8:	2660      	movs	r6, #96	; 0x60
1a000eca:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a000ecc:	9e04      	ldr	r6, [sp, #16]
1a000ece:	2e60      	cmp	r6, #96	; 0x60
1a000ed0:	d008      	beq.n	1a000ee4 <xTaskCreateStatic+0x4c>
1a000ed2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ed6:	f383 8811 	msr	BASEPRI, r3
1a000eda:	f3bf 8f6f 	isb	sy
1a000ede:	f3bf 8f4f 	dsb	sy
1a000ee2:	e7fe      	b.n	1a000ee2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a000ee4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a000ee6:	2502      	movs	r5, #2
1a000ee8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a000eec:	2500      	movs	r5, #0
1a000eee:	9503      	str	r5, [sp, #12]
1a000ef0:	9402      	str	r4, [sp, #8]
1a000ef2:	ad05      	add	r5, sp, #20
1a000ef4:	9501      	str	r5, [sp, #4]
1a000ef6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a000ef8:	9500      	str	r5, [sp, #0]
1a000efa:	f7ff fe57 	bl	1a000bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a000efe:	4620      	mov	r0, r4
1a000f00:	f7ff fed2 	bl	1a000ca8 <prvAddNewTaskToReadyList>
	}
1a000f04:	9805      	ldr	r0, [sp, #20]
1a000f06:	b006      	add	sp, #24
1a000f08:	bd70      	pop	{r4, r5, r6, pc}

1a000f0a <xTaskCreate>:
	{
1a000f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a000f0e:	b085      	sub	sp, #20
1a000f10:	4607      	mov	r7, r0
1a000f12:	4688      	mov	r8, r1
1a000f14:	4615      	mov	r5, r2
1a000f16:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000f18:	0090      	lsls	r0, r2, #2
1a000f1a:	f7ff fa41 	bl	1a0003a0 <pvPortMalloc>
			if( pxStack != NULL )
1a000f1e:	b308      	cbz	r0, 1a000f64 <xTaskCreate+0x5a>
1a000f20:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a000f22:	2060      	movs	r0, #96	; 0x60
1a000f24:	f7ff fa3c 	bl	1a0003a0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a000f28:	4604      	mov	r4, r0
1a000f2a:	b1b8      	cbz	r0, 1a000f5c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a000f2c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a000f2e:	b1e4      	cbz	r4, 1a000f6a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a000f30:	2300      	movs	r3, #0
1a000f32:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a000f36:	9303      	str	r3, [sp, #12]
1a000f38:	9402      	str	r4, [sp, #8]
1a000f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a000f3c:	9301      	str	r3, [sp, #4]
1a000f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a000f40:	9300      	str	r3, [sp, #0]
1a000f42:	464b      	mov	r3, r9
1a000f44:	462a      	mov	r2, r5
1a000f46:	4641      	mov	r1, r8
1a000f48:	4638      	mov	r0, r7
1a000f4a:	f7ff fe2f 	bl	1a000bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a000f4e:	4620      	mov	r0, r4
1a000f50:	f7ff feaa 	bl	1a000ca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a000f54:	2001      	movs	r0, #1
	}
1a000f56:	b005      	add	sp, #20
1a000f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a000f5c:	4630      	mov	r0, r6
1a000f5e:	f7ff fa57 	bl	1a000410 <vPortFree>
1a000f62:	e7e4      	b.n	1a000f2e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f68:	e7f5      	b.n	1a000f56 <xTaskCreate+0x4c>
1a000f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a000f6e:	e7f2      	b.n	1a000f56 <xTaskCreate+0x4c>

1a000f70 <vTaskStartScheduler>:
{
1a000f70:	b510      	push	{r4, lr}
1a000f72:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a000f74:	2400      	movs	r4, #0
1a000f76:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a000f78:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a000f7a:	aa07      	add	r2, sp, #28
1a000f7c:	a906      	add	r1, sp, #24
1a000f7e:	a805      	add	r0, sp, #20
1a000f80:	f7ff fde4 	bl	1a000b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a000f84:	9b05      	ldr	r3, [sp, #20]
1a000f86:	9302      	str	r3, [sp, #8]
1a000f88:	9b06      	ldr	r3, [sp, #24]
1a000f8a:	9301      	str	r3, [sp, #4]
1a000f8c:	9400      	str	r4, [sp, #0]
1a000f8e:	4623      	mov	r3, r4
1a000f90:	9a07      	ldr	r2, [sp, #28]
1a000f92:	4917      	ldr	r1, [pc, #92]	; (1a000ff0 <vTaskStartScheduler+0x80>)
1a000f94:	4817      	ldr	r0, [pc, #92]	; (1a000ff4 <vTaskStartScheduler+0x84>)
1a000f96:	f7ff ff7f 	bl	1a000e98 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a000f9a:	b140      	cbz	r0, 1a000fae <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a000f9c:	f000 fbe2 	bl	1a001764 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a000fa0:	2801      	cmp	r0, #1
1a000fa2:	d006      	beq.n	1a000fb2 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a000fa4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000fa8:	d018      	beq.n	1a000fdc <vTaskStartScheduler+0x6c>
}
1a000faa:	b008      	add	sp, #32
1a000fac:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a000fae:	2000      	movs	r0, #0
1a000fb0:	e7f6      	b.n	1a000fa0 <vTaskStartScheduler+0x30>
1a000fb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fb6:	f383 8811 	msr	BASEPRI, r3
1a000fba:	f3bf 8f6f 	isb	sy
1a000fbe:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a000fc2:	4b0d      	ldr	r3, [pc, #52]	; (1a000ff8 <vTaskStartScheduler+0x88>)
1a000fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000fc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a000fca:	4b0c      	ldr	r3, [pc, #48]	; (1a000ffc <vTaskStartScheduler+0x8c>)
1a000fcc:	2201      	movs	r2, #1
1a000fce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a000fd0:	4b0b      	ldr	r3, [pc, #44]	; (1a001000 <vTaskStartScheduler+0x90>)
1a000fd2:	2200      	movs	r2, #0
1a000fd4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a000fd6:	f000 fea7 	bl	1a001d28 <xPortStartScheduler>
1a000fda:	e7e6      	b.n	1a000faa <vTaskStartScheduler+0x3a>
1a000fdc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fe0:	f383 8811 	msr	BASEPRI, r3
1a000fe4:	f3bf 8f6f 	isb	sy
1a000fe8:	f3bf 8f4f 	dsb	sy
1a000fec:	e7fe      	b.n	1a000fec <vTaskStartScheduler+0x7c>
1a000fee:	bf00      	nop
1a000ff0:	1a00367c 	.word	0x1a00367c
1a000ff4:	1a000dd9 	.word	0x1a000dd9
1a000ff8:	1000297c 	.word	0x1000297c
1a000ffc:	10002998 	.word	0x10002998
1a001000:	100029c4 	.word	0x100029c4

1a001004 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001004:	4a02      	ldr	r2, [pc, #8]	; (1a001010 <vTaskSuspendAll+0xc>)
1a001006:	6813      	ldr	r3, [r2, #0]
1a001008:	3301      	adds	r3, #1
1a00100a:	6013      	str	r3, [r2, #0]
}
1a00100c:	4770      	bx	lr
1a00100e:	bf00      	nop
1a001010:	10002948 	.word	0x10002948

1a001014 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001014:	4b01      	ldr	r3, [pc, #4]	; (1a00101c <xTaskGetTickCount+0x8>)
1a001016:	6818      	ldr	r0, [r3, #0]
}
1a001018:	4770      	bx	lr
1a00101a:	bf00      	nop
1a00101c:	100029c4 	.word	0x100029c4

1a001020 <xTaskIncrementTick>:
{
1a001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001022:	4b3a      	ldr	r3, [pc, #232]	; (1a00110c <xTaskIncrementTick+0xec>)
1a001024:	681b      	ldr	r3, [r3, #0]
1a001026:	2b00      	cmp	r3, #0
1a001028:	d164      	bne.n	1a0010f4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00102a:	4b39      	ldr	r3, [pc, #228]	; (1a001110 <xTaskIncrementTick+0xf0>)
1a00102c:	681d      	ldr	r5, [r3, #0]
1a00102e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001030:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001032:	b9c5      	cbnz	r5, 1a001066 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001034:	4b37      	ldr	r3, [pc, #220]	; (1a001114 <xTaskIncrementTick+0xf4>)
1a001036:	681b      	ldr	r3, [r3, #0]
1a001038:	681b      	ldr	r3, [r3, #0]
1a00103a:	b143      	cbz	r3, 1a00104e <xTaskIncrementTick+0x2e>
1a00103c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001040:	f383 8811 	msr	BASEPRI, r3
1a001044:	f3bf 8f6f 	isb	sy
1a001048:	f3bf 8f4f 	dsb	sy
1a00104c:	e7fe      	b.n	1a00104c <xTaskIncrementTick+0x2c>
1a00104e:	4a31      	ldr	r2, [pc, #196]	; (1a001114 <xTaskIncrementTick+0xf4>)
1a001050:	6811      	ldr	r1, [r2, #0]
1a001052:	4b31      	ldr	r3, [pc, #196]	; (1a001118 <xTaskIncrementTick+0xf8>)
1a001054:	6818      	ldr	r0, [r3, #0]
1a001056:	6010      	str	r0, [r2, #0]
1a001058:	6019      	str	r1, [r3, #0]
1a00105a:	4a30      	ldr	r2, [pc, #192]	; (1a00111c <xTaskIncrementTick+0xfc>)
1a00105c:	6813      	ldr	r3, [r2, #0]
1a00105e:	3301      	adds	r3, #1
1a001060:	6013      	str	r3, [r2, #0]
1a001062:	f7ff fd8d 	bl	1a000b80 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001066:	4b2e      	ldr	r3, [pc, #184]	; (1a001120 <xTaskIncrementTick+0x100>)
1a001068:	681b      	ldr	r3, [r3, #0]
1a00106a:	42ab      	cmp	r3, r5
1a00106c:	d938      	bls.n	1a0010e0 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00106e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001070:	4b2c      	ldr	r3, [pc, #176]	; (1a001124 <xTaskIncrementTick+0x104>)
1a001072:	681b      	ldr	r3, [r3, #0]
1a001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001076:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00107a:	009a      	lsls	r2, r3, #2
1a00107c:	4b2a      	ldr	r3, [pc, #168]	; (1a001128 <xTaskIncrementTick+0x108>)
1a00107e:	589b      	ldr	r3, [r3, r2]
1a001080:	2b01      	cmp	r3, #1
1a001082:	d93c      	bls.n	1a0010fe <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001084:	2401      	movs	r4, #1
1a001086:	e03a      	b.n	1a0010fe <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001088:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00108a:	4b22      	ldr	r3, [pc, #136]	; (1a001114 <xTaskIncrementTick+0xf4>)
1a00108c:	681b      	ldr	r3, [r3, #0]
1a00108e:	681b      	ldr	r3, [r3, #0]
1a001090:	b343      	cbz	r3, 1a0010e4 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001092:	4b20      	ldr	r3, [pc, #128]	; (1a001114 <xTaskIncrementTick+0xf4>)
1a001094:	681b      	ldr	r3, [r3, #0]
1a001096:	68db      	ldr	r3, [r3, #12]
1a001098:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00109a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00109c:	429d      	cmp	r5, r3
1a00109e:	d326      	bcc.n	1a0010ee <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0010a0:	1d37      	adds	r7, r6, #4
1a0010a2:	4638      	mov	r0, r7
1a0010a4:	f7ff fd3d 	bl	1a000b22 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0010a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0010aa:	b11b      	cbz	r3, 1a0010b4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0010ac:	f106 0018 	add.w	r0, r6, #24
1a0010b0:	f7ff fd37 	bl	1a000b22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0010b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0010b6:	2201      	movs	r2, #1
1a0010b8:	409a      	lsls	r2, r3
1a0010ba:	491c      	ldr	r1, [pc, #112]	; (1a00112c <xTaskIncrementTick+0x10c>)
1a0010bc:	6808      	ldr	r0, [r1, #0]
1a0010be:	4302      	orrs	r2, r0
1a0010c0:	600a      	str	r2, [r1, #0]
1a0010c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0010c6:	009a      	lsls	r2, r3, #2
1a0010c8:	4639      	mov	r1, r7
1a0010ca:	4817      	ldr	r0, [pc, #92]	; (1a001128 <xTaskIncrementTick+0x108>)
1a0010cc:	4410      	add	r0, r2
1a0010ce:	f7ff fd02 	bl	1a000ad6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0010d2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0010d4:	4b13      	ldr	r3, [pc, #76]	; (1a001124 <xTaskIncrementTick+0x104>)
1a0010d6:	681b      	ldr	r3, [r3, #0]
1a0010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0010da:	429a      	cmp	r2, r3
1a0010dc:	d2d4      	bcs.n	1a001088 <xTaskIncrementTick+0x68>
1a0010de:	e7d4      	b.n	1a00108a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0010e0:	2400      	movs	r4, #0
1a0010e2:	e7d2      	b.n	1a00108a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0010e4:	4b0e      	ldr	r3, [pc, #56]	; (1a001120 <xTaskIncrementTick+0x100>)
1a0010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0010ea:	601a      	str	r2, [r3, #0]
					break;
1a0010ec:	e7c0      	b.n	1a001070 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0010ee:	4a0c      	ldr	r2, [pc, #48]	; (1a001120 <xTaskIncrementTick+0x100>)
1a0010f0:	6013      	str	r3, [r2, #0]
						break;
1a0010f2:	e7bd      	b.n	1a001070 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0010f4:	4a0e      	ldr	r2, [pc, #56]	; (1a001130 <xTaskIncrementTick+0x110>)
1a0010f6:	6813      	ldr	r3, [r2, #0]
1a0010f8:	3301      	adds	r3, #1
1a0010fa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0010fc:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0010fe:	4b0d      	ldr	r3, [pc, #52]	; (1a001134 <xTaskIncrementTick+0x114>)
1a001100:	681b      	ldr	r3, [r3, #0]
1a001102:	b103      	cbz	r3, 1a001106 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001104:	2401      	movs	r4, #1
}
1a001106:	4620      	mov	r0, r4
1a001108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00110a:	bf00      	nop
1a00110c:	10002948 	.word	0x10002948
1a001110:	100029c4 	.word	0x100029c4
1a001114:	100028a8 	.word	0x100028a8
1a001118:	100028ac 	.word	0x100028ac
1a00111c:	10002980 	.word	0x10002980
1a001120:	1000297c 	.word	0x1000297c
1a001124:	100028a4 	.word	0x100028a4
1a001128:	100028b0 	.word	0x100028b0
1a00112c:	10002950 	.word	0x10002950
1a001130:	10002944 	.word	0x10002944
1a001134:	100029c8 	.word	0x100029c8

1a001138 <xTaskResumeAll>:
{
1a001138:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00113a:	4b33      	ldr	r3, [pc, #204]	; (1a001208 <xTaskResumeAll+0xd0>)
1a00113c:	681b      	ldr	r3, [r3, #0]
1a00113e:	b943      	cbnz	r3, 1a001152 <xTaskResumeAll+0x1a>
1a001140:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001144:	f383 8811 	msr	BASEPRI, r3
1a001148:	f3bf 8f6f 	isb	sy
1a00114c:	f3bf 8f4f 	dsb	sy
1a001150:	e7fe      	b.n	1a001150 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001152:	f000 fd47 	bl	1a001be4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001156:	4b2c      	ldr	r3, [pc, #176]	; (1a001208 <xTaskResumeAll+0xd0>)
1a001158:	681a      	ldr	r2, [r3, #0]
1a00115a:	3a01      	subs	r2, #1
1a00115c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00115e:	681b      	ldr	r3, [r3, #0]
1a001160:	2b00      	cmp	r3, #0
1a001162:	d14d      	bne.n	1a001200 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001164:	4b29      	ldr	r3, [pc, #164]	; (1a00120c <xTaskResumeAll+0xd4>)
1a001166:	681b      	ldr	r3, [r3, #0]
1a001168:	b923      	cbnz	r3, 1a001174 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00116a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00116c:	f000 fd5c 	bl	1a001c28 <vPortExitCritical>
}
1a001170:	4620      	mov	r0, r4
1a001172:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001174:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001176:	4b26      	ldr	r3, [pc, #152]	; (1a001210 <xTaskResumeAll+0xd8>)
1a001178:	681b      	ldr	r3, [r3, #0]
1a00117a:	b31b      	cbz	r3, 1a0011c4 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00117c:	4b24      	ldr	r3, [pc, #144]	; (1a001210 <xTaskResumeAll+0xd8>)
1a00117e:	68db      	ldr	r3, [r3, #12]
1a001180:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001182:	f104 0018 	add.w	r0, r4, #24
1a001186:	f7ff fccc 	bl	1a000b22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00118a:	1d25      	adds	r5, r4, #4
1a00118c:	4628      	mov	r0, r5
1a00118e:	f7ff fcc8 	bl	1a000b22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001194:	2201      	movs	r2, #1
1a001196:	409a      	lsls	r2, r3
1a001198:	491e      	ldr	r1, [pc, #120]	; (1a001214 <xTaskResumeAll+0xdc>)
1a00119a:	6808      	ldr	r0, [r1, #0]
1a00119c:	4302      	orrs	r2, r0
1a00119e:	600a      	str	r2, [r1, #0]
1a0011a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0011a4:	009a      	lsls	r2, r3, #2
1a0011a6:	4629      	mov	r1, r5
1a0011a8:	481b      	ldr	r0, [pc, #108]	; (1a001218 <xTaskResumeAll+0xe0>)
1a0011aa:	4410      	add	r0, r2
1a0011ac:	f7ff fc93 	bl	1a000ad6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0011b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0011b2:	4b1a      	ldr	r3, [pc, #104]	; (1a00121c <xTaskResumeAll+0xe4>)
1a0011b4:	681b      	ldr	r3, [r3, #0]
1a0011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0011b8:	429a      	cmp	r2, r3
1a0011ba:	d3dc      	bcc.n	1a001176 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0011bc:	4b18      	ldr	r3, [pc, #96]	; (1a001220 <xTaskResumeAll+0xe8>)
1a0011be:	2201      	movs	r2, #1
1a0011c0:	601a      	str	r2, [r3, #0]
1a0011c2:	e7d8      	b.n	1a001176 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0011c4:	b10c      	cbz	r4, 1a0011ca <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0011c6:	f7ff fcdb 	bl	1a000b80 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0011ca:	4b16      	ldr	r3, [pc, #88]	; (1a001224 <xTaskResumeAll+0xec>)
1a0011cc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0011ce:	b154      	cbz	r4, 1a0011e6 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0011d0:	f7ff ff26 	bl	1a001020 <xTaskIncrementTick>
1a0011d4:	b110      	cbz	r0, 1a0011dc <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0011d6:	4b12      	ldr	r3, [pc, #72]	; (1a001220 <xTaskResumeAll+0xe8>)
1a0011d8:	2201      	movs	r2, #1
1a0011da:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0011dc:	3c01      	subs	r4, #1
1a0011de:	d1f7      	bne.n	1a0011d0 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0011e0:	4b10      	ldr	r3, [pc, #64]	; (1a001224 <xTaskResumeAll+0xec>)
1a0011e2:	2200      	movs	r2, #0
1a0011e4:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0011e6:	4b0e      	ldr	r3, [pc, #56]	; (1a001220 <xTaskResumeAll+0xe8>)
1a0011e8:	681b      	ldr	r3, [r3, #0]
1a0011ea:	b15b      	cbz	r3, 1a001204 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0011ec:	4b0e      	ldr	r3, [pc, #56]	; (1a001228 <xTaskResumeAll+0xf0>)
1a0011ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011f2:	601a      	str	r2, [r3, #0]
1a0011f4:	f3bf 8f4f 	dsb	sy
1a0011f8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0011fc:	2401      	movs	r4, #1
1a0011fe:	e7b5      	b.n	1a00116c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001200:	2400      	movs	r4, #0
1a001202:	e7b3      	b.n	1a00116c <xTaskResumeAll+0x34>
1a001204:	2400      	movs	r4, #0
1a001206:	e7b1      	b.n	1a00116c <xTaskResumeAll+0x34>
1a001208:	10002948 	.word	0x10002948
1a00120c:	1000293c 	.word	0x1000293c
1a001210:	10002984 	.word	0x10002984
1a001214:	10002950 	.word	0x10002950
1a001218:	100028b0 	.word	0x100028b0
1a00121c:	100028a4 	.word	0x100028a4
1a001220:	100029c8 	.word	0x100029c8
1a001224:	10002944 	.word	0x10002944
1a001228:	e000ed04 	.word	0xe000ed04

1a00122c <vTaskDelayUntil>:
	{
1a00122c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a00122e:	b150      	cbz	r0, 1a001246 <vTaskDelayUntil+0x1a>
1a001230:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001232:	b989      	cbnz	r1, 1a001258 <vTaskDelayUntil+0x2c>
1a001234:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001238:	f383 8811 	msr	BASEPRI, r3
1a00123c:	f3bf 8f6f 	isb	sy
1a001240:	f3bf 8f4f 	dsb	sy
1a001244:	e7fe      	b.n	1a001244 <vTaskDelayUntil+0x18>
1a001246:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00124a:	f383 8811 	msr	BASEPRI, r3
1a00124e:	f3bf 8f6f 	isb	sy
1a001252:	f3bf 8f4f 	dsb	sy
1a001256:	e7fe      	b.n	1a001256 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001258:	4b1a      	ldr	r3, [pc, #104]	; (1a0012c4 <vTaskDelayUntil+0x98>)
1a00125a:	681b      	ldr	r3, [r3, #0]
1a00125c:	b143      	cbz	r3, 1a001270 <vTaskDelayUntil+0x44>
1a00125e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001262:	f383 8811 	msr	BASEPRI, r3
1a001266:	f3bf 8f6f 	isb	sy
1a00126a:	f3bf 8f4f 	dsb	sy
1a00126e:	e7fe      	b.n	1a00126e <vTaskDelayUntil+0x42>
1a001270:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001272:	f7ff fec7 	bl	1a001004 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001276:	4b14      	ldr	r3, [pc, #80]	; (1a0012c8 <vTaskDelayUntil+0x9c>)
1a001278:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00127a:	682a      	ldr	r2, [r5, #0]
1a00127c:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a00127e:	4282      	cmp	r2, r0
1a001280:	d918      	bls.n	1a0012b4 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001282:	42a2      	cmp	r2, r4
1a001284:	d80c      	bhi.n	1a0012a0 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001286:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001288:	f7ff ff56 	bl	1a001138 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00128c:	b938      	cbnz	r0, 1a00129e <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a00128e:	4b0f      	ldr	r3, [pc, #60]	; (1a0012cc <vTaskDelayUntil+0xa0>)
1a001290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001294:	601a      	str	r2, [r3, #0]
1a001296:	f3bf 8f4f 	dsb	sy
1a00129a:	f3bf 8f6f 	isb	sy
	}
1a00129e:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0012a0:	42a0      	cmp	r0, r4
1a0012a2:	d301      	bcc.n	1a0012a8 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0012a4:	602c      	str	r4, [r5, #0]
1a0012a6:	e7ef      	b.n	1a001288 <vTaskDelayUntil+0x5c>
1a0012a8:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0012aa:	2100      	movs	r1, #0
1a0012ac:	1a20      	subs	r0, r4, r0
1a0012ae:	f7ff fda7 	bl	1a000e00 <prvAddCurrentTaskToDelayedList>
1a0012b2:	e7e9      	b.n	1a001288 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a0012b4:	42a2      	cmp	r2, r4
1a0012b6:	d801      	bhi.n	1a0012bc <vTaskDelayUntil+0x90>
1a0012b8:	42a0      	cmp	r0, r4
1a0012ba:	d201      	bcs.n	1a0012c0 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0012bc:	602c      	str	r4, [r5, #0]
1a0012be:	e7f4      	b.n	1a0012aa <vTaskDelayUntil+0x7e>
1a0012c0:	602c      	str	r4, [r5, #0]
1a0012c2:	e7e1      	b.n	1a001288 <vTaskDelayUntil+0x5c>
1a0012c4:	10002948 	.word	0x10002948
1a0012c8:	100029c4 	.word	0x100029c4
1a0012cc:	e000ed04 	.word	0xe000ed04

1a0012d0 <vTaskDelay>:
	{
1a0012d0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0012d2:	b1a8      	cbz	r0, 1a001300 <vTaskDelay+0x30>
1a0012d4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0012d6:	4b0f      	ldr	r3, [pc, #60]	; (1a001314 <vTaskDelay+0x44>)
1a0012d8:	681b      	ldr	r3, [r3, #0]
1a0012da:	b143      	cbz	r3, 1a0012ee <vTaskDelay+0x1e>
1a0012dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012e0:	f383 8811 	msr	BASEPRI, r3
1a0012e4:	f3bf 8f6f 	isb	sy
1a0012e8:	f3bf 8f4f 	dsb	sy
1a0012ec:	e7fe      	b.n	1a0012ec <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0012ee:	f7ff fe89 	bl	1a001004 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0012f2:	2100      	movs	r1, #0
1a0012f4:	4620      	mov	r0, r4
1a0012f6:	f7ff fd83 	bl	1a000e00 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0012fa:	f7ff ff1d 	bl	1a001138 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0012fe:	b938      	cbnz	r0, 1a001310 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001300:	4b05      	ldr	r3, [pc, #20]	; (1a001318 <vTaskDelay+0x48>)
1a001302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001306:	601a      	str	r2, [r3, #0]
1a001308:	f3bf 8f4f 	dsb	sy
1a00130c:	f3bf 8f6f 	isb	sy
	}
1a001310:	bd10      	pop	{r4, pc}
1a001312:	bf00      	nop
1a001314:	10002948 	.word	0x10002948
1a001318:	e000ed04 	.word	0xe000ed04

1a00131c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00131c:	4b2c      	ldr	r3, [pc, #176]	; (1a0013d0 <vTaskSwitchContext+0xb4>)
1a00131e:	681b      	ldr	r3, [r3, #0]
1a001320:	b11b      	cbz	r3, 1a00132a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001322:	4b2c      	ldr	r3, [pc, #176]	; (1a0013d4 <vTaskSwitchContext+0xb8>)
1a001324:	2201      	movs	r2, #1
1a001326:	601a      	str	r2, [r3, #0]
1a001328:	4770      	bx	lr
{
1a00132a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00132c:	4b29      	ldr	r3, [pc, #164]	; (1a0013d4 <vTaskSwitchContext+0xb8>)
1a00132e:	2200      	movs	r2, #0
1a001330:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001332:	4b29      	ldr	r3, [pc, #164]	; (1a0013d8 <vTaskSwitchContext+0xbc>)
1a001334:	681b      	ldr	r3, [r3, #0]
1a001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001338:	681a      	ldr	r2, [r3, #0]
1a00133a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00133e:	d103      	bne.n	1a001348 <vTaskSwitchContext+0x2c>
1a001340:	685a      	ldr	r2, [r3, #4]
1a001342:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001346:	d01b      	beq.n	1a001380 <vTaskSwitchContext+0x64>
1a001348:	4b23      	ldr	r3, [pc, #140]	; (1a0013d8 <vTaskSwitchContext+0xbc>)
1a00134a:	6818      	ldr	r0, [r3, #0]
1a00134c:	6819      	ldr	r1, [r3, #0]
1a00134e:	3134      	adds	r1, #52	; 0x34
1a001350:	f7ff fc14 	bl	1a000b7c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001354:	4b21      	ldr	r3, [pc, #132]	; (1a0013dc <vTaskSwitchContext+0xc0>)
1a001356:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001358:	fab3 f383 	clz	r3, r3
1a00135c:	b2db      	uxtb	r3, r3
1a00135e:	f1c3 031f 	rsb	r3, r3, #31
1a001362:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001366:	008a      	lsls	r2, r1, #2
1a001368:	491d      	ldr	r1, [pc, #116]	; (1a0013e0 <vTaskSwitchContext+0xc4>)
1a00136a:	588a      	ldr	r2, [r1, r2]
1a00136c:	b98a      	cbnz	r2, 1a001392 <vTaskSwitchContext+0x76>
	__asm volatile
1a00136e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001372:	f383 8811 	msr	BASEPRI, r3
1a001376:	f3bf 8f6f 	isb	sy
1a00137a:	f3bf 8f4f 	dsb	sy
1a00137e:	e7fe      	b.n	1a00137e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001380:	689a      	ldr	r2, [r3, #8]
1a001382:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001386:	d1df      	bne.n	1a001348 <vTaskSwitchContext+0x2c>
1a001388:	68db      	ldr	r3, [r3, #12]
1a00138a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00138e:	d1db      	bne.n	1a001348 <vTaskSwitchContext+0x2c>
1a001390:	e7e0      	b.n	1a001354 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001392:	4813      	ldr	r0, [pc, #76]	; (1a0013e0 <vTaskSwitchContext+0xc4>)
1a001394:	009a      	lsls	r2, r3, #2
1a001396:	18d4      	adds	r4, r2, r3
1a001398:	00a1      	lsls	r1, r4, #2
1a00139a:	4401      	add	r1, r0
1a00139c:	684c      	ldr	r4, [r1, #4]
1a00139e:	6864      	ldr	r4, [r4, #4]
1a0013a0:	604c      	str	r4, [r1, #4]
1a0013a2:	441a      	add	r2, r3
1a0013a4:	0091      	lsls	r1, r2, #2
1a0013a6:	3108      	adds	r1, #8
1a0013a8:	4408      	add	r0, r1
1a0013aa:	4284      	cmp	r4, r0
1a0013ac:	d009      	beq.n	1a0013c2 <vTaskSwitchContext+0xa6>
1a0013ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0013b2:	009a      	lsls	r2, r3, #2
1a0013b4:	4b0a      	ldr	r3, [pc, #40]	; (1a0013e0 <vTaskSwitchContext+0xc4>)
1a0013b6:	4413      	add	r3, r2
1a0013b8:	685b      	ldr	r3, [r3, #4]
1a0013ba:	68da      	ldr	r2, [r3, #12]
1a0013bc:	4b06      	ldr	r3, [pc, #24]	; (1a0013d8 <vTaskSwitchContext+0xbc>)
1a0013be:	601a      	str	r2, [r3, #0]
}
1a0013c0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0013c2:	6861      	ldr	r1, [r4, #4]
1a0013c4:	4806      	ldr	r0, [pc, #24]	; (1a0013e0 <vTaskSwitchContext+0xc4>)
1a0013c6:	2214      	movs	r2, #20
1a0013c8:	fb02 0203 	mla	r2, r2, r3, r0
1a0013cc:	6051      	str	r1, [r2, #4]
1a0013ce:	e7ee      	b.n	1a0013ae <vTaskSwitchContext+0x92>
1a0013d0:	10002948 	.word	0x10002948
1a0013d4:	100029c8 	.word	0x100029c8
1a0013d8:	100028a4 	.word	0x100028a4
1a0013dc:	10002950 	.word	0x10002950
1a0013e0:	100028b0 	.word	0x100028b0

1a0013e4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0013e4:	b940      	cbnz	r0, 1a0013f8 <vTaskPlaceOnEventList+0x14>
1a0013e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ea:	f383 8811 	msr	BASEPRI, r3
1a0013ee:	f3bf 8f6f 	isb	sy
1a0013f2:	f3bf 8f4f 	dsb	sy
1a0013f6:	e7fe      	b.n	1a0013f6 <vTaskPlaceOnEventList+0x12>
{
1a0013f8:	b510      	push	{r4, lr}
1a0013fa:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0013fc:	4b04      	ldr	r3, [pc, #16]	; (1a001410 <vTaskPlaceOnEventList+0x2c>)
1a0013fe:	6819      	ldr	r1, [r3, #0]
1a001400:	3118      	adds	r1, #24
1a001402:	f7ff fb74 	bl	1a000aee <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001406:	2101      	movs	r1, #1
1a001408:	4620      	mov	r0, r4
1a00140a:	f7ff fcf9 	bl	1a000e00 <prvAddCurrentTaskToDelayedList>
}
1a00140e:	bd10      	pop	{r4, pc}
1a001410:	100028a4 	.word	0x100028a4

1a001414 <vTaskPlaceOnEventListRestricted>:
	{
1a001414:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001416:	b940      	cbnz	r0, 1a00142a <vTaskPlaceOnEventListRestricted+0x16>
1a001418:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00141c:	f383 8811 	msr	BASEPRI, r3
1a001420:	f3bf 8f6f 	isb	sy
1a001424:	f3bf 8f4f 	dsb	sy
1a001428:	e7fe      	b.n	1a001428 <vTaskPlaceOnEventListRestricted+0x14>
1a00142a:	460c      	mov	r4, r1
1a00142c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00142e:	4a06      	ldr	r2, [pc, #24]	; (1a001448 <vTaskPlaceOnEventListRestricted+0x34>)
1a001430:	6811      	ldr	r1, [r2, #0]
1a001432:	3118      	adds	r1, #24
1a001434:	f7ff fb4f 	bl	1a000ad6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001438:	b10d      	cbz	r5, 1a00143e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00143a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00143e:	4629      	mov	r1, r5
1a001440:	4620      	mov	r0, r4
1a001442:	f7ff fcdd 	bl	1a000e00 <prvAddCurrentTaskToDelayedList>
	}
1a001446:	bd38      	pop	{r3, r4, r5, pc}
1a001448:	100028a4 	.word	0x100028a4

1a00144c <xTaskRemoveFromEventList>:
{
1a00144c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00144e:	68c3      	ldr	r3, [r0, #12]
1a001450:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001452:	b944      	cbnz	r4, 1a001466 <xTaskRemoveFromEventList+0x1a>
1a001454:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001458:	f383 8811 	msr	BASEPRI, r3
1a00145c:	f3bf 8f6f 	isb	sy
1a001460:	f3bf 8f4f 	dsb	sy
1a001464:	e7fe      	b.n	1a001464 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001466:	f104 0518 	add.w	r5, r4, #24
1a00146a:	4628      	mov	r0, r5
1a00146c:	f7ff fb59 	bl	1a000b22 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001470:	4b13      	ldr	r3, [pc, #76]	; (1a0014c0 <xTaskRemoveFromEventList+0x74>)
1a001472:	681b      	ldr	r3, [r3, #0]
1a001474:	b9e3      	cbnz	r3, 1a0014b0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001476:	1d25      	adds	r5, r4, #4
1a001478:	4628      	mov	r0, r5
1a00147a:	f7ff fb52 	bl	1a000b22 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00147e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001480:	2201      	movs	r2, #1
1a001482:	409a      	lsls	r2, r3
1a001484:	490f      	ldr	r1, [pc, #60]	; (1a0014c4 <xTaskRemoveFromEventList+0x78>)
1a001486:	6808      	ldr	r0, [r1, #0]
1a001488:	4302      	orrs	r2, r0
1a00148a:	600a      	str	r2, [r1, #0]
1a00148c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001490:	009a      	lsls	r2, r3, #2
1a001492:	4629      	mov	r1, r5
1a001494:	480c      	ldr	r0, [pc, #48]	; (1a0014c8 <xTaskRemoveFromEventList+0x7c>)
1a001496:	4410      	add	r0, r2
1a001498:	f7ff fb1d 	bl	1a000ad6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00149c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00149e:	4b0b      	ldr	r3, [pc, #44]	; (1a0014cc <xTaskRemoveFromEventList+0x80>)
1a0014a0:	681b      	ldr	r3, [r3, #0]
1a0014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014a4:	429a      	cmp	r2, r3
1a0014a6:	d908      	bls.n	1a0014ba <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0014a8:	2001      	movs	r0, #1
1a0014aa:	4b09      	ldr	r3, [pc, #36]	; (1a0014d0 <xTaskRemoveFromEventList+0x84>)
1a0014ac:	6018      	str	r0, [r3, #0]
}
1a0014ae:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0014b0:	4629      	mov	r1, r5
1a0014b2:	4808      	ldr	r0, [pc, #32]	; (1a0014d4 <xTaskRemoveFromEventList+0x88>)
1a0014b4:	f7ff fb0f 	bl	1a000ad6 <vListInsertEnd>
1a0014b8:	e7f0      	b.n	1a00149c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0014ba:	2000      	movs	r0, #0
	return xReturn;
1a0014bc:	e7f7      	b.n	1a0014ae <xTaskRemoveFromEventList+0x62>
1a0014be:	bf00      	nop
1a0014c0:	10002948 	.word	0x10002948
1a0014c4:	10002950 	.word	0x10002950
1a0014c8:	100028b0 	.word	0x100028b0
1a0014cc:	100028a4 	.word	0x100028a4
1a0014d0:	100029c8 	.word	0x100029c8
1a0014d4:	10002984 	.word	0x10002984

1a0014d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0014d8:	4b03      	ldr	r3, [pc, #12]	; (1a0014e8 <vTaskInternalSetTimeOutState+0x10>)
1a0014da:	681b      	ldr	r3, [r3, #0]
1a0014dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0014de:	4b03      	ldr	r3, [pc, #12]	; (1a0014ec <vTaskInternalSetTimeOutState+0x14>)
1a0014e0:	681b      	ldr	r3, [r3, #0]
1a0014e2:	6043      	str	r3, [r0, #4]
}
1a0014e4:	4770      	bx	lr
1a0014e6:	bf00      	nop
1a0014e8:	10002980 	.word	0x10002980
1a0014ec:	100029c4 	.word	0x100029c4

1a0014f0 <xTaskCheckForTimeOut>:
{
1a0014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0014f2:	b150      	cbz	r0, 1a00150a <xTaskCheckForTimeOut+0x1a>
1a0014f4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0014f6:	b989      	cbnz	r1, 1a00151c <xTaskCheckForTimeOut+0x2c>
1a0014f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014fc:	f383 8811 	msr	BASEPRI, r3
1a001500:	f3bf 8f6f 	isb	sy
1a001504:	f3bf 8f4f 	dsb	sy
1a001508:	e7fe      	b.n	1a001508 <xTaskCheckForTimeOut+0x18>
1a00150a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00150e:	f383 8811 	msr	BASEPRI, r3
1a001512:	f3bf 8f6f 	isb	sy
1a001516:	f3bf 8f4f 	dsb	sy
1a00151a:	e7fe      	b.n	1a00151a <xTaskCheckForTimeOut+0x2a>
1a00151c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00151e:	f000 fb61 	bl	1a001be4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001522:	4b11      	ldr	r3, [pc, #68]	; (1a001568 <xTaskCheckForTimeOut+0x78>)
1a001524:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001526:	6868      	ldr	r0, [r5, #4]
1a001528:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00152a:	6823      	ldr	r3, [r4, #0]
1a00152c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001530:	d016      	beq.n	1a001560 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001532:	682f      	ldr	r7, [r5, #0]
1a001534:	4e0d      	ldr	r6, [pc, #52]	; (1a00156c <xTaskCheckForTimeOut+0x7c>)
1a001536:	6836      	ldr	r6, [r6, #0]
1a001538:	42b7      	cmp	r7, r6
1a00153a:	d001      	beq.n	1a001540 <xTaskCheckForTimeOut+0x50>
1a00153c:	4288      	cmp	r0, r1
1a00153e:	d911      	bls.n	1a001564 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001540:	4293      	cmp	r3, r2
1a001542:	d803      	bhi.n	1a00154c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001544:	2300      	movs	r3, #0
1a001546:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001548:	2401      	movs	r4, #1
1a00154a:	e005      	b.n	1a001558 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a00154c:	1a9b      	subs	r3, r3, r2
1a00154e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001550:	4628      	mov	r0, r5
1a001552:	f7ff ffc1 	bl	1a0014d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001556:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001558:	f000 fb66 	bl	1a001c28 <vPortExitCritical>
}
1a00155c:	4620      	mov	r0, r4
1a00155e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001560:	2400      	movs	r4, #0
1a001562:	e7f9      	b.n	1a001558 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001564:	2401      	movs	r4, #1
1a001566:	e7f7      	b.n	1a001558 <xTaskCheckForTimeOut+0x68>
1a001568:	100029c4 	.word	0x100029c4
1a00156c:	10002980 	.word	0x10002980

1a001570 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001570:	4b01      	ldr	r3, [pc, #4]	; (1a001578 <vTaskMissedYield+0x8>)
1a001572:	2201      	movs	r2, #1
1a001574:	601a      	str	r2, [r3, #0]
}
1a001576:	4770      	bx	lr
1a001578:	100029c8 	.word	0x100029c8

1a00157c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00157c:	4b05      	ldr	r3, [pc, #20]	; (1a001594 <xTaskGetSchedulerState+0x18>)
1a00157e:	681b      	ldr	r3, [r3, #0]
1a001580:	b133      	cbz	r3, 1a001590 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001582:	4b05      	ldr	r3, [pc, #20]	; (1a001598 <xTaskGetSchedulerState+0x1c>)
1a001584:	681b      	ldr	r3, [r3, #0]
1a001586:	b10b      	cbz	r3, 1a00158c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001588:	2000      	movs	r0, #0
	}
1a00158a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00158c:	2002      	movs	r0, #2
1a00158e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001590:	2001      	movs	r0, #1
1a001592:	4770      	bx	lr
1a001594:	10002998 	.word	0x10002998
1a001598:	10002948 	.word	0x10002948

1a00159c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a00159c:	2800      	cmp	r0, #0
1a00159e:	d049      	beq.n	1a001634 <xTaskPriorityDisinherit+0x98>
	{
1a0015a0:	b538      	push	{r3, r4, r5, lr}
1a0015a2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0015a4:	4a26      	ldr	r2, [pc, #152]	; (1a001640 <xTaskPriorityDisinherit+0xa4>)
1a0015a6:	6812      	ldr	r2, [r2, #0]
1a0015a8:	4282      	cmp	r2, r0
1a0015aa:	d008      	beq.n	1a0015be <xTaskPriorityDisinherit+0x22>
1a0015ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015b0:	f383 8811 	msr	BASEPRI, r3
1a0015b4:	f3bf 8f6f 	isb	sy
1a0015b8:	f3bf 8f4f 	dsb	sy
1a0015bc:	e7fe      	b.n	1a0015bc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0015be:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0015c0:	b942      	cbnz	r2, 1a0015d4 <xTaskPriorityDisinherit+0x38>
1a0015c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015c6:	f383 8811 	msr	BASEPRI, r3
1a0015ca:	f3bf 8f6f 	isb	sy
1a0015ce:	f3bf 8f4f 	dsb	sy
1a0015d2:	e7fe      	b.n	1a0015d2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0015d4:	3a01      	subs	r2, #1
1a0015d6:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0015d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0015da:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0015dc:	4288      	cmp	r0, r1
1a0015de:	d02b      	beq.n	1a001638 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0015e0:	bb62      	cbnz	r2, 1a00163c <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0015e2:	1d25      	adds	r5, r4, #4
1a0015e4:	4628      	mov	r0, r5
1a0015e6:	f7ff fa9c 	bl	1a000b22 <uxListRemove>
1a0015ea:	b970      	cbnz	r0, 1a00160a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0015ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015ee:	2314      	movs	r3, #20
1a0015f0:	fb03 f302 	mul.w	r3, r3, r2
1a0015f4:	4913      	ldr	r1, [pc, #76]	; (1a001644 <xTaskPriorityDisinherit+0xa8>)
1a0015f6:	58cb      	ldr	r3, [r1, r3]
1a0015f8:	b93b      	cbnz	r3, 1a00160a <xTaskPriorityDisinherit+0x6e>
1a0015fa:	2301      	movs	r3, #1
1a0015fc:	fa03 f202 	lsl.w	r2, r3, r2
1a001600:	4911      	ldr	r1, [pc, #68]	; (1a001648 <xTaskPriorityDisinherit+0xac>)
1a001602:	680b      	ldr	r3, [r1, #0]
1a001604:	ea23 0302 	bic.w	r3, r3, r2
1a001608:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00160a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00160c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00160e:	f1c3 0207 	rsb	r2, r3, #7
1a001612:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001614:	2401      	movs	r4, #1
1a001616:	fa04 f203 	lsl.w	r2, r4, r3
1a00161a:	490b      	ldr	r1, [pc, #44]	; (1a001648 <xTaskPriorityDisinherit+0xac>)
1a00161c:	6808      	ldr	r0, [r1, #0]
1a00161e:	4302      	orrs	r2, r0
1a001620:	600a      	str	r2, [r1, #0]
1a001622:	4629      	mov	r1, r5
1a001624:	4a07      	ldr	r2, [pc, #28]	; (1a001644 <xTaskPriorityDisinherit+0xa8>)
1a001626:	2014      	movs	r0, #20
1a001628:	fb00 2003 	mla	r0, r0, r3, r2
1a00162c:	f7ff fa53 	bl	1a000ad6 <vListInsertEnd>
					xReturn = pdTRUE;
1a001630:	4620      	mov	r0, r4
	}
1a001632:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001634:	2000      	movs	r0, #0
	}
1a001636:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001638:	2000      	movs	r0, #0
1a00163a:	e7fa      	b.n	1a001632 <xTaskPriorityDisinherit+0x96>
1a00163c:	2000      	movs	r0, #0
		return xReturn;
1a00163e:	e7f8      	b.n	1a001632 <xTaskPriorityDisinherit+0x96>
1a001640:	100028a4 	.word	0x100028a4
1a001644:	100028b0 	.word	0x100028b0
1a001648:	10002950 	.word	0x10002950

1a00164c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a00164c:	4b06      	ldr	r3, [pc, #24]	; (1a001668 <prvGetNextExpireTime+0x1c>)
1a00164e:	681a      	ldr	r2, [r3, #0]
1a001650:	6813      	ldr	r3, [r2, #0]
1a001652:	fab3 f383 	clz	r3, r3
1a001656:	095b      	lsrs	r3, r3, #5
1a001658:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00165a:	b913      	cbnz	r3, 1a001662 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00165c:	68d3      	ldr	r3, [r2, #12]
1a00165e:	6818      	ldr	r0, [r3, #0]
1a001660:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001662:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001664:	4770      	bx	lr
1a001666:	bf00      	nop
1a001668:	100029cc 	.word	0x100029cc

1a00166c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a00166c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00166e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001670:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001672:	4291      	cmp	r1, r2
1a001674:	d80c      	bhi.n	1a001690 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001676:	1ad2      	subs	r2, r2, r3
1a001678:	6983      	ldr	r3, [r0, #24]
1a00167a:	429a      	cmp	r2, r3
1a00167c:	d301      	bcc.n	1a001682 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00167e:	2001      	movs	r0, #1
1a001680:	e010      	b.n	1a0016a4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001682:	1d01      	adds	r1, r0, #4
1a001684:	4b09      	ldr	r3, [pc, #36]	; (1a0016ac <prvInsertTimerInActiveList+0x40>)
1a001686:	6818      	ldr	r0, [r3, #0]
1a001688:	f7ff fa31 	bl	1a000aee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00168c:	2000      	movs	r0, #0
1a00168e:	e009      	b.n	1a0016a4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001690:	429a      	cmp	r2, r3
1a001692:	d201      	bcs.n	1a001698 <prvInsertTimerInActiveList+0x2c>
1a001694:	4299      	cmp	r1, r3
1a001696:	d206      	bcs.n	1a0016a6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001698:	1d01      	adds	r1, r0, #4
1a00169a:	4b05      	ldr	r3, [pc, #20]	; (1a0016b0 <prvInsertTimerInActiveList+0x44>)
1a00169c:	6818      	ldr	r0, [r3, #0]
1a00169e:	f7ff fa26 	bl	1a000aee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0016a2:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a0016a4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a0016a6:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0016a8:	e7fc      	b.n	1a0016a4 <prvInsertTimerInActiveList+0x38>
1a0016aa:	bf00      	nop
1a0016ac:	100029d0 	.word	0x100029d0
1a0016b0:	100029cc 	.word	0x100029cc

1a0016b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0016b4:	b530      	push	{r4, r5, lr}
1a0016b6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0016b8:	f000 fa94 	bl	1a001be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0016bc:	4b11      	ldr	r3, [pc, #68]	; (1a001704 <prvCheckForValidListAndQueue+0x50>)
1a0016be:	681b      	ldr	r3, [r3, #0]
1a0016c0:	b11b      	cbz	r3, 1a0016ca <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0016c2:	f000 fab1 	bl	1a001c28 <vPortExitCritical>
}
1a0016c6:	b003      	add	sp, #12
1a0016c8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0016ca:	4d0f      	ldr	r5, [pc, #60]	; (1a001708 <prvCheckForValidListAndQueue+0x54>)
1a0016cc:	4628      	mov	r0, r5
1a0016ce:	f7ff f9f4 	bl	1a000aba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0016d2:	4c0e      	ldr	r4, [pc, #56]	; (1a00170c <prvCheckForValidListAndQueue+0x58>)
1a0016d4:	4620      	mov	r0, r4
1a0016d6:	f7ff f9f0 	bl	1a000aba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0016da:	4b0d      	ldr	r3, [pc, #52]	; (1a001710 <prvCheckForValidListAndQueue+0x5c>)
1a0016dc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0016de:	4b0d      	ldr	r3, [pc, #52]	; (1a001714 <prvCheckForValidListAndQueue+0x60>)
1a0016e0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0016e2:	2300      	movs	r3, #0
1a0016e4:	9300      	str	r3, [sp, #0]
1a0016e6:	4b0c      	ldr	r3, [pc, #48]	; (1a001718 <prvCheckForValidListAndQueue+0x64>)
1a0016e8:	4a0c      	ldr	r2, [pc, #48]	; (1a00171c <prvCheckForValidListAndQueue+0x68>)
1a0016ea:	2110      	movs	r1, #16
1a0016ec:	200a      	movs	r0, #10
1a0016ee:	f7fe ff8e 	bl	1a00060e <xQueueGenericCreateStatic>
1a0016f2:	4b04      	ldr	r3, [pc, #16]	; (1a001704 <prvCheckForValidListAndQueue+0x50>)
1a0016f4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0016f6:	2800      	cmp	r0, #0
1a0016f8:	d0e3      	beq.n	1a0016c2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0016fa:	4909      	ldr	r1, [pc, #36]	; (1a001720 <prvCheckForValidListAndQueue+0x6c>)
1a0016fc:	f7ff f9a0 	bl	1a000a40 <vQueueAddToRegistry>
1a001700:	e7df      	b.n	1a0016c2 <prvCheckForValidListAndQueue+0xe>
1a001702:	bf00      	nop
1a001704:	10002af0 	.word	0x10002af0
1a001708:	10002a74 	.word	0x10002a74
1a00170c:	10002a88 	.word	0x10002a88
1a001710:	100029cc 	.word	0x100029cc
1a001714:	100029d0 	.word	0x100029d0
1a001718:	10002aa0 	.word	0x10002aa0
1a00171c:	100029d4 	.word	0x100029d4
1a001720:	1a003684 	.word	0x1a003684

1a001724 <prvInitialiseNewTimer>:
{
1a001724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001728:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a00172a:	b941      	cbnz	r1, 1a00173e <prvInitialiseNewTimer+0x1a>
1a00172c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001730:	f383 8811 	msr	BASEPRI, r3
1a001734:	f3bf 8f6f 	isb	sy
1a001738:	f3bf 8f4f 	dsb	sy
1a00173c:	e7fe      	b.n	1a00173c <prvInitialiseNewTimer+0x18>
1a00173e:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a001740:	b174      	cbz	r4, 1a001760 <prvInitialiseNewTimer+0x3c>
1a001742:	461d      	mov	r5, r3
1a001744:	4616      	mov	r6, r2
1a001746:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001748:	f7ff ffb4 	bl	1a0016b4 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a00174c:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001750:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001752:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001754:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001756:	9b06      	ldr	r3, [sp, #24]
1a001758:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a00175a:	1d20      	adds	r0, r4, #4
1a00175c:	f7ff f9b8 	bl	1a000ad0 <vListInitialiseItem>
}
1a001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001764 <xTimerCreateTimerTask>:
{
1a001764:	b510      	push	{r4, lr}
1a001766:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001768:	f7ff ffa4 	bl	1a0016b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a00176c:	4b12      	ldr	r3, [pc, #72]	; (1a0017b8 <xTimerCreateTimerTask+0x54>)
1a00176e:	681b      	ldr	r3, [r3, #0]
1a001770:	b1cb      	cbz	r3, 1a0017a6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001772:	2400      	movs	r4, #0
1a001774:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001776:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001778:	aa07      	add	r2, sp, #28
1a00177a:	a906      	add	r1, sp, #24
1a00177c:	a805      	add	r0, sp, #20
1a00177e:	f7ff f9f1 	bl	1a000b64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001782:	9b05      	ldr	r3, [sp, #20]
1a001784:	9302      	str	r3, [sp, #8]
1a001786:	9b06      	ldr	r3, [sp, #24]
1a001788:	9301      	str	r3, [sp, #4]
1a00178a:	2304      	movs	r3, #4
1a00178c:	9300      	str	r3, [sp, #0]
1a00178e:	4623      	mov	r3, r4
1a001790:	9a07      	ldr	r2, [sp, #28]
1a001792:	490a      	ldr	r1, [pc, #40]	; (1a0017bc <xTimerCreateTimerTask+0x58>)
1a001794:	480a      	ldr	r0, [pc, #40]	; (1a0017c0 <xTimerCreateTimerTask+0x5c>)
1a001796:	f7ff fb7f 	bl	1a000e98 <xTaskCreateStatic>
1a00179a:	4b0a      	ldr	r3, [pc, #40]	; (1a0017c4 <xTimerCreateTimerTask+0x60>)
1a00179c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00179e:	b110      	cbz	r0, 1a0017a6 <xTimerCreateTimerTask+0x42>
}
1a0017a0:	2001      	movs	r0, #1
1a0017a2:	b008      	add	sp, #32
1a0017a4:	bd10      	pop	{r4, pc}
1a0017a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017aa:	f383 8811 	msr	BASEPRI, r3
1a0017ae:	f3bf 8f6f 	isb	sy
1a0017b2:	f3bf 8f4f 	dsb	sy
1a0017b6:	e7fe      	b.n	1a0017b6 <xTimerCreateTimerTask+0x52>
1a0017b8:	10002af0 	.word	0x10002af0
1a0017bc:	1a00368c 	.word	0x1a00368c
1a0017c0:	1a001af5 	.word	0x1a001af5
1a0017c4:	10002af4 	.word	0x10002af4

1a0017c8 <xTimerCreateStatic>:
	{
1a0017c8:	b530      	push	{r4, r5, lr}
1a0017ca:	b085      	sub	sp, #20
1a0017cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a0017ce:	2530      	movs	r5, #48	; 0x30
1a0017d0:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a0017d2:	9d03      	ldr	r5, [sp, #12]
1a0017d4:	2d30      	cmp	r5, #48	; 0x30
1a0017d6:	d008      	beq.n	1a0017ea <xTimerCreateStatic+0x22>
1a0017d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017dc:	f383 8811 	msr	BASEPRI, r3
1a0017e0:	f3bf 8f6f 	isb	sy
1a0017e4:	f3bf 8f4f 	dsb	sy
1a0017e8:	e7fe      	b.n	1a0017e8 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a0017ea:	b944      	cbnz	r4, 1a0017fe <xTimerCreateStatic+0x36>
1a0017ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017f0:	f383 8811 	msr	BASEPRI, r3
1a0017f4:	f3bf 8f6f 	isb	sy
1a0017f8:	f3bf 8f4f 	dsb	sy
1a0017fc:	e7fe      	b.n	1a0017fc <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a0017fe:	9401      	str	r4, [sp, #4]
1a001800:	9d08      	ldr	r5, [sp, #32]
1a001802:	9500      	str	r5, [sp, #0]
1a001804:	f7ff ff8e 	bl	1a001724 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a001808:	2301      	movs	r3, #1
1a00180a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a00180e:	4620      	mov	r0, r4
1a001810:	b005      	add	sp, #20
1a001812:	bd30      	pop	{r4, r5, pc}

1a001814 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001814:	b1c8      	cbz	r0, 1a00184a <xTimerGenericCommand+0x36>
{
1a001816:	b530      	push	{r4, r5, lr}
1a001818:	b085      	sub	sp, #20
1a00181a:	4615      	mov	r5, r2
1a00181c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00181e:	4a17      	ldr	r2, [pc, #92]	; (1a00187c <xTimerGenericCommand+0x68>)
1a001820:	6810      	ldr	r0, [r2, #0]
1a001822:	b340      	cbz	r0, 1a001876 <xTimerGenericCommand+0x62>
1a001824:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001826:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001828:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00182a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00182c:	2905      	cmp	r1, #5
1a00182e:	dc1d      	bgt.n	1a00186c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001830:	f7ff fea4 	bl	1a00157c <xTaskGetSchedulerState>
1a001834:	2802      	cmp	r0, #2
1a001836:	d011      	beq.n	1a00185c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001838:	2300      	movs	r3, #0
1a00183a:	461a      	mov	r2, r3
1a00183c:	4669      	mov	r1, sp
1a00183e:	480f      	ldr	r0, [pc, #60]	; (1a00187c <xTimerGenericCommand+0x68>)
1a001840:	6800      	ldr	r0, [r0, #0]
1a001842:	f7fe ff2d 	bl	1a0006a0 <xQueueGenericSend>
}
1a001846:	b005      	add	sp, #20
1a001848:	bd30      	pop	{r4, r5, pc}
1a00184a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00184e:	f383 8811 	msr	BASEPRI, r3
1a001852:	f3bf 8f6f 	isb	sy
1a001856:	f3bf 8f4f 	dsb	sy
1a00185a:	e7fe      	b.n	1a00185a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a00185c:	2300      	movs	r3, #0
1a00185e:	9a08      	ldr	r2, [sp, #32]
1a001860:	4669      	mov	r1, sp
1a001862:	4806      	ldr	r0, [pc, #24]	; (1a00187c <xTimerGenericCommand+0x68>)
1a001864:	6800      	ldr	r0, [r0, #0]
1a001866:	f7fe ff1b 	bl	1a0006a0 <xQueueGenericSend>
1a00186a:	e7ec      	b.n	1a001846 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a00186c:	2300      	movs	r3, #0
1a00186e:	4669      	mov	r1, sp
1a001870:	f7fe ffd4 	bl	1a00081c <xQueueGenericSendFromISR>
1a001874:	e7e7      	b.n	1a001846 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001876:	2000      	movs	r0, #0
	return xReturn;
1a001878:	e7e5      	b.n	1a001846 <xTimerGenericCommand+0x32>
1a00187a:	bf00      	nop
1a00187c:	10002af0 	.word	0x10002af0

1a001880 <prvSwitchTimerLists>:
{
1a001880:	b570      	push	{r4, r5, r6, lr}
1a001882:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001884:	4b1a      	ldr	r3, [pc, #104]	; (1a0018f0 <prvSwitchTimerLists+0x70>)
1a001886:	681b      	ldr	r3, [r3, #0]
1a001888:	681a      	ldr	r2, [r3, #0]
1a00188a:	b352      	cbz	r2, 1a0018e2 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00188c:	68db      	ldr	r3, [r3, #12]
1a00188e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001890:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001892:	1d25      	adds	r5, r4, #4
1a001894:	4628      	mov	r0, r5
1a001896:	f7ff f944 	bl	1a000b22 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00189a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00189c:	4620      	mov	r0, r4
1a00189e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0018a0:	69e3      	ldr	r3, [r4, #28]
1a0018a2:	2b01      	cmp	r3, #1
1a0018a4:	d1ee      	bne.n	1a001884 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0018a6:	69a3      	ldr	r3, [r4, #24]
1a0018a8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0018aa:	429e      	cmp	r6, r3
1a0018ac:	d207      	bcs.n	1a0018be <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0018ae:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0018b0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0018b2:	4629      	mov	r1, r5
1a0018b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0018f0 <prvSwitchTimerLists+0x70>)
1a0018b6:	6818      	ldr	r0, [r3, #0]
1a0018b8:	f7ff f919 	bl	1a000aee <vListInsert>
1a0018bc:	e7e2      	b.n	1a001884 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0018be:	2100      	movs	r1, #0
1a0018c0:	9100      	str	r1, [sp, #0]
1a0018c2:	460b      	mov	r3, r1
1a0018c4:	4632      	mov	r2, r6
1a0018c6:	4620      	mov	r0, r4
1a0018c8:	f7ff ffa4 	bl	1a001814 <xTimerGenericCommand>
				configASSERT( xResult );
1a0018cc:	2800      	cmp	r0, #0
1a0018ce:	d1d9      	bne.n	1a001884 <prvSwitchTimerLists+0x4>
1a0018d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018d4:	f383 8811 	msr	BASEPRI, r3
1a0018d8:	f3bf 8f6f 	isb	sy
1a0018dc:	f3bf 8f4f 	dsb	sy
1a0018e0:	e7fe      	b.n	1a0018e0 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0018e2:	4a04      	ldr	r2, [pc, #16]	; (1a0018f4 <prvSwitchTimerLists+0x74>)
1a0018e4:	6810      	ldr	r0, [r2, #0]
1a0018e6:	4902      	ldr	r1, [pc, #8]	; (1a0018f0 <prvSwitchTimerLists+0x70>)
1a0018e8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0018ea:	6013      	str	r3, [r2, #0]
}
1a0018ec:	b002      	add	sp, #8
1a0018ee:	bd70      	pop	{r4, r5, r6, pc}
1a0018f0:	100029cc 	.word	0x100029cc
1a0018f4:	100029d0 	.word	0x100029d0

1a0018f8 <prvSampleTimeNow>:
{
1a0018f8:	b538      	push	{r3, r4, r5, lr}
1a0018fa:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0018fc:	f7ff fb8a 	bl	1a001014 <xTaskGetTickCount>
1a001900:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001902:	4b07      	ldr	r3, [pc, #28]	; (1a001920 <prvSampleTimeNow+0x28>)
1a001904:	681b      	ldr	r3, [r3, #0]
1a001906:	4283      	cmp	r3, r0
1a001908:	d805      	bhi.n	1a001916 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00190a:	2300      	movs	r3, #0
1a00190c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00190e:	4b04      	ldr	r3, [pc, #16]	; (1a001920 <prvSampleTimeNow+0x28>)
1a001910:	601c      	str	r4, [r3, #0]
}
1a001912:	4620      	mov	r0, r4
1a001914:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001916:	f7ff ffb3 	bl	1a001880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00191a:	2301      	movs	r3, #1
1a00191c:	602b      	str	r3, [r5, #0]
1a00191e:	e7f6      	b.n	1a00190e <prvSampleTimeNow+0x16>
1a001920:	10002a9c 	.word	0x10002a9c

1a001924 <prvProcessExpiredTimer>:
{
1a001924:	b570      	push	{r4, r5, r6, lr}
1a001926:	b082      	sub	sp, #8
1a001928:	4605      	mov	r5, r0
1a00192a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00192c:	4b14      	ldr	r3, [pc, #80]	; (1a001980 <prvProcessExpiredTimer+0x5c>)
1a00192e:	681b      	ldr	r3, [r3, #0]
1a001930:	68db      	ldr	r3, [r3, #12]
1a001932:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001934:	1d20      	adds	r0, r4, #4
1a001936:	f7ff f8f4 	bl	1a000b22 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00193a:	69e3      	ldr	r3, [r4, #28]
1a00193c:	2b01      	cmp	r3, #1
1a00193e:	d004      	beq.n	1a00194a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001940:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001942:	4620      	mov	r0, r4
1a001944:	4798      	blx	r3
}
1a001946:	b002      	add	sp, #8
1a001948:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00194a:	69a1      	ldr	r1, [r4, #24]
1a00194c:	462b      	mov	r3, r5
1a00194e:	4632      	mov	r2, r6
1a001950:	4429      	add	r1, r5
1a001952:	4620      	mov	r0, r4
1a001954:	f7ff fe8a 	bl	1a00166c <prvInsertTimerInActiveList>
1a001958:	2800      	cmp	r0, #0
1a00195a:	d0f1      	beq.n	1a001940 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00195c:	2100      	movs	r1, #0
1a00195e:	9100      	str	r1, [sp, #0]
1a001960:	460b      	mov	r3, r1
1a001962:	462a      	mov	r2, r5
1a001964:	4620      	mov	r0, r4
1a001966:	f7ff ff55 	bl	1a001814 <xTimerGenericCommand>
			configASSERT( xResult );
1a00196a:	2800      	cmp	r0, #0
1a00196c:	d1e8      	bne.n	1a001940 <prvProcessExpiredTimer+0x1c>
1a00196e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001972:	f383 8811 	msr	BASEPRI, r3
1a001976:	f3bf 8f6f 	isb	sy
1a00197a:	f3bf 8f4f 	dsb	sy
1a00197e:	e7fe      	b.n	1a00197e <prvProcessExpiredTimer+0x5a>
1a001980:	100029cc 	.word	0x100029cc

1a001984 <prvProcessTimerOrBlockTask>:
{
1a001984:	b570      	push	{r4, r5, r6, lr}
1a001986:	b082      	sub	sp, #8
1a001988:	4606      	mov	r6, r0
1a00198a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00198c:	f7ff fb3a 	bl	1a001004 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001990:	a801      	add	r0, sp, #4
1a001992:	f7ff ffb1 	bl	1a0018f8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001996:	9b01      	ldr	r3, [sp, #4]
1a001998:	bb1b      	cbnz	r3, 1a0019e2 <prvProcessTimerOrBlockTask+0x5e>
1a00199a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00199c:	b90c      	cbnz	r4, 1a0019a2 <prvProcessTimerOrBlockTask+0x1e>
1a00199e:	42b0      	cmp	r0, r6
1a0019a0:	d218      	bcs.n	1a0019d4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a0019a2:	b12c      	cbz	r4, 1a0019b0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a0019a4:	4b11      	ldr	r3, [pc, #68]	; (1a0019ec <prvProcessTimerOrBlockTask+0x68>)
1a0019a6:	681b      	ldr	r3, [r3, #0]
1a0019a8:	681c      	ldr	r4, [r3, #0]
1a0019aa:	fab4 f484 	clz	r4, r4
1a0019ae:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a0019b0:	4622      	mov	r2, r4
1a0019b2:	1b71      	subs	r1, r6, r5
1a0019b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0019f0 <prvProcessTimerOrBlockTask+0x6c>)
1a0019b6:	6818      	ldr	r0, [r3, #0]
1a0019b8:	f7ff f856 	bl	1a000a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a0019bc:	f7ff fbbc 	bl	1a001138 <xTaskResumeAll>
1a0019c0:	b988      	cbnz	r0, 1a0019e6 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a0019c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0019f4 <prvProcessTimerOrBlockTask+0x70>)
1a0019c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019c8:	601a      	str	r2, [r3, #0]
1a0019ca:	f3bf 8f4f 	dsb	sy
1a0019ce:	f3bf 8f6f 	isb	sy
1a0019d2:	e008      	b.n	1a0019e6 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0019d4:	f7ff fbb0 	bl	1a001138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0019d8:	4629      	mov	r1, r5
1a0019da:	4630      	mov	r0, r6
1a0019dc:	f7ff ffa2 	bl	1a001924 <prvProcessExpiredTimer>
1a0019e0:	e001      	b.n	1a0019e6 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0019e2:	f7ff fba9 	bl	1a001138 <xTaskResumeAll>
}
1a0019e6:	b002      	add	sp, #8
1a0019e8:	bd70      	pop	{r4, r5, r6, pc}
1a0019ea:	bf00      	nop
1a0019ec:	100029d0 	.word	0x100029d0
1a0019f0:	10002af0 	.word	0x10002af0
1a0019f4:	e000ed04 	.word	0xe000ed04

1a0019f8 <prvProcessReceivedCommands>:
{
1a0019f8:	b530      	push	{r4, r5, lr}
1a0019fa:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0019fc:	e002      	b.n	1a001a04 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0019fe:	9b04      	ldr	r3, [sp, #16]
1a001a00:	2b00      	cmp	r3, #0
1a001a02:	da0f      	bge.n	1a001a24 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001a04:	2200      	movs	r2, #0
1a001a06:	a904      	add	r1, sp, #16
1a001a08:	4b39      	ldr	r3, [pc, #228]	; (1a001af0 <prvProcessReceivedCommands+0xf8>)
1a001a0a:	6818      	ldr	r0, [r3, #0]
1a001a0c:	f7fe ff6c 	bl	1a0008e8 <xQueueReceive>
1a001a10:	2800      	cmp	r0, #0
1a001a12:	d06a      	beq.n	1a001aea <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001a14:	9b04      	ldr	r3, [sp, #16]
1a001a16:	2b00      	cmp	r3, #0
1a001a18:	daf1      	bge.n	1a0019fe <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001a1a:	9907      	ldr	r1, [sp, #28]
1a001a1c:	9806      	ldr	r0, [sp, #24]
1a001a1e:	9b05      	ldr	r3, [sp, #20]
1a001a20:	4798      	blx	r3
1a001a22:	e7ec      	b.n	1a0019fe <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001a24:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001a26:	6963      	ldr	r3, [r4, #20]
1a001a28:	b113      	cbz	r3, 1a001a30 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001a2a:	1d20      	adds	r0, r4, #4
1a001a2c:	f7ff f879 	bl	1a000b22 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001a30:	a803      	add	r0, sp, #12
1a001a32:	f7ff ff61 	bl	1a0018f8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001a36:	9b04      	ldr	r3, [sp, #16]
1a001a38:	2b09      	cmp	r3, #9
1a001a3a:	d8e3      	bhi.n	1a001a04 <prvProcessReceivedCommands+0xc>
1a001a3c:	a201      	add	r2, pc, #4	; (adr r2, 1a001a44 <prvProcessReceivedCommands+0x4c>)
1a001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001a42:	bf00      	nop
1a001a44:	1a001a6d 	.word	0x1a001a6d
1a001a48:	1a001a6d 	.word	0x1a001a6d
1a001a4c:	1a001a6d 	.word	0x1a001a6d
1a001a50:	1a001a05 	.word	0x1a001a05
1a001a54:	1a001ab5 	.word	0x1a001ab5
1a001a58:	1a001adb 	.word	0x1a001adb
1a001a5c:	1a001a6d 	.word	0x1a001a6d
1a001a60:	1a001a6d 	.word	0x1a001a6d
1a001a64:	1a001a05 	.word	0x1a001a05
1a001a68:	1a001ab5 	.word	0x1a001ab5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001a6c:	9905      	ldr	r1, [sp, #20]
1a001a6e:	69a5      	ldr	r5, [r4, #24]
1a001a70:	460b      	mov	r3, r1
1a001a72:	4602      	mov	r2, r0
1a001a74:	4429      	add	r1, r5
1a001a76:	4620      	mov	r0, r4
1a001a78:	f7ff fdf8 	bl	1a00166c <prvInsertTimerInActiveList>
1a001a7c:	2800      	cmp	r0, #0
1a001a7e:	d0c1      	beq.n	1a001a04 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a82:	4620      	mov	r0, r4
1a001a84:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001a86:	69e3      	ldr	r3, [r4, #28]
1a001a88:	2b01      	cmp	r3, #1
1a001a8a:	d1bb      	bne.n	1a001a04 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001a8c:	69a2      	ldr	r2, [r4, #24]
1a001a8e:	2100      	movs	r1, #0
1a001a90:	9100      	str	r1, [sp, #0]
1a001a92:	460b      	mov	r3, r1
1a001a94:	9805      	ldr	r0, [sp, #20]
1a001a96:	4402      	add	r2, r0
1a001a98:	4620      	mov	r0, r4
1a001a9a:	f7ff febb 	bl	1a001814 <xTimerGenericCommand>
							configASSERT( xResult );
1a001a9e:	2800      	cmp	r0, #0
1a001aa0:	d1b0      	bne.n	1a001a04 <prvProcessReceivedCommands+0xc>
1a001aa2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa6:	f383 8811 	msr	BASEPRI, r3
1a001aaa:	f3bf 8f6f 	isb	sy
1a001aae:	f3bf 8f4f 	dsb	sy
1a001ab2:	e7fe      	b.n	1a001ab2 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001ab4:	9905      	ldr	r1, [sp, #20]
1a001ab6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001ab8:	b131      	cbz	r1, 1a001ac8 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001aba:	4603      	mov	r3, r0
1a001abc:	4602      	mov	r2, r0
1a001abe:	4401      	add	r1, r0
1a001ac0:	4620      	mov	r0, r4
1a001ac2:	f7ff fdd3 	bl	1a00166c <prvInsertTimerInActiveList>
					break;
1a001ac6:	e79d      	b.n	1a001a04 <prvProcessReceivedCommands+0xc>
1a001ac8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001acc:	f383 8811 	msr	BASEPRI, r3
1a001ad0:	f3bf 8f6f 	isb	sy
1a001ad4:	f3bf 8f4f 	dsb	sy
1a001ad8:	e7fe      	b.n	1a001ad8 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001ada:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001ade:	2b00      	cmp	r3, #0
1a001ae0:	d190      	bne.n	1a001a04 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001ae2:	4620      	mov	r0, r4
1a001ae4:	f7fe fc94 	bl	1a000410 <vPortFree>
1a001ae8:	e78c      	b.n	1a001a04 <prvProcessReceivedCommands+0xc>
}
1a001aea:	b009      	add	sp, #36	; 0x24
1a001aec:	bd30      	pop	{r4, r5, pc}
1a001aee:	bf00      	nop
1a001af0:	10002af0 	.word	0x10002af0

1a001af4 <prvTimerTask>:
{
1a001af4:	b500      	push	{lr}
1a001af6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001af8:	a801      	add	r0, sp, #4
1a001afa:	f7ff fda7 	bl	1a00164c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001afe:	9901      	ldr	r1, [sp, #4]
1a001b00:	f7ff ff40 	bl	1a001984 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001b04:	f7ff ff78 	bl	1a0019f8 <prvProcessReceivedCommands>
1a001b08:	e7f6      	b.n	1a001af8 <prvTimerTask+0x4>
1a001b0a:	Address 0x000000001a001b0a is out of bounds.


1a001b0c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001b0c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001b0e:	2300      	movs	r3, #0
1a001b10:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001b12:	4b0d      	ldr	r3, [pc, #52]	; (1a001b48 <prvTaskExitError+0x3c>)
1a001b14:	681b      	ldr	r3, [r3, #0]
1a001b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b1a:	d008      	beq.n	1a001b2e <prvTaskExitError+0x22>
1a001b1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b20:	f383 8811 	msr	BASEPRI, r3
1a001b24:	f3bf 8f6f 	isb	sy
1a001b28:	f3bf 8f4f 	dsb	sy
1a001b2c:	e7fe      	b.n	1a001b2c <prvTaskExitError+0x20>
1a001b2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b32:	f383 8811 	msr	BASEPRI, r3
1a001b36:	f3bf 8f6f 	isb	sy
1a001b3a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001b3e:	9b01      	ldr	r3, [sp, #4]
1a001b40:	2b00      	cmp	r3, #0
1a001b42:	d0fc      	beq.n	1a001b3e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001b44:	b002      	add	sp, #8
1a001b46:	4770      	bx	lr
1a001b48:	10000000 	.word	0x10000000

1a001b4c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001b4c:	4808      	ldr	r0, [pc, #32]	; (1a001b70 <prvPortStartFirstTask+0x24>)
1a001b4e:	6800      	ldr	r0, [r0, #0]
1a001b50:	6800      	ldr	r0, [r0, #0]
1a001b52:	f380 8808 	msr	MSP, r0
1a001b56:	f04f 0000 	mov.w	r0, #0
1a001b5a:	f380 8814 	msr	CONTROL, r0
1a001b5e:	b662      	cpsie	i
1a001b60:	b661      	cpsie	f
1a001b62:	f3bf 8f4f 	dsb	sy
1a001b66:	f3bf 8f6f 	isb	sy
1a001b6a:	df00      	svc	0
1a001b6c:	bf00      	nop
1a001b6e:	0000      	.short	0x0000
1a001b70:	e000ed08 	.word	0xe000ed08

1a001b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001b84 <vPortEnableVFP+0x10>
1a001b78:	6801      	ldr	r1, [r0, #0]
1a001b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001b7e:	6001      	str	r1, [r0, #0]
1a001b80:	4770      	bx	lr
1a001b82:	0000      	.short	0x0000
1a001b84:	e000ed88 	.word	0xe000ed88

1a001b88 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001b8c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001b90:	f021 0101 	bic.w	r1, r1, #1
1a001b94:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001b98:	4b05      	ldr	r3, [pc, #20]	; (1a001bb0 <pxPortInitialiseStack+0x28>)
1a001b9a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001b9e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001ba2:	f06f 0302 	mvn.w	r3, #2
1a001ba6:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001baa:	3844      	subs	r0, #68	; 0x44
1a001bac:	4770      	bx	lr
1a001bae:	bf00      	nop
1a001bb0:	1a001b0d 	.word	0x1a001b0d
1a001bb4:	ffffffff 	.word	0xffffffff
1a001bb8:	ffffffff 	.word	0xffffffff
1a001bbc:	ffffffff 	.word	0xffffffff

1a001bc0 <SVC_Handler>:
	__asm volatile (
1a001bc0:	4b07      	ldr	r3, [pc, #28]	; (1a001be0 <pxCurrentTCBConst2>)
1a001bc2:	6819      	ldr	r1, [r3, #0]
1a001bc4:	6808      	ldr	r0, [r1, #0]
1a001bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001bca:	f380 8809 	msr	PSP, r0
1a001bce:	f3bf 8f6f 	isb	sy
1a001bd2:	f04f 0000 	mov.w	r0, #0
1a001bd6:	f380 8811 	msr	BASEPRI, r0
1a001bda:	4770      	bx	lr
1a001bdc:	f3af 8000 	nop.w

1a001be0 <pxCurrentTCBConst2>:
1a001be0:	100028a4 	.word	0x100028a4

1a001be4 <vPortEnterCritical>:
1a001be4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be8:	f383 8811 	msr	BASEPRI, r3
1a001bec:	f3bf 8f6f 	isb	sy
1a001bf0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001bf4:	4a0a      	ldr	r2, [pc, #40]	; (1a001c20 <vPortEnterCritical+0x3c>)
1a001bf6:	6813      	ldr	r3, [r2, #0]
1a001bf8:	3301      	adds	r3, #1
1a001bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001bfc:	2b01      	cmp	r3, #1
1a001bfe:	d000      	beq.n	1a001c02 <vPortEnterCritical+0x1e>
}
1a001c00:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001c02:	4b08      	ldr	r3, [pc, #32]	; (1a001c24 <vPortEnterCritical+0x40>)
1a001c04:	681b      	ldr	r3, [r3, #0]
1a001c06:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001c0a:	d0f9      	beq.n	1a001c00 <vPortEnterCritical+0x1c>
1a001c0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c10:	f383 8811 	msr	BASEPRI, r3
1a001c14:	f3bf 8f6f 	isb	sy
1a001c18:	f3bf 8f4f 	dsb	sy
1a001c1c:	e7fe      	b.n	1a001c1c <vPortEnterCritical+0x38>
1a001c1e:	bf00      	nop
1a001c20:	10000000 	.word	0x10000000
1a001c24:	e000ed04 	.word	0xe000ed04

1a001c28 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001c28:	4b09      	ldr	r3, [pc, #36]	; (1a001c50 <vPortExitCritical+0x28>)
1a001c2a:	681b      	ldr	r3, [r3, #0]
1a001c2c:	b943      	cbnz	r3, 1a001c40 <vPortExitCritical+0x18>
1a001c2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c32:	f383 8811 	msr	BASEPRI, r3
1a001c36:	f3bf 8f6f 	isb	sy
1a001c3a:	f3bf 8f4f 	dsb	sy
1a001c3e:	e7fe      	b.n	1a001c3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001c40:	3b01      	subs	r3, #1
1a001c42:	4a03      	ldr	r2, [pc, #12]	; (1a001c50 <vPortExitCritical+0x28>)
1a001c44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001c46:	b90b      	cbnz	r3, 1a001c4c <vPortExitCritical+0x24>
	__asm volatile
1a001c48:	f383 8811 	msr	BASEPRI, r3
}
1a001c4c:	4770      	bx	lr
1a001c4e:	bf00      	nop
1a001c50:	10000000 	.word	0x10000000
1a001c54:	ffffffff 	.word	0xffffffff
1a001c58:	ffffffff 	.word	0xffffffff
1a001c5c:	ffffffff 	.word	0xffffffff

1a001c60 <PendSV_Handler>:
	__asm volatile
1a001c60:	f3ef 8009 	mrs	r0, PSP
1a001c64:	f3bf 8f6f 	isb	sy
1a001c68:	4b15      	ldr	r3, [pc, #84]	; (1a001cc0 <pxCurrentTCBConst>)
1a001c6a:	681a      	ldr	r2, [r3, #0]
1a001c6c:	f01e 0f10 	tst.w	lr, #16
1a001c70:	bf08      	it	eq
1a001c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c7a:	6010      	str	r0, [r2, #0]
1a001c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001c80:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001c84:	f380 8811 	msr	BASEPRI, r0
1a001c88:	f3bf 8f4f 	dsb	sy
1a001c8c:	f3bf 8f6f 	isb	sy
1a001c90:	f7ff fb44 	bl	1a00131c <vTaskSwitchContext>
1a001c94:	f04f 0000 	mov.w	r0, #0
1a001c98:	f380 8811 	msr	BASEPRI, r0
1a001c9c:	bc09      	pop	{r0, r3}
1a001c9e:	6819      	ldr	r1, [r3, #0]
1a001ca0:	6808      	ldr	r0, [r1, #0]
1a001ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001ca6:	f01e 0f10 	tst.w	lr, #16
1a001caa:	bf08      	it	eq
1a001cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001cb0:	f380 8809 	msr	PSP, r0
1a001cb4:	f3bf 8f6f 	isb	sy
1a001cb8:	4770      	bx	lr
1a001cba:	bf00      	nop
1a001cbc:	f3af 8000 	nop.w

1a001cc0 <pxCurrentTCBConst>:
1a001cc0:	100028a4 	.word	0x100028a4

1a001cc4 <SysTick_Handler>:
{
1a001cc4:	b508      	push	{r3, lr}
	__asm volatile
1a001cc6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cca:	f383 8811 	msr	BASEPRI, r3
1a001cce:	f3bf 8f6f 	isb	sy
1a001cd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a001cd6:	f7ff f9a3 	bl	1a001020 <xTaskIncrementTick>
1a001cda:	b118      	cbz	r0, 1a001ce4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a001cdc:	4b03      	ldr	r3, [pc, #12]	; (1a001cec <SysTick_Handler+0x28>)
1a001cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ce2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a001ce4:	2300      	movs	r3, #0
1a001ce6:	f383 8811 	msr	BASEPRI, r3
}
1a001cea:	bd08      	pop	{r3, pc}
1a001cec:	e000ed04 	.word	0xe000ed04

1a001cf0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a001cf0:	4a08      	ldr	r2, [pc, #32]	; (1a001d14 <vPortSetupTimerInterrupt+0x24>)
1a001cf2:	2300      	movs	r3, #0
1a001cf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001cf6:	4908      	ldr	r1, [pc, #32]	; (1a001d18 <vPortSetupTimerInterrupt+0x28>)
1a001cf8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001cfa:	4b08      	ldr	r3, [pc, #32]	; (1a001d1c <vPortSetupTimerInterrupt+0x2c>)
1a001cfc:	681b      	ldr	r3, [r3, #0]
1a001cfe:	4908      	ldr	r1, [pc, #32]	; (1a001d20 <vPortSetupTimerInterrupt+0x30>)
1a001d00:	fba1 1303 	umull	r1, r3, r1, r3
1a001d04:	099b      	lsrs	r3, r3, #6
1a001d06:	3b01      	subs	r3, #1
1a001d08:	4906      	ldr	r1, [pc, #24]	; (1a001d24 <vPortSetupTimerInterrupt+0x34>)
1a001d0a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a001d0c:	2307      	movs	r3, #7
1a001d0e:	6013      	str	r3, [r2, #0]
}
1a001d10:	4770      	bx	lr
1a001d12:	bf00      	nop
1a001d14:	e000e010 	.word	0xe000e010
1a001d18:	e000e018 	.word	0xe000e018
1a001d1c:	10002b94 	.word	0x10002b94
1a001d20:	10624dd3 	.word	0x10624dd3
1a001d24:	e000e014 	.word	0xe000e014

1a001d28 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001d28:	4b3a      	ldr	r3, [pc, #232]	; (1a001e14 <xPortStartScheduler+0xec>)
1a001d2a:	681a      	ldr	r2, [r3, #0]
1a001d2c:	4b3a      	ldr	r3, [pc, #232]	; (1a001e18 <xPortStartScheduler+0xf0>)
1a001d2e:	429a      	cmp	r2, r3
1a001d30:	d00d      	beq.n	1a001d4e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001d32:	4b38      	ldr	r3, [pc, #224]	; (1a001e14 <xPortStartScheduler+0xec>)
1a001d34:	681a      	ldr	r2, [r3, #0]
1a001d36:	4b39      	ldr	r3, [pc, #228]	; (1a001e1c <xPortStartScheduler+0xf4>)
1a001d38:	429a      	cmp	r2, r3
1a001d3a:	d111      	bne.n	1a001d60 <xPortStartScheduler+0x38>
	__asm volatile
1a001d3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d40:	f383 8811 	msr	BASEPRI, r3
1a001d44:	f3bf 8f6f 	isb	sy
1a001d48:	f3bf 8f4f 	dsb	sy
1a001d4c:	e7fe      	b.n	1a001d4c <xPortStartScheduler+0x24>
1a001d4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d52:	f383 8811 	msr	BASEPRI, r3
1a001d56:	f3bf 8f6f 	isb	sy
1a001d5a:	f3bf 8f4f 	dsb	sy
1a001d5e:	e7fe      	b.n	1a001d5e <xPortStartScheduler+0x36>
{
1a001d60:	b510      	push	{r4, lr}
1a001d62:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001d64:	4b2e      	ldr	r3, [pc, #184]	; (1a001e20 <xPortStartScheduler+0xf8>)
1a001d66:	781a      	ldrb	r2, [r3, #0]
1a001d68:	b2d2      	uxtb	r2, r2
1a001d6a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a001d6c:	22ff      	movs	r2, #255	; 0xff
1a001d6e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a001d70:	781b      	ldrb	r3, [r3, #0]
1a001d72:	b2db      	uxtb	r3, r3
1a001d74:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001d78:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001d7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a001d80:	4a28      	ldr	r2, [pc, #160]	; (1a001e24 <xPortStartScheduler+0xfc>)
1a001d82:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001d84:	4b28      	ldr	r3, [pc, #160]	; (1a001e28 <xPortStartScheduler+0x100>)
1a001d86:	2207      	movs	r2, #7
1a001d88:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001d8a:	e009      	b.n	1a001da0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a001d8c:	4a26      	ldr	r2, [pc, #152]	; (1a001e28 <xPortStartScheduler+0x100>)
1a001d8e:	6813      	ldr	r3, [r2, #0]
1a001d90:	3b01      	subs	r3, #1
1a001d92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a001d94:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001d98:	005b      	lsls	r3, r3, #1
1a001d9a:	b2db      	uxtb	r3, r3
1a001d9c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001da0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001da4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001da8:	d1f0      	bne.n	1a001d8c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a001daa:	4b1f      	ldr	r3, [pc, #124]	; (1a001e28 <xPortStartScheduler+0x100>)
1a001dac:	681b      	ldr	r3, [r3, #0]
1a001dae:	2b04      	cmp	r3, #4
1a001db0:	d008      	beq.n	1a001dc4 <xPortStartScheduler+0x9c>
1a001db2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001db6:	f383 8811 	msr	BASEPRI, r3
1a001dba:	f3bf 8f6f 	isb	sy
1a001dbe:	f3bf 8f4f 	dsb	sy
1a001dc2:	e7fe      	b.n	1a001dc2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a001dc4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a001dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001dca:	4a17      	ldr	r2, [pc, #92]	; (1a001e28 <xPortStartScheduler+0x100>)
1a001dcc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a001dce:	9b01      	ldr	r3, [sp, #4]
1a001dd0:	b2db      	uxtb	r3, r3
1a001dd2:	4a13      	ldr	r2, [pc, #76]	; (1a001e20 <xPortStartScheduler+0xf8>)
1a001dd4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a001dd6:	4b15      	ldr	r3, [pc, #84]	; (1a001e2c <xPortStartScheduler+0x104>)
1a001dd8:	681a      	ldr	r2, [r3, #0]
1a001dda:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a001dde:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a001de0:	681a      	ldr	r2, [r3, #0]
1a001de2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a001de6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a001de8:	f7ff ff82 	bl	1a001cf0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a001dec:	2400      	movs	r4, #0
1a001dee:	4b10      	ldr	r3, [pc, #64]	; (1a001e30 <xPortStartScheduler+0x108>)
1a001df0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a001df2:	f7ff febf 	bl	1a001b74 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a001df6:	4a0f      	ldr	r2, [pc, #60]	; (1a001e34 <xPortStartScheduler+0x10c>)
1a001df8:	6813      	ldr	r3, [r2, #0]
1a001dfa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a001dfe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a001e00:	f7ff fea4 	bl	1a001b4c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a001e04:	f7ff fa8a 	bl	1a00131c <vTaskSwitchContext>
	prvTaskExitError();
1a001e08:	f7ff fe80 	bl	1a001b0c <prvTaskExitError>
}
1a001e0c:	4620      	mov	r0, r4
1a001e0e:	b002      	add	sp, #8
1a001e10:	bd10      	pop	{r4, pc}
1a001e12:	bf00      	nop
1a001e14:	e000ed00 	.word	0xe000ed00
1a001e18:	410fc271 	.word	0x410fc271
1a001e1c:	410fc270 	.word	0x410fc270
1a001e20:	e000e400 	.word	0xe000e400
1a001e24:	10002af8 	.word	0x10002af8
1a001e28:	10002afc 	.word	0x10002afc
1a001e2c:	e000ed20 	.word	0xe000ed20
1a001e30:	10000000 	.word	0x10000000
1a001e34:	e000ef34 	.word	0xe000ef34

1a001e38 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a001e38:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a001e3c:	2b0f      	cmp	r3, #15
1a001e3e:	d90f      	bls.n	1a001e60 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a001e40:	4a10      	ldr	r2, [pc, #64]	; (1a001e84 <vPortValidateInterruptPriority+0x4c>)
1a001e42:	5c9b      	ldrb	r3, [r3, r2]
1a001e44:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a001e46:	4a10      	ldr	r2, [pc, #64]	; (1a001e88 <vPortValidateInterruptPriority+0x50>)
1a001e48:	7812      	ldrb	r2, [r2, #0]
1a001e4a:	429a      	cmp	r2, r3
1a001e4c:	d908      	bls.n	1a001e60 <vPortValidateInterruptPriority+0x28>
1a001e4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e52:	f383 8811 	msr	BASEPRI, r3
1a001e56:	f3bf 8f6f 	isb	sy
1a001e5a:	f3bf 8f4f 	dsb	sy
1a001e5e:	e7fe      	b.n	1a001e5e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a001e60:	4b0a      	ldr	r3, [pc, #40]	; (1a001e8c <vPortValidateInterruptPriority+0x54>)
1a001e62:	681b      	ldr	r3, [r3, #0]
1a001e64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001e68:	4a09      	ldr	r2, [pc, #36]	; (1a001e90 <vPortValidateInterruptPriority+0x58>)
1a001e6a:	6812      	ldr	r2, [r2, #0]
1a001e6c:	4293      	cmp	r3, r2
1a001e6e:	d908      	bls.n	1a001e82 <vPortValidateInterruptPriority+0x4a>
1a001e70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e74:	f383 8811 	msr	BASEPRI, r3
1a001e78:	f3bf 8f6f 	isb	sy
1a001e7c:	f3bf 8f4f 	dsb	sy
1a001e80:	e7fe      	b.n	1a001e80 <vPortValidateInterruptPriority+0x48>
	}
1a001e82:	4770      	bx	lr
1a001e84:	e000e3f0 	.word	0xe000e3f0
1a001e88:	10002af8 	.word	0x10002af8
1a001e8c:	e000ed0c 	.word	0xe000ed0c
1a001e90:	10002afc 	.word	0x10002afc

1a001e94 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001e94:	4b04      	ldr	r3, [pc, #16]	; (1a001ea8 <cyclesCounterInit+0x14>)
1a001e96:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001e98:	4b04      	ldr	r3, [pc, #16]	; (1a001eac <cyclesCounterInit+0x18>)
1a001e9a:	681a      	ldr	r2, [r3, #0]
1a001e9c:	6813      	ldr	r3, [r2, #0]
1a001e9e:	f043 0301 	orr.w	r3, r3, #1
1a001ea2:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001ea4:	2001      	movs	r0, #1
1a001ea6:	4770      	bx	lr
1a001ea8:	10000004 	.word	0x10000004
1a001eac:	10000008 	.word	0x10000008

1a001eb0 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001eb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001eb4:	0083      	lsls	r3, r0, #2
1a001eb6:	4a03      	ldr	r2, [pc, #12]	; (1a001ec4 <uartTxReady+0x14>)
1a001eb8:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001eba:	6958      	ldr	r0, [r3, #20]
}
1a001ebc:	f000 0020 	and.w	r0, r0, #32
1a001ec0:	4770      	bx	lr
1a001ec2:	bf00      	nop
1a001ec4:	1a003694 	.word	0x1a003694

1a001ec8 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001ec8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001ecc:	0083      	lsls	r3, r0, #2
1a001ece:	4a02      	ldr	r2, [pc, #8]	; (1a001ed8 <uartTxWrite+0x10>)
1a001ed0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001ed2:	6019      	str	r1, [r3, #0]
}
1a001ed4:	4770      	bx	lr
1a001ed6:	bf00      	nop
1a001ed8:	1a003694 	.word	0x1a003694

1a001edc <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001ee0:	4680      	mov	r8, r0
1a001ee2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001ee4:	4c19      	ldr	r4, [pc, #100]	; (1a001f4c <uartInit+0x70>)
1a001ee6:	0045      	lsls	r5, r0, #1
1a001ee8:	182a      	adds	r2, r5, r0
1a001eea:	0093      	lsls	r3, r2, #2
1a001eec:	18e6      	adds	r6, r4, r3
1a001eee:	58e7      	ldr	r7, [r4, r3]
1a001ef0:	4638      	mov	r0, r7
1a001ef2:	f000 fc4f 	bl	1a002794 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001ef6:	4649      	mov	r1, r9
1a001ef8:	4638      	mov	r0, r7
1a001efa:	f000 fc75 	bl	1a0027e8 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001efe:	2307      	movs	r3, #7
1a001f00:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001f02:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001f04:	2301      	movs	r3, #1
1a001f06:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001f08:	7930      	ldrb	r0, [r6, #4]
1a001f0a:	7973      	ldrb	r3, [r6, #5]
1a001f0c:	79b2      	ldrb	r2, [r6, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001f0e:	f042 0218 	orr.w	r2, r2, #24
1a001f12:	490f      	ldr	r1, [pc, #60]	; (1a001f50 <uartInit+0x74>)
1a001f14:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001f1c:	79f0      	ldrb	r0, [r6, #7]
1a001f1e:	7a33      	ldrb	r3, [r6, #8]
1a001f20:	7a72      	ldrb	r2, [r6, #9]
1a001f22:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001f26:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001f2e:	f1b8 0f01 	cmp.w	r8, #1
1a001f32:	d001      	beq.n	1a001f38 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001f38:	4a06      	ldr	r2, [pc, #24]	; (1a001f54 <uartInit+0x78>)
1a001f3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001f3c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001f42:	221a      	movs	r2, #26
1a001f44:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001f48:	e7f4      	b.n	1a001f34 <uartInit+0x58>
1a001f4a:	bf00      	nop
1a001f4c:	1a003694 	.word	0x1a003694
1a001f50:	40086000 	.word	0x40086000
1a001f54:	40081000 	.word	0x40081000

1a001f58 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a001f58:	b538      	push	{r3, r4, r5, lr}
1a001f5a:	4604      	mov	r4, r0
1a001f5c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a001f5e:	4620      	mov	r0, r4
1a001f60:	f7ff ffa6 	bl	1a001eb0 <uartTxReady>
1a001f64:	2800      	cmp	r0, #0
1a001f66:	d0fa      	beq.n	1a001f5e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a001f68:	4629      	mov	r1, r5
1a001f6a:	4620      	mov	r0, r4
1a001f6c:	f7ff ffac 	bl	1a001ec8 <uartTxWrite>
}
1a001f70:	bd38      	pop	{r3, r4, r5, pc}

1a001f72 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a001f72:	b538      	push	{r3, r4, r5, lr}
1a001f74:	4605      	mov	r5, r0
1a001f76:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001f78:	e003      	b.n	1a001f82 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a001f7a:	4628      	mov	r0, r5
1a001f7c:	f7ff ffec 	bl	1a001f58 <uartWriteByte>
      str++;
1a001f80:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a001f82:	7821      	ldrb	r1, [r4, #0]
1a001f84:	2900      	cmp	r1, #0
1a001f86:	d1f8      	bne.n	1a001f7a <uartWriteString+0x8>
   }
}
1a001f88:	bd38      	pop	{r3, r4, r5, pc}
1a001f8a:	Address 0x000000001a001f8a is out of bounds.


1a001f8c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001f8c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001f90:	4908      	ldr	r1, [pc, #32]	; (1a001fb4 <tickerCallback+0x28>)
1a001f92:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001f96:	f112 0b01 	adds.w	fp, r2, #1
1a001f9a:	f143 0c00 	adc.w	ip, r3, #0
1a001f9e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001fa2:	4b05      	ldr	r3, [pc, #20]	; (1a001fb8 <tickerCallback+0x2c>)
1a001fa4:	681b      	ldr	r3, [r3, #0]
1a001fa6:	b113      	cbz	r3, 1a001fae <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001fa8:	4a04      	ldr	r2, [pc, #16]	; (1a001fbc <tickerCallback+0x30>)
1a001faa:	6810      	ldr	r0, [r2, #0]
1a001fac:	4798      	blx	r3
   }
}
1a001fae:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001fb2:	bf00      	nop
1a001fb4:	10002b08 	.word	0x10002b08
1a001fb8:	10002b10 	.word	0x10002b10
1a001fbc:	10002b00 	.word	0x10002b00

1a001fc0 <tickInit>:
{
1a001fc0:	b510      	push	{r4, lr}
1a001fc2:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a001fc4:	4b0e      	ldr	r3, [pc, #56]	; (1a002000 <tickInit+0x40>)
1a001fc6:	9301      	str	r3, [sp, #4]
1a001fc8:	4b0e      	ldr	r3, [pc, #56]	; (1a002004 <tickInit+0x44>)
1a001fca:	9300      	str	r3, [sp, #0]
1a001fcc:	2300      	movs	r3, #0
1a001fce:	2201      	movs	r2, #1
1a001fd0:	4601      	mov	r1, r0
1a001fd2:	480d      	ldr	r0, [pc, #52]	; (1a002008 <tickInit+0x48>)
1a001fd4:	f7ff fbf8 	bl	1a0017c8 <xTimerCreateStatic>
         if (h == NULL)
1a001fd8:	b178      	cbz	r0, 1a001ffa <tickInit+0x3a>
1a001fda:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a001fdc:	f7ff f81a 	bl	1a001014 <xTaskGetTickCount>
1a001fe0:	2300      	movs	r3, #0
1a001fe2:	9300      	str	r3, [sp, #0]
1a001fe4:	4602      	mov	r2, r0
1a001fe6:	2101      	movs	r1, #1
1a001fe8:	4620      	mov	r0, r4
1a001fea:	f7ff fc13 	bl	1a001814 <xTimerGenericCommand>
1a001fee:	2801      	cmp	r0, #1
1a001ff0:	bf14      	ite	ne
1a001ff2:	2000      	movne	r0, #0
1a001ff4:	2001      	moveq	r0, #1
}
1a001ff6:	b002      	add	sp, #8
1a001ff8:	bd10      	pop	{r4, pc}
            return 0;
1a001ffa:	2000      	movs	r0, #0
1a001ffc:	e7fb      	b.n	1a001ff6 <tickInit+0x36>
1a001ffe:	bf00      	nop
1a002000:	10002b14 	.word	0x10002b14
1a002004:	1a001f8d 	.word	0x1a001f8d
1a002008:	1a0036dc 	.word	0x1a0036dc

1a00200c <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a00200c:	e7fe      	b.n	1a00200c <errorOcurred>

1a00200e <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a00200e:	4770      	bx	lr

1a002010 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002010:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002012:	2400      	movs	r4, #0
1a002014:	e001      	b.n	1a00201a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002016:	3401      	adds	r4, #1
1a002018:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00201a:	2c03      	cmp	r4, #3
1a00201c:	d812      	bhi.n	1a002044 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00201e:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002020:	4b09      	ldr	r3, [pc, #36]	; (1a002048 <TIMER0_IRQHandler+0x38>)
1a002022:	681a      	ldr	r2, [r3, #0]
1a002024:	f004 010f 	and.w	r1, r4, #15
1a002028:	2301      	movs	r3, #1
1a00202a:	408b      	lsls	r3, r1
1a00202c:	421a      	tst	r2, r3
1a00202e:	d0f2      	beq.n	1a002016 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002030:	4b06      	ldr	r3, [pc, #24]	; (1a00204c <TIMER0_IRQHandler+0x3c>)
1a002032:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002036:	2000      	movs	r0, #0
1a002038:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00203a:	2301      	movs	r3, #1
1a00203c:	40ab      	lsls	r3, r5
1a00203e:	4a02      	ldr	r2, [pc, #8]	; (1a002048 <TIMER0_IRQHandler+0x38>)
1a002040:	6013      	str	r3, [r2, #0]
1a002042:	e7e8      	b.n	1a002016 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002044:	bd38      	pop	{r3, r4, r5, pc}
1a002046:	bf00      	nop
1a002048:	40084000 	.word	0x40084000
1a00204c:	1000000c 	.word	0x1000000c

1a002050 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002050:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002052:	2400      	movs	r4, #0
1a002054:	e001      	b.n	1a00205a <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002056:	3401      	adds	r4, #1
1a002058:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00205a:	2c03      	cmp	r4, #3
1a00205c:	d813      	bhi.n	1a002086 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00205e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002060:	4b09      	ldr	r3, [pc, #36]	; (1a002088 <TIMER1_IRQHandler+0x38>)
1a002062:	681a      	ldr	r2, [r3, #0]
1a002064:	f004 010f 	and.w	r1, r4, #15
1a002068:	2301      	movs	r3, #1
1a00206a:	408b      	lsls	r3, r1
1a00206c:	421a      	tst	r2, r3
1a00206e:	d0f2      	beq.n	1a002056 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002070:	1d23      	adds	r3, r4, #4
1a002072:	4a06      	ldr	r2, [pc, #24]	; (1a00208c <TIMER1_IRQHandler+0x3c>)
1a002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002078:	2000      	movs	r0, #0
1a00207a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00207c:	2301      	movs	r3, #1
1a00207e:	40ab      	lsls	r3, r5
1a002080:	4a01      	ldr	r2, [pc, #4]	; (1a002088 <TIMER1_IRQHandler+0x38>)
1a002082:	6013      	str	r3, [r2, #0]
1a002084:	e7e7      	b.n	1a002056 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002086:	bd38      	pop	{r3, r4, r5, pc}
1a002088:	40085000 	.word	0x40085000
1a00208c:	1000000c 	.word	0x1000000c

1a002090 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002090:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002092:	2400      	movs	r4, #0
1a002094:	e001      	b.n	1a00209a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002096:	3401      	adds	r4, #1
1a002098:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00209a:	2c03      	cmp	r4, #3
1a00209c:	d814      	bhi.n	1a0020c8 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00209e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0020a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0020cc <TIMER2_IRQHandler+0x3c>)
1a0020a2:	681a      	ldr	r2, [r3, #0]
1a0020a4:	f004 010f 	and.w	r1, r4, #15
1a0020a8:	2301      	movs	r3, #1
1a0020aa:	408b      	lsls	r3, r1
1a0020ac:	421a      	tst	r2, r3
1a0020ae:	d0f2      	beq.n	1a002096 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0020b0:	f104 0308 	add.w	r3, r4, #8
1a0020b4:	4a06      	ldr	r2, [pc, #24]	; (1a0020d0 <TIMER2_IRQHandler+0x40>)
1a0020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0020ba:	2000      	movs	r0, #0
1a0020bc:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0020be:	2301      	movs	r3, #1
1a0020c0:	40ab      	lsls	r3, r5
1a0020c2:	4a02      	ldr	r2, [pc, #8]	; (1a0020cc <TIMER2_IRQHandler+0x3c>)
1a0020c4:	6013      	str	r3, [r2, #0]
1a0020c6:	e7e6      	b.n	1a002096 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0020c8:	bd38      	pop	{r3, r4, r5, pc}
1a0020ca:	bf00      	nop
1a0020cc:	400c3000 	.word	0x400c3000
1a0020d0:	1000000c 	.word	0x1000000c

1a0020d4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0020d4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0020d6:	2400      	movs	r4, #0
1a0020d8:	e001      	b.n	1a0020de <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0020da:	3401      	adds	r4, #1
1a0020dc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0020de:	2c03      	cmp	r4, #3
1a0020e0:	d814      	bhi.n	1a00210c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0020e2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0020e4:	4b0a      	ldr	r3, [pc, #40]	; (1a002110 <TIMER3_IRQHandler+0x3c>)
1a0020e6:	681a      	ldr	r2, [r3, #0]
1a0020e8:	f004 010f 	and.w	r1, r4, #15
1a0020ec:	2301      	movs	r3, #1
1a0020ee:	408b      	lsls	r3, r1
1a0020f0:	421a      	tst	r2, r3
1a0020f2:	d0f2      	beq.n	1a0020da <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0020f4:	f104 030c 	add.w	r3, r4, #12
1a0020f8:	4a06      	ldr	r2, [pc, #24]	; (1a002114 <TIMER3_IRQHandler+0x40>)
1a0020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0020fe:	2000      	movs	r0, #0
1a002100:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002102:	2301      	movs	r3, #1
1a002104:	40ab      	lsls	r3, r5
1a002106:	4a02      	ldr	r2, [pc, #8]	; (1a002110 <TIMER3_IRQHandler+0x3c>)
1a002108:	6013      	str	r3, [r2, #0]
1a00210a:	e7e6      	b.n	1a0020da <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a00210c:	bd38      	pop	{r3, r4, r5, pc}
1a00210e:	bf00      	nop
1a002110:	400c4000 	.word	0x400c4000
1a002114:	1000000c 	.word	0x1000000c

1a002118 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002118:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00211a:	4d0b      	ldr	r5, [pc, #44]	; (1a002148 <gpioObtainPinInit+0x30>)
1a00211c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002120:	182c      	adds	r4, r5, r0
1a002122:	5628      	ldrsb	r0, [r5, r0]
1a002124:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002126:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00212a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00212c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002130:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002132:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002136:	9b02      	ldr	r3, [sp, #8]
1a002138:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00213a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00213e:	9b03      	ldr	r3, [sp, #12]
1a002140:	701a      	strb	r2, [r3, #0]
}
1a002142:	bc30      	pop	{r4, r5}
1a002144:	4770      	bx	lr
1a002146:	bf00      	nop
1a002148:	1a0036e8 	.word	0x1a0036e8

1a00214c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00214c:	b570      	push	{r4, r5, r6, lr}
1a00214e:	b084      	sub	sp, #16
1a002150:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002152:	2300      	movs	r3, #0
1a002154:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002158:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00215c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002160:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002164:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002168:	f10d 030b 	add.w	r3, sp, #11
1a00216c:	9301      	str	r3, [sp, #4]
1a00216e:	ab03      	add	r3, sp, #12
1a002170:	9300      	str	r3, [sp, #0]
1a002172:	f10d 030d 	add.w	r3, sp, #13
1a002176:	f10d 020e 	add.w	r2, sp, #14
1a00217a:	f10d 010f 	add.w	r1, sp, #15
1a00217e:	f7ff ffcb 	bl	1a002118 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002182:	2c05      	cmp	r4, #5
1a002184:	f200 80a5 	bhi.w	1a0022d2 <gpioInit+0x186>
1a002188:	e8df f004 	tbb	[pc, r4]
1a00218c:	45278109 	.word	0x45278109
1a002190:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002192:	4851      	ldr	r0, [pc, #324]	; (1a0022d8 <gpioInit+0x18c>)
1a002194:	f000 ff1c 	bl	1a002fd0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002198:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00219a:	b004      	add	sp, #16
1a00219c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00219e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0021aa:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0021ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021b2:	494a      	ldr	r1, [pc, #296]	; (1a0022dc <gpioInit+0x190>)
1a0021b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0021b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0021bc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0021c0:	2001      	movs	r0, #1
1a0021c2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0021c6:	4c44      	ldr	r4, [pc, #272]	; (1a0022d8 <gpioInit+0x18c>)
1a0021c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0021cc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0021d0:	ea22 0201 	bic.w	r2, r2, r1
1a0021d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0021d8:	e7df      	b.n	1a00219a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0021da:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021de:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0021e6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0021ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021ee:	493b      	ldr	r1, [pc, #236]	; (1a0022dc <gpioInit+0x190>)
1a0021f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0021f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0021f8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0021fc:	2001      	movs	r0, #1
1a0021fe:	fa00 f102 	lsl.w	r1, r0, r2
1a002202:	4c35      	ldr	r4, [pc, #212]	; (1a0022d8 <gpioInit+0x18c>)
1a002204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002208:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00220c:	ea22 0201 	bic.w	r2, r2, r1
1a002210:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002214:	e7c1      	b.n	1a00219a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002216:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00221a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00221e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002222:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002226:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00222a:	492c      	ldr	r1, [pc, #176]	; (1a0022dc <gpioInit+0x190>)
1a00222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002230:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002234:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002238:	2001      	movs	r0, #1
1a00223a:	fa00 f102 	lsl.w	r1, r0, r2
1a00223e:	4c26      	ldr	r4, [pc, #152]	; (1a0022d8 <gpioInit+0x18c>)
1a002240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002244:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002248:	ea22 0201 	bic.w	r2, r2, r1
1a00224c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002250:	e7a3      	b.n	1a00219a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002252:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002256:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00225a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00225e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002262:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002266:	491d      	ldr	r1, [pc, #116]	; (1a0022dc <gpioInit+0x190>)
1a002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00226c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002270:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002274:	2001      	movs	r0, #1
1a002276:	fa00 f102 	lsl.w	r1, r0, r2
1a00227a:	4c17      	ldr	r4, [pc, #92]	; (1a0022d8 <gpioInit+0x18c>)
1a00227c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002280:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002284:	ea22 0201 	bic.w	r2, r2, r1
1a002288:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00228c:	e785      	b.n	1a00219a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00228e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002292:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002296:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00229a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00229e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022a2:	490e      	ldr	r1, [pc, #56]	; (1a0022dc <gpioInit+0x190>)
1a0022a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0022a8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0022ac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0022b0:	2001      	movs	r0, #1
1a0022b2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0022b6:	4b08      	ldr	r3, [pc, #32]	; (1a0022d8 <gpioInit+0x18c>)
1a0022b8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0022bc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0022c0:	4331      	orrs	r1, r6
1a0022c2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0022c6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0022c8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0022cc:	2100      	movs	r1, #0
1a0022ce:	5499      	strb	r1, [r3, r2]
1a0022d0:	e763      	b.n	1a00219a <gpioInit+0x4e>
      ret_val = 0;
1a0022d2:	2000      	movs	r0, #0
1a0022d4:	e761      	b.n	1a00219a <gpioInit+0x4e>
1a0022d6:	bf00      	nop
1a0022d8:	400f4000 	.word	0x400f4000
1a0022dc:	40086000 	.word	0x40086000

1a0022e0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0022e0:	b510      	push	{r4, lr}
1a0022e2:	b084      	sub	sp, #16
1a0022e4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0022e6:	2300      	movs	r3, #0
1a0022e8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0022ec:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0022f0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0022f4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0022f8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0022fc:	f10d 030b 	add.w	r3, sp, #11
1a002300:	9301      	str	r3, [sp, #4]
1a002302:	ab03      	add	r3, sp, #12
1a002304:	9300      	str	r3, [sp, #0]
1a002306:	f10d 030d 	add.w	r3, sp, #13
1a00230a:	f10d 020e 	add.w	r2, sp, #14
1a00230e:	f10d 010f 	add.w	r1, sp, #15
1a002312:	f7ff ff01 	bl	1a002118 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002316:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00231a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00231e:	3400      	adds	r4, #0
1a002320:	bf18      	it	ne
1a002322:	2401      	movne	r4, #1
1a002324:	015b      	lsls	r3, r3, #5
1a002326:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00232a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00232e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002330:	2001      	movs	r0, #1
1a002332:	b004      	add	sp, #16
1a002334:	bd10      	pop	{r4, pc}
1a002336:	Address 0x000000001a002336 is out of bounds.


1a002338 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002338:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00233a:	4b04      	ldr	r3, [pc, #16]	; (1a00234c <USB0_IRQHandler+0x14>)
1a00233c:	681b      	ldr	r3, [r3, #0]
1a00233e:	681b      	ldr	r3, [r3, #0]
1a002340:	68db      	ldr	r3, [r3, #12]
1a002342:	4a03      	ldr	r2, [pc, #12]	; (1a002350 <USB0_IRQHandler+0x18>)
1a002344:	6810      	ldr	r0, [r2, #0]
1a002346:	4798      	blx	r3
}
1a002348:	bd08      	pop	{r3, pc}
1a00234a:	bf00      	nop
1a00234c:	10002b90 	.word	0x10002b90
1a002350:	10002b44 	.word	0x10002b44

1a002354 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002354:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002356:	f000 fb3f 	bl	1a0029d8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00235a:	4b3a      	ldr	r3, [pc, #232]	; (1a002444 <boardInit+0xf0>)
1a00235c:	6818      	ldr	r0, [r3, #0]
1a00235e:	f7ff fd99 	bl	1a001e94 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002362:	2001      	movs	r0, #1
1a002364:	2100      	movs	r1, #0
1a002366:	f7ff fe2b 	bl	1a001fc0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00236a:	2105      	movs	r1, #5
1a00236c:	2000      	movs	r0, #0
1a00236e:	f7ff feed 	bl	1a00214c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002372:	2100      	movs	r1, #0
1a002374:	2024      	movs	r0, #36	; 0x24
1a002376:	f7ff fee9 	bl	1a00214c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00237a:	2100      	movs	r1, #0
1a00237c:	2025      	movs	r0, #37	; 0x25
1a00237e:	f7ff fee5 	bl	1a00214c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002382:	2100      	movs	r1, #0
1a002384:	2026      	movs	r0, #38	; 0x26
1a002386:	f7ff fee1 	bl	1a00214c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a00238a:	2100      	movs	r1, #0
1a00238c:	2027      	movs	r0, #39	; 0x27
1a00238e:	f7ff fedd 	bl	1a00214c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002392:	2101      	movs	r1, #1
1a002394:	2028      	movs	r0, #40	; 0x28
1a002396:	f7ff fed9 	bl	1a00214c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00239a:	2101      	movs	r1, #1
1a00239c:	2029      	movs	r0, #41	; 0x29
1a00239e:	f7ff fed5 	bl	1a00214c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0023a2:	2101      	movs	r1, #1
1a0023a4:	202a      	movs	r0, #42	; 0x2a
1a0023a6:	f7ff fed1 	bl	1a00214c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0023aa:	2101      	movs	r1, #1
1a0023ac:	202b      	movs	r0, #43	; 0x2b
1a0023ae:	f7ff fecd 	bl	1a00214c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0023b2:	2101      	movs	r1, #1
1a0023b4:	202c      	movs	r0, #44	; 0x2c
1a0023b6:	f7ff fec9 	bl	1a00214c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0023ba:	2101      	movs	r1, #1
1a0023bc:	202d      	movs	r0, #45	; 0x2d
1a0023be:	f7ff fec5 	bl	1a00214c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0023c2:	2100      	movs	r1, #0
1a0023c4:	202e      	movs	r0, #46	; 0x2e
1a0023c6:	f7ff fec1 	bl	1a00214c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0023ca:	2100      	movs	r1, #0
1a0023cc:	202f      	movs	r0, #47	; 0x2f
1a0023ce:	f7ff febd 	bl	1a00214c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0023d2:	2100      	movs	r1, #0
1a0023d4:	2030      	movs	r0, #48	; 0x30
1a0023d6:	f7ff feb9 	bl	1a00214c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0023da:	2100      	movs	r1, #0
1a0023dc:	2031      	movs	r0, #49	; 0x31
1a0023de:	f7ff feb5 	bl	1a00214c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0023e2:	2100      	movs	r1, #0
1a0023e4:	2032      	movs	r0, #50	; 0x32
1a0023e6:	f7ff feb1 	bl	1a00214c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0023ea:	2100      	movs	r1, #0
1a0023ec:	2033      	movs	r0, #51	; 0x33
1a0023ee:	f7ff fead 	bl	1a00214c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0023f2:	2100      	movs	r1, #0
1a0023f4:	2034      	movs	r0, #52	; 0x34
1a0023f6:	f7ff fea9 	bl	1a00214c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0023fa:	2100      	movs	r1, #0
1a0023fc:	2035      	movs	r0, #53	; 0x35
1a0023fe:	f7ff fea5 	bl	1a00214c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002402:	2101      	movs	r1, #1
1a002404:	2036      	movs	r0, #54	; 0x36
1a002406:	f7ff fea1 	bl	1a00214c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a00240a:	2101      	movs	r1, #1
1a00240c:	2037      	movs	r0, #55	; 0x37
1a00240e:	f7ff fe9d 	bl	1a00214c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002412:	2101      	movs	r1, #1
1a002414:	2038      	movs	r0, #56	; 0x38
1a002416:	f7ff fe99 	bl	1a00214c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a00241a:	2101      	movs	r1, #1
1a00241c:	2039      	movs	r0, #57	; 0x39
1a00241e:	f7ff fe95 	bl	1a00214c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002422:	2101      	movs	r1, #1
1a002424:	203a      	movs	r0, #58	; 0x3a
1a002426:	f7ff fe91 	bl	1a00214c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00242a:	2101      	movs	r1, #1
1a00242c:	203b      	movs	r0, #59	; 0x3b
1a00242e:	f7ff fe8d 	bl	1a00214c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002432:	2101      	movs	r1, #1
1a002434:	203c      	movs	r0, #60	; 0x3c
1a002436:	f7ff fe89 	bl	1a00214c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00243a:	2101      	movs	r1, #1
1a00243c:	203d      	movs	r0, #61	; 0x3d
1a00243e:	f7ff fe85 	bl	1a00214c <gpioInit>

}
1a002442:	bd08      	pop	{r3, pc}
1a002444:	10002b94 	.word	0x10002b94

1a002448 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002448:	b508      	push	{r3, lr}
1a00244a:	460b      	mov	r3, r1
   *printer = uart;
1a00244c:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a00244e:	4611      	mov	r1, r2
1a002450:	4618      	mov	r0, r3
1a002452:	f7ff fd43 	bl	1a001edc <uartInit>
}
1a002456:	bd08      	pop	{r3, pc}

1a002458 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a002458:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a00245a:	f7ff fd8a 	bl	1a001f72 <uartWriteString>
}
1a00245e:	bd08      	pop	{r3, pc}

1a002460 <printEnter>:

void printEnter( print_t printer )
{
1a002460:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a002462:	4902      	ldr	r1, [pc, #8]	; (1a00246c <printEnter+0xc>)
1a002464:	f7ff fd85 	bl	1a001f72 <uartWriteString>
}
1a002468:	bd08      	pop	{r3, pc}
1a00246a:	bf00      	nop
1a00246c:	1a003820 	.word	0x1a003820

1a002470 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002470:	2301      	movs	r3, #1
1a002472:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002476:	4b01      	ldr	r3, [pc, #4]	; (1a00247c <clearInterrupt+0xc>)
1a002478:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00247a:	4770      	bx	lr
1a00247c:	40087000 	.word	0x40087000

1a002480 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002482:	4b12      	ldr	r3, [pc, #72]	; (1a0024cc <serveInterrupt+0x4c>)
1a002484:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a002486:	4b12      	ldr	r3, [pc, #72]	; (1a0024d0 <serveInterrupt+0x50>)
1a002488:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00248a:	2301      	movs	r3, #1
1a00248c:	4083      	lsls	r3, r0
1a00248e:	420b      	tst	r3, r1
1a002490:	d111      	bne.n	1a0024b6 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002492:	4910      	ldr	r1, [pc, #64]	; (1a0024d4 <serveInterrupt+0x54>)
1a002494:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002496:	4d10      	ldr	r5, [pc, #64]	; (1a0024d8 <serveInterrupt+0x58>)
1a002498:	0051      	lsls	r1, r2, #1
1a00249a:	188f      	adds	r7, r1, r2
1a00249c:	00fc      	lsls	r4, r7, #3
1a00249e:	4627      	mov	r7, r4
1a0024a0:	442c      	add	r4, r5
1a0024a2:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0024a4:	6864      	ldr	r4, [r4, #4]
1a0024a6:	1b36      	subs	r6, r6, r4
1a0024a8:	443d      	add	r5, r7
1a0024aa:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0024ac:	4a08      	ldr	r2, [pc, #32]	; (1a0024d0 <serveInterrupt+0x50>)
1a0024ae:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0024b0:	f7ff ffde 	bl	1a002470 <clearInterrupt>
}
1a0024b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0024b6:	4907      	ldr	r1, [pc, #28]	; (1a0024d4 <serveInterrupt+0x54>)
1a0024b8:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0024ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0024be:	00d1      	lsls	r1, r2, #3
1a0024c0:	4a05      	ldr	r2, [pc, #20]	; (1a0024d8 <serveInterrupt+0x58>)
1a0024c2:	440a      	add	r2, r1
1a0024c4:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0024c6:	4a02      	ldr	r2, [pc, #8]	; (1a0024d0 <serveInterrupt+0x50>)
1a0024c8:	61d3      	str	r3, [r2, #28]
1a0024ca:	e7f1      	b.n	1a0024b0 <serveInterrupt+0x30>
1a0024cc:	1a003824 	.word	0x1a003824
1a0024d0:	40087000 	.word	0x40087000
1a0024d4:	40084000 	.word	0x40084000
1a0024d8:	1000004c 	.word	0x1000004c

1a0024dc <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0024dc:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0024de:	2000      	movs	r0, #0
1a0024e0:	f7ff ffce 	bl	1a002480 <serveInterrupt>
}
1a0024e4:	bd08      	pop	{r3, pc}

1a0024e6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0024e6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0024e8:	2001      	movs	r0, #1
1a0024ea:	f7ff ffc9 	bl	1a002480 <serveInterrupt>
}
1a0024ee:	bd08      	pop	{r3, pc}

1a0024f0 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0024f0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0024f2:	2002      	movs	r0, #2
1a0024f4:	f7ff ffc4 	bl	1a002480 <serveInterrupt>
}
1a0024f8:	bd08      	pop	{r3, pc}
1a0024fa:	Address 0x000000001a0024fa is out of bounds.


1a0024fc <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0024fc:	2200      	movs	r2, #0
1a0024fe:	2a05      	cmp	r2, #5
1a002500:	d819      	bhi.n	1a002536 <Board_LED_Init+0x3a>
{
1a002502:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002504:	490c      	ldr	r1, [pc, #48]	; (1a002538 <Board_LED_Init+0x3c>)
1a002506:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00250a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00250e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a002510:	4b0a      	ldr	r3, [pc, #40]	; (1a00253c <Board_LED_Init+0x40>)
1a002512:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002516:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00251a:	2001      	movs	r0, #1
1a00251c:	40a0      	lsls	r0, r4
1a00251e:	4301      	orrs	r1, r0
1a002520:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002524:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002528:	2100      	movs	r1, #0
1a00252a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00252c:	3201      	adds	r2, #1
1a00252e:	2a05      	cmp	r2, #5
1a002530:	d9e8      	bls.n	1a002504 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002532:	bc70      	pop	{r4, r5, r6}
1a002534:	4770      	bx	lr
1a002536:	4770      	bx	lr
1a002538:	1a003834 	.word	0x1a003834
1a00253c:	400f4000 	.word	0x400f4000

1a002540 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002540:	2300      	movs	r3, #0
1a002542:	2b03      	cmp	r3, #3
1a002544:	d816      	bhi.n	1a002574 <Board_TEC_Init+0x34>
{
1a002546:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002548:	490b      	ldr	r1, [pc, #44]	; (1a002578 <Board_TEC_Init+0x38>)
1a00254a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00254e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002552:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002554:	4c09      	ldr	r4, [pc, #36]	; (1a00257c <Board_TEC_Init+0x3c>)
1a002556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00255a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00255e:	2001      	movs	r0, #1
1a002560:	40a8      	lsls	r0, r5
1a002562:	ea21 0100 	bic.w	r1, r1, r0
1a002566:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00256a:	3301      	adds	r3, #1
1a00256c:	2b03      	cmp	r3, #3
1a00256e:	d9eb      	bls.n	1a002548 <Board_TEC_Init+0x8>
    }
}
1a002570:	bc30      	pop	{r4, r5}
1a002572:	4770      	bx	lr
1a002574:	4770      	bx	lr
1a002576:	bf00      	nop
1a002578:	1a00382c 	.word	0x1a00382c
1a00257c:	400f4000 	.word	0x400f4000

1a002580 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002580:	2300      	movs	r3, #0
1a002582:	2b08      	cmp	r3, #8
1a002584:	d816      	bhi.n	1a0025b4 <Board_GPIO_Init+0x34>
{
1a002586:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002588:	490b      	ldr	r1, [pc, #44]	; (1a0025b8 <Board_GPIO_Init+0x38>)
1a00258a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00258e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002592:	784d      	ldrb	r5, [r1, #1]
1a002594:	4c09      	ldr	r4, [pc, #36]	; (1a0025bc <Board_GPIO_Init+0x3c>)
1a002596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00259a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00259e:	2001      	movs	r0, #1
1a0025a0:	40a8      	lsls	r0, r5
1a0025a2:	ea21 0100 	bic.w	r1, r1, r0
1a0025a6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0025aa:	3301      	adds	r3, #1
1a0025ac:	2b08      	cmp	r3, #8
1a0025ae:	d9eb      	bls.n	1a002588 <Board_GPIO_Init+0x8>
    }
}
1a0025b0:	bc30      	pop	{r4, r5}
1a0025b2:	4770      	bx	lr
1a0025b4:	4770      	bx	lr
1a0025b6:	bf00      	nop
1a0025b8:	1a003840 	.word	0x1a003840
1a0025bc:	400f4000 	.word	0x400f4000

1a0025c0 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0025c0:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0025c2:	4c0b      	ldr	r4, [pc, #44]	; (1a0025f0 <Board_SPI_Init+0x30>)
1a0025c4:	4620      	mov	r0, r4
1a0025c6:	f000 fe2b 	bl	1a003220 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0025ca:	6863      	ldr	r3, [r4, #4]
1a0025cc:	f023 0304 	bic.w	r3, r3, #4
1a0025d0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0025d2:	6823      	ldr	r3, [r4, #0]
1a0025d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0025d8:	f043 0307 	orr.w	r3, r3, #7
1a0025dc:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0025de:	4905      	ldr	r1, [pc, #20]	; (1a0025f4 <Board_SPI_Init+0x34>)
1a0025e0:	4620      	mov	r0, r4
1a0025e2:	f000 fdfe 	bl	1a0031e2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0025e6:	6863      	ldr	r3, [r4, #4]
1a0025e8:	f043 0302 	orr.w	r3, r3, #2
1a0025ec:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a0025ee:	bd10      	pop	{r4, pc}
1a0025f0:	400c5000 	.word	0x400c5000
1a0025f4:	000186a0 	.word	0x000186a0

1a0025f8 <Board_I2C_Init>:
{
1a0025f8:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0025fa:	2000      	movs	r0, #0
1a0025fc:	f000 fda4 	bl	1a003148 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002600:	4b04      	ldr	r3, [pc, #16]	; (1a002614 <Board_I2C_Init+0x1c>)
1a002602:	f640 0208 	movw	r2, #2056	; 0x808
1a002606:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00260a:	4903      	ldr	r1, [pc, #12]	; (1a002618 <Board_I2C_Init+0x20>)
1a00260c:	2000      	movs	r0, #0
1a00260e:	f000 fdad 	bl	1a00316c <Chip_I2C_SetClockRate>
}
1a002612:	bd08      	pop	{r3, pc}
1a002614:	40086000 	.word	0x40086000
1a002618:	000f4240 	.word	0x000f4240

1a00261c <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a00261c:	b510      	push	{r4, lr}
1a00261e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002620:	4c08      	ldr	r4, [pc, #32]	; (1a002644 <Board_ADC_Init+0x28>)
1a002622:	4669      	mov	r1, sp
1a002624:	4620      	mov	r0, r4
1a002626:	f000 f997 	bl	1a002958 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00262a:	4a07      	ldr	r2, [pc, #28]	; (1a002648 <Board_ADC_Init+0x2c>)
1a00262c:	4669      	mov	r1, sp
1a00262e:	4620      	mov	r0, r4
1a002630:	f000 f9b2 	bl	1a002998 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002634:	2200      	movs	r2, #0
1a002636:	4669      	mov	r1, sp
1a002638:	4620      	mov	r0, r4
1a00263a:	f000 f9c6 	bl	1a0029ca <Chip_ADC_SetResolution>
}
1a00263e:	b002      	add	sp, #8
1a002640:	bd10      	pop	{r4, pc}
1a002642:	bf00      	nop
1a002644:	400e3000 	.word	0x400e3000
1a002648:	00061a80 	.word	0x00061a80

1a00264c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a00264c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00264e:	4c07      	ldr	r4, [pc, #28]	; (1a00266c <Board_Debug_Init+0x20>)
1a002650:	4620      	mov	r0, r4
1a002652:	f000 f89f 	bl	1a002794 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002656:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00265a:	4620      	mov	r0, r4
1a00265c:	f000 f8e4 	bl	1a002828 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a002660:	2303      	movs	r3, #3
1a002662:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002664:	2301      	movs	r3, #1
1a002666:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002668:	bd10      	pop	{r4, pc}
1a00266a:	bf00      	nop
1a00266c:	400c1000 	.word	0x400c1000

1a002670 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002670:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002672:	f7ff ffeb 	bl	1a00264c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002676:	4808      	ldr	r0, [pc, #32]	; (1a002698 <Board_Init+0x28>)
1a002678:	f000 fcaa 	bl	1a002fd0 <Chip_GPIO_Init>

   Board_LED_Init();
1a00267c:	f7ff ff3e 	bl	1a0024fc <Board_LED_Init>
   Board_TEC_Init();
1a002680:	f7ff ff5e 	bl	1a002540 <Board_TEC_Init>
   Board_SPI_Init();
1a002684:	f7ff ff9c 	bl	1a0025c0 <Board_SPI_Init>
   Board_GPIO_Init();
1a002688:	f7ff ff7a 	bl	1a002580 <Board_GPIO_Init>
   Board_I2C_Init();
1a00268c:	f7ff ffb4 	bl	1a0025f8 <Board_I2C_Init>
   Board_ADC_Init();
1a002690:	f7ff ffc4 	bl	1a00261c <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a002694:	bd08      	pop	{r3, pc}
1a002696:	bf00      	nop
1a002698:	400f4000 	.word	0x400f4000

1a00269c <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a00269c:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a00269e:	4a04      	ldr	r2, [pc, #16]	; (1a0026b0 <SystemInit+0x14>)
1a0026a0:	4b04      	ldr	r3, [pc, #16]	; (1a0026b4 <SystemInit+0x18>)
1a0026a2:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0026a4:	f000 fc6a 	bl	1a002f7c <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a0026a8:	f000 f858 	bl	1a00275c <Board_SystemInit>
}
1a0026ac:	bd08      	pop	{r3, pc}
1a0026ae:	bf00      	nop
1a0026b0:	1a000000 	.word	0x1a000000
1a0026b4:	e000ed08 	.word	0xe000ed08

1a0026b8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0026b8:	2300      	movs	r3, #0
1a0026ba:	2b1c      	cmp	r3, #28
1a0026bc:	d812      	bhi.n	1a0026e4 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0026be:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0026c0:	4a09      	ldr	r2, [pc, #36]	; (1a0026e8 <Board_SetupMuxing+0x30>)
1a0026c2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0026c6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0026ca:	784a      	ldrb	r2, [r1, #1]
1a0026cc:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0026ce:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0026d2:	4906      	ldr	r1, [pc, #24]	; (1a0026ec <Board_SetupMuxing+0x34>)
1a0026d4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0026d8:	3301      	adds	r3, #1
1a0026da:	2b1c      	cmp	r3, #28
1a0026dc:	d9f0      	bls.n	1a0026c0 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0026de:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0026e2:	4770      	bx	lr
1a0026e4:	4770      	bx	lr
1a0026e6:	bf00      	nop
1a0026e8:	1a00385c 	.word	0x1a00385c
1a0026ec:	40086000 	.word	0x40086000

1a0026f0 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0026f0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0026f2:	4a17      	ldr	r2, [pc, #92]	; (1a002750 <Board_SetupClocking+0x60>)
1a0026f4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0026f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0026fc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002700:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002704:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00270c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002710:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002714:	2201      	movs	r2, #1
1a002716:	490f      	ldr	r1, [pc, #60]	; (1a002754 <Board_SetupClocking+0x64>)
1a002718:	2006      	movs	r0, #6
1a00271a:	f000 fc5b 	bl	1a002fd4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00271e:	2400      	movs	r4, #0
1a002720:	b14c      	cbz	r4, 1a002736 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002722:	4b0b      	ldr	r3, [pc, #44]	; (1a002750 <Board_SetupClocking+0x60>)
1a002724:	685a      	ldr	r2, [r3, #4]
1a002726:	f022 020c 	bic.w	r2, r2, #12
1a00272a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00272c:	685a      	ldr	r2, [r3, #4]
1a00272e:	f042 0203 	orr.w	r2, r2, #3
1a002732:	605a      	str	r2, [r3, #4]
}
1a002734:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002736:	4808      	ldr	r0, [pc, #32]	; (1a002758 <Board_SetupClocking+0x68>)
1a002738:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00273c:	2301      	movs	r3, #1
1a00273e:	788a      	ldrb	r2, [r1, #2]
1a002740:	7849      	ldrb	r1, [r1, #1]
1a002742:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002746:	f000 fb75 	bl	1a002e34 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00274a:	3401      	adds	r4, #1
1a00274c:	e7e8      	b.n	1a002720 <Board_SetupClocking+0x30>
1a00274e:	bf00      	nop
1a002750:	40043000 	.word	0x40043000
1a002754:	0c28cb00 	.word	0x0c28cb00
1a002758:	1a003858 	.word	0x1a003858

1a00275c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00275c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00275e:	f7ff ffab 	bl	1a0026b8 <Board_SetupMuxing>
    Board_SetupClocking();
1a002762:	f7ff ffc5 	bl	1a0026f0 <Board_SetupClocking>
}
1a002766:	bd08      	pop	{r3, pc}

1a002768 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002768:	4b09      	ldr	r3, [pc, #36]	; (1a002790 <Chip_UART_GetIndex+0x28>)
1a00276a:	4298      	cmp	r0, r3
1a00276c:	d009      	beq.n	1a002782 <Chip_UART_GetIndex+0x1a>
1a00276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002772:	4298      	cmp	r0, r3
1a002774:	d007      	beq.n	1a002786 <Chip_UART_GetIndex+0x1e>
1a002776:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00277a:	4298      	cmp	r0, r3
1a00277c:	d005      	beq.n	1a00278a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00277e:	2000      	movs	r0, #0
1a002780:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002782:	2002      	movs	r0, #2
1a002784:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002786:	2003      	movs	r0, #3
1a002788:	4770      	bx	lr
			return 1;
1a00278a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00278c:	4770      	bx	lr
1a00278e:	bf00      	nop
1a002790:	400c1000 	.word	0x400c1000

1a002794 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002794:	b530      	push	{r4, r5, lr}
1a002796:	b083      	sub	sp, #12
1a002798:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00279a:	f7ff ffe5 	bl	1a002768 <Chip_UART_GetIndex>
1a00279e:	2301      	movs	r3, #1
1a0027a0:	461a      	mov	r2, r3
1a0027a2:	4619      	mov	r1, r3
1a0027a4:	4d0e      	ldr	r5, [pc, #56]	; (1a0027e0 <Chip_UART_Init+0x4c>)
1a0027a6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0027aa:	f000 fb89 	bl	1a002ec0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0027ae:	2307      	movs	r3, #7
1a0027b0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0027b2:	2300      	movs	r3, #0
1a0027b4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0027b6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0027b8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0027ba:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0027bc:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0027be:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0027c0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0027c2:	4b08      	ldr	r3, [pc, #32]	; (1a0027e4 <Chip_UART_Init+0x50>)
1a0027c4:	429c      	cmp	r4, r3
1a0027c6:	d006      	beq.n	1a0027d6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0027c8:	2303      	movs	r3, #3
1a0027ca:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0027cc:	2310      	movs	r3, #16
1a0027ce:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0027d0:	9b01      	ldr	r3, [sp, #4]
}
1a0027d2:	b003      	add	sp, #12
1a0027d4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0027d6:	2300      	movs	r3, #0
1a0027d8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0027da:	69a3      	ldr	r3, [r4, #24]
1a0027dc:	9301      	str	r3, [sp, #4]
1a0027de:	e7f3      	b.n	1a0027c8 <Chip_UART_Init+0x34>
1a0027e0:	1a0038d8 	.word	0x1a0038d8
1a0027e4:	40082000 	.word	0x40082000

1a0027e8 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0027e8:	b538      	push	{r3, r4, r5, lr}
1a0027ea:	4605      	mov	r5, r0
1a0027ec:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0027ee:	f7ff ffbb 	bl	1a002768 <Chip_UART_GetIndex>
1a0027f2:	4b0c      	ldr	r3, [pc, #48]	; (1a002824 <Chip_UART_SetBaud+0x3c>)
1a0027f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0027f8:	f000 fb9a 	bl	1a002f30 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0027fc:	0123      	lsls	r3, r4, #4
1a0027fe:	fbb0 f3f3 	udiv	r3, r0, r3
1a002802:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002804:	68ea      	ldr	r2, [r5, #12]
1a002806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00280a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a00280c:	6029      	str	r1, [r5, #0]
1a00280e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002812:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002814:	68ea      	ldr	r2, [r5, #12]
1a002816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00281a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00281c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002820:	0900      	lsrs	r0, r0, #4
1a002822:	bd38      	pop	{r3, r4, r5, pc}
1a002824:	1a0038d0 	.word	0x1a0038d0

1a002828 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00282c:	b083      	sub	sp, #12
1a00282e:	4683      	mov	fp, r0
1a002830:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002832:	f7ff ff99 	bl	1a002768 <Chip_UART_GetIndex>
1a002836:	4b35      	ldr	r3, [pc, #212]	; (1a00290c <Chip_UART_SetBaudFDR+0xe4>)
1a002838:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00283c:	f000 fb78 	bl	1a002f30 <Chip_Clock_GetRate>
1a002840:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002842:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002846:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002848:	2300      	movs	r3, #0
1a00284a:	9301      	str	r3, [sp, #4]
1a00284c:	46a2      	mov	sl, r4
1a00284e:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002850:	e02a      	b.n	1a0028a8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002852:	4242      	negs	r2, r0
				div ++;
1a002854:	1c4b      	adds	r3, r1, #1
1a002856:	e017      	b.n	1a002888 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002858:	b30a      	cbz	r2, 1a00289e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00285a:	4617      	mov	r7, r2
			sd = d;
1a00285c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00285e:	46a2      	mov	sl, r4
			sdiv = div;
1a002860:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002862:	3501      	adds	r5, #1
1a002864:	42ac      	cmp	r4, r5
1a002866:	d91e      	bls.n	1a0028a6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002868:	0933      	lsrs	r3, r6, #4
1a00286a:	0730      	lsls	r0, r6, #28
1a00286c:	fba4 0100 	umull	r0, r1, r4, r0
1a002870:	fb04 1103 	mla	r1, r4, r3, r1
1a002874:	1962      	adds	r2, r4, r5
1a002876:	fb08 f202 	mul.w	r2, r8, r2
1a00287a:	2300      	movs	r3, #0
1a00287c:	f000 fd30 	bl	1a0032e0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002880:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002882:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002884:	2800      	cmp	r0, #0
1a002886:	dbe4      	blt.n	1a002852 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002888:	4297      	cmp	r7, r2
1a00288a:	d3ea      	bcc.n	1a002862 <Chip_UART_SetBaudFDR+0x3a>
1a00288c:	2b00      	cmp	r3, #0
1a00288e:	d0e8      	beq.n	1a002862 <Chip_UART_SetBaudFDR+0x3a>
1a002890:	0c19      	lsrs	r1, r3, #16
1a002892:	d1e6      	bne.n	1a002862 <Chip_UART_SetBaudFDR+0x3a>
1a002894:	2b02      	cmp	r3, #2
1a002896:	d8df      	bhi.n	1a002858 <Chip_UART_SetBaudFDR+0x30>
1a002898:	2d00      	cmp	r5, #0
1a00289a:	d0dd      	beq.n	1a002858 <Chip_UART_SetBaudFDR+0x30>
1a00289c:	e7e1      	b.n	1a002862 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00289e:	4617      	mov	r7, r2
			sd = d;
1a0028a0:	9501      	str	r5, [sp, #4]
			sm = m;
1a0028a2:	46a2      	mov	sl, r4
			sdiv = div;
1a0028a4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0028a6:	3401      	adds	r4, #1
1a0028a8:	b11f      	cbz	r7, 1a0028b2 <Chip_UART_SetBaudFDR+0x8a>
1a0028aa:	2c0f      	cmp	r4, #15
1a0028ac:	d801      	bhi.n	1a0028b2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0028ae:	2500      	movs	r5, #0
1a0028b0:	e7d8      	b.n	1a002864 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0028b2:	f1b9 0f00 	cmp.w	r9, #0
1a0028b6:	d024      	beq.n	1a002902 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0028b8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0028bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0028c0:	f8cb 300c 	str.w	r3, [fp, #12]
1a0028c4:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0028c8:	f8cb 3000 	str.w	r3, [fp]
1a0028cc:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0028d0:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0028d4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0028d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0028dc:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0028e0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0028e4:	b2db      	uxtb	r3, r3
1a0028e6:	9901      	ldr	r1, [sp, #4]
1a0028e8:	f001 020f 	and.w	r2, r1, #15
1a0028ec:	4313      	orrs	r3, r2
1a0028ee:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0028f2:	0933      	lsrs	r3, r6, #4
1a0028f4:	fb0a f303 	mul.w	r3, sl, r3
1a0028f8:	448a      	add	sl, r1
1a0028fa:	fb09 f90a 	mul.w	r9, r9, sl
1a0028fe:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002902:	4648      	mov	r0, r9
1a002904:	b003      	add	sp, #12
1a002906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00290a:	bf00      	nop
1a00290c:	1a0038d0 	.word	0x1a0038d0

1a002910 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002910:	4b03      	ldr	r3, [pc, #12]	; (1a002920 <Chip_ADC_GetClockIndex+0x10>)
1a002912:	4298      	cmp	r0, r3
1a002914:	d001      	beq.n	1a00291a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002916:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002918:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00291a:	2004      	movs	r0, #4
1a00291c:	4770      	bx	lr
1a00291e:	bf00      	nop
1a002920:	400e4000 	.word	0x400e4000

1a002924 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002924:	b570      	push	{r4, r5, r6, lr}
1a002926:	460d      	mov	r5, r1
1a002928:	4614      	mov	r4, r2
1a00292a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00292c:	f7ff fff0 	bl	1a002910 <Chip_ADC_GetClockIndex>
1a002930:	f000 fafe 	bl	1a002f30 <Chip_Clock_GetRate>
	if (burstMode) {
1a002934:	b965      	cbnz	r5, 1a002950 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002936:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00293a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00293e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002942:	0064      	lsls	r4, r4, #1
1a002944:	fbb0 f0f4 	udiv	r0, r0, r4
1a002948:	b2c0      	uxtb	r0, r0
1a00294a:	3801      	subs	r0, #1
	return div;
}
1a00294c:	b2c0      	uxtb	r0, r0
1a00294e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002950:	fb04 f406 	mul.w	r4, r4, r6
1a002954:	e7f3      	b.n	1a00293e <getClkDiv+0x1a>
1a002956:	Address 0x000000001a002956 is out of bounds.


1a002958 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002958:	b538      	push	{r3, r4, r5, lr}
1a00295a:	4605      	mov	r5, r0
1a00295c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00295e:	f7ff ffd7 	bl	1a002910 <Chip_ADC_GetClockIndex>
1a002962:	2301      	movs	r3, #1
1a002964:	461a      	mov	r2, r3
1a002966:	4619      	mov	r1, r3
1a002968:	f000 faaa 	bl	1a002ec0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00296c:	2100      	movs	r1, #0
1a00296e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002970:	4a08      	ldr	r2, [pc, #32]	; (1a002994 <Chip_ADC_Init+0x3c>)
1a002972:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002974:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002976:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002978:	230b      	movs	r3, #11
1a00297a:	4628      	mov	r0, r5
1a00297c:	f7ff ffd2 	bl	1a002924 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002980:	0200      	lsls	r0, r0, #8
1a002982:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002986:	7920      	ldrb	r0, [r4, #4]
1a002988:	0440      	lsls	r0, r0, #17
1a00298a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00298e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002990:	6028      	str	r0, [r5, #0]
}
1a002992:	bd38      	pop	{r3, r4, r5, pc}
1a002994:	00061a80 	.word	0x00061a80

1a002998 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002998:	b570      	push	{r4, r5, r6, lr}
1a00299a:	4605      	mov	r5, r0
1a00299c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00299e:	6804      	ldr	r4, [r0, #0]
1a0029a0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0029a4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0029a8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0029aa:	790b      	ldrb	r3, [r1, #4]
1a0029ac:	f1c3 030b 	rsb	r3, r3, #11
1a0029b0:	b2db      	uxtb	r3, r3
1a0029b2:	7949      	ldrb	r1, [r1, #5]
1a0029b4:	f7ff ffb6 	bl	1a002924 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0029b8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0029bc:	7930      	ldrb	r0, [r6, #4]
1a0029be:	0440      	lsls	r0, r0, #17
1a0029c0:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0029c4:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0029c6:	6028      	str	r0, [r5, #0]
}
1a0029c8:	bd70      	pop	{r4, r5, r6, pc}

1a0029ca <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0029ca:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0029cc:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0029ce:	680a      	ldr	r2, [r1, #0]
1a0029d0:	f7ff ffe2 	bl	1a002998 <Chip_ADC_SetSampleRate>
}
1a0029d4:	bd08      	pop	{r3, pc}
1a0029d6:	Address 0x000000001a0029d6 is out of bounds.


1a0029d8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0029d8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0029da:	2069      	movs	r0, #105	; 0x69
1a0029dc:	f000 faa8 	bl	1a002f30 <Chip_Clock_GetRate>
1a0029e0:	4b01      	ldr	r3, [pc, #4]	; (1a0029e8 <SystemCoreClockUpdate+0x10>)
1a0029e2:	6018      	str	r0, [r3, #0]
}
1a0029e4:	bd08      	pop	{r3, pc}
1a0029e6:	bf00      	nop
1a0029e8:	10002b94 	.word	0x10002b94

1a0029ec <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0029ec:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0029ee:	680b      	ldr	r3, [r1, #0]
1a0029f0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0029f4:	d002      	beq.n	1a0029fc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0029f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0029fa:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0029fc:	4607      	mov	r7, r0
1a0029fe:	2501      	movs	r5, #1
1a002a00:	e03b      	b.n	1a002a7a <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002a02:	694b      	ldr	r3, [r1, #20]
1a002a04:	fb03 f302 	mul.w	r3, r3, r2
1a002a08:	fbb3 f3f5 	udiv	r3, r3, r5
1a002a0c:	e014      	b.n	1a002a38 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002a0e:	461c      	mov	r4, r3
1a002a10:	e020      	b.n	1a002a54 <pll_calc_divs+0x68>
		return -val;
1a002a12:	f1cc 0c00 	rsb	ip, ip, #0
1a002a16:	e020      	b.n	1a002a5a <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002a18:	3201      	adds	r2, #1
1a002a1a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002a1e:	dc26      	bgt.n	1a002a6e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002a20:	680c      	ldr	r4, [r1, #0]
1a002a22:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002a26:	d0ec      	beq.n	1a002a02 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002a28:	1c73      	adds	r3, r6, #1
1a002a2a:	fa02 fc03 	lsl.w	ip, r2, r3
1a002a2e:	694b      	ldr	r3, [r1, #20]
1a002a30:	fb03 f30c 	mul.w	r3, r3, ip
1a002a34:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002a38:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002a88 <pll_calc_divs+0x9c>
1a002a3c:	4563      	cmp	r3, ip
1a002a3e:	d9eb      	bls.n	1a002a18 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002a40:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002a8c <pll_calc_divs+0xa0>
1a002a44:	4563      	cmp	r3, ip
1a002a46:	d812      	bhi.n	1a002a6e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002a48:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002a4c:	d1df      	bne.n	1a002a0e <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002a4e:	1c74      	adds	r4, r6, #1
1a002a50:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002a54:	ebb0 0c04 	subs.w	ip, r0, r4
1a002a58:	d4db      	bmi.n	1a002a12 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002a5a:	4567      	cmp	r7, ip
1a002a5c:	d9dc      	bls.n	1a002a18 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002a5e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002a60:	1c77      	adds	r7, r6, #1
1a002a62:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002a64:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002a66:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002a68:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002a6a:	4667      	mov	r7, ip
1a002a6c:	e7d4      	b.n	1a002a18 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002a6e:	3601      	adds	r6, #1
1a002a70:	2e03      	cmp	r6, #3
1a002a72:	dc01      	bgt.n	1a002a78 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002a74:	2201      	movs	r2, #1
1a002a76:	e7d0      	b.n	1a002a1a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002a78:	3501      	adds	r5, #1
1a002a7a:	2d04      	cmp	r5, #4
1a002a7c:	dc01      	bgt.n	1a002a82 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002a7e:	2600      	movs	r6, #0
1a002a80:	e7f6      	b.n	1a002a70 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002a82:	bcf0      	pop	{r4, r5, r6, r7}
1a002a84:	4770      	bx	lr
1a002a86:	bf00      	nop
1a002a88:	094c5eff 	.word	0x094c5eff
1a002a8c:	1312d000 	.word	0x1312d000

1a002a90 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002a92:	b099      	sub	sp, #100	; 0x64
1a002a94:	4605      	mov	r5, r0
1a002a96:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002a98:	225c      	movs	r2, #92	; 0x5c
1a002a9a:	2100      	movs	r1, #0
1a002a9c:	a801      	add	r0, sp, #4
1a002a9e:	f000 fdce 	bl	1a00363e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002aa2:	2380      	movs	r3, #128	; 0x80
1a002aa4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002aa6:	6963      	ldr	r3, [r4, #20]
1a002aa8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002aaa:	7923      	ldrb	r3, [r4, #4]
1a002aac:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002ab0:	4669      	mov	r1, sp
1a002ab2:	4628      	mov	r0, r5
1a002ab4:	f7ff ff9a 	bl	1a0029ec <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002ab8:	9b06      	ldr	r3, [sp, #24]
1a002aba:	42ab      	cmp	r3, r5
1a002abc:	d027      	beq.n	1a002b0e <pll_get_frac+0x7e>
	if (val < 0)
1a002abe:	1aeb      	subs	r3, r5, r3
1a002ac0:	d42e      	bmi.n	1a002b20 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002ac2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002aca:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002acc:	6963      	ldr	r3, [r4, #20]
1a002ace:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002ad0:	7923      	ldrb	r3, [r4, #4]
1a002ad2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002ad6:	a910      	add	r1, sp, #64	; 0x40
1a002ad8:	4628      	mov	r0, r5
1a002ada:	f7ff ff87 	bl	1a0029ec <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002ade:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002ae0:	42ab      	cmp	r3, r5
1a002ae2:	d01f      	beq.n	1a002b24 <pll_get_frac+0x94>
	if (val < 0)
1a002ae4:	1aeb      	subs	r3, r5, r3
1a002ae6:	d425      	bmi.n	1a002b34 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002ae8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002aea:	4b2b      	ldr	r3, [pc, #172]	; (1a002b98 <pll_get_frac+0x108>)
1a002aec:	429d      	cmp	r5, r3
1a002aee:	d923      	bls.n	1a002b38 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002af2:	1aed      	subs	r5, r5, r3
1a002af4:	d433      	bmi.n	1a002b5e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002af6:	42ae      	cmp	r6, r5
1a002af8:	dc3b      	bgt.n	1a002b72 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002afa:	42be      	cmp	r6, r7
1a002afc:	dc31      	bgt.n	1a002b62 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002afe:	466d      	mov	r5, sp
1a002b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002b0c:	e006      	b.n	1a002b1c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002b0e:	466d      	mov	r5, sp
1a002b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002b1c:	b019      	add	sp, #100	; 0x64
1a002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002b20:	425b      	negs	r3, r3
1a002b22:	e7ce      	b.n	1a002ac2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002b24:	ad10      	add	r5, sp, #64	; 0x40
1a002b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002b32:	e7f3      	b.n	1a002b1c <pll_get_frac+0x8c>
		return -val;
1a002b34:	425b      	negs	r3, r3
1a002b36:	e7d7      	b.n	1a002ae8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002b38:	2340      	movs	r3, #64	; 0x40
1a002b3a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002b3c:	6963      	ldr	r3, [r4, #20]
1a002b3e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002b40:	a908      	add	r1, sp, #32
1a002b42:	4628      	mov	r0, r5
1a002b44:	f7ff ff52 	bl	1a0029ec <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002b4a:	42ab      	cmp	r3, r5
1a002b4c:	d1d0      	bne.n	1a002af0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002b4e:	ad08      	add	r5, sp, #32
1a002b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002b5c:	e7de      	b.n	1a002b1c <pll_get_frac+0x8c>
		return -val;
1a002b5e:	426d      	negs	r5, r5
1a002b60:	e7c9      	b.n	1a002af6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a002b62:	ad10      	add	r5, sp, #64	; 0x40
1a002b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002b70:	e7d4      	b.n	1a002b1c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002b72:	42af      	cmp	r7, r5
1a002b74:	db07      	blt.n	1a002b86 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002b76:	ad08      	add	r5, sp, #32
1a002b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002b84:	e7ca      	b.n	1a002b1c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002b86:	ad10      	add	r5, sp, #64	; 0x40
1a002b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002b94:	e7c2      	b.n	1a002b1c <pll_get_frac+0x8c>
1a002b96:	bf00      	nop
1a002b98:	068e7780 	.word	0x068e7780

1a002b9c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002b9c:	b430      	push	{r4, r5}
1a002b9e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002ba0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002ba2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002ba4:	e000      	b.n	1a002ba8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002ba6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002ba8:	281c      	cmp	r0, #28
1a002baa:	d118      	bne.n	1a002bde <Chip_Clock_FindBaseClock+0x42>
1a002bac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002bb0:	0051      	lsls	r1, r2, #1
1a002bb2:	4a0c      	ldr	r2, [pc, #48]	; (1a002be4 <Chip_Clock_FindBaseClock+0x48>)
1a002bb4:	440a      	add	r2, r1
1a002bb6:	7914      	ldrb	r4, [r2, #4]
1a002bb8:	4284      	cmp	r4, r0
1a002bba:	d010      	beq.n	1a002bde <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002bbc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002bc0:	004a      	lsls	r2, r1, #1
1a002bc2:	4908      	ldr	r1, [pc, #32]	; (1a002be4 <Chip_Clock_FindBaseClock+0x48>)
1a002bc4:	5a8a      	ldrh	r2, [r1, r2]
1a002bc6:	42aa      	cmp	r2, r5
1a002bc8:	d8ed      	bhi.n	1a002ba6 <Chip_Clock_FindBaseClock+0xa>
1a002bca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002bce:	0051      	lsls	r1, r2, #1
1a002bd0:	4a04      	ldr	r2, [pc, #16]	; (1a002be4 <Chip_Clock_FindBaseClock+0x48>)
1a002bd2:	440a      	add	r2, r1
1a002bd4:	8852      	ldrh	r2, [r2, #2]
1a002bd6:	42aa      	cmp	r2, r5
1a002bd8:	d3e5      	bcc.n	1a002ba6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002bda:	4620      	mov	r0, r4
1a002bdc:	e7e4      	b.n	1a002ba8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002bde:	bc30      	pop	{r4, r5}
1a002be0:	4770      	bx	lr
1a002be2:	bf00      	nop
1a002be4:	1a0038ec 	.word	0x1a0038ec

1a002be8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002be8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002bee:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002bf0:	4a0d      	ldr	r2, [pc, #52]	; (1a002c28 <Chip_Clock_EnableCrystal+0x40>)
1a002bf2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002bf4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002bf8:	6992      	ldr	r2, [r2, #24]
1a002bfa:	428a      	cmp	r2, r1
1a002bfc:	d001      	beq.n	1a002c02 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002bfe:	4a0a      	ldr	r2, [pc, #40]	; (1a002c28 <Chip_Clock_EnableCrystal+0x40>)
1a002c00:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002c02:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002c06:	4a09      	ldr	r2, [pc, #36]	; (1a002c2c <Chip_Clock_EnableCrystal+0x44>)
1a002c08:	6811      	ldr	r1, [r2, #0]
1a002c0a:	4a09      	ldr	r2, [pc, #36]	; (1a002c30 <Chip_Clock_EnableCrystal+0x48>)
1a002c0c:	4291      	cmp	r1, r2
1a002c0e:	d901      	bls.n	1a002c14 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002c10:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002c14:	4a04      	ldr	r2, [pc, #16]	; (1a002c28 <Chip_Clock_EnableCrystal+0x40>)
1a002c16:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002c18:	9b01      	ldr	r3, [sp, #4]
1a002c1a:	1e5a      	subs	r2, r3, #1
1a002c1c:	9201      	str	r2, [sp, #4]
1a002c1e:	2b00      	cmp	r3, #0
1a002c20:	d1fa      	bne.n	1a002c18 <Chip_Clock_EnableCrystal+0x30>
}
1a002c22:	b002      	add	sp, #8
1a002c24:	4770      	bx	lr
1a002c26:	bf00      	nop
1a002c28:	40050000 	.word	0x40050000
1a002c2c:	1a003854 	.word	0x1a003854
1a002c30:	01312cff 	.word	0x01312cff

1a002c34 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002c34:	3012      	adds	r0, #18
1a002c36:	4b05      	ldr	r3, [pc, #20]	; (1a002c4c <Chip_Clock_GetDividerSource+0x18>)
1a002c38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002c3c:	f010 0f01 	tst.w	r0, #1
1a002c40:	d102      	bne.n	1a002c48 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002c42:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002c46:	4770      	bx	lr
		return CLKINPUT_PD;
1a002c48:	2011      	movs	r0, #17
}
1a002c4a:	4770      	bx	lr
1a002c4c:	40050000 	.word	0x40050000

1a002c50 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002c50:	f100 0212 	add.w	r2, r0, #18
1a002c54:	4b03      	ldr	r3, [pc, #12]	; (1a002c64 <Chip_Clock_GetDividerDivisor+0x14>)
1a002c56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002c5a:	4b03      	ldr	r3, [pc, #12]	; (1a002c68 <Chip_Clock_GetDividerDivisor+0x18>)
1a002c5c:	5c18      	ldrb	r0, [r3, r0]
}
1a002c5e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002c62:	4770      	bx	lr
1a002c64:	40050000 	.word	0x40050000
1a002c68:	1a0038e4 	.word	0x1a0038e4

1a002c6c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002c6c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002c6e:	2810      	cmp	r0, #16
1a002c70:	d80a      	bhi.n	1a002c88 <Chip_Clock_GetClockInputHz+0x1c>
1a002c72:	e8df f000 	tbb	[pc, r0]
1a002c76:	0b42      	.short	0x0b42
1a002c78:	091f160d 	.word	0x091f160d
1a002c7c:	2b282522 	.word	0x2b282522
1a002c80:	322e0909 	.word	0x322e0909
1a002c84:	3a36      	.short	0x3a36
1a002c86:	3e          	.byte	0x3e
1a002c87:	00          	.byte	0x00
	uint32_t rate = 0;
1a002c88:	2000      	movs	r0, #0
1a002c8a:	e038      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002c8c:	481e      	ldr	r0, [pc, #120]	; (1a002d08 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002c8e:	e036      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002c90:	4b1e      	ldr	r3, [pc, #120]	; (1a002d0c <Chip_Clock_GetClockInputHz+0xa0>)
1a002c92:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002c96:	f003 0307 	and.w	r3, r3, #7
1a002c9a:	2b04      	cmp	r3, #4
1a002c9c:	d130      	bne.n	1a002d00 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002c9e:	2000      	movs	r0, #0
1a002ca0:	e02d      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002ca2:	4b1a      	ldr	r3, [pc, #104]	; (1a002d0c <Chip_Clock_GetClockInputHz+0xa0>)
1a002ca4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002ca8:	f003 0307 	and.w	r3, r3, #7
1a002cac:	2b04      	cmp	r3, #4
1a002cae:	d029      	beq.n	1a002d04 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002cb0:	4817      	ldr	r0, [pc, #92]	; (1a002d10 <Chip_Clock_GetClockInputHz+0xa4>)
1a002cb2:	e024      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002cb4:	4b17      	ldr	r3, [pc, #92]	; (1a002d14 <Chip_Clock_GetClockInputHz+0xa8>)
1a002cb6:	6818      	ldr	r0, [r3, #0]
		break;
1a002cb8:	e021      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002cba:	4b17      	ldr	r3, [pc, #92]	; (1a002d18 <Chip_Clock_GetClockInputHz+0xac>)
1a002cbc:	6818      	ldr	r0, [r3, #0]
		break;
1a002cbe:	e01e      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002cc0:	4b16      	ldr	r3, [pc, #88]	; (1a002d1c <Chip_Clock_GetClockInputHz+0xb0>)
1a002cc2:	6818      	ldr	r0, [r3, #0]
		break;
1a002cc4:	e01b      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002cc6:	4b15      	ldr	r3, [pc, #84]	; (1a002d1c <Chip_Clock_GetClockInputHz+0xb0>)
1a002cc8:	6858      	ldr	r0, [r3, #4]
		break;
1a002cca:	e018      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002ccc:	f000 f86a 	bl	1a002da4 <Chip_Clock_GetMainPLLHz>
		break;
1a002cd0:	e015      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002cd2:	2100      	movs	r1, #0
1a002cd4:	f000 f89c 	bl	1a002e10 <Chip_Clock_GetDivRate>
		break;
1a002cd8:	e011      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002cda:	2101      	movs	r1, #1
1a002cdc:	f000 f898 	bl	1a002e10 <Chip_Clock_GetDivRate>
		break;
1a002ce0:	e00d      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002ce2:	2102      	movs	r1, #2
1a002ce4:	f000 f894 	bl	1a002e10 <Chip_Clock_GetDivRate>
		break;
1a002ce8:	e009      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002cea:	2103      	movs	r1, #3
1a002cec:	f000 f890 	bl	1a002e10 <Chip_Clock_GetDivRate>
		break;
1a002cf0:	e005      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002cf2:	2104      	movs	r1, #4
1a002cf4:	f000 f88c 	bl	1a002e10 <Chip_Clock_GetDivRate>
		break;
1a002cf8:	e001      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002cfa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002cfe:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002d00:	4803      	ldr	r0, [pc, #12]	; (1a002d10 <Chip_Clock_GetClockInputHz+0xa4>)
1a002d02:	e7fc      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002d04:	4806      	ldr	r0, [pc, #24]	; (1a002d20 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002d06:	e7fa      	b.n	1a002cfe <Chip_Clock_GetClockInputHz+0x92>
1a002d08:	00b71b00 	.word	0x00b71b00
1a002d0c:	40043000 	.word	0x40043000
1a002d10:	017d7840 	.word	0x017d7840
1a002d14:	1a003828 	.word	0x1a003828
1a002d18:	1a003854 	.word	0x1a003854
1a002d1c:	10002b48 	.word	0x10002b48
1a002d20:	02faf080 	.word	0x02faf080

1a002d24 <Chip_Clock_CalcMainPLLValue>:
{
1a002d24:	b538      	push	{r3, r4, r5, lr}
1a002d26:	4605      	mov	r5, r0
1a002d28:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002d2a:	7908      	ldrb	r0, [r1, #4]
1a002d2c:	f7ff ff9e 	bl	1a002c6c <Chip_Clock_GetClockInputHz>
1a002d30:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002d32:	4b19      	ldr	r3, [pc, #100]	; (1a002d98 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002d34:	442b      	add	r3, r5
1a002d36:	4a19      	ldr	r2, [pc, #100]	; (1a002d9c <Chip_Clock_CalcMainPLLValue+0x78>)
1a002d38:	4293      	cmp	r3, r2
1a002d3a:	d821      	bhi.n	1a002d80 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002d3c:	b318      	cbz	r0, 1a002d86 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002d3e:	2380      	movs	r3, #128	; 0x80
1a002d40:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002d42:	2300      	movs	r3, #0
1a002d44:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002d46:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002d48:	fbb5 f3f0 	udiv	r3, r5, r0
1a002d4c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002d4e:	4a14      	ldr	r2, [pc, #80]	; (1a002da0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002d50:	4295      	cmp	r5, r2
1a002d52:	d903      	bls.n	1a002d5c <Chip_Clock_CalcMainPLLValue+0x38>
1a002d54:	fb03 f000 	mul.w	r0, r3, r0
1a002d58:	42a8      	cmp	r0, r5
1a002d5a:	d007      	beq.n	1a002d6c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002d5c:	4621      	mov	r1, r4
1a002d5e:	4628      	mov	r0, r5
1a002d60:	f7ff fe96 	bl	1a002a90 <pll_get_frac>
		if (!ppll->nsel) {
1a002d64:	68a3      	ldr	r3, [r4, #8]
1a002d66:	b18b      	cbz	r3, 1a002d8c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002d68:	3b01      	subs	r3, #1
1a002d6a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002d6c:	6923      	ldr	r3, [r4, #16]
1a002d6e:	b183      	cbz	r3, 1a002d92 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002d70:	68e2      	ldr	r2, [r4, #12]
1a002d72:	b10a      	cbz	r2, 1a002d78 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002d74:	3a01      	subs	r2, #1
1a002d76:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002d78:	3b01      	subs	r3, #1
1a002d7a:	6123      	str	r3, [r4, #16]
	return 0;
1a002d7c:	2000      	movs	r0, #0
}
1a002d7e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002d84:	e7fb      	b.n	1a002d7e <Chip_Clock_CalcMainPLLValue+0x5a>
1a002d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002d8a:	e7f8      	b.n	1a002d7e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002d90:	e7f5      	b.n	1a002d7e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002d96:	e7f2      	b.n	1a002d7e <Chip_Clock_CalcMainPLLValue+0x5a>
1a002d98:	ff6b3a10 	.word	0xff6b3a10
1a002d9c:	0b940510 	.word	0x0b940510
1a002da0:	094c5eff 	.word	0x094c5eff

1a002da4 <Chip_Clock_GetMainPLLHz>:
{
1a002da4:	b530      	push	{r4, r5, lr}
1a002da6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002da8:	4d17      	ldr	r5, [pc, #92]	; (1a002e08 <Chip_Clock_GetMainPLLHz+0x64>)
1a002daa:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002dac:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002db0:	f7ff ff5c 	bl	1a002c6c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002db4:	4b15      	ldr	r3, [pc, #84]	; (1a002e0c <Chip_Clock_GetMainPLLHz+0x68>)
1a002db6:	681b      	ldr	r3, [r3, #0]
1a002db8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002dba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002dbc:	f013 0f01 	tst.w	r3, #1
1a002dc0:	d01f      	beq.n	1a002e02 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002dc2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002dc6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002dca:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002dce:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002dd2:	3301      	adds	r3, #1
	n = nsel + 1;
1a002dd4:	3201      	adds	r2, #1
	p = ptab[psel];
1a002dd6:	f10d 0c08 	add.w	ip, sp, #8
1a002dda:	4461      	add	r1, ip
1a002ddc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002de0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002de4:	d108      	bne.n	1a002df8 <Chip_Clock_GetMainPLLHz+0x54>
1a002de6:	b93d      	cbnz	r5, 1a002df8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002de8:	0049      	lsls	r1, r1, #1
1a002dea:	fbb3 f3f1 	udiv	r3, r3, r1
1a002dee:	fbb0 f0f2 	udiv	r0, r0, r2
1a002df2:	fb00 f003 	mul.w	r0, r0, r3
1a002df6:	e005      	b.n	1a002e04 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002df8:	fbb0 f0f2 	udiv	r0, r0, r2
1a002dfc:	fb03 f000 	mul.w	r0, r3, r0
1a002e00:	e000      	b.n	1a002e04 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002e02:	2000      	movs	r0, #0
}
1a002e04:	b003      	add	sp, #12
1a002e06:	bd30      	pop	{r4, r5, pc}
1a002e08:	40050000 	.word	0x40050000
1a002e0c:	1a0038e0 	.word	0x1a0038e0

1a002e10 <Chip_Clock_GetDivRate>:
{
1a002e10:	b538      	push	{r3, r4, r5, lr}
1a002e12:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002e14:	4608      	mov	r0, r1
1a002e16:	f7ff ff0d 	bl	1a002c34 <Chip_Clock_GetDividerSource>
1a002e1a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002e1c:	4620      	mov	r0, r4
1a002e1e:	f7ff ff17 	bl	1a002c50 <Chip_Clock_GetDividerDivisor>
1a002e22:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002e24:	4628      	mov	r0, r5
1a002e26:	f7ff ff21 	bl	1a002c6c <Chip_Clock_GetClockInputHz>
1a002e2a:	3401      	adds	r4, #1
}
1a002e2c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002e30:	bd38      	pop	{r3, r4, r5, pc}
1a002e32:	Address 0x000000001a002e32 is out of bounds.


1a002e34 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002e34:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002e36:	f100 0416 	add.w	r4, r0, #22
1a002e3a:	00a4      	lsls	r4, r4, #2
1a002e3c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002e40:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002e44:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002e46:	281b      	cmp	r0, #27
1a002e48:	d813      	bhi.n	1a002e72 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002e4a:	2911      	cmp	r1, #17
1a002e4c:	d01a      	beq.n	1a002e84 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002e4e:	4d0e      	ldr	r5, [pc, #56]	; (1a002e88 <Chip_Clock_SetBaseClock+0x54>)
1a002e50:	4025      	ands	r5, r4

			if (autoblocken) {
1a002e52:	b10a      	cbz	r2, 1a002e58 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002e54:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002e58:	b10b      	cbz	r3, 1a002e5e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002e5a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002e5e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002e62:	3016      	adds	r0, #22
1a002e64:	0080      	lsls	r0, r0, #2
1a002e66:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002e6a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002e6e:	6045      	str	r5, [r0, #4]
1a002e70:	e008      	b.n	1a002e84 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002e72:	f044 0401 	orr.w	r4, r4, #1
1a002e76:	3016      	adds	r0, #22
1a002e78:	0080      	lsls	r0, r0, #2
1a002e7a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002e7e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002e82:	6044      	str	r4, [r0, #4]
	}
}
1a002e84:	bc30      	pop	{r4, r5}
1a002e86:	4770      	bx	lr
1a002e88:	e0fff7fe 	.word	0xe0fff7fe

1a002e8c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002e8c:	281b      	cmp	r0, #27
1a002e8e:	d80c      	bhi.n	1a002eaa <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002e90:	3016      	adds	r0, #22
1a002e92:	0080      	lsls	r0, r0, #2
1a002e94:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002e98:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002e9c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002e9e:	f010 0f01 	tst.w	r0, #1
1a002ea2:	d104      	bne.n	1a002eae <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ea4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002ea8:	4770      	bx	lr
		return CLKINPUT_PD;
1a002eaa:	2011      	movs	r0, #17
1a002eac:	4770      	bx	lr
		return CLKINPUT_PD;
1a002eae:	2011      	movs	r0, #17
}
1a002eb0:	4770      	bx	lr

1a002eb2 <Chip_Clock_GetBaseClocktHz>:
{
1a002eb2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002eb4:	f7ff ffea 	bl	1a002e8c <Chip_Clock_GetBaseClock>
1a002eb8:	f7ff fed8 	bl	1a002c6c <Chip_Clock_GetClockInputHz>
}
1a002ebc:	bd08      	pop	{r3, pc}
1a002ebe:	Address 0x000000001a002ebe is out of bounds.


1a002ec0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002ec0:	b969      	cbnz	r1, 1a002ede <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002ec2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002ec4:	b10a      	cbz	r2, 1a002eca <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002ec6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002eca:	2b02      	cmp	r3, #2
1a002ecc:	d009      	beq.n	1a002ee2 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002ece:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002ed2:	d209      	bcs.n	1a002ee8 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002ed4:	3020      	adds	r0, #32
1a002ed6:	4b07      	ldr	r3, [pc, #28]	; (1a002ef4 <Chip_Clock_EnableOpts+0x34>)
1a002ed8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002edc:	4770      	bx	lr
		reg |= (1 << 1);
1a002ede:	2103      	movs	r1, #3
1a002ee0:	e7f0      	b.n	1a002ec4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002ee2:	f041 0120 	orr.w	r1, r1, #32
1a002ee6:	e7f2      	b.n	1a002ece <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002ee8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002eec:	4b02      	ldr	r3, [pc, #8]	; (1a002ef8 <Chip_Clock_EnableOpts+0x38>)
1a002eee:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002ef2:	4770      	bx	lr
1a002ef4:	40051000 	.word	0x40051000
1a002ef8:	40052000 	.word	0x40052000

1a002efc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002efc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002f00:	d208      	bcs.n	1a002f14 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002f02:	4a09      	ldr	r2, [pc, #36]	; (1a002f28 <Chip_Clock_Enable+0x2c>)
1a002f04:	3020      	adds	r0, #32
1a002f06:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002f0a:	f043 0301 	orr.w	r3, r3, #1
1a002f0e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002f12:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002f14:	4a05      	ldr	r2, [pc, #20]	; (1a002f2c <Chip_Clock_Enable+0x30>)
1a002f16:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002f1a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002f1e:	f043 0301 	orr.w	r3, r3, #1
1a002f22:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002f26:	4770      	bx	lr
1a002f28:	40051000 	.word	0x40051000
1a002f2c:	40052000 	.word	0x40052000

1a002f30 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002f30:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002f32:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002f36:	d309      	bcc.n	1a002f4c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002f38:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002f3c:	4a0d      	ldr	r2, [pc, #52]	; (1a002f74 <Chip_Clock_GetRate+0x44>)
1a002f3e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002f42:	f014 0f01 	tst.w	r4, #1
1a002f46:	d107      	bne.n	1a002f58 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002f48:	2000      	movs	r0, #0
	}

	return rate;
}
1a002f4a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002f4c:	f100 0320 	add.w	r3, r0, #32
1a002f50:	4a09      	ldr	r2, [pc, #36]	; (1a002f78 <Chip_Clock_GetRate+0x48>)
1a002f52:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002f56:	e7f4      	b.n	1a002f42 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002f58:	f7ff fe20 	bl	1a002b9c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002f5c:	f7ff ffa9 	bl	1a002eb2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002f60:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002f64:	d103      	bne.n	1a002f6e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002f66:	2301      	movs	r3, #1
		rate = rate / div;
1a002f68:	fbb0 f0f3 	udiv	r0, r0, r3
1a002f6c:	e7ed      	b.n	1a002f4a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002f6e:	2302      	movs	r3, #2
1a002f70:	e7fa      	b.n	1a002f68 <Chip_Clock_GetRate+0x38>
1a002f72:	bf00      	nop
1a002f74:	40052000 	.word	0x40052000
1a002f78:	40051000 	.word	0x40051000

1a002f7c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a002f7c:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a002f7e:	4b0f      	ldr	r3, [pc, #60]	; (1a002fbc <fpuInit+0x40>)
1a002f80:	681b      	ldr	r3, [r3, #0]
1a002f82:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a002f84:	4b0e      	ldr	r3, [pc, #56]	; (1a002fc0 <fpuInit+0x44>)
1a002f86:	681b      	ldr	r3, [r3, #0]
1a002f88:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a002f8a:	9a02      	ldr	r2, [sp, #8]
1a002f8c:	4b0d      	ldr	r3, [pc, #52]	; (1a002fc4 <fpuInit+0x48>)
1a002f8e:	429a      	cmp	r2, r3
1a002f90:	d00c      	beq.n	1a002fac <fpuInit+0x30>
1a002f92:	2300      	movs	r3, #0

	if (vfpPresent) {
1a002f94:	b143      	cbz	r3, 1a002fa8 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a002f96:	4a0c      	ldr	r2, [pc, #48]	; (1a002fc8 <fpuInit+0x4c>)
1a002f98:	6813      	ldr	r3, [r2, #0]
1a002f9a:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a002f9c:	9b03      	ldr	r3, [sp, #12]
1a002f9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002fa2:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a002fa4:	9b03      	ldr	r3, [sp, #12]
1a002fa6:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a002fa8:	b004      	add	sp, #16
1a002faa:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a002fac:	9a01      	ldr	r2, [sp, #4]
1a002fae:	4b07      	ldr	r3, [pc, #28]	; (1a002fcc <fpuInit+0x50>)
1a002fb0:	429a      	cmp	r2, r3
1a002fb2:	d001      	beq.n	1a002fb8 <fpuInit+0x3c>
1a002fb4:	2300      	movs	r3, #0
1a002fb6:	e7ed      	b.n	1a002f94 <fpuInit+0x18>
1a002fb8:	2301      	movs	r3, #1
1a002fba:	e7eb      	b.n	1a002f94 <fpuInit+0x18>
1a002fbc:	e000ef40 	.word	0xe000ef40
1a002fc0:	e000ef44 	.word	0xe000ef44
1a002fc4:	10110021 	.word	0x10110021
1a002fc8:	e000ed88 	.word	0xe000ed88
1a002fcc:	11000011 	.word	0x11000011

1a002fd0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002fd0:	4770      	bx	lr
1a002fd2:	Address 0x000000001a002fd2 is out of bounds.


1a002fd4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002fd4:	b570      	push	{r4, r5, r6, lr}
1a002fd6:	b08a      	sub	sp, #40	; 0x28
1a002fd8:	4605      	mov	r5, r0
1a002fda:	460e      	mov	r6, r1
1a002fdc:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002fde:	f242 7310 	movw	r3, #10000	; 0x2710
1a002fe2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002fe4:	2806      	cmp	r0, #6
1a002fe6:	d018      	beq.n	1a00301a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002fe8:	2300      	movs	r3, #0
1a002fea:	2201      	movs	r2, #1
1a002fec:	4629      	mov	r1, r5
1a002fee:	2004      	movs	r0, #4
1a002ff0:	f7ff ff20 	bl	1a002e34 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002ff4:	4a49      	ldr	r2, [pc, #292]	; (1a00311c <Chip_SetupCoreClock+0x148>)
1a002ff6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002ff8:	f043 0301 	orr.w	r3, r3, #1
1a002ffc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002ffe:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003002:	a901      	add	r1, sp, #4
1a003004:	4630      	mov	r0, r6
1a003006:	f7ff fe8d 	bl	1a002d24 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00300a:	4b45      	ldr	r3, [pc, #276]	; (1a003120 <Chip_SetupCoreClock+0x14c>)
1a00300c:	429e      	cmp	r6, r3
1a00300e:	d916      	bls.n	1a00303e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003010:	9b01      	ldr	r3, [sp, #4]
1a003012:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003016:	d003      	beq.n	1a003020 <Chip_SetupCoreClock+0x4c>
1a003018:	e7fe      	b.n	1a003018 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00301a:	f7ff fde5 	bl	1a002be8 <Chip_Clock_EnableCrystal>
1a00301e:	e7e3      	b.n	1a002fe8 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003020:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003024:	d005      	beq.n	1a003032 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00302a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00302c:	2500      	movs	r5, #0
			direct = 1;
1a00302e:	2601      	movs	r6, #1
1a003030:	e007      	b.n	1a003042 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003032:	9b04      	ldr	r3, [sp, #16]
1a003034:	3301      	adds	r3, #1
1a003036:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003038:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00303a:	2600      	movs	r6, #0
1a00303c:	e001      	b.n	1a003042 <Chip_SetupCoreClock+0x6e>
1a00303e:	2500      	movs	r5, #0
1a003040:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003042:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003046:	9b01      	ldr	r3, [sp, #4]
1a003048:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00304c:	9a05      	ldr	r2, [sp, #20]
1a00304e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003052:	9a03      	ldr	r2, [sp, #12]
1a003054:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003058:	9a04      	ldr	r2, [sp, #16]
1a00305a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00305e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003062:	4a2e      	ldr	r2, [pc, #184]	; (1a00311c <Chip_SetupCoreClock+0x148>)
1a003064:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003066:	4b2d      	ldr	r3, [pc, #180]	; (1a00311c <Chip_SetupCoreClock+0x148>)
1a003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00306a:	f013 0f01 	tst.w	r3, #1
1a00306e:	d0fa      	beq.n	1a003066 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003070:	2300      	movs	r3, #0
1a003072:	2201      	movs	r2, #1
1a003074:	2109      	movs	r1, #9
1a003076:	2004      	movs	r0, #4
1a003078:	f7ff fedc 	bl	1a002e34 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00307c:	b1fe      	cbz	r6, 1a0030be <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00307e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003082:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003084:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003086:	1e5a      	subs	r2, r3, #1
1a003088:	9209      	str	r2, [sp, #36]	; 0x24
1a00308a:	2b00      	cmp	r3, #0
1a00308c:	d1fa      	bne.n	1a003084 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00308e:	9b01      	ldr	r3, [sp, #4]
1a003090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003094:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003096:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00309a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00309e:	9a05      	ldr	r2, [sp, #20]
1a0030a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0030a4:	9a03      	ldr	r2, [sp, #12]
1a0030a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0030aa:	9a04      	ldr	r2, [sp, #16]
1a0030ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0030b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0030b4:	4a19      	ldr	r2, [pc, #100]	; (1a00311c <Chip_SetupCoreClock+0x148>)
1a0030b6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0030b8:	b36c      	cbz	r4, 1a003116 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0030ba:	2400      	movs	r4, #0
1a0030bc:	e029      	b.n	1a003112 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0030be:	2d00      	cmp	r5, #0
1a0030c0:	d0fa      	beq.n	1a0030b8 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0030c2:	f242 7310 	movw	r3, #10000	; 0x2710
1a0030c6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0030c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0030ca:	1e5a      	subs	r2, r3, #1
1a0030cc:	9209      	str	r2, [sp, #36]	; 0x24
1a0030ce:	2b00      	cmp	r3, #0
1a0030d0:	d1fa      	bne.n	1a0030c8 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0030d2:	9b04      	ldr	r3, [sp, #16]
1a0030d4:	1e5a      	subs	r2, r3, #1
1a0030d6:	9204      	str	r2, [sp, #16]
1a0030d8:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0030dc:	9b01      	ldr	r3, [sp, #4]
1a0030de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0030e2:	9905      	ldr	r1, [sp, #20]
1a0030e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0030e8:	9903      	ldr	r1, [sp, #12]
1a0030ea:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0030ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0030f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0030f6:	4a09      	ldr	r2, [pc, #36]	; (1a00311c <Chip_SetupCoreClock+0x148>)
1a0030f8:	6453      	str	r3, [r2, #68]	; 0x44
1a0030fa:	e7dd      	b.n	1a0030b8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0030fc:	4809      	ldr	r0, [pc, #36]	; (1a003124 <Chip_SetupCoreClock+0x150>)
1a0030fe:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003102:	78cb      	ldrb	r3, [r1, #3]
1a003104:	788a      	ldrb	r2, [r1, #2]
1a003106:	7849      	ldrb	r1, [r1, #1]
1a003108:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00310c:	f7ff fe92 	bl	1a002e34 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003110:	3401      	adds	r4, #1
1a003112:	2c11      	cmp	r4, #17
1a003114:	d9f2      	bls.n	1a0030fc <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003116:	b00a      	add	sp, #40	; 0x28
1a003118:	bd70      	pop	{r4, r5, r6, pc}
1a00311a:	bf00      	nop
1a00311c:	40050000 	.word	0x40050000
1a003120:	068e7780 	.word	0x068e7780
1a003124:	1a003958 	.word	0x1a003958

1a003128 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003128:	2901      	cmp	r1, #1
1a00312a:	d000      	beq.n	1a00312e <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a00312c:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a00312e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003132:	0082      	lsls	r2, r0, #2
1a003134:	4b03      	ldr	r3, [pc, #12]	; (1a003144 <Chip_I2C_EventHandler+0x1c>)
1a003136:	4413      	add	r3, r2
1a003138:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a00313a:	7d13      	ldrb	r3, [r2, #20]
1a00313c:	b2db      	uxtb	r3, r3
1a00313e:	2b04      	cmp	r3, #4
1a003140:	d0fb      	beq.n	1a00313a <Chip_I2C_EventHandler+0x12>
1a003142:	e7f3      	b.n	1a00312c <Chip_I2C_EventHandler+0x4>
1a003144:	10000094 	.word	0x10000094

1a003148 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003148:	b570      	push	{r4, r5, r6, lr}
1a00314a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a00314c:	4e06      	ldr	r6, [pc, #24]	; (1a003168 <Chip_I2C_Init+0x20>)
1a00314e:	00c4      	lsls	r4, r0, #3
1a003150:	1a22      	subs	r2, r4, r0
1a003152:	0093      	lsls	r3, r2, #2
1a003154:	4433      	add	r3, r6
1a003156:	8898      	ldrh	r0, [r3, #4]
1a003158:	f7ff fed0 	bl	1a002efc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00315c:	1b64      	subs	r4, r4, r5
1a00315e:	00a3      	lsls	r3, r4, #2
1a003160:	58f3      	ldr	r3, [r6, r3]
1a003162:	226c      	movs	r2, #108	; 0x6c
1a003164:	619a      	str	r2, [r3, #24]
}
1a003166:	bd70      	pop	{r4, r5, r6, pc}
1a003168:	10000094 	.word	0x10000094

1a00316c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a00316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003170:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003172:	4e0b      	ldr	r6, [pc, #44]	; (1a0031a0 <Chip_I2C_SetClockRate+0x34>)
1a003174:	00c5      	lsls	r5, r0, #3
1a003176:	1a2b      	subs	r3, r5, r0
1a003178:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a00317c:	eb06 0308 	add.w	r3, r6, r8
1a003180:	8898      	ldrh	r0, [r3, #4]
1a003182:	f7ff fed5 	bl	1a002f30 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003186:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00318a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00318e:	0842      	lsrs	r2, r0, #1
1a003190:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003192:	f856 3008 	ldr.w	r3, [r6, r8]
1a003196:	691a      	ldr	r2, [r3, #16]
1a003198:	1a80      	subs	r0, r0, r2
1a00319a:	6158      	str	r0, [r3, #20]
}
1a00319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0031a0:	10000094 	.word	0x10000094

1a0031a4 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0031a4:	4b03      	ldr	r3, [pc, #12]	; (1a0031b4 <Chip_SSP_GetClockIndex+0x10>)
1a0031a6:	4298      	cmp	r0, r3
1a0031a8:	d001      	beq.n	1a0031ae <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0031aa:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0031ac:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0031ae:	20a5      	movs	r0, #165	; 0xa5
1a0031b0:	4770      	bx	lr
1a0031b2:	bf00      	nop
1a0031b4:	400c5000 	.word	0x400c5000

1a0031b8 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0031b8:	4b04      	ldr	r3, [pc, #16]	; (1a0031cc <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0031ba:	4298      	cmp	r0, r3
1a0031bc:	d002      	beq.n	1a0031c4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0031be:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0031c2:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0031c4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0031c8:	4770      	bx	lr
1a0031ca:	bf00      	nop
1a0031cc:	400c5000 	.word	0x400c5000

1a0031d0 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0031d0:	6803      	ldr	r3, [r0, #0]
1a0031d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0031d6:	0209      	lsls	r1, r1, #8
1a0031d8:	b289      	uxth	r1, r1
1a0031da:	4319      	orrs	r1, r3
1a0031dc:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0031de:	6102      	str	r2, [r0, #16]
}
1a0031e0:	4770      	bx	lr

1a0031e2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0031e2:	b570      	push	{r4, r5, r6, lr}
1a0031e4:	4606      	mov	r6, r0
1a0031e6:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0031e8:	f7ff ffe6 	bl	1a0031b8 <Chip_SSP_GetPeriphClockIndex>
1a0031ec:	f7ff fea0 	bl	1a002f30 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0031f0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0031f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0031f6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0031f8:	e000      	b.n	1a0031fc <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0031fa:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0031fc:	42ab      	cmp	r3, r5
1a0031fe:	d90b      	bls.n	1a003218 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003200:	1c4c      	adds	r4, r1, #1
1a003202:	fb02 f304 	mul.w	r3, r2, r4
1a003206:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00320a:	429d      	cmp	r5, r3
1a00320c:	d2f6      	bcs.n	1a0031fc <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00320e:	2cff      	cmp	r4, #255	; 0xff
1a003210:	d9f3      	bls.n	1a0031fa <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003212:	3202      	adds	r2, #2
				cr0_div = 0;
1a003214:	2100      	movs	r1, #0
1a003216:	e7f1      	b.n	1a0031fc <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003218:	4630      	mov	r0, r6
1a00321a:	f7ff ffd9 	bl	1a0031d0 <Chip_SSP_SetClockRate>
}
1a00321e:	bd70      	pop	{r4, r5, r6, pc}

1a003220 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003220:	b510      	push	{r4, lr}
1a003222:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003224:	f7ff ffbe 	bl	1a0031a4 <Chip_SSP_GetClockIndex>
1a003228:	f7ff fe68 	bl	1a002efc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00322c:	4620      	mov	r0, r4
1a00322e:	f7ff ffc3 	bl	1a0031b8 <Chip_SSP_GetPeriphClockIndex>
1a003232:	f7ff fe63 	bl	1a002efc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003236:	6863      	ldr	r3, [r4, #4]
1a003238:	f023 0304 	bic.w	r3, r3, #4
1a00323c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00323e:	6823      	ldr	r3, [r4, #0]
1a003240:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003244:	f043 0307 	orr.w	r3, r3, #7
1a003248:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00324a:	4902      	ldr	r1, [pc, #8]	; (1a003254 <Chip_SSP_Init+0x34>)
1a00324c:	4620      	mov	r0, r4
1a00324e:	f7ff ffc8 	bl	1a0031e2 <Chip_SSP_SetBitRate>
}
1a003252:	bd10      	pop	{r4, pc}
1a003254:	000186a0 	.word	0x000186a0

1a003258 <ResetISR>:
void ResetISR(void) {
1a003258:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a00325a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00325c:	4b18      	ldr	r3, [pc, #96]	; (1a0032c0 <ResetISR+0x68>)
1a00325e:	4a19      	ldr	r2, [pc, #100]	; (1a0032c4 <ResetISR+0x6c>)
1a003260:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003262:	3304      	adds	r3, #4
1a003264:	4a18      	ldr	r2, [pc, #96]	; (1a0032c8 <ResetISR+0x70>)
1a003266:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003268:	2300      	movs	r3, #0
1a00326a:	e005      	b.n	1a003278 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00326c:	4a17      	ldr	r2, [pc, #92]	; (1a0032cc <ResetISR+0x74>)
1a00326e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a003272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003276:	3301      	adds	r3, #1
1a003278:	2b07      	cmp	r3, #7
1a00327a:	d9f7      	bls.n	1a00326c <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a00327c:	b662      	cpsie	i
    SystemInit();
1a00327e:	f7ff fa0d 	bl	1a00269c <SystemInit>
    SectionTableAddr = &__data_section_table;
1a003282:	4b13      	ldr	r3, [pc, #76]	; (1a0032d0 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a003284:	e007      	b.n	1a003296 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a003286:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00328a:	689a      	ldr	r2, [r3, #8]
1a00328c:	6859      	ldr	r1, [r3, #4]
1a00328e:	6818      	ldr	r0, [r3, #0]
1a003290:	f7fc ff7c 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a003294:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a003296:	4a0f      	ldr	r2, [pc, #60]	; (1a0032d4 <ResetISR+0x7c>)
1a003298:	4293      	cmp	r3, r2
1a00329a:	d3f4      	bcc.n	1a003286 <ResetISR+0x2e>
1a00329c:	e006      	b.n	1a0032ac <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a00329e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0032a0:	6859      	ldr	r1, [r3, #4]
1a0032a2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0032a6:	f7fc ff80 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a0032aa:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0032ac:	4a0a      	ldr	r2, [pc, #40]	; (1a0032d8 <ResetISR+0x80>)
1a0032ae:	4293      	cmp	r3, r2
1a0032b0:	d3f5      	bcc.n	1a00329e <ResetISR+0x46>
    __libc_init_array();
1a0032b2:	f000 f995 	bl	1a0035e0 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0032b6:	f7ff f9db 	bl	1a002670 <Board_Init>
    main();
1a0032ba:	f7fd f847 	bl	1a00034c <main>
1a0032be:	e7fe      	b.n	1a0032be <ResetISR+0x66>
1a0032c0:	40053100 	.word	0x40053100
1a0032c4:	10df1000 	.word	0x10df1000
1a0032c8:	01dff7ff 	.word	0x01dff7ff
1a0032cc:	e000e280 	.word	0xe000e280
1a0032d0:	1a000114 	.word	0x1a000114
1a0032d4:	1a000150 	.word	0x1a000150
1a0032d8:	1a000178 	.word	0x1a000178

1a0032dc <_init>:
void _init(void) {}
1a0032dc:	4770      	bx	lr
1a0032de:	Address 0x000000001a0032de is out of bounds.


1a0032e0 <__aeabi_uldivmod>:
1a0032e0:	b953      	cbnz	r3, 1a0032f8 <__aeabi_uldivmod+0x18>
1a0032e2:	b94a      	cbnz	r2, 1a0032f8 <__aeabi_uldivmod+0x18>
1a0032e4:	2900      	cmp	r1, #0
1a0032e6:	bf08      	it	eq
1a0032e8:	2800      	cmpeq	r0, #0
1a0032ea:	bf1c      	itt	ne
1a0032ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0032f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0032f4:	f000 b972 	b.w	1a0035dc <__aeabi_idiv0>
1a0032f8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0032fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003300:	f000 f806 	bl	1a003310 <__udivmoddi4>
1a003304:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00330c:	b004      	add	sp, #16
1a00330e:	4770      	bx	lr

1a003310 <__udivmoddi4>:
1a003310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003314:	9e08      	ldr	r6, [sp, #32]
1a003316:	4604      	mov	r4, r0
1a003318:	4688      	mov	r8, r1
1a00331a:	2b00      	cmp	r3, #0
1a00331c:	d14b      	bne.n	1a0033b6 <__udivmoddi4+0xa6>
1a00331e:	428a      	cmp	r2, r1
1a003320:	4615      	mov	r5, r2
1a003322:	d967      	bls.n	1a0033f4 <__udivmoddi4+0xe4>
1a003324:	fab2 f282 	clz	r2, r2
1a003328:	b14a      	cbz	r2, 1a00333e <__udivmoddi4+0x2e>
1a00332a:	f1c2 0720 	rsb	r7, r2, #32
1a00332e:	fa01 f302 	lsl.w	r3, r1, r2
1a003332:	fa20 f707 	lsr.w	r7, r0, r7
1a003336:	4095      	lsls	r5, r2
1a003338:	ea47 0803 	orr.w	r8, r7, r3
1a00333c:	4094      	lsls	r4, r2
1a00333e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003342:	0c23      	lsrs	r3, r4, #16
1a003344:	fbb8 f7fe 	udiv	r7, r8, lr
1a003348:	fa1f fc85 	uxth.w	ip, r5
1a00334c:	fb0e 8817 	mls	r8, lr, r7, r8
1a003350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003354:	fb07 f10c 	mul.w	r1, r7, ip
1a003358:	4299      	cmp	r1, r3
1a00335a:	d909      	bls.n	1a003370 <__udivmoddi4+0x60>
1a00335c:	18eb      	adds	r3, r5, r3
1a00335e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003362:	f080 811b 	bcs.w	1a00359c <__udivmoddi4+0x28c>
1a003366:	4299      	cmp	r1, r3
1a003368:	f240 8118 	bls.w	1a00359c <__udivmoddi4+0x28c>
1a00336c:	3f02      	subs	r7, #2
1a00336e:	442b      	add	r3, r5
1a003370:	1a5b      	subs	r3, r3, r1
1a003372:	b2a4      	uxth	r4, r4
1a003374:	fbb3 f0fe 	udiv	r0, r3, lr
1a003378:	fb0e 3310 	mls	r3, lr, r0, r3
1a00337c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003380:	fb00 fc0c 	mul.w	ip, r0, ip
1a003384:	45a4      	cmp	ip, r4
1a003386:	d909      	bls.n	1a00339c <__udivmoddi4+0x8c>
1a003388:	192c      	adds	r4, r5, r4
1a00338a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00338e:	f080 8107 	bcs.w	1a0035a0 <__udivmoddi4+0x290>
1a003392:	45a4      	cmp	ip, r4
1a003394:	f240 8104 	bls.w	1a0035a0 <__udivmoddi4+0x290>
1a003398:	3802      	subs	r0, #2
1a00339a:	442c      	add	r4, r5
1a00339c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0033a0:	eba4 040c 	sub.w	r4, r4, ip
1a0033a4:	2700      	movs	r7, #0
1a0033a6:	b11e      	cbz	r6, 1a0033b0 <__udivmoddi4+0xa0>
1a0033a8:	40d4      	lsrs	r4, r2
1a0033aa:	2300      	movs	r3, #0
1a0033ac:	e9c6 4300 	strd	r4, r3, [r6]
1a0033b0:	4639      	mov	r1, r7
1a0033b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0033b6:	428b      	cmp	r3, r1
1a0033b8:	d909      	bls.n	1a0033ce <__udivmoddi4+0xbe>
1a0033ba:	2e00      	cmp	r6, #0
1a0033bc:	f000 80eb 	beq.w	1a003596 <__udivmoddi4+0x286>
1a0033c0:	2700      	movs	r7, #0
1a0033c2:	e9c6 0100 	strd	r0, r1, [r6]
1a0033c6:	4638      	mov	r0, r7
1a0033c8:	4639      	mov	r1, r7
1a0033ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0033ce:	fab3 f783 	clz	r7, r3
1a0033d2:	2f00      	cmp	r7, #0
1a0033d4:	d147      	bne.n	1a003466 <__udivmoddi4+0x156>
1a0033d6:	428b      	cmp	r3, r1
1a0033d8:	d302      	bcc.n	1a0033e0 <__udivmoddi4+0xd0>
1a0033da:	4282      	cmp	r2, r0
1a0033dc:	f200 80fa 	bhi.w	1a0035d4 <__udivmoddi4+0x2c4>
1a0033e0:	1a84      	subs	r4, r0, r2
1a0033e2:	eb61 0303 	sbc.w	r3, r1, r3
1a0033e6:	2001      	movs	r0, #1
1a0033e8:	4698      	mov	r8, r3
1a0033ea:	2e00      	cmp	r6, #0
1a0033ec:	d0e0      	beq.n	1a0033b0 <__udivmoddi4+0xa0>
1a0033ee:	e9c6 4800 	strd	r4, r8, [r6]
1a0033f2:	e7dd      	b.n	1a0033b0 <__udivmoddi4+0xa0>
1a0033f4:	b902      	cbnz	r2, 1a0033f8 <__udivmoddi4+0xe8>
1a0033f6:	deff      	udf	#255	; 0xff
1a0033f8:	fab2 f282 	clz	r2, r2
1a0033fc:	2a00      	cmp	r2, #0
1a0033fe:	f040 808f 	bne.w	1a003520 <__udivmoddi4+0x210>
1a003402:	1b49      	subs	r1, r1, r5
1a003404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003408:	fa1f f885 	uxth.w	r8, r5
1a00340c:	2701      	movs	r7, #1
1a00340e:	fbb1 fcfe 	udiv	ip, r1, lr
1a003412:	0c23      	lsrs	r3, r4, #16
1a003414:	fb0e 111c 	mls	r1, lr, ip, r1
1a003418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00341c:	fb08 f10c 	mul.w	r1, r8, ip
1a003420:	4299      	cmp	r1, r3
1a003422:	d907      	bls.n	1a003434 <__udivmoddi4+0x124>
1a003424:	18eb      	adds	r3, r5, r3
1a003426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00342a:	d202      	bcs.n	1a003432 <__udivmoddi4+0x122>
1a00342c:	4299      	cmp	r1, r3
1a00342e:	f200 80cd 	bhi.w	1a0035cc <__udivmoddi4+0x2bc>
1a003432:	4684      	mov	ip, r0
1a003434:	1a59      	subs	r1, r3, r1
1a003436:	b2a3      	uxth	r3, r4
1a003438:	fbb1 f0fe 	udiv	r0, r1, lr
1a00343c:	fb0e 1410 	mls	r4, lr, r0, r1
1a003440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003444:	fb08 f800 	mul.w	r8, r8, r0
1a003448:	45a0      	cmp	r8, r4
1a00344a:	d907      	bls.n	1a00345c <__udivmoddi4+0x14c>
1a00344c:	192c      	adds	r4, r5, r4
1a00344e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003452:	d202      	bcs.n	1a00345a <__udivmoddi4+0x14a>
1a003454:	45a0      	cmp	r8, r4
1a003456:	f200 80b6 	bhi.w	1a0035c6 <__udivmoddi4+0x2b6>
1a00345a:	4618      	mov	r0, r3
1a00345c:	eba4 0408 	sub.w	r4, r4, r8
1a003460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003464:	e79f      	b.n	1a0033a6 <__udivmoddi4+0x96>
1a003466:	f1c7 0c20 	rsb	ip, r7, #32
1a00346a:	40bb      	lsls	r3, r7
1a00346c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003470:	ea4e 0e03 	orr.w	lr, lr, r3
1a003474:	fa01 f407 	lsl.w	r4, r1, r7
1a003478:	fa20 f50c 	lsr.w	r5, r0, ip
1a00347c:	fa21 f30c 	lsr.w	r3, r1, ip
1a003480:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003484:	4325      	orrs	r5, r4
1a003486:	fbb3 f9f8 	udiv	r9, r3, r8
1a00348a:	0c2c      	lsrs	r4, r5, #16
1a00348c:	fb08 3319 	mls	r3, r8, r9, r3
1a003490:	fa1f fa8e 	uxth.w	sl, lr
1a003494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003498:	fb09 f40a 	mul.w	r4, r9, sl
1a00349c:	429c      	cmp	r4, r3
1a00349e:	fa02 f207 	lsl.w	r2, r2, r7
1a0034a2:	fa00 f107 	lsl.w	r1, r0, r7
1a0034a6:	d90b      	bls.n	1a0034c0 <__udivmoddi4+0x1b0>
1a0034a8:	eb1e 0303 	adds.w	r3, lr, r3
1a0034ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0034b0:	f080 8087 	bcs.w	1a0035c2 <__udivmoddi4+0x2b2>
1a0034b4:	429c      	cmp	r4, r3
1a0034b6:	f240 8084 	bls.w	1a0035c2 <__udivmoddi4+0x2b2>
1a0034ba:	f1a9 0902 	sub.w	r9, r9, #2
1a0034be:	4473      	add	r3, lr
1a0034c0:	1b1b      	subs	r3, r3, r4
1a0034c2:	b2ad      	uxth	r5, r5
1a0034c4:	fbb3 f0f8 	udiv	r0, r3, r8
1a0034c8:	fb08 3310 	mls	r3, r8, r0, r3
1a0034cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0034d0:	fb00 fa0a 	mul.w	sl, r0, sl
1a0034d4:	45a2      	cmp	sl, r4
1a0034d6:	d908      	bls.n	1a0034ea <__udivmoddi4+0x1da>
1a0034d8:	eb1e 0404 	adds.w	r4, lr, r4
1a0034dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0034e0:	d26b      	bcs.n	1a0035ba <__udivmoddi4+0x2aa>
1a0034e2:	45a2      	cmp	sl, r4
1a0034e4:	d969      	bls.n	1a0035ba <__udivmoddi4+0x2aa>
1a0034e6:	3802      	subs	r0, #2
1a0034e8:	4474      	add	r4, lr
1a0034ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0034ee:	fba0 8902 	umull	r8, r9, r0, r2
1a0034f2:	eba4 040a 	sub.w	r4, r4, sl
1a0034f6:	454c      	cmp	r4, r9
1a0034f8:	46c2      	mov	sl, r8
1a0034fa:	464b      	mov	r3, r9
1a0034fc:	d354      	bcc.n	1a0035a8 <__udivmoddi4+0x298>
1a0034fe:	d051      	beq.n	1a0035a4 <__udivmoddi4+0x294>
1a003500:	2e00      	cmp	r6, #0
1a003502:	d069      	beq.n	1a0035d8 <__udivmoddi4+0x2c8>
1a003504:	ebb1 050a 	subs.w	r5, r1, sl
1a003508:	eb64 0403 	sbc.w	r4, r4, r3
1a00350c:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003510:	40fd      	lsrs	r5, r7
1a003512:	40fc      	lsrs	r4, r7
1a003514:	ea4c 0505 	orr.w	r5, ip, r5
1a003518:	e9c6 5400 	strd	r5, r4, [r6]
1a00351c:	2700      	movs	r7, #0
1a00351e:	e747      	b.n	1a0033b0 <__udivmoddi4+0xa0>
1a003520:	f1c2 0320 	rsb	r3, r2, #32
1a003524:	fa20 f703 	lsr.w	r7, r0, r3
1a003528:	4095      	lsls	r5, r2
1a00352a:	fa01 f002 	lsl.w	r0, r1, r2
1a00352e:	fa21 f303 	lsr.w	r3, r1, r3
1a003532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003536:	4338      	orrs	r0, r7
1a003538:	0c01      	lsrs	r1, r0, #16
1a00353a:	fbb3 f7fe 	udiv	r7, r3, lr
1a00353e:	fa1f f885 	uxth.w	r8, r5
1a003542:	fb0e 3317 	mls	r3, lr, r7, r3
1a003546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00354a:	fb07 f308 	mul.w	r3, r7, r8
1a00354e:	428b      	cmp	r3, r1
1a003550:	fa04 f402 	lsl.w	r4, r4, r2
1a003554:	d907      	bls.n	1a003566 <__udivmoddi4+0x256>
1a003556:	1869      	adds	r1, r5, r1
1a003558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00355c:	d22f      	bcs.n	1a0035be <__udivmoddi4+0x2ae>
1a00355e:	428b      	cmp	r3, r1
1a003560:	d92d      	bls.n	1a0035be <__udivmoddi4+0x2ae>
1a003562:	3f02      	subs	r7, #2
1a003564:	4429      	add	r1, r5
1a003566:	1acb      	subs	r3, r1, r3
1a003568:	b281      	uxth	r1, r0
1a00356a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00356e:	fb0e 3310 	mls	r3, lr, r0, r3
1a003572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003576:	fb00 f308 	mul.w	r3, r0, r8
1a00357a:	428b      	cmp	r3, r1
1a00357c:	d907      	bls.n	1a00358e <__udivmoddi4+0x27e>
1a00357e:	1869      	adds	r1, r5, r1
1a003580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003584:	d217      	bcs.n	1a0035b6 <__udivmoddi4+0x2a6>
1a003586:	428b      	cmp	r3, r1
1a003588:	d915      	bls.n	1a0035b6 <__udivmoddi4+0x2a6>
1a00358a:	3802      	subs	r0, #2
1a00358c:	4429      	add	r1, r5
1a00358e:	1ac9      	subs	r1, r1, r3
1a003590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003594:	e73b      	b.n	1a00340e <__udivmoddi4+0xfe>
1a003596:	4637      	mov	r7, r6
1a003598:	4630      	mov	r0, r6
1a00359a:	e709      	b.n	1a0033b0 <__udivmoddi4+0xa0>
1a00359c:	4607      	mov	r7, r0
1a00359e:	e6e7      	b.n	1a003370 <__udivmoddi4+0x60>
1a0035a0:	4618      	mov	r0, r3
1a0035a2:	e6fb      	b.n	1a00339c <__udivmoddi4+0x8c>
1a0035a4:	4541      	cmp	r1, r8
1a0035a6:	d2ab      	bcs.n	1a003500 <__udivmoddi4+0x1f0>
1a0035a8:	ebb8 0a02 	subs.w	sl, r8, r2
1a0035ac:	eb69 020e 	sbc.w	r2, r9, lr
1a0035b0:	3801      	subs	r0, #1
1a0035b2:	4613      	mov	r3, r2
1a0035b4:	e7a4      	b.n	1a003500 <__udivmoddi4+0x1f0>
1a0035b6:	4660      	mov	r0, ip
1a0035b8:	e7e9      	b.n	1a00358e <__udivmoddi4+0x27e>
1a0035ba:	4618      	mov	r0, r3
1a0035bc:	e795      	b.n	1a0034ea <__udivmoddi4+0x1da>
1a0035be:	4667      	mov	r7, ip
1a0035c0:	e7d1      	b.n	1a003566 <__udivmoddi4+0x256>
1a0035c2:	4681      	mov	r9, r0
1a0035c4:	e77c      	b.n	1a0034c0 <__udivmoddi4+0x1b0>
1a0035c6:	3802      	subs	r0, #2
1a0035c8:	442c      	add	r4, r5
1a0035ca:	e747      	b.n	1a00345c <__udivmoddi4+0x14c>
1a0035cc:	f1ac 0c02 	sub.w	ip, ip, #2
1a0035d0:	442b      	add	r3, r5
1a0035d2:	e72f      	b.n	1a003434 <__udivmoddi4+0x124>
1a0035d4:	4638      	mov	r0, r7
1a0035d6:	e708      	b.n	1a0033ea <__udivmoddi4+0xda>
1a0035d8:	4637      	mov	r7, r6
1a0035da:	e6e9      	b.n	1a0033b0 <__udivmoddi4+0xa0>

1a0035dc <__aeabi_idiv0>:
1a0035dc:	4770      	bx	lr
1a0035de:	bf00      	nop

1a0035e0 <__libc_init_array>:
1a0035e0:	b570      	push	{r4, r5, r6, lr}
1a0035e2:	4e0d      	ldr	r6, [pc, #52]	; (1a003618 <__libc_init_array+0x38>)
1a0035e4:	4c0d      	ldr	r4, [pc, #52]	; (1a00361c <__libc_init_array+0x3c>)
1a0035e6:	1ba4      	subs	r4, r4, r6
1a0035e8:	10a4      	asrs	r4, r4, #2
1a0035ea:	2500      	movs	r5, #0
1a0035ec:	42a5      	cmp	r5, r4
1a0035ee:	d109      	bne.n	1a003604 <__libc_init_array+0x24>
1a0035f0:	4e0b      	ldr	r6, [pc, #44]	; (1a003620 <__libc_init_array+0x40>)
1a0035f2:	4c0c      	ldr	r4, [pc, #48]	; (1a003624 <__libc_init_array+0x44>)
1a0035f4:	f7ff fe72 	bl	1a0032dc <_init>
1a0035f8:	1ba4      	subs	r4, r4, r6
1a0035fa:	10a4      	asrs	r4, r4, #2
1a0035fc:	2500      	movs	r5, #0
1a0035fe:	42a5      	cmp	r5, r4
1a003600:	d105      	bne.n	1a00360e <__libc_init_array+0x2e>
1a003602:	bd70      	pop	{r4, r5, r6, pc}
1a003604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003608:	4798      	blx	r3
1a00360a:	3501      	adds	r5, #1
1a00360c:	e7ee      	b.n	1a0035ec <__libc_init_array+0xc>
1a00360e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003612:	4798      	blx	r3
1a003614:	3501      	adds	r5, #1
1a003616:	e7f2      	b.n	1a0035fe <__libc_init_array+0x1e>
1a003618:	1a0039a0 	.word	0x1a0039a0
1a00361c:	1a0039a0 	.word	0x1a0039a0
1a003620:	1a0039a0 	.word	0x1a0039a0
1a003624:	1a0039a0 	.word	0x1a0039a0

1a003628 <memcpy>:
1a003628:	b510      	push	{r4, lr}
1a00362a:	1e43      	subs	r3, r0, #1
1a00362c:	440a      	add	r2, r1
1a00362e:	4291      	cmp	r1, r2
1a003630:	d100      	bne.n	1a003634 <memcpy+0xc>
1a003632:	bd10      	pop	{r4, pc}
1a003634:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003638:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00363c:	e7f7      	b.n	1a00362e <memcpy+0x6>

1a00363e <memset>:
1a00363e:	4402      	add	r2, r0
1a003640:	4603      	mov	r3, r0
1a003642:	4293      	cmp	r3, r2
1a003644:	d100      	bne.n	1a003648 <memset+0xa>
1a003646:	4770      	bx	lr
1a003648:	f803 1b01 	strb.w	r1, [r3], #1
1a00364c:	e7f9      	b.n	1a003642 <memset+0x4>
1a00364e:	ffff 6c42 	vdup.8	q11, d2[7]
1a003652:	6e69      	.short	0x6e69
1a003654:	6320796b 	.word	0x6320796b
1a003658:	66206e6f 	.word	0x66206e6f
1a00365c:	52656572 	.word	0x52656572
1a003660:	20534f54 	.word	0x20534f54
1a003664:	41732079 	.word	0x41732079
1a003668:	002e4950 	.word	0x002e4950
1a00366c:	6154796d 	.word	0x6154796d
1a003670:	ff006b73 	.word	0xff006b73
1a003674:	6e696c42 	.word	0x6e696c42
1a003678:	ff00216b 	.word	0xff00216b
1a00367c:	454c4449 	.word	0x454c4449
1a003680:	ffffff00 	.word	0xffffff00
1a003684:	51726d54 	.word	0x51726d54
1a003688:	ffffff00 	.word	0xffffff00
1a00368c:	20726d54 	.word	0x20726d54
1a003690:	00637653 	.word	0x00637653

1a003694 <lpcUarts>:
1a003694:	40081000 06020406 00180205 40081000     ...@...........@
1a0036a4:	09070509 00180706 40082000 00000000     ......... .@....
1a0036b4:	00190000 400c1000 07060107 001a0602     .......@........
1a0036c4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0036d4:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0036e4:	0072656d                                mer.

1a0036e8 <gpioPinsInit>:
1a0036e8:	02000104 00050701 05010d03 04080100     ................
1a0036f8:	02020002 02000304 00000403 04070002     ................
1a003708:	030c0300 09050402 05040103 04030208     ................
1a003718:	04020305 06040504 0802000c 03000b06     ................
1a003728:	00090607 07060503 060f0504 03030004     ................
1a003738:	02000404 00050404 06040502 04060200     ................
1a003748:	0c050408 05040a04 0003010e 14010a00     ................
1a003758:	010f0000 0d000012 00001101 0010010c     ................
1a003768:	07070300 000f0300 01000001 00000000     ................
1a003778:	000a0600 08060603 06100504 04030005     ................
1a003788:	03000106 04090400 04010d05 010b0000     ................
1a003798:	0200000f 00000001 00010104 02010800     ................
1a0037a8:	01090000 09010006 05040002 04010200     ................
1a0037b8:	02020105 02020504 0e00000a 01000b02     ................
1a0037c8:	000c020b 00040c01 04000200 01020001     ................
1a0037d8:	02000204 00030402 03070302 070b0300     ................
1a0037e8:	0c030004 03000507 0006070d 01020e03     ................
1a0037f8:	04010504 06020006 02000504 00040405     ................
1a003808:	08040402 040c0504 0d050409 05040a04     ................
1a003818:	0005010e ffff0801 ff000a0d              ............

1a003824 <ultrasonicSensorsIrqMap>:
1a003824:	ff020100                                ....

1a003828 <ExtRateIn>:
1a003828:	00000000                                ....

1a00382c <GpioButtons>:
1a00382c:	08000400 09010900                       ........

1a003834 <GpioLeds>:
1a003834:	01050005 0e000205 0c010b01              ............

1a003840 <GpioPorts>:
1a003840:	03030003 0f050403 05031005 07030603     ................
1a003850:	ffff0802                                ....

1a003854 <OscRateIn>:
1a003854:	00b71b00                                ....

1a003858 <InitClkStates>:
1a003858:	01010f01                                ....

1a00385c <pinmuxing>:
1a00385c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00386c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00387c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00388c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00389c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0038ac:	00d50301 00d50401 00160107 00560207     ..............V.
1a0038bc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0038cc:	00570206                                ..W.

1a0038d0 <UART_BClock>:
1a0038d0:	01a201c2 01620182                       ......b.

1a0038d8 <UART_PClock>:
1a0038d8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0038e8:	000000ff                                ....

1a0038ec <periph_to_base>:
1a0038ec:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0038fc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00390c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00391c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00392c:	01820013 00120182 01a201a2 01c20011     ................
1a00393c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00394c:	02220222 0223000d 001c0223              "."...#.#...

1a003958 <InitClkStates>:
1a003958:	00010100 00010909 0001090a 01010701     ................
1a003968:	00010902 00010906 0101090c 0001090d     ................
1a003978:	0001090e 0001090f 00010910 00010911     ................
1a003988:	00010912 00010913 00011114 00011119     ................
1a003998:	0001111a 0001111b                       ........
