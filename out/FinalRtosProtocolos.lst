
mis_proyectos/FinalRtosProtocolos/out/FinalRtosProtocolos.elf:     file format elf32-littlearm
mis_proyectos/FinalRtosProtocolos/out/FinalRtosProtocolos.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a003bed

Program Header:
0x70000001 off    0x00014360 vaddr 0x1a004360 paddr 0x1a004360 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010088 vaddr 0x10000088 paddr 0x10000088 align 2**16
         filesz 0x00000000 memsz 0x00002af8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004368 memsz 0x00004368 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004368 align 2**16
         filesz 0x00000084 memsz 0x00000084 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004360  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  10000000  1a004368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020084  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
  6 .bss          00002af8  10000088  10000088  00010088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a004360  1a004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020084  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020084  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020084  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 17 .noinit       00000000  10002b80  10002b80  00020084  2**2
                  CONTENTS
 18 .debug_info   000293e5  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000052df  00000000  00000000  00049469  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000aea3  00000000  00000000  0004e748  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000eb0  00000000  00000000  000595eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000fe8  00000000  00000000  0005a49b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000098f2  00000000  00000000  0005b483  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0001196e  00000000  00000000  00064d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002d824  00000000  00000000  000766e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000a3f07  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000a3f86  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000267c  00000000  00000000  000a3fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004360 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b80 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 FinalRtosProtocolos.c
100000a8 l     O .bss	00000001 debugPrint
100000ac l     O .bss	00000004 xHigherPriorityTaskWoken.13941
100000b0 l     O .bss	00000004 xHigherPriorityTaskWoken.13945
100000b4 l     O .bss	00000004 xHigherPriorityTaskWoken.13949
100000b8 l     O .bss	00000004 xHigherPriorityTaskWoken.13953
00000000 l    df *ABS*	00000000 heap_1.c
100000c0 l     O .bss	00002000 ucHeap
100000bc l     O .bss	00000004 pucAlignedHeap.11323
100020c0 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000a1a l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000a2c l     F .text	0000001e prvIsQueueFull
1a000a4a l     F .text	0000001a prvIsQueueEmpty
1a000a64 l     F .text	00000076 prvCopyDataToQueue
1a000ada l     F .text	00000024 prvCopyDataFromQueue
1a000afe l     F .text	0000006e prvUnlockQueue
1a000bf0 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c4 l     O .bss	00000168 uxIdleTaskStack.10613
1000222c l     O .bss	000005a0 uxTimerTaskStack.10620
100027cc l     O .bss	00000060 xIdleTaskTCB.10612
1000282c l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001420 l     F .text	0000002c prvResetNextTaskUnblockTime
1a00144c l     F .text	00000092 prvInitialiseNewTask
1a0014e0 l     F .text	00000068 prvInitialiseTaskLists
1a001548 l     F .text	000000ac prvAddNewTaskToReadyList
1a0015f4 l     F .text	00000038 prvDeleteTCB
1a00162c l     F .text	0000004c prvCheckTasksWaitingTermination
1a001678 l     F .text	00000028 prvIdleTask
1a0016a0 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002890 l     O .bss	00000004 pxDelayedTaskList
10002894 l     O .bss	00000004 pxOverflowDelayedTaskList
10002898 l     O .bss	0000008c pxReadyTasksLists
10002924 l     O .bss	00000004 uxCurrentNumberOfTasks
10002928 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000292c l     O .bss	00000004 uxPendedTicks
10002930 l     O .bss	00000004 uxSchedulerSuspended
10002934 l     O .bss	00000004 uxTaskNumber
10002938 l     O .bss	00000004 uxTopReadyPriority
1000293c l     O .bss	00000014 xDelayedTaskList1
10002950 l     O .bss	00000014 xDelayedTaskList2
10002964 l     O .bss	00000004 xNextTaskUnblockTime
10002968 l     O .bss	00000004 xNumOfOverflows
1000296c l     O .bss	00000014 xPendingReadyList
10002980 l     O .bss	00000004 xSchedulerRunning
10002984 l     O .bss	00000014 xSuspendedTaskList
10002998 l     O .bss	00000014 xTasksWaitingTermination
100029ac l     O .bss	00000004 xTickCount
100029b0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002080 l     F .text	00000020 prvGetNextExpireTime
1a0020a0 l     F .text	00000048 prvInsertTimerInActiveList
1a0020e8 l     F .text	00000070 prvCheckForValidListAndQueue
1a002158 l     F .text	00000040 prvInitialiseNewTimer
1a002528 l     F .text	00000016 prvTimerTask
1a0022b4 l     F .text	00000078 prvSwitchTimerLists
1a00232c l     F .text	0000002c prvSampleTimeNow
1a002358 l     F .text	00000060 prvProcessExpiredTimer
1a0023b8 l     F .text	00000074 prvProcessTimerOrBlockTask
1a00242c l     F .text	000000fc prvProcessReceivedCommands
100029b4 l     O .bss	00000004 pxCurrentTimerList
100029b8 l     O .bss	00000004 pxOverflowTimerList
100029bc l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002a5c l     O .bss	00000014 xActiveTimerList1
10002a70 l     O .bss	00000014 xActiveTimerList2
10002a84 l     O .bss	00000004 xLastTime.11662
10002a88 l     O .bss	00000050 xStaticTimerQueue.11712
10002ad8 l     O .bss	00000004 xTimerQueue
10002adc l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002540 l     F .text	00000040 prvTaskExitError
1a002580 l     F .text	00000022 prvPortStartFirstTask
1a0025a8 l     F .text	0000000e vPortEnableVFP
1a002610 l       .text	00000000 pxCurrentTCBConst2
1a0026f0 l       .text	00000000 pxCurrentTCBConst
10002ae0 l     O .bss	00000001 ucMaxSysCallPriority
10002ae4 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00405c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002ae8 l     O .bss	00000004 callBackFuncParams
10002af0 l     O .bss	00000008 tickCounter
10002af8 l     O .bss	00000004 tickHookFunction
10002afc l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0029dc l     F .text	00000002 errorOcurred
1a0029de l     F .text	00000002 doNothing
1000000c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002ae8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b2c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 board.c
1a002e90 l     F .text	00000044 Board_LED_Init
1a002ed4 l     F .text	00000040 Board_TEC_Init
1a002f14 l     F .text	00000040 Board_GPIO_Init
1a002f54 l     F .text	00000038 Board_SPI_Init
1a002f8c l     F .text	00000024 Board_I2C_Init
1a002fb0 l     F .text	00000030 Board_ADC_Init
1a0041ec l     O .text	00000008 GpioButtons
1a0041f4 l     O .text	0000000c GpioLeds
1a004200 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004218 l     O .text	00000004 InitClkStates
1a00421c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0030fc l     F .text	0000002c Chip_UART_GetIndex
1a004290 l     O .text	00000008 UART_BClock
1a004298 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0032a4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0032b8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003380 l     F .text	000000a4 pll_calc_divs
1a003424 l     F .text	0000010c pll_get_frac
1a003530 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0037a4 l     F .text	00000022 Chip_Clock_GetDivRate
10002b30 l     O .bss	00000008 audio_usb_pll_freq
1a0042ac l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004318 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000004c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003b38 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003b4c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a004360 l       .bss_RAM5	00000000 __init_array_end
1a004360 l       .bss_RAM5	00000000 __preinit_array_end
1a004360 l       .bss_RAM5	00000000 __init_array_start
1a004360 l       .bss_RAM5	00000000 __preinit_array_start
1a0035c8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002a60 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002658 g     F .text	0000002c vPortExitCritical
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a001308 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a00335e g     F .text	0000000c Chip_ADC_SetResolution
1a00060c g     F .text	00000138 configInterrupts
1a0026f4 g     F .text	0000002c SysTick_Handler
1a00317c g     F .text	00000040 Chip_UART_SetBaud
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a002690 g     F .text	00000064 PendSV_Handler
1a000e6c g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004368 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1000288c g     O .bss	00000004 pxCurrentTCB
53ff3ca2 g       *ABS*	00000000 __valid_user_code_checksum
1a004368 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a001d78 g     F .text	00000018 vTaskInternalSetTimeOutState
1000008c g     O .bss	00000004 SemBinTec1RiseEdge
1a002aa4 g     F .text	00000044 TIMER3_IRQHandler
1a003846 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a002758 g     F .text	00000110 xPortStartScheduler
1a003fbc g     F .text	00000016 memcpy
1a001c84 g     F .text	00000030 vTaskPlaceOnEventList
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a002720  w    F .text	00000038 vPortSetupTimerInterrupt
1a0005e0 g     F .text	0000002a taskLedVariable
1a003c74 g     F .text	00000000 .hidden __aeabi_uldivmod
10002b80 g       .noinit	00000000 _noinit
1a000a04 g     F .text	00000016 vPortFree
10002b7c g     O .bss	00000004 SystemCoreClock
1a003128 g     F .text	00000054 Chip_UART_Init
1a001144 g     F .text	0000019c xQueueSemaphoreTake
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a00295c g     F .text	00000034 tickerCallback
1a002868 g     F .text	0000005c vPortValidateInterruptPriority
10000098 g     O .bss	00000004 SemBinTec3FallEdge
1a000180  w    F .text	00000002 UsageFault_Handler
1a0038c4 g     F .text	0000004c Chip_Clock_GetRate
1a001376 g     F .text	00000018 vListInsertEnd
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a002e80 g     F .text	00000010 printInitUart
1a003084 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003ca4 g     F .text	000002cc .hidden __udivmoddi4
1a0041e8 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001370 g     F .text	00000006 vListInitialiseItem
1a000850 g     F .text	0000006c GPIO1_IRQHandler
1a000fec g     F .text	00000158 xQueueReceive
10002b38 g     O .bss	00000040 xQueueRegistry
10000094 g     O .bss	00000004 SemBinTec2RiseEdge
1a001404 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a004360 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a003f74 g     F .text	00000048 __libc_init_array
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a000994 g     F .text	00000070 pvPortMalloc
1a003004 g     F .text	0000002c Board_Init
1a003c70 g     F .text	00000002 _init
1a00135a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0018b4 g     F .text	0000000c xTaskGetTickCount
1a000cf0 g     F .text	0000017c xQueueGenericSend
1a00018a  w    F .text	00000002 RTC_IRQHandler
10002b80 g       .bss	00000000 _ebss
1a0029e0 g     F .text	00000040 TIMER0_IRQHandler
1a000470 g     F .text	000000b8 taskAntirreboteTec3
1a002990 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a003b00 g     F .text	00000038 Chip_I2C_SetClockRate
1a001ef4 g     F .text	000000b0 xTaskPriorityDisinherit
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a00357c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001cec g     F .text	0000008c xTaskRemoveFromEventList
1a00141e g     F .text	00000002 vApplicationMallocFailedHook
1a00018c g     F .text	0000001e data_init
1a002a20 g     F .text	00000040 TIMER1_IRQHandler
1a003adc g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a003738 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0040b0 g     O .text	00000136 gpioPinsInit
1a002064 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003b64 g     F .text	00000012 Chip_SSP_SetClockRate
1a002d5a g     F .text	00000016 gpioToggle
1a0008bc g     F .text	0000006c GPIO2_IRQHandler
1a001d90 g     F .text	00000080 xTaskCheckForTimeOut
1a003820 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001e3c g     F .text	000000b8 xTaskPriorityInherit
1a000300 g     F .text	000000b8 taskAntirreboteTec1
10000088 g       .bss	00000000 _bss
1a00332c g     F .text	00000032 Chip_ADC_SetSampleRate
1a0018a4 g     F .text	00000010 vTaskSuspendAll
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a003b76 g     F .text	0000003e Chip_SSP_SetBitRate
1a0013c2 g     F .text	00000028 uxListRemove
1a003964 g     F .text	00000002 Chip_GPIO_Init
1a004214 g     O .text	00000004 OscRateIn
1a0028e0 g     F .text	0000007c uartInit
1a001738 g     F .text	00000072 xTaskCreateStatic
10002b80 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001bbc g     F .text	000000c8 vTaskSwitchContext
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000c12 g     F .text	00000090 xQueueGenericCreateStatic
1a001cb4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a002b1c g     F .text	00000194 gpioInit
1a0013ec g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0003b8 g     F .text	000000b8 taskAntirreboteTec2
1a002248 g     F .text	0000006c xTimerGenericCommand
1a00141c g     F .text	00000002 vApplicationStackOverflowHook
1a003f70  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002d70 g     F .text	0000001c USB0_IRQHandler
1a000928 g     F .text	0000006c GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a0035e4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003fd2 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000744 g     F .text	000000a0 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
1a00138e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0025f0 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a002198 g     F .text	00000064 xTimerCreateTimerTask
1a001acc g     F .text	000000a4 vTaskDelayUntil
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a003854 g     F .text	0000003c Chip_Clock_EnableOpts
1a000ca2 g     F .text	0000004e xQueueGenericCreate
1a003600 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003910 g     F .text	00000054 fpuInit
1a0036b8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003030 g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002cb0 g     F .text	00000056 gpioWrite
1a0019d8 g     F .text	000000f4 xTaskResumeAll
1a001810 g     F .text	00000094 vTaskStartScheduler
1a0032ec g     F .text	00000040 Chip_ADC_Init
10002b78 g     O .bss	00000004 g_pUsbApi
1a00304c g     F .text	00000038 Board_SetupMuxing
1a0031bc g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000088 g     O .bss	00000004 SemBinTec1FallEdge
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001e10 g     F .text	0000000c vTaskMissedYield
10002b80 g       .bss	00000000 _pvHeapStart
100000a4 g     O .bss	00000004 SemBinTec4RiseEdge
1a000178 g       .text	00000000 __section_table_end
1a003bb4 g     F .text	00000038 Chip_SSP_Init
100000a0 g     O .bss	00000004 SemBinTec4FallEdge
1a0012e0 g     F .text	00000028 vQueueAddToRegistry
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a0018c0 g     F .text	00000118 xTaskIncrementTick
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a002fe0 g     F .text	00000024 Board_Debug_Init
1a000b6c g     F .text	00000084 xQueueGenericReset
1a000528 g     F .text	000000b8 taskAntirreboteTec4
10000084 g       .data	00000000 _edata
1a003abc g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a0017aa g     F .text	00000066 xTaskCreate
1a003968 g     F .text	00000154 Chip_SetupCoreClock
1a0007e4 g     F .text	0000006c GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a003bec g     F .text	00000084 ResetISR
1a00336c g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a001b70 g     F .text	0000004c vTaskDelay
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001e1c g     F .text	00000020 xTaskGetSchedulerState
1a001fa4 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a003f70  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0025bc g     F .text	0000002c pxPortInitialiseStack
1a003890 g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a0021fc g     F .text	0000004c xTimerCreateStatic
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a002d06 g     F .text	00000054 gpioRead
1a002d8c g     F .text	000000f4 boardInit
1a002614 g     F .text	00000044 vPortEnterCritical
10000090 g     O .bss	00000004 SemBinTec2FallEdge
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a0037c8 g     F .text	00000058 Chip_Clock_SetBaseClock
1000009c g     O .bss	00000004 SemBinTec3RiseEdge
1a0028c4 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a000f38 g     F .text	000000b2 xQueueGiveFromISR
1a0030f0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 ed 3b 00 1a 79 01 00 1a 7b 01 00 1a     .....;..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a a2 3c ff 53     }............<.S
	...
1a00002c:	f1 25 00 1a 85 01 00 1a 00 00 00 00 91 26 00 1a     .%...........&..
1a00003c:	f5 26 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     .&..............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 71 2d 00 1a 8b 01 00 1a 8b 01 00 1a     ....q-..........
1a00006c:	8b 01 00 1a e1 29 00 1a 21 2a 00 1a 61 2a 00 1a     .....)..!*..a*..
1a00007c:	a5 2a 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     .*..............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a e5 07 00 1a 51 08 00 1a bd 08 00 1a     ........Q.......
1a0000cc:	29 09 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     )...............
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a004368 	.word	0x1a004368
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000084 	.word	0x00000084
1a000120:	1a004368 	.word	0x1a004368
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004368 	.word	0x1a004368
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004368 	.word	0x1a004368
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004368 	.word	0x1a004368
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	00002af8 	.word	0x00002af8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <taskAntirreboteTec1>:
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

void taskAntirreboteTec1( void* taskParmPtr ){
1a000300:	b500      	push	{lr}
1a000302:	b087      	sub	sp, #28
	//-- TEC1 <=> START
	btnStruct 	tecla1;
	vTaskDelay(3000/portTICK_RATE_MS);
1a000304:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a000308:	f001 fc32 	bl	1a001b70 <vTaskDelay>
	tecla1.state = UP;
1a00030c:	2300      	movs	r3, #0
1a00030e:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla1.tec = TEC1;
	tecla1.tic = 0;
1a000312:	9303      	str	r3, [sp, #12]
	tecla1.toc = 0;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000314:	f001 face 	bl	1a0018b4 <xTaskGetTickCount>
1a000318:	9001      	str	r0, [sp, #4]
1a00031a:	e009      	b.n	1a000330 <taskAntirreboteTec1+0x30>

	while(1){
		if( tecla1.state == UP ){
			if(xSemaphoreTake(SemBinTec1FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a00031c:	2101      	movs	r1, #1
1a00031e:	4b24      	ldr	r3, [pc, #144]	; (1a0003b0 <taskAntirreboteTec1+0xb0>)
1a000320:	6818      	ldr	r0, [r3, #0]
1a000322:	f000 ff0f 	bl	1a001144 <xQueueSemaphoreTake>
1a000326:	b9f8      	cbnz	r0, 1a000368 <taskAntirreboteTec1+0x68>
					}*/
					gpioToggle(LEDR);
				}
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a000328:	2105      	movs	r1, #5
1a00032a:	a801      	add	r0, sp, #4
1a00032c:	f001 fbce 	bl	1a001acc <vTaskDelayUntil>
		if( tecla1.state == UP ){
1a000330:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a000334:	2b00      	cmp	r3, #0
1a000336:	d0f1      	beq.n	1a00031c <taskAntirreboteTec1+0x1c>
		else if( tecla1.state == FALLING ){
1a000338:	2b02      	cmp	r3, #2
1a00033a:	d01c      	beq.n	1a000376 <taskAntirreboteTec1+0x76>
		else if( tecla1.state == DOWN ){
1a00033c:	2b01      	cmp	r3, #1
1a00033e:	d029      	beq.n	1a000394 <taskAntirreboteTec1+0x94>
		else if( tecla1.state == RAISING ){
1a000340:	2b03      	cmp	r3, #3
1a000342:	d1f1      	bne.n	1a000328 <taskAntirreboteTec1+0x28>
			tecla1.toc = xTaskGetTickCount();
1a000344:	f001 fab6 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla1.toc - tecla1.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000348:	9b03      	ldr	r3, [sp, #12]
1a00034a:	1ac0      	subs	r0, r0, r3
1a00034c:	2814      	cmp	r0, #20
1a00034e:	d9eb      	bls.n	1a000328 <taskAntirreboteTec1+0x28>
				if(gpioRead(tecla1.tec) == 1){
1a000350:	2024      	movs	r0, #36	; 0x24
1a000352:	f002 fcd8 	bl	1a002d06 <gpioRead>
1a000356:	2801      	cmp	r0, #1
1a000358:	d1e6      	bne.n	1a000328 <taskAntirreboteTec1+0x28>
					tecla1.state = UP;
1a00035a:	2300      	movs	r3, #0
1a00035c:	f88d 3008 	strb.w	r3, [sp, #8]
					gpioToggle(LEDR);
1a000360:	2028      	movs	r0, #40	; 0x28
1a000362:	f002 fcfa 	bl	1a002d5a <gpioToggle>
1a000366:	e7df      	b.n	1a000328 <taskAntirreboteTec1+0x28>
				tecla1.tic = xTaskGetTickCount();
1a000368:	f001 faa4 	bl	1a0018b4 <xTaskGetTickCount>
1a00036c:	9003      	str	r0, [sp, #12]
				tecla1.state = FALLING;
1a00036e:	2302      	movs	r3, #2
1a000370:	f88d 3008 	strb.w	r3, [sp, #8]
1a000374:	e7d8      	b.n	1a000328 <taskAntirreboteTec1+0x28>
			tecla1.toc = xTaskGetTickCount();
1a000376:	f001 fa9d 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla1.toc - tecla1.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a00037a:	9b03      	ldr	r3, [sp, #12]
1a00037c:	1ac0      	subs	r0, r0, r3
1a00037e:	2814      	cmp	r0, #20
1a000380:	d9d2      	bls.n	1a000328 <taskAntirreboteTec1+0x28>
				if(gpioRead(tecla1.tec) == 0){
1a000382:	2024      	movs	r0, #36	; 0x24
1a000384:	f002 fcbf 	bl	1a002d06 <gpioRead>
1a000388:	2800      	cmp	r0, #0
1a00038a:	d1cd      	bne.n	1a000328 <taskAntirreboteTec1+0x28>
					tecla1.state = DOWN;
1a00038c:	2301      	movs	r3, #1
1a00038e:	f88d 3008 	strb.w	r3, [sp, #8]
1a000392:	e7c9      	b.n	1a000328 <taskAntirreboteTec1+0x28>
			if(xSemaphoreTake(SemBinTec1RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a000394:	2101      	movs	r1, #1
1a000396:	4b07      	ldr	r3, [pc, #28]	; (1a0003b4 <taskAntirreboteTec1+0xb4>)
1a000398:	6818      	ldr	r0, [r3, #0]
1a00039a:	f000 fed3 	bl	1a001144 <xQueueSemaphoreTake>
1a00039e:	2800      	cmp	r0, #0
1a0003a0:	d0c2      	beq.n	1a000328 <taskAntirreboteTec1+0x28>
				tecla1.tic = xTaskGetTickCount();
1a0003a2:	f001 fa87 	bl	1a0018b4 <xTaskGetTickCount>
1a0003a6:	9003      	str	r0, [sp, #12]
				tecla1.state = RAISING;
1a0003a8:	2303      	movs	r3, #3
1a0003aa:	f88d 3008 	strb.w	r3, [sp, #8]
1a0003ae:	e7bb      	b.n	1a000328 <taskAntirreboteTec1+0x28>
1a0003b0:	10000088 	.word	0x10000088
1a0003b4:	1000008c 	.word	0x1000008c

1a0003b8 <taskAntirreboteTec2>:
	}
}

void taskAntirreboteTec2( void* taskParmPtr ){
1a0003b8:	b500      	push	{lr}
1a0003ba:	b087      	sub	sp, #28
	//-- TEC2 <=> STOP
	btnStruct 	tecla2;
	vTaskDelay(3000/portTICK_RATE_MS);
1a0003bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0003c0:	f001 fbd6 	bl	1a001b70 <vTaskDelay>
	tecla2.state = UP;
1a0003c4:	2300      	movs	r3, #0
1a0003c6:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla2.tec = TEC2;
	tecla2.tic = 0;
1a0003ca:	9303      	str	r3, [sp, #12]
	tecla2.toc = 0;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0003cc:	f001 fa72 	bl	1a0018b4 <xTaskGetTickCount>
1a0003d0:	9001      	str	r0, [sp, #4]
1a0003d2:	e009      	b.n	1a0003e8 <taskAntirreboteTec2+0x30>

	while(1){
		if( tecla2.state == UP ){
			if(xSemaphoreTake(SemBinTec2FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a0003d4:	2101      	movs	r1, #1
1a0003d6:	4b24      	ldr	r3, [pc, #144]	; (1a000468 <taskAntirreboteTec2+0xb0>)
1a0003d8:	6818      	ldr	r0, [r3, #0]
1a0003da:	f000 feb3 	bl	1a001144 <xQueueSemaphoreTake>
1a0003de:	b9f8      	cbnz	r0, 1a000420 <taskAntirreboteTec2+0x68>
					}*/
					gpioToggle(LEDR);
				}
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a0003e0:	2105      	movs	r1, #5
1a0003e2:	a801      	add	r0, sp, #4
1a0003e4:	f001 fb72 	bl	1a001acc <vTaskDelayUntil>
		if( tecla2.state == UP ){
1a0003e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a0003ec:	2b00      	cmp	r3, #0
1a0003ee:	d0f1      	beq.n	1a0003d4 <taskAntirreboteTec2+0x1c>
		else if( tecla2.state == FALLING ){
1a0003f0:	2b02      	cmp	r3, #2
1a0003f2:	d01c      	beq.n	1a00042e <taskAntirreboteTec2+0x76>
		else if( tecla2.state == DOWN ){
1a0003f4:	2b01      	cmp	r3, #1
1a0003f6:	d029      	beq.n	1a00044c <taskAntirreboteTec2+0x94>
		else if( tecla2.state == RAISING ){
1a0003f8:	2b03      	cmp	r3, #3
1a0003fa:	d1f1      	bne.n	1a0003e0 <taskAntirreboteTec2+0x28>
			tecla2.toc = xTaskGetTickCount();
1a0003fc:	f001 fa5a 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla2.toc - tecla2.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000400:	9b03      	ldr	r3, [sp, #12]
1a000402:	1ac0      	subs	r0, r0, r3
1a000404:	2814      	cmp	r0, #20
1a000406:	d9eb      	bls.n	1a0003e0 <taskAntirreboteTec2+0x28>
				if(gpioRead(tecla2.tec) == 1){
1a000408:	2025      	movs	r0, #37	; 0x25
1a00040a:	f002 fc7c 	bl	1a002d06 <gpioRead>
1a00040e:	2801      	cmp	r0, #1
1a000410:	d1e6      	bne.n	1a0003e0 <taskAntirreboteTec2+0x28>
					tecla2.state = UP;
1a000412:	2300      	movs	r3, #0
1a000414:	f88d 3008 	strb.w	r3, [sp, #8]
					gpioToggle(LEDR);
1a000418:	2028      	movs	r0, #40	; 0x28
1a00041a:	f002 fc9e 	bl	1a002d5a <gpioToggle>
1a00041e:	e7df      	b.n	1a0003e0 <taskAntirreboteTec2+0x28>
				tecla2.tic = xTaskGetTickCount();
1a000420:	f001 fa48 	bl	1a0018b4 <xTaskGetTickCount>
1a000424:	9003      	str	r0, [sp, #12]
				tecla2.state = FALLING;
1a000426:	2302      	movs	r3, #2
1a000428:	f88d 3008 	strb.w	r3, [sp, #8]
1a00042c:	e7d8      	b.n	1a0003e0 <taskAntirreboteTec2+0x28>
			tecla2.toc = xTaskGetTickCount();
1a00042e:	f001 fa41 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla2.toc - tecla2.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000432:	9b03      	ldr	r3, [sp, #12]
1a000434:	1ac0      	subs	r0, r0, r3
1a000436:	2814      	cmp	r0, #20
1a000438:	d9d2      	bls.n	1a0003e0 <taskAntirreboteTec2+0x28>
				if(gpioRead(tecla2.tec) == 0){
1a00043a:	2025      	movs	r0, #37	; 0x25
1a00043c:	f002 fc63 	bl	1a002d06 <gpioRead>
1a000440:	2800      	cmp	r0, #0
1a000442:	d1cd      	bne.n	1a0003e0 <taskAntirreboteTec2+0x28>
					tecla2.state = DOWN;
1a000444:	2301      	movs	r3, #1
1a000446:	f88d 3008 	strb.w	r3, [sp, #8]
1a00044a:	e7c9      	b.n	1a0003e0 <taskAntirreboteTec2+0x28>
			if(xSemaphoreTake(SemBinTec2RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a00044c:	2101      	movs	r1, #1
1a00044e:	4b07      	ldr	r3, [pc, #28]	; (1a00046c <taskAntirreboteTec2+0xb4>)
1a000450:	6818      	ldr	r0, [r3, #0]
1a000452:	f000 fe77 	bl	1a001144 <xQueueSemaphoreTake>
1a000456:	2800      	cmp	r0, #0
1a000458:	d0c2      	beq.n	1a0003e0 <taskAntirreboteTec2+0x28>
				tecla2.tic = xTaskGetTickCount();
1a00045a:	f001 fa2b 	bl	1a0018b4 <xTaskGetTickCount>
1a00045e:	9003      	str	r0, [sp, #12]
				tecla2.state = RAISING;
1a000460:	2303      	movs	r3, #3
1a000462:	f88d 3008 	strb.w	r3, [sp, #8]
1a000466:	e7bb      	b.n	1a0003e0 <taskAntirreboteTec2+0x28>
1a000468:	10000090 	.word	0x10000090
1a00046c:	10000094 	.word	0x10000094

1a000470 <taskAntirreboteTec3>:
	}
}

void taskAntirreboteTec3( void* taskParmPtr ){
1a000470:	b500      	push	{lr}
1a000472:	b087      	sub	sp, #28
	//-- TEC3 <=> P.EMERGENCIA
	btnStruct 	tecla3;
	vTaskDelay(3000/portTICK_RATE_MS);
1a000474:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a000478:	f001 fb7a 	bl	1a001b70 <vTaskDelay>
	tecla3.state = UP;
1a00047c:	2300      	movs	r3, #0
1a00047e:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla3.tec = TEC3;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000482:	f001 fa17 	bl	1a0018b4 <xTaskGetTickCount>
1a000486:	9001      	str	r0, [sp, #4]
1a000488:	e009      	b.n	1a00049e <taskAntirreboteTec3+0x2e>

	while(1){
		if( tecla3.state == UP ){
			if(xSemaphoreTake(SemBinTec3FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a00048a:	2101      	movs	r1, #1
1a00048c:	4b24      	ldr	r3, [pc, #144]	; (1a000520 <taskAntirreboteTec3+0xb0>)
1a00048e:	6818      	ldr	r0, [r3, #0]
1a000490:	f000 fe58 	bl	1a001144 <xQueueSemaphoreTake>
1a000494:	b9f8      	cbnz	r0, 1a0004d6 <taskAntirreboteTec3+0x66>
					}*/
					gpioToggle(LEDR);
				}
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a000496:	2105      	movs	r1, #5
1a000498:	a801      	add	r0, sp, #4
1a00049a:	f001 fb17 	bl	1a001acc <vTaskDelayUntil>
		if( tecla3.state == UP ){
1a00049e:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a0004a2:	2b00      	cmp	r3, #0
1a0004a4:	d0f1      	beq.n	1a00048a <taskAntirreboteTec3+0x1a>
		else if( tecla3.state == FALLING ){
1a0004a6:	2b02      	cmp	r3, #2
1a0004a8:	d01c      	beq.n	1a0004e4 <taskAntirreboteTec3+0x74>
		else if( tecla3.state == DOWN ){
1a0004aa:	2b01      	cmp	r3, #1
1a0004ac:	d029      	beq.n	1a000502 <taskAntirreboteTec3+0x92>
		else if( tecla3.state == RAISING ){
1a0004ae:	2b03      	cmp	r3, #3
1a0004b0:	d1f1      	bne.n	1a000496 <taskAntirreboteTec3+0x26>
			tecla3.toc = xTaskGetTickCount();
1a0004b2:	f001 f9ff 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla3.toc - tecla3.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a0004b6:	9b03      	ldr	r3, [sp, #12]
1a0004b8:	1ac0      	subs	r0, r0, r3
1a0004ba:	2814      	cmp	r0, #20
1a0004bc:	d9eb      	bls.n	1a000496 <taskAntirreboteTec3+0x26>
				if(gpioRead(tecla3.tec) == 1){
1a0004be:	2026      	movs	r0, #38	; 0x26
1a0004c0:	f002 fc21 	bl	1a002d06 <gpioRead>
1a0004c4:	2801      	cmp	r0, #1
1a0004c6:	d1e6      	bne.n	1a000496 <taskAntirreboteTec3+0x26>
					tecla3.state = UP;
1a0004c8:	2300      	movs	r3, #0
1a0004ca:	f88d 3008 	strb.w	r3, [sp, #8]
					gpioToggle(LEDR);
1a0004ce:	2028      	movs	r0, #40	; 0x28
1a0004d0:	f002 fc43 	bl	1a002d5a <gpioToggle>
1a0004d4:	e7df      	b.n	1a000496 <taskAntirreboteTec3+0x26>
				tecla3.tic = xTaskGetTickCount();
1a0004d6:	f001 f9ed 	bl	1a0018b4 <xTaskGetTickCount>
1a0004da:	9003      	str	r0, [sp, #12]
				tecla3.state = FALLING;
1a0004dc:	2302      	movs	r3, #2
1a0004de:	f88d 3008 	strb.w	r3, [sp, #8]
1a0004e2:	e7d8      	b.n	1a000496 <taskAntirreboteTec3+0x26>
			tecla3.toc = xTaskGetTickCount();
1a0004e4:	f001 f9e6 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla3.toc - tecla3.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a0004e8:	9b03      	ldr	r3, [sp, #12]
1a0004ea:	1ac0      	subs	r0, r0, r3
1a0004ec:	2814      	cmp	r0, #20
1a0004ee:	d9d2      	bls.n	1a000496 <taskAntirreboteTec3+0x26>
				if(gpioRead(tecla3.tec) == 0){
1a0004f0:	2026      	movs	r0, #38	; 0x26
1a0004f2:	f002 fc08 	bl	1a002d06 <gpioRead>
1a0004f6:	2800      	cmp	r0, #0
1a0004f8:	d1cd      	bne.n	1a000496 <taskAntirreboteTec3+0x26>
					tecla3.state = DOWN;
1a0004fa:	2301      	movs	r3, #1
1a0004fc:	f88d 3008 	strb.w	r3, [sp, #8]
1a000500:	e7c9      	b.n	1a000496 <taskAntirreboteTec3+0x26>
			if(xSemaphoreTake(SemBinTec3RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a000502:	2101      	movs	r1, #1
1a000504:	4b07      	ldr	r3, [pc, #28]	; (1a000524 <taskAntirreboteTec3+0xb4>)
1a000506:	6818      	ldr	r0, [r3, #0]
1a000508:	f000 fe1c 	bl	1a001144 <xQueueSemaphoreTake>
1a00050c:	2800      	cmp	r0, #0
1a00050e:	d0c2      	beq.n	1a000496 <taskAntirreboteTec3+0x26>
				tecla3.tic = xTaskGetTickCount();
1a000510:	f001 f9d0 	bl	1a0018b4 <xTaskGetTickCount>
1a000514:	9003      	str	r0, [sp, #12]
				tecla3.state = RAISING;
1a000516:	2303      	movs	r3, #3
1a000518:	f88d 3008 	strb.w	r3, [sp, #8]
1a00051c:	e7bb      	b.n	1a000496 <taskAntirreboteTec3+0x26>
1a00051e:	bf00      	nop
1a000520:	10000098 	.word	0x10000098
1a000524:	1000009c 	.word	0x1000009c

1a000528 <taskAntirreboteTec4>:
	}
}

void taskAntirreboteTec4( void* taskParmPtr ){
1a000528:	b500      	push	{lr}
1a00052a:	b087      	sub	sp, #28
	//-- TEC4 <=> RESETALARMA
	btnStruct 	tecla4;
	vTaskDelay(3000/portTICK_RATE_MS);
1a00052c:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a000530:	f001 fb1e 	bl	1a001b70 <vTaskDelay>
	tecla4.state = UP;
1a000534:	2300      	movs	r3, #0
1a000536:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla4.tec = TEC4;
	tecla4.tic = 0;
1a00053a:	9303      	str	r3, [sp, #12]
	tecla4.toc = 0;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a00053c:	f001 f9ba 	bl	1a0018b4 <xTaskGetTickCount>
1a000540:	9001      	str	r0, [sp, #4]
1a000542:	e009      	b.n	1a000558 <taskAntirreboteTec4+0x30>

	while(1){
		if( tecla4.state == UP ){
			if(xSemaphoreTake(SemBinTec4FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a000544:	2101      	movs	r1, #1
1a000546:	4b24      	ldr	r3, [pc, #144]	; (1a0005d8 <taskAntirreboteTec4+0xb0>)
1a000548:	6818      	ldr	r0, [r3, #0]
1a00054a:	f000 fdfb 	bl	1a001144 <xQueueSemaphoreTake>
1a00054e:	b9f8      	cbnz	r0, 1a000590 <taskAntirreboteTec4+0x68>
					gpioToggle(LEDR);
				}
			}
		}

		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a000550:	2105      	movs	r1, #5
1a000552:	a801      	add	r0, sp, #4
1a000554:	f001 faba 	bl	1a001acc <vTaskDelayUntil>
		if( tecla4.state == UP ){
1a000558:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a00055c:	2b00      	cmp	r3, #0
1a00055e:	d0f1      	beq.n	1a000544 <taskAntirreboteTec4+0x1c>
		else if( tecla4.state == FALLING ){
1a000560:	2b02      	cmp	r3, #2
1a000562:	d01c      	beq.n	1a00059e <taskAntirreboteTec4+0x76>
		else if( tecla4.state == DOWN ){
1a000564:	2b01      	cmp	r3, #1
1a000566:	d029      	beq.n	1a0005bc <taskAntirreboteTec4+0x94>
		else if( tecla4.state == RAISING ){
1a000568:	2b03      	cmp	r3, #3
1a00056a:	d1f1      	bne.n	1a000550 <taskAntirreboteTec4+0x28>
			tecla4.toc = xTaskGetTickCount();
1a00056c:	f001 f9a2 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla4.toc - tecla4.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000570:	9b03      	ldr	r3, [sp, #12]
1a000572:	1ac0      	subs	r0, r0, r3
1a000574:	2814      	cmp	r0, #20
1a000576:	d9eb      	bls.n	1a000550 <taskAntirreboteTec4+0x28>
				if(gpioRead(tecla4.tec) == 1){
1a000578:	2027      	movs	r0, #39	; 0x27
1a00057a:	f002 fbc4 	bl	1a002d06 <gpioRead>
1a00057e:	2801      	cmp	r0, #1
1a000580:	d1e6      	bne.n	1a000550 <taskAntirreboteTec4+0x28>
					tecla4.state = UP;
1a000582:	2300      	movs	r3, #0
1a000584:	f88d 3008 	strb.w	r3, [sp, #8]
					gpioToggle(LEDR);
1a000588:	2028      	movs	r0, #40	; 0x28
1a00058a:	f002 fbe6 	bl	1a002d5a <gpioToggle>
1a00058e:	e7df      	b.n	1a000550 <taskAntirreboteTec4+0x28>
				tecla4.tic = xTaskGetTickCount();
1a000590:	f001 f990 	bl	1a0018b4 <xTaskGetTickCount>
1a000594:	9003      	str	r0, [sp, #12]
				tecla4.state = FALLING;
1a000596:	2302      	movs	r3, #2
1a000598:	f88d 3008 	strb.w	r3, [sp, #8]
1a00059c:	e7d8      	b.n	1a000550 <taskAntirreboteTec4+0x28>
			tecla4.toc = xTaskGetTickCount();
1a00059e:	f001 f989 	bl	1a0018b4 <xTaskGetTickCount>
			if(tecla4.toc - tecla4.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a0005a2:	9b03      	ldr	r3, [sp, #12]
1a0005a4:	1ac0      	subs	r0, r0, r3
1a0005a6:	2814      	cmp	r0, #20
1a0005a8:	d9d2      	bls.n	1a000550 <taskAntirreboteTec4+0x28>
				if(gpioRead(tecla4.tec) == 0){
1a0005aa:	2027      	movs	r0, #39	; 0x27
1a0005ac:	f002 fbab 	bl	1a002d06 <gpioRead>
1a0005b0:	2800      	cmp	r0, #0
1a0005b2:	d1cd      	bne.n	1a000550 <taskAntirreboteTec4+0x28>
					tecla4.state = DOWN;
1a0005b4:	2301      	movs	r3, #1
1a0005b6:	f88d 3008 	strb.w	r3, [sp, #8]
1a0005ba:	e7c9      	b.n	1a000550 <taskAntirreboteTec4+0x28>
			if(xSemaphoreTake(SemBinTec4RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a0005bc:	2101      	movs	r1, #1
1a0005be:	4b07      	ldr	r3, [pc, #28]	; (1a0005dc <taskAntirreboteTec4+0xb4>)
1a0005c0:	6818      	ldr	r0, [r3, #0]
1a0005c2:	f000 fdbf 	bl	1a001144 <xQueueSemaphoreTake>
1a0005c6:	2800      	cmp	r0, #0
1a0005c8:	d0c2      	beq.n	1a000550 <taskAntirreboteTec4+0x28>
				tecla4.tic = xTaskGetTickCount();
1a0005ca:	f001 f973 	bl	1a0018b4 <xTaskGetTickCount>
1a0005ce:	9003      	str	r0, [sp, #12]
				tecla4.state = RAISING;
1a0005d0:	2303      	movs	r3, #3
1a0005d2:	f88d 3008 	strb.w	r3, [sp, #8]
1a0005d6:	e7bb      	b.n	1a000550 <taskAntirreboteTec4+0x28>
1a0005d8:	100000a0 	.word	0x100000a0
1a0005dc:	100000a4 	.word	0x100000a4

1a0005e0 <taskLedVariable>:
	}
}

void taskLedVariable( void* taskParmPtr )
{
1a0005e0:	b500      	push	{lr}
1a0005e2:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0005e4:	f001 f966 	bl	1a0018b4 <xTaskGetTickCount>
1a0005e8:	9001      	str	r0, [sp, #4]
	uint8_t delay_on =100;

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      // Intercambia el estado del LEDB
      gpioWrite( LED1, HIGH );
1a0005ea:	2101      	movs	r1, #1
1a0005ec:	202b      	movs	r0, #43	; 0x2b
1a0005ee:	f002 fb5f 	bl	1a002cb0 <gpioWrite>

      // Envia la tarea al estado bloqueado duranta el tiempo delay_on
      vTaskDelay( delay_on / portTICK_RATE_MS );
1a0005f2:	2064      	movs	r0, #100	; 0x64
1a0005f4:	f001 fabc 	bl	1a001b70 <vTaskDelay>
      gpioWrite( LED1, LOW);
1a0005f8:	2100      	movs	r1, #0
1a0005fa:	202b      	movs	r0, #43	; 0x2b
1a0005fc:	f002 fb58 	bl	1a002cb0 <gpioWrite>
      //delay_on += 100;
      //if( delay_on == 1000) delay_on = 0;

      vTaskDelayUntil(&tiempo_inicio_ciclo,(delay_on*2)/ portTICK_RATE_MS);
1a000600:	21c8      	movs	r1, #200	; 0xc8
1a000602:	a801      	add	r0, sp, #4
1a000604:	f001 fa62 	bl	1a001acc <vTaskDelayUntil>
1a000608:	e7ef      	b.n	1a0005ea <taskLedVariable+0xa>
1a00060a:	Address 0x000000001a00060a is out of bounds.


1a00060c <configInterrupts>:
void configInterrupts(void){
1a00060c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a00060e:	4b43      	ldr	r3, [pc, #268]	; (1a00071c <configInterrupts+0x110>)
1a000610:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a000614:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
1a000618:	f042 0204 	orr.w	r2, r2, #4
1a00061c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
1a000620:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a000624:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
1a000628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
1a00062c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
1a000630:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a000634:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
1a000638:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
1a00063c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
1a000640:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a000644:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
1a000648:	f042 5224 	orr.w	r2, r2, #687865856	; 0x29000000
1a00064c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a000650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000654:	681a      	ldr	r2, [r3, #0]
1a000656:	f022 0201 	bic.w	r2, r2, #1
1a00065a:	601a      	str	r2, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a00065c:	2401      	movs	r4, #1
1a00065e:	615c      	str	r4, [r3, #20]
	pPININT->SIENR = pins;
1a000660:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a000662:	4a2f      	ldr	r2, [pc, #188]	; (1a000720 <configInterrupts+0x114>)
1a000664:	21a0      	movs	r1, #160	; 0xa0
1a000666:	f882 1320 	strb.w	r1, [r2, #800]	; 0x320
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a00066a:	6054      	str	r4, [r2, #4]
	pPININT->ISEL &= ~pins;
1a00066c:	6818      	ldr	r0, [r3, #0]
1a00066e:	f020 0002 	bic.w	r0, r0, #2
1a000672:	6018      	str	r0, [r3, #0]
	pPININT->SIENF = pins;
1a000674:	2002      	movs	r0, #2
1a000676:	6158      	str	r0, [r3, #20]
	pPININT->SIENR = pins;
1a000678:	6098      	str	r0, [r3, #8]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a00067a:	f882 1321 	strb.w	r1, [r2, #801]	; 0x321
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a00067e:	6050      	str	r0, [r2, #4]
	pPININT->ISEL &= ~pins;
1a000680:	6818      	ldr	r0, [r3, #0]
1a000682:	f020 0004 	bic.w	r0, r0, #4
1a000686:	6018      	str	r0, [r3, #0]
	pPININT->SIENF = pins;
1a000688:	2004      	movs	r0, #4
1a00068a:	6158      	str	r0, [r3, #20]
	pPININT->SIENR = pins;
1a00068c:	6098      	str	r0, [r3, #8]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a00068e:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a000692:	6050      	str	r0, [r2, #4]
	pPININT->ISEL &= ~pins;
1a000694:	6818      	ldr	r0, [r3, #0]
1a000696:	f020 0008 	bic.w	r0, r0, #8
1a00069a:	6018      	str	r0, [r3, #0]
	pPININT->SIENF = pins;
1a00069c:	2008      	movs	r0, #8
1a00069e:	6158      	str	r0, [r3, #20]
	pPININT->SIENR = pins;
1a0006a0:	6098      	str	r0, [r3, #8]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a0006a2:	f882 1323 	strb.w	r1, [r2, #803]	; 0x323
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a0006a6:	6050      	str	r0, [r2, #4]
	SemBinTec1RiseEdge = xSemaphoreCreateBinary();
1a0006a8:	2203      	movs	r2, #3
1a0006aa:	2100      	movs	r1, #0
1a0006ac:	4620      	mov	r0, r4
1a0006ae:	f000 faf8 	bl	1a000ca2 <xQueueGenericCreate>
1a0006b2:	4b1c      	ldr	r3, [pc, #112]	; (1a000724 <configInterrupts+0x118>)
1a0006b4:	6018      	str	r0, [r3, #0]
	SemBinTec1FallEdge = xSemaphoreCreateBinary();
1a0006b6:	2203      	movs	r2, #3
1a0006b8:	2100      	movs	r1, #0
1a0006ba:	4620      	mov	r0, r4
1a0006bc:	f000 faf1 	bl	1a000ca2 <xQueueGenericCreate>
1a0006c0:	4b19      	ldr	r3, [pc, #100]	; (1a000728 <configInterrupts+0x11c>)
1a0006c2:	6018      	str	r0, [r3, #0]
	SemBinTec2RiseEdge = xSemaphoreCreateBinary();
1a0006c4:	2203      	movs	r2, #3
1a0006c6:	2100      	movs	r1, #0
1a0006c8:	4620      	mov	r0, r4
1a0006ca:	f000 faea 	bl	1a000ca2 <xQueueGenericCreate>
1a0006ce:	4b17      	ldr	r3, [pc, #92]	; (1a00072c <configInterrupts+0x120>)
1a0006d0:	6018      	str	r0, [r3, #0]
	SemBinTec2FallEdge = xSemaphoreCreateBinary();
1a0006d2:	2203      	movs	r2, #3
1a0006d4:	2100      	movs	r1, #0
1a0006d6:	4620      	mov	r0, r4
1a0006d8:	f000 fae3 	bl	1a000ca2 <xQueueGenericCreate>
1a0006dc:	4b14      	ldr	r3, [pc, #80]	; (1a000730 <configInterrupts+0x124>)
1a0006de:	6018      	str	r0, [r3, #0]
	SemBinTec3RiseEdge = xSemaphoreCreateBinary();
1a0006e0:	2203      	movs	r2, #3
1a0006e2:	2100      	movs	r1, #0
1a0006e4:	4620      	mov	r0, r4
1a0006e6:	f000 fadc 	bl	1a000ca2 <xQueueGenericCreate>
1a0006ea:	4b12      	ldr	r3, [pc, #72]	; (1a000734 <configInterrupts+0x128>)
1a0006ec:	6018      	str	r0, [r3, #0]
	SemBinTec3FallEdge = xSemaphoreCreateBinary();
1a0006ee:	2203      	movs	r2, #3
1a0006f0:	2100      	movs	r1, #0
1a0006f2:	4620      	mov	r0, r4
1a0006f4:	f000 fad5 	bl	1a000ca2 <xQueueGenericCreate>
1a0006f8:	4b0f      	ldr	r3, [pc, #60]	; (1a000738 <configInterrupts+0x12c>)
1a0006fa:	6018      	str	r0, [r3, #0]
	SemBinTec4RiseEdge = xSemaphoreCreateBinary();
1a0006fc:	2203      	movs	r2, #3
1a0006fe:	2100      	movs	r1, #0
1a000700:	4620      	mov	r0, r4
1a000702:	f000 face 	bl	1a000ca2 <xQueueGenericCreate>
1a000706:	4b0d      	ldr	r3, [pc, #52]	; (1a00073c <configInterrupts+0x130>)
1a000708:	6018      	str	r0, [r3, #0]
	SemBinTec4FallEdge = xSemaphoreCreateBinary();
1a00070a:	2203      	movs	r2, #3
1a00070c:	2100      	movs	r1, #0
1a00070e:	4620      	mov	r0, r4
1a000710:	f000 fac7 	bl	1a000ca2 <xQueueGenericCreate>
1a000714:	4b0a      	ldr	r3, [pc, #40]	; (1a000740 <configInterrupts+0x134>)
1a000716:	6018      	str	r0, [r3, #0]
}
1a000718:	bd10      	pop	{r4, pc}
1a00071a:	bf00      	nop
1a00071c:	40086000 	.word	0x40086000
1a000720:	e000e100 	.word	0xe000e100
1a000724:	1000008c 	.word	0x1000008c
1a000728:	10000088 	.word	0x10000088
1a00072c:	10000094 	.word	0x10000094
1a000730:	10000090 	.word	0x10000090
1a000734:	1000009c 	.word	0x1000009c
1a000738:	10000098 	.word	0x10000098
1a00073c:	100000a4 	.word	0x100000a4
1a000740:	100000a0 	.word	0x100000a0

1a000744 <main>:
{
1a000744:	b500      	push	{lr}
1a000746:	b083      	sub	sp, #12
   boardConfig();
1a000748:	f002 fb20 	bl	1a002d8c <boardInit>
   configInterrupts();
1a00074c:	f7ff ff5e 	bl	1a00060c <configInterrupts>
   debugPrintConfigUart( UART_USB, 115200 );
1a000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000754:	2103      	movs	r1, #3
1a000756:	4818      	ldr	r0, [pc, #96]	; (1a0007b8 <main+0x74>)
1a000758:	f002 fb92 	bl	1a002e80 <printInitUart>
   xTaskCreate(
1a00075c:	2400      	movs	r4, #0
1a00075e:	9401      	str	r4, [sp, #4]
1a000760:	2301      	movs	r3, #1
1a000762:	9300      	str	r3, [sp, #0]
1a000764:	4623      	mov	r3, r4
1a000766:	22b4      	movs	r2, #180	; 0xb4
1a000768:	4914      	ldr	r1, [pc, #80]	; (1a0007bc <main+0x78>)
1a00076a:	4815      	ldr	r0, [pc, #84]	; (1a0007c0 <main+0x7c>)
1a00076c:	f001 f81d 	bl	1a0017aa <xTaskCreate>
   xTaskCreate(
1a000770:	9401      	str	r4, [sp, #4]
1a000772:	2503      	movs	r5, #3
1a000774:	9500      	str	r5, [sp, #0]
1a000776:	4623      	mov	r3, r4
1a000778:	225a      	movs	r2, #90	; 0x5a
1a00077a:	4912      	ldr	r1, [pc, #72]	; (1a0007c4 <main+0x80>)
1a00077c:	4812      	ldr	r0, [pc, #72]	; (1a0007c8 <main+0x84>)
1a00077e:	f001 f814 	bl	1a0017aa <xTaskCreate>
   xTaskCreate(
1a000782:	9401      	str	r4, [sp, #4]
1a000784:	9500      	str	r5, [sp, #0]
1a000786:	4623      	mov	r3, r4
1a000788:	225a      	movs	r2, #90	; 0x5a
1a00078a:	4910      	ldr	r1, [pc, #64]	; (1a0007cc <main+0x88>)
1a00078c:	4810      	ldr	r0, [pc, #64]	; (1a0007d0 <main+0x8c>)
1a00078e:	f001 f80c 	bl	1a0017aa <xTaskCreate>
   xTaskCreate(
1a000792:	9401      	str	r4, [sp, #4]
1a000794:	9500      	str	r5, [sp, #0]
1a000796:	4623      	mov	r3, r4
1a000798:	225a      	movs	r2, #90	; 0x5a
1a00079a:	490e      	ldr	r1, [pc, #56]	; (1a0007d4 <main+0x90>)
1a00079c:	480e      	ldr	r0, [pc, #56]	; (1a0007d8 <main+0x94>)
1a00079e:	f001 f804 	bl	1a0017aa <xTaskCreate>
   xTaskCreate(
1a0007a2:	9401      	str	r4, [sp, #4]
1a0007a4:	9500      	str	r5, [sp, #0]
1a0007a6:	4623      	mov	r3, r4
1a0007a8:	225a      	movs	r2, #90	; 0x5a
1a0007aa:	490c      	ldr	r1, [pc, #48]	; (1a0007dc <main+0x98>)
1a0007ac:	480c      	ldr	r0, [pc, #48]	; (1a0007e0 <main+0x9c>)
1a0007ae:	f000 fffc 	bl	1a0017aa <xTaskCreate>
   vTaskStartScheduler();
1a0007b2:	f001 f82d 	bl	1a001810 <vTaskStartScheduler>
1a0007b6:	e7fe      	b.n	1a0007b6 <main+0x72>
1a0007b8:	100000a8 	.word	0x100000a8
1a0007bc:	1a003fe4 	.word	0x1a003fe4
1a0007c0:	1a0005e1 	.word	0x1a0005e1
1a0007c4:	1a003ff4 	.word	0x1a003ff4
1a0007c8:	1a000301 	.word	0x1a000301
1a0007cc:	1a004008 	.word	0x1a004008
1a0007d0:	1a0003b9 	.word	0x1a0003b9
1a0007d4:	1a00401c 	.word	0x1a00401c
1a0007d8:	1a000471 	.word	0x1a000471
1a0007dc:	1a004030 	.word	0x1a004030
1a0007e0:	1a000529 	.word	0x1a000529

1a0007e4 <GPIO0_IRQHandler>:
void GPIO0_IRQHandler(void){
1a0007e4:	b508      	push	{r3, lr}
	gpioToggle(LEDG);//Debug
1a0007e6:	2029      	movs	r0, #41	; 0x29
1a0007e8:	f002 fab7 	bl	1a002d5a <gpioToggle>
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetFallStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->FALL;
1a0007ec:	4b13      	ldr	r3, [pc, #76]	; (1a00083c <GPIO0_IRQHandler+0x58>)
1a0007ee:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH0){
1a0007f0:	f013 0f01 	tst.w	r3, #1
1a0007f4:	d110      	bne.n	1a000818 <GPIO0_IRQHandler+0x34>
	return pPININT->RISE;
1a0007f6:	4b11      	ldr	r3, [pc, #68]	; (1a00083c <GPIO0_IRQHandler+0x58>)
1a0007f8:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH0){
1a0007fa:	f013 0f01 	tst.w	r3, #1
1a0007fe:	d114      	bne.n	1a00082a <GPIO0_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a000800:	4b0f      	ldr	r3, [pc, #60]	; (1a000840 <GPIO0_IRQHandler+0x5c>)
1a000802:	681b      	ldr	r3, [r3, #0]
1a000804:	b13b      	cbz	r3, 1a000816 <GPIO0_IRQHandler+0x32>
1a000806:	4b0f      	ldr	r3, [pc, #60]	; (1a000844 <GPIO0_IRQHandler+0x60>)
1a000808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00080c:	601a      	str	r2, [r3, #0]
1a00080e:	f3bf 8f4f 	dsb	sy
1a000812:	f3bf 8f6f 	isb	sy
}
1a000816:	bd08      	pop	{r3, pc}
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000818:	4b08      	ldr	r3, [pc, #32]	; (1a00083c <GPIO0_IRQHandler+0x58>)
1a00081a:	2201      	movs	r2, #1
1a00081c:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec1FallEdge, &xHigherPriorityTaskWoken);
1a00081e:	4908      	ldr	r1, [pc, #32]	; (1a000840 <GPIO0_IRQHandler+0x5c>)
1a000820:	4b09      	ldr	r3, [pc, #36]	; (1a000848 <GPIO0_IRQHandler+0x64>)
1a000822:	6818      	ldr	r0, [r3, #0]
1a000824:	f000 fb88 	bl	1a000f38 <xQueueGiveFromISR>
1a000828:	e7ea      	b.n	1a000800 <GPIO0_IRQHandler+0x1c>
1a00082a:	4b04      	ldr	r3, [pc, #16]	; (1a00083c <GPIO0_IRQHandler+0x58>)
1a00082c:	2201      	movs	r2, #1
1a00082e:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec1RiseEdge, &xHigherPriorityTaskWoken);
1a000830:	4903      	ldr	r1, [pc, #12]	; (1a000840 <GPIO0_IRQHandler+0x5c>)
1a000832:	4b06      	ldr	r3, [pc, #24]	; (1a00084c <GPIO0_IRQHandler+0x68>)
1a000834:	6818      	ldr	r0, [r3, #0]
1a000836:	f000 fb7f 	bl	1a000f38 <xQueueGiveFromISR>
1a00083a:	e7e1      	b.n	1a000800 <GPIO0_IRQHandler+0x1c>
1a00083c:	40087000 	.word	0x40087000
1a000840:	100000ac 	.word	0x100000ac
1a000844:	e000ed04 	.word	0xe000ed04
1a000848:	10000088 	.word	0x10000088
1a00084c:	1000008c 	.word	0x1000008c

1a000850 <GPIO1_IRQHandler>:
void GPIO1_IRQHandler(void){
1a000850:	b508      	push	{r3, lr}
	gpioToggle(LED2);//Debug
1a000852:	202c      	movs	r0, #44	; 0x2c
1a000854:	f002 fa81 	bl	1a002d5a <gpioToggle>
	return pPININT->FALL;
1a000858:	4b13      	ldr	r3, [pc, #76]	; (1a0008a8 <GPIO1_IRQHandler+0x58>)
1a00085a:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH1){
1a00085c:	f013 0f02 	tst.w	r3, #2
1a000860:	d110      	bne.n	1a000884 <GPIO1_IRQHandler+0x34>
	return pPININT->RISE;
1a000862:	4b11      	ldr	r3, [pc, #68]	; (1a0008a8 <GPIO1_IRQHandler+0x58>)
1a000864:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH1){
1a000866:	f013 0f02 	tst.w	r3, #2
1a00086a:	d114      	bne.n	1a000896 <GPIO1_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a00086c:	4b0f      	ldr	r3, [pc, #60]	; (1a0008ac <GPIO1_IRQHandler+0x5c>)
1a00086e:	681b      	ldr	r3, [r3, #0]
1a000870:	b13b      	cbz	r3, 1a000882 <GPIO1_IRQHandler+0x32>
1a000872:	4b0f      	ldr	r3, [pc, #60]	; (1a0008b0 <GPIO1_IRQHandler+0x60>)
1a000874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000878:	601a      	str	r2, [r3, #0]
1a00087a:	f3bf 8f4f 	dsb	sy
1a00087e:	f3bf 8f6f 	isb	sy
}
1a000882:	bd08      	pop	{r3, pc}
	pPININT->IST = pins;
1a000884:	4b08      	ldr	r3, [pc, #32]	; (1a0008a8 <GPIO1_IRQHandler+0x58>)
1a000886:	2202      	movs	r2, #2
1a000888:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec2FallEdge, &xHigherPriorityTaskWoken);
1a00088a:	4908      	ldr	r1, [pc, #32]	; (1a0008ac <GPIO1_IRQHandler+0x5c>)
1a00088c:	4b09      	ldr	r3, [pc, #36]	; (1a0008b4 <GPIO1_IRQHandler+0x64>)
1a00088e:	6818      	ldr	r0, [r3, #0]
1a000890:	f000 fb52 	bl	1a000f38 <xQueueGiveFromISR>
1a000894:	e7ea      	b.n	1a00086c <GPIO1_IRQHandler+0x1c>
1a000896:	4b04      	ldr	r3, [pc, #16]	; (1a0008a8 <GPIO1_IRQHandler+0x58>)
1a000898:	2202      	movs	r2, #2
1a00089a:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec2RiseEdge, &xHigherPriorityTaskWoken);
1a00089c:	4903      	ldr	r1, [pc, #12]	; (1a0008ac <GPIO1_IRQHandler+0x5c>)
1a00089e:	4b06      	ldr	r3, [pc, #24]	; (1a0008b8 <GPIO1_IRQHandler+0x68>)
1a0008a0:	6818      	ldr	r0, [r3, #0]
1a0008a2:	f000 fb49 	bl	1a000f38 <xQueueGiveFromISR>
1a0008a6:	e7e1      	b.n	1a00086c <GPIO1_IRQHandler+0x1c>
1a0008a8:	40087000 	.word	0x40087000
1a0008ac:	100000b0 	.word	0x100000b0
1a0008b0:	e000ed04 	.word	0xe000ed04
1a0008b4:	10000090 	.word	0x10000090
1a0008b8:	10000094 	.word	0x10000094

1a0008bc <GPIO2_IRQHandler>:
void GPIO2_IRQHandler(void){
1a0008bc:	b508      	push	{r3, lr}
	gpioToggle(LED3);//Debug
1a0008be:	202d      	movs	r0, #45	; 0x2d
1a0008c0:	f002 fa4b 	bl	1a002d5a <gpioToggle>
	return pPININT->FALL;
1a0008c4:	4b13      	ldr	r3, [pc, #76]	; (1a000914 <GPIO2_IRQHandler+0x58>)
1a0008c6:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH2){
1a0008c8:	f013 0f04 	tst.w	r3, #4
1a0008cc:	d110      	bne.n	1a0008f0 <GPIO2_IRQHandler+0x34>
	return pPININT->RISE;
1a0008ce:	4b11      	ldr	r3, [pc, #68]	; (1a000914 <GPIO2_IRQHandler+0x58>)
1a0008d0:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH2){
1a0008d2:	f013 0f04 	tst.w	r3, #4
1a0008d6:	d114      	bne.n	1a000902 <GPIO2_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a0008d8:	4b0f      	ldr	r3, [pc, #60]	; (1a000918 <GPIO2_IRQHandler+0x5c>)
1a0008da:	681b      	ldr	r3, [r3, #0]
1a0008dc:	b13b      	cbz	r3, 1a0008ee <GPIO2_IRQHandler+0x32>
1a0008de:	4b0f      	ldr	r3, [pc, #60]	; (1a00091c <GPIO2_IRQHandler+0x60>)
1a0008e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0008e4:	601a      	str	r2, [r3, #0]
1a0008e6:	f3bf 8f4f 	dsb	sy
1a0008ea:	f3bf 8f6f 	isb	sy
}
1a0008ee:	bd08      	pop	{r3, pc}
	pPININT->IST = pins;
1a0008f0:	4b08      	ldr	r3, [pc, #32]	; (1a000914 <GPIO2_IRQHandler+0x58>)
1a0008f2:	2204      	movs	r2, #4
1a0008f4:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec3FallEdge, &xHigherPriorityTaskWoken);
1a0008f6:	4908      	ldr	r1, [pc, #32]	; (1a000918 <GPIO2_IRQHandler+0x5c>)
1a0008f8:	4b09      	ldr	r3, [pc, #36]	; (1a000920 <GPIO2_IRQHandler+0x64>)
1a0008fa:	6818      	ldr	r0, [r3, #0]
1a0008fc:	f000 fb1c 	bl	1a000f38 <xQueueGiveFromISR>
1a000900:	e7ea      	b.n	1a0008d8 <GPIO2_IRQHandler+0x1c>
1a000902:	4b04      	ldr	r3, [pc, #16]	; (1a000914 <GPIO2_IRQHandler+0x58>)
1a000904:	2204      	movs	r2, #4
1a000906:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec3RiseEdge, &xHigherPriorityTaskWoken);
1a000908:	4903      	ldr	r1, [pc, #12]	; (1a000918 <GPIO2_IRQHandler+0x5c>)
1a00090a:	4b06      	ldr	r3, [pc, #24]	; (1a000924 <GPIO2_IRQHandler+0x68>)
1a00090c:	6818      	ldr	r0, [r3, #0]
1a00090e:	f000 fb13 	bl	1a000f38 <xQueueGiveFromISR>
1a000912:	e7e1      	b.n	1a0008d8 <GPIO2_IRQHandler+0x1c>
1a000914:	40087000 	.word	0x40087000
1a000918:	100000b4 	.word	0x100000b4
1a00091c:	e000ed04 	.word	0xe000ed04
1a000920:	10000098 	.word	0x10000098
1a000924:	1000009c 	.word	0x1000009c

1a000928 <GPIO3_IRQHandler>:
void GPIO3_IRQHandler(void){
1a000928:	b508      	push	{r3, lr}
	gpioToggle(LEDB); //Debug
1a00092a:	202a      	movs	r0, #42	; 0x2a
1a00092c:	f002 fa15 	bl	1a002d5a <gpioToggle>
	return pPININT->FALL;
1a000930:	4b13      	ldr	r3, [pc, #76]	; (1a000980 <GPIO3_IRQHandler+0x58>)
1a000932:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH3){
1a000934:	f013 0f08 	tst.w	r3, #8
1a000938:	d110      	bne.n	1a00095c <GPIO3_IRQHandler+0x34>
	return pPININT->RISE;
1a00093a:	4b11      	ldr	r3, [pc, #68]	; (1a000980 <GPIO3_IRQHandler+0x58>)
1a00093c:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH3){
1a00093e:	f013 0f08 	tst.w	r3, #8
1a000942:	d114      	bne.n	1a00096e <GPIO3_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a000944:	4b0f      	ldr	r3, [pc, #60]	; (1a000984 <GPIO3_IRQHandler+0x5c>)
1a000946:	681b      	ldr	r3, [r3, #0]
1a000948:	b13b      	cbz	r3, 1a00095a <GPIO3_IRQHandler+0x32>
1a00094a:	4b0f      	ldr	r3, [pc, #60]	; (1a000988 <GPIO3_IRQHandler+0x60>)
1a00094c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000950:	601a      	str	r2, [r3, #0]
1a000952:	f3bf 8f4f 	dsb	sy
1a000956:	f3bf 8f6f 	isb	sy
}
1a00095a:	bd08      	pop	{r3, pc}
	pPININT->IST = pins;
1a00095c:	4b08      	ldr	r3, [pc, #32]	; (1a000980 <GPIO3_IRQHandler+0x58>)
1a00095e:	2208      	movs	r2, #8
1a000960:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec4FallEdge, &xHigherPriorityTaskWoken);
1a000962:	4908      	ldr	r1, [pc, #32]	; (1a000984 <GPIO3_IRQHandler+0x5c>)
1a000964:	4b09      	ldr	r3, [pc, #36]	; (1a00098c <GPIO3_IRQHandler+0x64>)
1a000966:	6818      	ldr	r0, [r3, #0]
1a000968:	f000 fae6 	bl	1a000f38 <xQueueGiveFromISR>
1a00096c:	e7ea      	b.n	1a000944 <GPIO3_IRQHandler+0x1c>
1a00096e:	4b04      	ldr	r3, [pc, #16]	; (1a000980 <GPIO3_IRQHandler+0x58>)
1a000970:	2208      	movs	r2, #8
1a000972:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec4RiseEdge, &xHigherPriorityTaskWoken);
1a000974:	4903      	ldr	r1, [pc, #12]	; (1a000984 <GPIO3_IRQHandler+0x5c>)
1a000976:	4b06      	ldr	r3, [pc, #24]	; (1a000990 <GPIO3_IRQHandler+0x68>)
1a000978:	6818      	ldr	r0, [r3, #0]
1a00097a:	f000 fadd 	bl	1a000f38 <xQueueGiveFromISR>
1a00097e:	e7e1      	b.n	1a000944 <GPIO3_IRQHandler+0x1c>
1a000980:	40087000 	.word	0x40087000
1a000984:	100000b8 	.word	0x100000b8
1a000988:	e000ed04 	.word	0xe000ed04
1a00098c:	100000a0 	.word	0x100000a0
1a000990:	100000a4 	.word	0x100000a4

1a000994 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000994:	b538      	push	{r3, r4, r5, lr}
1a000996:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000998:	f010 0f07 	tst.w	r0, #7
1a00099c:	d002      	beq.n	1a0009a4 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00099e:	f020 0407 	bic.w	r4, r0, #7
1a0009a2:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0009a4:	f000 ff7e 	bl	1a0018a4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0009a8:	4b13      	ldr	r3, [pc, #76]	; (1a0009f8 <pvPortMalloc+0x64>)
1a0009aa:	681b      	ldr	r3, [r3, #0]
1a0009ac:	b17b      	cbz	r3, 1a0009ce <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0009ae:	4b13      	ldr	r3, [pc, #76]	; (1a0009fc <pvPortMalloc+0x68>)
1a0009b0:	681b      	ldr	r3, [r3, #0]
1a0009b2:	441c      	add	r4, r3
1a0009b4:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0009b8:	4294      	cmp	r4, r2
1a0009ba:	d80e      	bhi.n	1a0009da <pvPortMalloc+0x46>
1a0009bc:	42a3      	cmp	r3, r4
1a0009be:	d310      	bcc.n	1a0009e2 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0009c0:	f001 f80a 	bl	1a0019d8 <xTaskResumeAll>
void *pvReturn = NULL;
1a0009c4:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0009c6:	f000 fd2a 	bl	1a00141e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a0009ca:	4628      	mov	r0, r5
1a0009cc:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a0009ce:	4b0c      	ldr	r3, [pc, #48]	; (1a000a00 <pvPortMalloc+0x6c>)
1a0009d0:	f023 0307 	bic.w	r3, r3, #7
1a0009d4:	4a08      	ldr	r2, [pc, #32]	; (1a0009f8 <pvPortMalloc+0x64>)
1a0009d6:	6013      	str	r3, [r2, #0]
1a0009d8:	e7e9      	b.n	1a0009ae <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a0009da:	f000 fffd 	bl	1a0019d8 <xTaskResumeAll>
void *pvReturn = NULL;
1a0009de:	2500      	movs	r5, #0
1a0009e0:	e7f1      	b.n	1a0009c6 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0009e2:	4a05      	ldr	r2, [pc, #20]	; (1a0009f8 <pvPortMalloc+0x64>)
1a0009e4:	6815      	ldr	r5, [r2, #0]
1a0009e6:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a0009e8:	4b04      	ldr	r3, [pc, #16]	; (1a0009fc <pvPortMalloc+0x68>)
1a0009ea:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a0009ec:	f000 fff4 	bl	1a0019d8 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0009f0:	2d00      	cmp	r5, #0
1a0009f2:	d1ea      	bne.n	1a0009ca <pvPortMalloc+0x36>
1a0009f4:	e7e7      	b.n	1a0009c6 <pvPortMalloc+0x32>
1a0009f6:	bf00      	nop
1a0009f8:	100000bc 	.word	0x100000bc
1a0009fc:	100020c0 	.word	0x100020c0
1a000a00:	100000c8 	.word	0x100000c8

1a000a04 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000a04:	b140      	cbz	r0, 1a000a18 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000a06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a0a:	f383 8811 	msr	BASEPRI, r3
1a000a0e:	f3bf 8f6f 	isb	sy
1a000a12:	f3bf 8f4f 	dsb	sy
1a000a16:	e7fe      	b.n	1a000a16 <vPortFree+0x12>
}
1a000a18:	4770      	bx	lr

1a000a1a <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000a1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000a1c:	b123      	cbz	r3, 1a000a28 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000a1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000a20:	6818      	ldr	r0, [r3, #0]
1a000a22:	f1c0 0007 	rsb	r0, r0, #7
1a000a26:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000a28:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000a2a:	4770      	bx	lr

1a000a2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000a2c:	b510      	push	{r4, lr}
1a000a2e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000a30:	f001 fdf0 	bl	1a002614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000a34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000a36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a38:	429a      	cmp	r2, r3
1a000a3a:	d004      	beq.n	1a000a46 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000a3c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000a3e:	f001 fe0b 	bl	1a002658 <vPortExitCritical>

	return xReturn;
}
1a000a42:	4620      	mov	r0, r4
1a000a44:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000a46:	2401      	movs	r4, #1
1a000a48:	e7f9      	b.n	1a000a3e <prvIsQueueFull+0x12>

1a000a4a <prvIsQueueEmpty>:
{
1a000a4a:	b510      	push	{r4, lr}
1a000a4c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000a4e:	f001 fde1 	bl	1a002614 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000a54:	b123      	cbz	r3, 1a000a60 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000a56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000a58:	f001 fdfe 	bl	1a002658 <vPortExitCritical>
}
1a000a5c:	4620      	mov	r0, r4
1a000a5e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000a60:	2401      	movs	r4, #1
1a000a62:	e7f9      	b.n	1a000a58 <prvIsQueueEmpty+0xe>

1a000a64 <prvCopyDataToQueue>:
{
1a000a64:	b570      	push	{r4, r5, r6, lr}
1a000a66:	4604      	mov	r4, r0
1a000a68:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000a6a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000a6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000a6e:	b95a      	cbnz	r2, 1a000a88 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000a70:	6803      	ldr	r3, [r0, #0]
1a000a72:	b11b      	cbz	r3, 1a000a7c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000a74:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000a76:	3501      	adds	r5, #1
1a000a78:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000a7a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000a7c:	6840      	ldr	r0, [r0, #4]
1a000a7e:	f001 fa39 	bl	1a001ef4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000a82:	2300      	movs	r3, #0
1a000a84:	6063      	str	r3, [r4, #4]
1a000a86:	e7f6      	b.n	1a000a76 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000a88:	b96e      	cbnz	r6, 1a000aa6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000a8a:	6880      	ldr	r0, [r0, #8]
1a000a8c:	f003 fa96 	bl	1a003fbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000a90:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000a92:	68a3      	ldr	r3, [r4, #8]
1a000a94:	4413      	add	r3, r2
1a000a96:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000a98:	6862      	ldr	r2, [r4, #4]
1a000a9a:	4293      	cmp	r3, r2
1a000a9c:	d319      	bcc.n	1a000ad2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000a9e:	6823      	ldr	r3, [r4, #0]
1a000aa0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000aa2:	2000      	movs	r0, #0
1a000aa4:	e7e7      	b.n	1a000a76 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000aa6:	68c0      	ldr	r0, [r0, #12]
1a000aa8:	f003 fa88 	bl	1a003fbc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000aac:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000aae:	4252      	negs	r2, r2
1a000ab0:	68e3      	ldr	r3, [r4, #12]
1a000ab2:	4413      	add	r3, r2
1a000ab4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000ab6:	6821      	ldr	r1, [r4, #0]
1a000ab8:	428b      	cmp	r3, r1
1a000aba:	d202      	bcs.n	1a000ac2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000abc:	6863      	ldr	r3, [r4, #4]
1a000abe:	441a      	add	r2, r3
1a000ac0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000ac2:	2e02      	cmp	r6, #2
1a000ac4:	d001      	beq.n	1a000aca <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000ac6:	2000      	movs	r0, #0
1a000ac8:	e7d5      	b.n	1a000a76 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000aca:	b125      	cbz	r5, 1a000ad6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000acc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000ace:	2000      	movs	r0, #0
1a000ad0:	e7d1      	b.n	1a000a76 <prvCopyDataToQueue+0x12>
1a000ad2:	2000      	movs	r0, #0
1a000ad4:	e7cf      	b.n	1a000a76 <prvCopyDataToQueue+0x12>
1a000ad6:	2000      	movs	r0, #0
1a000ad8:	e7cd      	b.n	1a000a76 <prvCopyDataToQueue+0x12>

1a000ada <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000ada:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000adc:	b172      	cbz	r2, 1a000afc <prvCopyDataFromQueue+0x22>
{
1a000ade:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000ae0:	68c3      	ldr	r3, [r0, #12]
1a000ae2:	4413      	add	r3, r2
1a000ae4:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000ae6:	6844      	ldr	r4, [r0, #4]
1a000ae8:	42a3      	cmp	r3, r4
1a000aea:	d301      	bcc.n	1a000af0 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000aec:	6803      	ldr	r3, [r0, #0]
1a000aee:	60c3      	str	r3, [r0, #12]
1a000af0:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000af2:	68c1      	ldr	r1, [r0, #12]
1a000af4:	4620      	mov	r0, r4
1a000af6:	f003 fa61 	bl	1a003fbc <memcpy>
}
1a000afa:	bd10      	pop	{r4, pc}
1a000afc:	4770      	bx	lr

1a000afe <prvUnlockQueue>:
{
1a000afe:	b538      	push	{r3, r4, r5, lr}
1a000b00:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000b02:	f001 fd87 	bl	1a002614 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000b06:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000b0a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000b0c:	e003      	b.n	1a000b16 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000b0e:	f001 f97f 	bl	1a001e10 <vTaskMissedYield>
			--cTxLock;
1a000b12:	3c01      	subs	r4, #1
1a000b14:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000b16:	2c00      	cmp	r4, #0
1a000b18:	dd08      	ble.n	1a000b2c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000b1c:	b133      	cbz	r3, 1a000b2c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b1e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000b22:	f001 f8e3 	bl	1a001cec <xTaskRemoveFromEventList>
1a000b26:	2800      	cmp	r0, #0
1a000b28:	d0f3      	beq.n	1a000b12 <prvUnlockQueue+0x14>
1a000b2a:	e7f0      	b.n	1a000b0e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000b2c:	23ff      	movs	r3, #255	; 0xff
1a000b2e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000b32:	f001 fd91 	bl	1a002658 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000b36:	f001 fd6d 	bl	1a002614 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000b3a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000b3e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b40:	e003      	b.n	1a000b4a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000b42:	f001 f965 	bl	1a001e10 <vTaskMissedYield>
				--cRxLock;
1a000b46:	3c01      	subs	r4, #1
1a000b48:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b4a:	2c00      	cmp	r4, #0
1a000b4c:	dd08      	ble.n	1a000b60 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000b4e:	692b      	ldr	r3, [r5, #16]
1a000b50:	b133      	cbz	r3, 1a000b60 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000b52:	f105 0010 	add.w	r0, r5, #16
1a000b56:	f001 f8c9 	bl	1a001cec <xTaskRemoveFromEventList>
1a000b5a:	2800      	cmp	r0, #0
1a000b5c:	d0f3      	beq.n	1a000b46 <prvUnlockQueue+0x48>
1a000b5e:	e7f0      	b.n	1a000b42 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000b60:	23ff      	movs	r3, #255	; 0xff
1a000b62:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000b66:	f001 fd77 	bl	1a002658 <vPortExitCritical>
}
1a000b6a:	bd38      	pop	{r3, r4, r5, pc}

1a000b6c <xQueueGenericReset>:
{
1a000b6c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000b6e:	b940      	cbnz	r0, 1a000b82 <xQueueGenericReset+0x16>
1a000b70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b74:	f383 8811 	msr	BASEPRI, r3
1a000b78:	f3bf 8f6f 	isb	sy
1a000b7c:	f3bf 8f4f 	dsb	sy
1a000b80:	e7fe      	b.n	1a000b80 <xQueueGenericReset+0x14>
1a000b82:	4604      	mov	r4, r0
1a000b84:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000b86:	f001 fd45 	bl	1a002614 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000b8a:	6821      	ldr	r1, [r4, #0]
1a000b8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000b90:	fb03 1002 	mla	r0, r3, r2, r1
1a000b94:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000b96:	2000      	movs	r0, #0
1a000b98:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000b9a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000b9c:	3a01      	subs	r2, #1
1a000b9e:	fb02 1303 	mla	r3, r2, r3, r1
1a000ba2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000ba4:	23ff      	movs	r3, #255	; 0xff
1a000ba6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000bae:	b9a5      	cbnz	r5, 1a000bda <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000bb0:	6923      	ldr	r3, [r4, #16]
1a000bb2:	b91b      	cbnz	r3, 1a000bbc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000bb4:	f001 fd50 	bl	1a002658 <vPortExitCritical>
}
1a000bb8:	2001      	movs	r0, #1
1a000bba:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000bbc:	f104 0010 	add.w	r0, r4, #16
1a000bc0:	f001 f894 	bl	1a001cec <xTaskRemoveFromEventList>
1a000bc4:	2800      	cmp	r0, #0
1a000bc6:	d0f5      	beq.n	1a000bb4 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000bc8:	4b08      	ldr	r3, [pc, #32]	; (1a000bec <xQueueGenericReset+0x80>)
1a000bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bce:	601a      	str	r2, [r3, #0]
1a000bd0:	f3bf 8f4f 	dsb	sy
1a000bd4:	f3bf 8f6f 	isb	sy
1a000bd8:	e7ec      	b.n	1a000bb4 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000bda:	f104 0010 	add.w	r0, r4, #16
1a000bde:	f000 fbbc 	bl	1a00135a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000be2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000be6:	f000 fbb8 	bl	1a00135a <vListInitialise>
1a000bea:	e7e3      	b.n	1a000bb4 <xQueueGenericReset+0x48>
1a000bec:	e000ed04 	.word	0xe000ed04

1a000bf0 <prvInitialiseNewQueue>:
{
1a000bf0:	b538      	push	{r3, r4, r5, lr}
1a000bf2:	461d      	mov	r5, r3
1a000bf4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000bf6:	460b      	mov	r3, r1
1a000bf8:	b149      	cbz	r1, 1a000c0e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000bfa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000bfc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000bfe:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000c00:	2101      	movs	r1, #1
1a000c02:	4620      	mov	r0, r4
1a000c04:	f7ff ffb2 	bl	1a000b6c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000c08:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000c0c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000c0e:	6024      	str	r4, [r4, #0]
1a000c10:	e7f4      	b.n	1a000bfc <prvInitialiseNewQueue+0xc>

1a000c12 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000c12:	b940      	cbnz	r0, 1a000c26 <xQueueGenericCreateStatic+0x14>
1a000c14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c18:	f383 8811 	msr	BASEPRI, r3
1a000c1c:	f3bf 8f6f 	isb	sy
1a000c20:	f3bf 8f4f 	dsb	sy
1a000c24:	e7fe      	b.n	1a000c24 <xQueueGenericCreateStatic+0x12>
	{
1a000c26:	b510      	push	{r4, lr}
1a000c28:	b084      	sub	sp, #16
1a000c2a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000c2c:	b153      	cbz	r3, 1a000c44 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000c2e:	b192      	cbz	r2, 1a000c56 <xQueueGenericCreateStatic+0x44>
1a000c30:	b989      	cbnz	r1, 1a000c56 <xQueueGenericCreateStatic+0x44>
1a000c32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c36:	f383 8811 	msr	BASEPRI, r3
1a000c3a:	f3bf 8f6f 	isb	sy
1a000c3e:	f3bf 8f4f 	dsb	sy
1a000c42:	e7fe      	b.n	1a000c42 <xQueueGenericCreateStatic+0x30>
1a000c44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c48:	f383 8811 	msr	BASEPRI, r3
1a000c4c:	f3bf 8f6f 	isb	sy
1a000c50:	f3bf 8f4f 	dsb	sy
1a000c54:	e7fe      	b.n	1a000c54 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000c56:	b94a      	cbnz	r2, 1a000c6c <xQueueGenericCreateStatic+0x5a>
1a000c58:	b141      	cbz	r1, 1a000c6c <xQueueGenericCreateStatic+0x5a>
1a000c5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c5e:	f383 8811 	msr	BASEPRI, r3
1a000c62:	f3bf 8f6f 	isb	sy
1a000c66:	f3bf 8f4f 	dsb	sy
1a000c6a:	e7fe      	b.n	1a000c6a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000c6c:	2050      	movs	r0, #80	; 0x50
1a000c6e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000c70:	9803      	ldr	r0, [sp, #12]
1a000c72:	2850      	cmp	r0, #80	; 0x50
1a000c74:	d008      	beq.n	1a000c88 <xQueueGenericCreateStatic+0x76>
1a000c76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c7a:	f383 8811 	msr	BASEPRI, r3
1a000c7e:	f3bf 8f6f 	isb	sy
1a000c82:	f3bf 8f4f 	dsb	sy
1a000c86:	e7fe      	b.n	1a000c86 <xQueueGenericCreateStatic+0x74>
1a000c88:	4620      	mov	r0, r4
1a000c8a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000c8c:	2301      	movs	r3, #1
1a000c8e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000c92:	9400      	str	r4, [sp, #0]
1a000c94:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000c98:	f7ff ffaa 	bl	1a000bf0 <prvInitialiseNewQueue>
	}
1a000c9c:	4620      	mov	r0, r4
1a000c9e:	b004      	add	sp, #16
1a000ca0:	bd10      	pop	{r4, pc}

1a000ca2 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ca2:	b940      	cbnz	r0, 1a000cb6 <xQueueGenericCreate+0x14>
1a000ca4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ca8:	f383 8811 	msr	BASEPRI, r3
1a000cac:	f3bf 8f6f 	isb	sy
1a000cb0:	f3bf 8f4f 	dsb	sy
1a000cb4:	e7fe      	b.n	1a000cb4 <xQueueGenericCreate+0x12>
	{
1a000cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cb8:	b083      	sub	sp, #12
1a000cba:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000cbc:	b111      	cbz	r1, 1a000cc4 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000cbe:	fb01 f000 	mul.w	r0, r1, r0
1a000cc2:	e000      	b.n	1a000cc6 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000cc4:	2000      	movs	r0, #0
1a000cc6:	4617      	mov	r7, r2
1a000cc8:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000cca:	3050      	adds	r0, #80	; 0x50
1a000ccc:	f7ff fe62 	bl	1a000994 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000cd0:	4605      	mov	r5, r0
1a000cd2:	b150      	cbz	r0, 1a000cea <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000cd4:	2300      	movs	r3, #0
1a000cd6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000cda:	9000      	str	r0, [sp, #0]
1a000cdc:	463b      	mov	r3, r7
1a000cde:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000ce2:	4621      	mov	r1, r4
1a000ce4:	4630      	mov	r0, r6
1a000ce6:	f7ff ff83 	bl	1a000bf0 <prvInitialiseNewQueue>
	}
1a000cea:	4628      	mov	r0, r5
1a000cec:	b003      	add	sp, #12
1a000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000cf0 <xQueueGenericSend>:
{
1a000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cf2:	b085      	sub	sp, #20
1a000cf4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000cf6:	b160      	cbz	r0, 1a000d12 <xQueueGenericSend+0x22>
1a000cf8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cfa:	b999      	cbnz	r1, 1a000d24 <xQueueGenericSend+0x34>
1a000cfc:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000cfe:	b18a      	cbz	r2, 1a000d24 <xQueueGenericSend+0x34>
1a000d00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d04:	f383 8811 	msr	BASEPRI, r3
1a000d08:	f3bf 8f6f 	isb	sy
1a000d0c:	f3bf 8f4f 	dsb	sy
1a000d10:	e7fe      	b.n	1a000d10 <xQueueGenericSend+0x20>
1a000d12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d16:	f383 8811 	msr	BASEPRI, r3
1a000d1a:	f3bf 8f6f 	isb	sy
1a000d1e:	f3bf 8f4f 	dsb	sy
1a000d22:	e7fe      	b.n	1a000d22 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000d24:	2b02      	cmp	r3, #2
1a000d26:	d10b      	bne.n	1a000d40 <xQueueGenericSend+0x50>
1a000d28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000d2a:	2a01      	cmp	r2, #1
1a000d2c:	d008      	beq.n	1a000d40 <xQueueGenericSend+0x50>
1a000d2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d32:	f383 8811 	msr	BASEPRI, r3
1a000d36:	f3bf 8f6f 	isb	sy
1a000d3a:	f3bf 8f4f 	dsb	sy
1a000d3e:	e7fe      	b.n	1a000d3e <xQueueGenericSend+0x4e>
1a000d40:	461e      	mov	r6, r3
1a000d42:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d44:	f001 f86a 	bl	1a001e1c <xTaskGetSchedulerState>
1a000d48:	b950      	cbnz	r0, 1a000d60 <xQueueGenericSend+0x70>
1a000d4a:	9b01      	ldr	r3, [sp, #4]
1a000d4c:	b153      	cbz	r3, 1a000d64 <xQueueGenericSend+0x74>
1a000d4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d52:	f383 8811 	msr	BASEPRI, r3
1a000d56:	f3bf 8f6f 	isb	sy
1a000d5a:	f3bf 8f4f 	dsb	sy
1a000d5e:	e7fe      	b.n	1a000d5e <xQueueGenericSend+0x6e>
1a000d60:	2500      	movs	r5, #0
1a000d62:	e03a      	b.n	1a000dda <xQueueGenericSend+0xea>
1a000d64:	2500      	movs	r5, #0
1a000d66:	e038      	b.n	1a000dda <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000d68:	4632      	mov	r2, r6
1a000d6a:	4639      	mov	r1, r7
1a000d6c:	4620      	mov	r0, r4
1a000d6e:	f7ff fe79 	bl	1a000a64 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000d74:	b94b      	cbnz	r3, 1a000d8a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000d76:	b1a8      	cbz	r0, 1a000da4 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000d78:	4b3b      	ldr	r3, [pc, #236]	; (1a000e68 <xQueueGenericSend+0x178>)
1a000d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d7e:	601a      	str	r2, [r3, #0]
1a000d80:	f3bf 8f4f 	dsb	sy
1a000d84:	f3bf 8f6f 	isb	sy
1a000d88:	e00c      	b.n	1a000da4 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000d8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d8e:	f000 ffad 	bl	1a001cec <xTaskRemoveFromEventList>
1a000d92:	b138      	cbz	r0, 1a000da4 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000d94:	4b34      	ldr	r3, [pc, #208]	; (1a000e68 <xQueueGenericSend+0x178>)
1a000d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d9a:	601a      	str	r2, [r3, #0]
1a000d9c:	f3bf 8f4f 	dsb	sy
1a000da0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000da4:	f001 fc58 	bl	1a002658 <vPortExitCritical>
				return pdPASS;
1a000da8:	2001      	movs	r0, #1
}
1a000daa:	b005      	add	sp, #20
1a000dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000dae:	f001 fc53 	bl	1a002658 <vPortExitCritical>
					return errQUEUE_FULL;
1a000db2:	2000      	movs	r0, #0
1a000db4:	e7f9      	b.n	1a000daa <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000db6:	a802      	add	r0, sp, #8
1a000db8:	f000 ffde 	bl	1a001d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000dbc:	2501      	movs	r5, #1
1a000dbe:	e019      	b.n	1a000df4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000dc0:	2300      	movs	r3, #0
1a000dc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000dc6:	e021      	b.n	1a000e0c <xQueueGenericSend+0x11c>
1a000dc8:	2300      	movs	r3, #0
1a000dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dce:	e023      	b.n	1a000e18 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000dd0:	4620      	mov	r0, r4
1a000dd2:	f7ff fe94 	bl	1a000afe <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000dd6:	f000 fdff 	bl	1a0019d8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000dda:	f001 fc1b 	bl	1a002614 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000dde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000de0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000de2:	429a      	cmp	r2, r3
1a000de4:	d3c0      	bcc.n	1a000d68 <xQueueGenericSend+0x78>
1a000de6:	2e02      	cmp	r6, #2
1a000de8:	d0be      	beq.n	1a000d68 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000dea:	9b01      	ldr	r3, [sp, #4]
1a000dec:	2b00      	cmp	r3, #0
1a000dee:	d0de      	beq.n	1a000dae <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000df0:	2d00      	cmp	r5, #0
1a000df2:	d0e0      	beq.n	1a000db6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000df4:	f001 fc30 	bl	1a002658 <vPortExitCritical>
		vTaskSuspendAll();
1a000df8:	f000 fd54 	bl	1a0018a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000dfc:	f001 fc0a 	bl	1a002614 <vPortEnterCritical>
1a000e00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e04:	b25b      	sxtb	r3, r3
1a000e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e0a:	d0d9      	beq.n	1a000dc0 <xQueueGenericSend+0xd0>
1a000e0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e10:	b25b      	sxtb	r3, r3
1a000e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e16:	d0d7      	beq.n	1a000dc8 <xQueueGenericSend+0xd8>
1a000e18:	f001 fc1e 	bl	1a002658 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e1c:	a901      	add	r1, sp, #4
1a000e1e:	a802      	add	r0, sp, #8
1a000e20:	f000 ffb6 	bl	1a001d90 <xTaskCheckForTimeOut>
1a000e24:	b9c8      	cbnz	r0, 1a000e5a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000e26:	4620      	mov	r0, r4
1a000e28:	f7ff fe00 	bl	1a000a2c <prvIsQueueFull>
1a000e2c:	2800      	cmp	r0, #0
1a000e2e:	d0cf      	beq.n	1a000dd0 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000e30:	9901      	ldr	r1, [sp, #4]
1a000e32:	f104 0010 	add.w	r0, r4, #16
1a000e36:	f000 ff25 	bl	1a001c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e3a:	4620      	mov	r0, r4
1a000e3c:	f7ff fe5f 	bl	1a000afe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e40:	f000 fdca 	bl	1a0019d8 <xTaskResumeAll>
1a000e44:	2800      	cmp	r0, #0
1a000e46:	d1c8      	bne.n	1a000dda <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000e48:	4b07      	ldr	r3, [pc, #28]	; (1a000e68 <xQueueGenericSend+0x178>)
1a000e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e4e:	601a      	str	r2, [r3, #0]
1a000e50:	f3bf 8f4f 	dsb	sy
1a000e54:	f3bf 8f6f 	isb	sy
1a000e58:	e7bf      	b.n	1a000dda <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000e5a:	4620      	mov	r0, r4
1a000e5c:	f7ff fe4f 	bl	1a000afe <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e60:	f000 fdba 	bl	1a0019d8 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000e64:	2000      	movs	r0, #0
1a000e66:	e7a0      	b.n	1a000daa <xQueueGenericSend+0xba>
1a000e68:	e000ed04 	.word	0xe000ed04

1a000e6c <xQueueGenericSendFromISR>:
{
1a000e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000e70:	b160      	cbz	r0, 1a000e8c <xQueueGenericSendFromISR+0x20>
1a000e72:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000e74:	b999      	cbnz	r1, 1a000e9e <xQueueGenericSendFromISR+0x32>
1a000e76:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000e78:	b188      	cbz	r0, 1a000e9e <xQueueGenericSendFromISR+0x32>
1a000e7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e7e:	f383 8811 	msr	BASEPRI, r3
1a000e82:	f3bf 8f6f 	isb	sy
1a000e86:	f3bf 8f4f 	dsb	sy
1a000e8a:	e7fe      	b.n	1a000e8a <xQueueGenericSendFromISR+0x1e>
1a000e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e90:	f383 8811 	msr	BASEPRI, r3
1a000e94:	f3bf 8f6f 	isb	sy
1a000e98:	f3bf 8f4f 	dsb	sy
1a000e9c:	e7fe      	b.n	1a000e9c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000e9e:	2b02      	cmp	r3, #2
1a000ea0:	d10b      	bne.n	1a000eba <xQueueGenericSendFromISR+0x4e>
1a000ea2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000ea4:	2801      	cmp	r0, #1
1a000ea6:	d008      	beq.n	1a000eba <xQueueGenericSendFromISR+0x4e>
1a000ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eac:	f383 8811 	msr	BASEPRI, r3
1a000eb0:	f3bf 8f6f 	isb	sy
1a000eb4:	f3bf 8f4f 	dsb	sy
1a000eb8:	e7fe      	b.n	1a000eb8 <xQueueGenericSendFromISR+0x4c>
1a000eba:	461f      	mov	r7, r3
1a000ebc:	4690      	mov	r8, r2
1a000ebe:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000ec0:	f001 fcd2 	bl	1a002868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000ec4:	f3ef 8611 	mrs	r6, BASEPRI
1a000ec8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ecc:	f383 8811 	msr	BASEPRI, r3
1a000ed0:	f3bf 8f6f 	isb	sy
1a000ed4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000ed8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000eda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000edc:	429a      	cmp	r2, r3
1a000ede:	d303      	bcc.n	1a000ee8 <xQueueGenericSendFromISR+0x7c>
1a000ee0:	2f02      	cmp	r7, #2
1a000ee2:	d001      	beq.n	1a000ee8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000ee4:	2000      	movs	r0, #0
1a000ee6:	e00f      	b.n	1a000f08 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000ee8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000eec:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000eee:	463a      	mov	r2, r7
1a000ef0:	4649      	mov	r1, r9
1a000ef2:	4620      	mov	r0, r4
1a000ef4:	f7ff fdb6 	bl	1a000a64 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000ef8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000efc:	d008      	beq.n	1a000f10 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000efe:	1c6b      	adds	r3, r5, #1
1a000f00:	b25b      	sxtb	r3, r3
1a000f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000f06:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000f08:	f386 8811 	msr	BASEPRI, r6
}
1a000f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000f12:	b15b      	cbz	r3, 1a000f2c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000f14:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f18:	f000 fee8 	bl	1a001cec <xTaskRemoveFromEventList>
1a000f1c:	b140      	cbz	r0, 1a000f30 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000f1e:	f1b8 0f00 	cmp.w	r8, #0
1a000f22:	d007      	beq.n	1a000f34 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000f24:	2001      	movs	r0, #1
1a000f26:	f8c8 0000 	str.w	r0, [r8]
1a000f2a:	e7ed      	b.n	1a000f08 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000f2c:	2001      	movs	r0, #1
1a000f2e:	e7eb      	b.n	1a000f08 <xQueueGenericSendFromISR+0x9c>
1a000f30:	2001      	movs	r0, #1
1a000f32:	e7e9      	b.n	1a000f08 <xQueueGenericSendFromISR+0x9c>
1a000f34:	2001      	movs	r0, #1
1a000f36:	e7e7      	b.n	1a000f08 <xQueueGenericSendFromISR+0x9c>

1a000f38 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
1a000f38:	b160      	cbz	r0, 1a000f54 <xQueueGiveFromISR+0x1c>
{
1a000f3a:	b570      	push	{r4, r5, r6, lr}
1a000f3c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000f3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000f40:	b18b      	cbz	r3, 1a000f66 <xQueueGiveFromISR+0x2e>
	__asm volatile
1a000f42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f46:	f383 8811 	msr	BASEPRI, r3
1a000f4a:	f3bf 8f6f 	isb	sy
1a000f4e:	f3bf 8f4f 	dsb	sy
1a000f52:	e7fe      	b.n	1a000f52 <xQueueGiveFromISR+0x1a>
1a000f54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f58:	f383 8811 	msr	BASEPRI, r3
1a000f5c:	f3bf 8f6f 	isb	sy
1a000f60:	f3bf 8f4f 	dsb	sy
1a000f64:	e7fe      	b.n	1a000f64 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a000f66:	6803      	ldr	r3, [r0, #0]
1a000f68:	b32b      	cbz	r3, 1a000fb6 <xQueueGiveFromISR+0x7e>
1a000f6a:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000f6c:	f001 fc7c 	bl	1a002868 <vPortValidateInterruptPriority>
	__asm volatile
1a000f70:	f3ef 8511 	mrs	r5, BASEPRI
1a000f74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f78:	f383 8811 	msr	BASEPRI, r3
1a000f7c:	f3bf 8f6f 	isb	sy
1a000f80:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
1a000f86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f88:	4293      	cmp	r3, r2
1a000f8a:	d926      	bls.n	1a000fda <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000f8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f90:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000f92:	3201      	adds	r2, #1
1a000f94:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
1a000f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f9a:	d118      	bne.n	1a000fce <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000f9e:	b1f3      	cbz	r3, 1a000fde <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000fa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000fa4:	f000 fea2 	bl	1a001cec <xTaskRemoveFromEventList>
1a000fa8:	b1d8      	cbz	r0, 1a000fe2 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
1a000faa:	b1e6      	cbz	r6, 1a000fe6 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000fac:	2001      	movs	r0, #1
1a000fae:	6030      	str	r0, [r6, #0]
	__asm volatile
1a000fb0:	f385 8811 	msr	BASEPRI, r5
}
1a000fb4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a000fb6:	6843      	ldr	r3, [r0, #4]
1a000fb8:	2b00      	cmp	r3, #0
1a000fba:	d0d6      	beq.n	1a000f6a <xQueueGiveFromISR+0x32>
	__asm volatile
1a000fbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fc0:	f383 8811 	msr	BASEPRI, r3
1a000fc4:	f3bf 8f6f 	isb	sy
1a000fc8:	f3bf 8f4f 	dsb	sy
1a000fcc:	e7fe      	b.n	1a000fcc <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000fce:	3301      	adds	r3, #1
1a000fd0:	b25b      	sxtb	r3, r3
1a000fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000fd6:	2001      	movs	r0, #1
1a000fd8:	e7ea      	b.n	1a000fb0 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
1a000fda:	2000      	movs	r0, #0
1a000fdc:	e7e8      	b.n	1a000fb0 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
1a000fde:	2001      	movs	r0, #1
1a000fe0:	e7e6      	b.n	1a000fb0 <xQueueGiveFromISR+0x78>
1a000fe2:	2001      	movs	r0, #1
1a000fe4:	e7e4      	b.n	1a000fb0 <xQueueGiveFromISR+0x78>
1a000fe6:	2001      	movs	r0, #1
1a000fe8:	e7e2      	b.n	1a000fb0 <xQueueGiveFromISR+0x78>
1a000fea:	Address 0x000000001a000fea is out of bounds.


1a000fec <xQueueReceive>:
{
1a000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000fee:	b085      	sub	sp, #20
1a000ff0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000ff2:	b160      	cbz	r0, 1a00100e <xQueueReceive+0x22>
1a000ff4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000ff6:	b999      	cbnz	r1, 1a001020 <xQueueReceive+0x34>
1a000ff8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000ffa:	b18b      	cbz	r3, 1a001020 <xQueueReceive+0x34>
1a000ffc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001000:	f383 8811 	msr	BASEPRI, r3
1a001004:	f3bf 8f6f 	isb	sy
1a001008:	f3bf 8f4f 	dsb	sy
1a00100c:	e7fe      	b.n	1a00100c <xQueueReceive+0x20>
1a00100e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001012:	f383 8811 	msr	BASEPRI, r3
1a001016:	f3bf 8f6f 	isb	sy
1a00101a:	f3bf 8f4f 	dsb	sy
1a00101e:	e7fe      	b.n	1a00101e <xQueueReceive+0x32>
1a001020:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001022:	f000 fefb 	bl	1a001e1c <xTaskGetSchedulerState>
1a001026:	b950      	cbnz	r0, 1a00103e <xQueueReceive+0x52>
1a001028:	9b01      	ldr	r3, [sp, #4]
1a00102a:	b153      	cbz	r3, 1a001042 <xQueueReceive+0x56>
1a00102c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001030:	f383 8811 	msr	BASEPRI, r3
1a001034:	f3bf 8f6f 	isb	sy
1a001038:	f3bf 8f4f 	dsb	sy
1a00103c:	e7fe      	b.n	1a00103c <xQueueReceive+0x50>
1a00103e:	2600      	movs	r6, #0
1a001040:	e03e      	b.n	1a0010c0 <xQueueReceive+0xd4>
1a001042:	2600      	movs	r6, #0
1a001044:	e03c      	b.n	1a0010c0 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001046:	4639      	mov	r1, r7
1a001048:	4620      	mov	r0, r4
1a00104a:	f7ff fd46 	bl	1a000ada <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00104e:	3d01      	subs	r5, #1
1a001050:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001052:	6923      	ldr	r3, [r4, #16]
1a001054:	b923      	cbnz	r3, 1a001060 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001056:	f001 faff 	bl	1a002658 <vPortExitCritical>
				return pdPASS;
1a00105a:	2001      	movs	r0, #1
}
1a00105c:	b005      	add	sp, #20
1a00105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001060:	f104 0010 	add.w	r0, r4, #16
1a001064:	f000 fe42 	bl	1a001cec <xTaskRemoveFromEventList>
1a001068:	2800      	cmp	r0, #0
1a00106a:	d0f4      	beq.n	1a001056 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a00106c:	4b34      	ldr	r3, [pc, #208]	; (1a001140 <xQueueReceive+0x154>)
1a00106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001072:	601a      	str	r2, [r3, #0]
1a001074:	f3bf 8f4f 	dsb	sy
1a001078:	f3bf 8f6f 	isb	sy
1a00107c:	e7eb      	b.n	1a001056 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a00107e:	f001 faeb 	bl	1a002658 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001082:	2000      	movs	r0, #0
1a001084:	e7ea      	b.n	1a00105c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001086:	a802      	add	r0, sp, #8
1a001088:	f000 fe76 	bl	1a001d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00108c:	2601      	movs	r6, #1
1a00108e:	e021      	b.n	1a0010d4 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001090:	2300      	movs	r3, #0
1a001092:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001096:	e029      	b.n	1a0010ec <xQueueReceive+0x100>
1a001098:	2300      	movs	r3, #0
1a00109a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00109e:	e02b      	b.n	1a0010f8 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a0010a0:	4620      	mov	r0, r4
1a0010a2:	f7ff fd2c 	bl	1a000afe <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0010a6:	f000 fc97 	bl	1a0019d8 <xTaskResumeAll>
1a0010aa:	e009      	b.n	1a0010c0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0010ac:	4620      	mov	r0, r4
1a0010ae:	f7ff fd26 	bl	1a000afe <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0010b2:	f000 fc91 	bl	1a0019d8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0010b6:	4620      	mov	r0, r4
1a0010b8:	f7ff fcc7 	bl	1a000a4a <prvIsQueueEmpty>
1a0010bc:	2800      	cmp	r0, #0
1a0010be:	d13d      	bne.n	1a00113c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0010c0:	f001 faa8 	bl	1a002614 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0010c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0010c6:	2d00      	cmp	r5, #0
1a0010c8:	d1bd      	bne.n	1a001046 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0010ca:	9b01      	ldr	r3, [sp, #4]
1a0010cc:	2b00      	cmp	r3, #0
1a0010ce:	d0d6      	beq.n	1a00107e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0010d0:	2e00      	cmp	r6, #0
1a0010d2:	d0d8      	beq.n	1a001086 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0010d4:	f001 fac0 	bl	1a002658 <vPortExitCritical>
		vTaskSuspendAll();
1a0010d8:	f000 fbe4 	bl	1a0018a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0010dc:	f001 fa9a 	bl	1a002614 <vPortEnterCritical>
1a0010e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0010e4:	b25b      	sxtb	r3, r3
1a0010e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010ea:	d0d1      	beq.n	1a001090 <xQueueReceive+0xa4>
1a0010ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0010f0:	b25b      	sxtb	r3, r3
1a0010f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010f6:	d0cf      	beq.n	1a001098 <xQueueReceive+0xac>
1a0010f8:	f001 faae 	bl	1a002658 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0010fc:	a901      	add	r1, sp, #4
1a0010fe:	a802      	add	r0, sp, #8
1a001100:	f000 fe46 	bl	1a001d90 <xTaskCheckForTimeOut>
1a001104:	2800      	cmp	r0, #0
1a001106:	d1d1      	bne.n	1a0010ac <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001108:	4620      	mov	r0, r4
1a00110a:	f7ff fc9e 	bl	1a000a4a <prvIsQueueEmpty>
1a00110e:	2800      	cmp	r0, #0
1a001110:	d0c6      	beq.n	1a0010a0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001112:	9901      	ldr	r1, [sp, #4]
1a001114:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001118:	f000 fdb4 	bl	1a001c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00111c:	4620      	mov	r0, r4
1a00111e:	f7ff fcee 	bl	1a000afe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001122:	f000 fc59 	bl	1a0019d8 <xTaskResumeAll>
1a001126:	2800      	cmp	r0, #0
1a001128:	d1ca      	bne.n	1a0010c0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a00112a:	4b05      	ldr	r3, [pc, #20]	; (1a001140 <xQueueReceive+0x154>)
1a00112c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001130:	601a      	str	r2, [r3, #0]
1a001132:	f3bf 8f4f 	dsb	sy
1a001136:	f3bf 8f6f 	isb	sy
1a00113a:	e7c1      	b.n	1a0010c0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a00113c:	2000      	movs	r0, #0
1a00113e:	e78d      	b.n	1a00105c <xQueueReceive+0x70>
1a001140:	e000ed04 	.word	0xe000ed04

1a001144 <xQueueSemaphoreTake>:
{
1a001144:	b570      	push	{r4, r5, r6, lr}
1a001146:	b084      	sub	sp, #16
1a001148:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00114a:	b940      	cbnz	r0, 1a00115e <xQueueSemaphoreTake+0x1a>
1a00114c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001150:	f383 8811 	msr	BASEPRI, r3
1a001154:	f3bf 8f6f 	isb	sy
1a001158:	f3bf 8f4f 	dsb	sy
1a00115c:	e7fe      	b.n	1a00115c <xQueueSemaphoreTake+0x18>
1a00115e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001160:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001162:	b143      	cbz	r3, 1a001176 <xQueueSemaphoreTake+0x32>
1a001164:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001168:	f383 8811 	msr	BASEPRI, r3
1a00116c:	f3bf 8f6f 	isb	sy
1a001170:	f3bf 8f4f 	dsb	sy
1a001174:	e7fe      	b.n	1a001174 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001176:	f000 fe51 	bl	1a001e1c <xTaskGetSchedulerState>
1a00117a:	b950      	cbnz	r0, 1a001192 <xQueueSemaphoreTake+0x4e>
1a00117c:	9b01      	ldr	r3, [sp, #4]
1a00117e:	b15b      	cbz	r3, 1a001198 <xQueueSemaphoreTake+0x54>
1a001180:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001184:	f383 8811 	msr	BASEPRI, r3
1a001188:	f3bf 8f6f 	isb	sy
1a00118c:	f3bf 8f4f 	dsb	sy
1a001190:	e7fe      	b.n	1a001190 <xQueueSemaphoreTake+0x4c>
1a001192:	2500      	movs	r5, #0
1a001194:	462e      	mov	r6, r5
1a001196:	e051      	b.n	1a00123c <xQueueSemaphoreTake+0xf8>
1a001198:	2500      	movs	r5, #0
1a00119a:	462e      	mov	r6, r5
1a00119c:	e04e      	b.n	1a00123c <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a00119e:	3b01      	subs	r3, #1
1a0011a0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0011a2:	6823      	ldr	r3, [r4, #0]
1a0011a4:	b913      	cbnz	r3, 1a0011ac <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a0011a6:	f000 ff5d 	bl	1a002064 <pvTaskIncrementMutexHeldCount>
1a0011aa:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0011ac:	6923      	ldr	r3, [r4, #16]
1a0011ae:	b163      	cbz	r3, 1a0011ca <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0011b0:	f104 0010 	add.w	r0, r4, #16
1a0011b4:	f000 fd9a 	bl	1a001cec <xTaskRemoveFromEventList>
1a0011b8:	b138      	cbz	r0, 1a0011ca <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a0011ba:	4b48      	ldr	r3, [pc, #288]	; (1a0012dc <xQueueSemaphoreTake+0x198>)
1a0011bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011c0:	601a      	str	r2, [r3, #0]
1a0011c2:	f3bf 8f4f 	dsb	sy
1a0011c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0011ca:	f001 fa45 	bl	1a002658 <vPortExitCritical>
				return pdPASS;
1a0011ce:	2501      	movs	r5, #1
}
1a0011d0:	4628      	mov	r0, r5
1a0011d2:	b004      	add	sp, #16
1a0011d4:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a0011d6:	b145      	cbz	r5, 1a0011ea <xQueueSemaphoreTake+0xa6>
1a0011d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011dc:	f383 8811 	msr	BASEPRI, r3
1a0011e0:	f3bf 8f6f 	isb	sy
1a0011e4:	f3bf 8f4f 	dsb	sy
1a0011e8:	e7fe      	b.n	1a0011e8 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a0011ea:	f001 fa35 	bl	1a002658 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0011ee:	e7ef      	b.n	1a0011d0 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0011f0:	a802      	add	r0, sp, #8
1a0011f2:	f000 fdc1 	bl	1a001d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0011f6:	2601      	movs	r6, #1
1a0011f8:	e02a      	b.n	1a001250 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a0011fa:	2300      	movs	r3, #0
1a0011fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001200:	e032      	b.n	1a001268 <xQueueSemaphoreTake+0x124>
1a001202:	2300      	movs	r3, #0
1a001204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001208:	e034      	b.n	1a001274 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a00120a:	f001 fa03 	bl	1a002614 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a00120e:	6860      	ldr	r0, [r4, #4]
1a001210:	f000 fe14 	bl	1a001e3c <xTaskPriorityInherit>
1a001214:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001216:	f001 fa1f 	bl	1a002658 <vPortExitCritical>
1a00121a:	e03b      	b.n	1a001294 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a00121c:	4620      	mov	r0, r4
1a00121e:	f7ff fc6e 	bl	1a000afe <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001222:	f000 fbd9 	bl	1a0019d8 <xTaskResumeAll>
1a001226:	e009      	b.n	1a00123c <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001228:	4620      	mov	r0, r4
1a00122a:	f7ff fc68 	bl	1a000afe <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00122e:	f000 fbd3 	bl	1a0019d8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001232:	4620      	mov	r0, r4
1a001234:	f7ff fc09 	bl	1a000a4a <prvIsQueueEmpty>
1a001238:	2800      	cmp	r0, #0
1a00123a:	d140      	bne.n	1a0012be <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a00123c:	f001 f9ea 	bl	1a002614 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001242:	2b00      	cmp	r3, #0
1a001244:	d1ab      	bne.n	1a00119e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001246:	9b01      	ldr	r3, [sp, #4]
1a001248:	2b00      	cmp	r3, #0
1a00124a:	d0c4      	beq.n	1a0011d6 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a00124c:	2e00      	cmp	r6, #0
1a00124e:	d0cf      	beq.n	1a0011f0 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001250:	f001 fa02 	bl	1a002658 <vPortExitCritical>
		vTaskSuspendAll();
1a001254:	f000 fb26 	bl	1a0018a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001258:	f001 f9dc 	bl	1a002614 <vPortEnterCritical>
1a00125c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001260:	b25b      	sxtb	r3, r3
1a001262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001266:	d0c8      	beq.n	1a0011fa <xQueueSemaphoreTake+0xb6>
1a001268:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00126c:	b25b      	sxtb	r3, r3
1a00126e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001272:	d0c6      	beq.n	1a001202 <xQueueSemaphoreTake+0xbe>
1a001274:	f001 f9f0 	bl	1a002658 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001278:	a901      	add	r1, sp, #4
1a00127a:	a802      	add	r0, sp, #8
1a00127c:	f000 fd88 	bl	1a001d90 <xTaskCheckForTimeOut>
1a001280:	2800      	cmp	r0, #0
1a001282:	d1d1      	bne.n	1a001228 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001284:	4620      	mov	r0, r4
1a001286:	f7ff fbe0 	bl	1a000a4a <prvIsQueueEmpty>
1a00128a:	2800      	cmp	r0, #0
1a00128c:	d0c6      	beq.n	1a00121c <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00128e:	6823      	ldr	r3, [r4, #0]
1a001290:	2b00      	cmp	r3, #0
1a001292:	d0ba      	beq.n	1a00120a <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001294:	9901      	ldr	r1, [sp, #4]
1a001296:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00129a:	f000 fcf3 	bl	1a001c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00129e:	4620      	mov	r0, r4
1a0012a0:	f7ff fc2d 	bl	1a000afe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0012a4:	f000 fb98 	bl	1a0019d8 <xTaskResumeAll>
1a0012a8:	2800      	cmp	r0, #0
1a0012aa:	d1c7      	bne.n	1a00123c <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a0012ac:	4b0b      	ldr	r3, [pc, #44]	; (1a0012dc <xQueueSemaphoreTake+0x198>)
1a0012ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012b2:	601a      	str	r2, [r3, #0]
1a0012b4:	f3bf 8f4f 	dsb	sy
1a0012b8:	f3bf 8f6f 	isb	sy
1a0012bc:	e7be      	b.n	1a00123c <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a0012be:	2d00      	cmp	r5, #0
1a0012c0:	d086      	beq.n	1a0011d0 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a0012c2:	f001 f9a7 	bl	1a002614 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a0012c6:	4620      	mov	r0, r4
1a0012c8:	f7ff fba7 	bl	1a000a1a <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a0012cc:	4601      	mov	r1, r0
1a0012ce:	6860      	ldr	r0, [r4, #4]
1a0012d0:	f000 fe68 	bl	1a001fa4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a0012d4:	f001 f9c0 	bl	1a002658 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a0012d8:	2500      	movs	r5, #0
1a0012da:	e779      	b.n	1a0011d0 <xQueueSemaphoreTake+0x8c>
1a0012dc:	e000ed04 	.word	0xe000ed04

1a0012e0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0012e0:	2300      	movs	r3, #0
1a0012e2:	2b07      	cmp	r3, #7
1a0012e4:	d80c      	bhi.n	1a001300 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0012e6:	4a07      	ldr	r2, [pc, #28]	; (1a001304 <vQueueAddToRegistry+0x24>)
1a0012e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0012ec:	b10a      	cbz	r2, 1a0012f2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0012ee:	3301      	adds	r3, #1
1a0012f0:	e7f7      	b.n	1a0012e2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0012f2:	4a04      	ldr	r2, [pc, #16]	; (1a001304 <vQueueAddToRegistry+0x24>)
1a0012f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0012f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0012fc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0012fe:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001300:	4770      	bx	lr
1a001302:	bf00      	nop
1a001304:	10002b38 	.word	0x10002b38

1a001308 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001308:	b570      	push	{r4, r5, r6, lr}
1a00130a:	4604      	mov	r4, r0
1a00130c:	460d      	mov	r5, r1
1a00130e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001310:	f001 f980 	bl	1a002614 <vPortEnterCritical>
1a001314:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001318:	b25b      	sxtb	r3, r3
1a00131a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00131e:	d00d      	beq.n	1a00133c <vQueueWaitForMessageRestricted+0x34>
1a001320:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001324:	b25b      	sxtb	r3, r3
1a001326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00132a:	d00b      	beq.n	1a001344 <vQueueWaitForMessageRestricted+0x3c>
1a00132c:	f001 f994 	bl	1a002658 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001330:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001332:	b15b      	cbz	r3, 1a00134c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001334:	4620      	mov	r0, r4
1a001336:	f7ff fbe2 	bl	1a000afe <prvUnlockQueue>
	}
1a00133a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00133c:	2300      	movs	r3, #0
1a00133e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001342:	e7ed      	b.n	1a001320 <vQueueWaitForMessageRestricted+0x18>
1a001344:	2300      	movs	r3, #0
1a001346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00134a:	e7ef      	b.n	1a00132c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a00134c:	4632      	mov	r2, r6
1a00134e:	4629      	mov	r1, r5
1a001350:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001354:	f000 fcae 	bl	1a001cb4 <vTaskPlaceOnEventListRestricted>
1a001358:	e7ec      	b.n	1a001334 <vQueueWaitForMessageRestricted+0x2c>

1a00135a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00135a:	f100 0308 	add.w	r3, r0, #8
1a00135e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001364:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001366:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001368:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00136a:	2300      	movs	r3, #0
1a00136c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00136e:	4770      	bx	lr

1a001370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001370:	2300      	movs	r3, #0
1a001372:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001374:	4770      	bx	lr

1a001376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001376:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001378:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00137a:	689a      	ldr	r2, [r3, #8]
1a00137c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00137e:	689a      	ldr	r2, [r3, #8]
1a001380:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001382:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001384:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001386:	6803      	ldr	r3, [r0, #0]
1a001388:	3301      	adds	r3, #1
1a00138a:	6003      	str	r3, [r0, #0]
}
1a00138c:	4770      	bx	lr

1a00138e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00138e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001390:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001392:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001396:	d002      	beq.n	1a00139e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001398:	f100 0208 	add.w	r2, r0, #8
1a00139c:	e002      	b.n	1a0013a4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00139e:	6902      	ldr	r2, [r0, #16]
1a0013a0:	e004      	b.n	1a0013ac <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0013a2:	461a      	mov	r2, r3
1a0013a4:	6853      	ldr	r3, [r2, #4]
1a0013a6:	681c      	ldr	r4, [r3, #0]
1a0013a8:	42ac      	cmp	r4, r5
1a0013aa:	d9fa      	bls.n	1a0013a2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0013ac:	6853      	ldr	r3, [r2, #4]
1a0013ae:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0013b0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0013b2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0013b4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0013b6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0013b8:	6803      	ldr	r3, [r0, #0]
1a0013ba:	3301      	adds	r3, #1
1a0013bc:	6003      	str	r3, [r0, #0]
}
1a0013be:	bc30      	pop	{r4, r5}
1a0013c0:	4770      	bx	lr

1a0013c2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0013c2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0013c4:	6842      	ldr	r2, [r0, #4]
1a0013c6:	6881      	ldr	r1, [r0, #8]
1a0013c8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0013ca:	6882      	ldr	r2, [r0, #8]
1a0013cc:	6841      	ldr	r1, [r0, #4]
1a0013ce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0013d0:	685a      	ldr	r2, [r3, #4]
1a0013d2:	4282      	cmp	r2, r0
1a0013d4:	d006      	beq.n	1a0013e4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0013d6:	2200      	movs	r2, #0
1a0013d8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0013da:	681a      	ldr	r2, [r3, #0]
1a0013dc:	3a01      	subs	r2, #1
1a0013de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0013e0:	6818      	ldr	r0, [r3, #0]
}
1a0013e2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0013e4:	6882      	ldr	r2, [r0, #8]
1a0013e6:	605a      	str	r2, [r3, #4]
1a0013e8:	e7f5      	b.n	1a0013d6 <uxListRemove+0x14>
1a0013ea:	Address 0x000000001a0013ea is out of bounds.


1a0013ec <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0013ec:	4b03      	ldr	r3, [pc, #12]	; (1a0013fc <vApplicationGetIdleTaskMemory+0x10>)
1a0013ee:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0013f0:	4b03      	ldr	r3, [pc, #12]	; (1a001400 <vApplicationGetIdleTaskMemory+0x14>)
1a0013f2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0013f4:	235a      	movs	r3, #90	; 0x5a
1a0013f6:	6013      	str	r3, [r2, #0]
}
1a0013f8:	4770      	bx	lr
1a0013fa:	bf00      	nop
1a0013fc:	100027cc 	.word	0x100027cc
1a001400:	100020c4 	.word	0x100020c4

1a001404 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001404:	4b03      	ldr	r3, [pc, #12]	; (1a001414 <vApplicationGetTimerTaskMemory+0x10>)
1a001406:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001408:	4b03      	ldr	r3, [pc, #12]	; (1a001418 <vApplicationGetTimerTaskMemory+0x14>)
1a00140a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00140c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001410:	6013      	str	r3, [r2, #0]
1a001412:	4770      	bx	lr
1a001414:	1000282c 	.word	0x1000282c
1a001418:	1000222c 	.word	0x1000222c

1a00141c <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a00141c:	e7fe      	b.n	1a00141c <vApplicationStackOverflowHook>

1a00141e <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a00141e:	e7fe      	b.n	1a00141e <vApplicationMallocFailedHook>

1a001420 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001420:	4b08      	ldr	r3, [pc, #32]	; (1a001444 <prvResetNextTaskUnblockTime+0x24>)
1a001422:	681b      	ldr	r3, [r3, #0]
1a001424:	681b      	ldr	r3, [r3, #0]
1a001426:	b13b      	cbz	r3, 1a001438 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001428:	4b06      	ldr	r3, [pc, #24]	; (1a001444 <prvResetNextTaskUnblockTime+0x24>)
1a00142a:	681b      	ldr	r3, [r3, #0]
1a00142c:	68db      	ldr	r3, [r3, #12]
1a00142e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001430:	685a      	ldr	r2, [r3, #4]
1a001432:	4b05      	ldr	r3, [pc, #20]	; (1a001448 <prvResetNextTaskUnblockTime+0x28>)
1a001434:	601a      	str	r2, [r3, #0]
	}
}
1a001436:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001438:	4b03      	ldr	r3, [pc, #12]	; (1a001448 <prvResetNextTaskUnblockTime+0x28>)
1a00143a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00143e:	601a      	str	r2, [r3, #0]
1a001440:	4770      	bx	lr
1a001442:	bf00      	nop
1a001444:	10002890 	.word	0x10002890
1a001448:	10002964 	.word	0x10002964

1a00144c <prvInitialiseNewTask>:
{
1a00144c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001450:	4681      	mov	r9, r0
1a001452:	460d      	mov	r5, r1
1a001454:	4617      	mov	r7, r2
1a001456:	469a      	mov	sl, r3
1a001458:	9e08      	ldr	r6, [sp, #32]
1a00145a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00145e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001460:	0092      	lsls	r2, r2, #2
1a001462:	21a5      	movs	r1, #165	; 0xa5
1a001464:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001466:	f002 fdb4 	bl	1a003fd2 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00146a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00146c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001470:	3a01      	subs	r2, #1
1a001472:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001476:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00147a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00147c:	2300      	movs	r3, #0
1a00147e:	2b0f      	cmp	r3, #15
1a001480:	d807      	bhi.n	1a001492 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001482:	5ce9      	ldrb	r1, [r5, r3]
1a001484:	18e2      	adds	r2, r4, r3
1a001486:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00148a:	5cea      	ldrb	r2, [r5, r3]
1a00148c:	b10a      	cbz	r2, 1a001492 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00148e:	3301      	adds	r3, #1
1a001490:	e7f5      	b.n	1a00147e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001492:	2300      	movs	r3, #0
1a001494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001498:	2e06      	cmp	r6, #6
1a00149a:	d900      	bls.n	1a00149e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a00149c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a00149e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0014a0:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0014a2:	2500      	movs	r5, #0
1a0014a4:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0014a6:	1d20      	adds	r0, r4, #4
1a0014a8:	f7ff ff62 	bl	1a001370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0014ac:	f104 0018 	add.w	r0, r4, #24
1a0014b0:	f7ff ff5e 	bl	1a001370 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0014b4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014b6:	f1c6 0607 	rsb	r6, r6, #7
1a0014ba:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0014bc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0014be:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0014c0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0014c4:	4652      	mov	r2, sl
1a0014c6:	4649      	mov	r1, r9
1a0014c8:	4638      	mov	r0, r7
1a0014ca:	f001 f877 	bl	1a0025bc <pxPortInitialiseStack>
1a0014ce:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0014d0:	f1b8 0f00 	cmp.w	r8, #0
1a0014d4:	d001      	beq.n	1a0014da <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0014d6:	f8c8 4000 	str.w	r4, [r8]
}
1a0014da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0014de:	Address 0x000000001a0014de is out of bounds.


1a0014e0 <prvInitialiseTaskLists>:
{
1a0014e0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0014e2:	2400      	movs	r4, #0
1a0014e4:	e007      	b.n	1a0014f6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0014e6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0014ea:	0093      	lsls	r3, r2, #2
1a0014ec:	480e      	ldr	r0, [pc, #56]	; (1a001528 <prvInitialiseTaskLists+0x48>)
1a0014ee:	4418      	add	r0, r3
1a0014f0:	f7ff ff33 	bl	1a00135a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0014f4:	3401      	adds	r4, #1
1a0014f6:	2c06      	cmp	r4, #6
1a0014f8:	d9f5      	bls.n	1a0014e6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0014fa:	4d0c      	ldr	r5, [pc, #48]	; (1a00152c <prvInitialiseTaskLists+0x4c>)
1a0014fc:	4628      	mov	r0, r5
1a0014fe:	f7ff ff2c 	bl	1a00135a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001502:	4c0b      	ldr	r4, [pc, #44]	; (1a001530 <prvInitialiseTaskLists+0x50>)
1a001504:	4620      	mov	r0, r4
1a001506:	f7ff ff28 	bl	1a00135a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00150a:	480a      	ldr	r0, [pc, #40]	; (1a001534 <prvInitialiseTaskLists+0x54>)
1a00150c:	f7ff ff25 	bl	1a00135a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001510:	4809      	ldr	r0, [pc, #36]	; (1a001538 <prvInitialiseTaskLists+0x58>)
1a001512:	f7ff ff22 	bl	1a00135a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001516:	4809      	ldr	r0, [pc, #36]	; (1a00153c <prvInitialiseTaskLists+0x5c>)
1a001518:	f7ff ff1f 	bl	1a00135a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00151c:	4b08      	ldr	r3, [pc, #32]	; (1a001540 <prvInitialiseTaskLists+0x60>)
1a00151e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001520:	4b08      	ldr	r3, [pc, #32]	; (1a001544 <prvInitialiseTaskLists+0x64>)
1a001522:	601c      	str	r4, [r3, #0]
}
1a001524:	bd38      	pop	{r3, r4, r5, pc}
1a001526:	bf00      	nop
1a001528:	10002898 	.word	0x10002898
1a00152c:	1000293c 	.word	0x1000293c
1a001530:	10002950 	.word	0x10002950
1a001534:	1000296c 	.word	0x1000296c
1a001538:	10002998 	.word	0x10002998
1a00153c:	10002984 	.word	0x10002984
1a001540:	10002890 	.word	0x10002890
1a001544:	10002894 	.word	0x10002894

1a001548 <prvAddNewTaskToReadyList>:
{
1a001548:	b510      	push	{r4, lr}
1a00154a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00154c:	f001 f862 	bl	1a002614 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001550:	4a21      	ldr	r2, [pc, #132]	; (1a0015d8 <prvAddNewTaskToReadyList+0x90>)
1a001552:	6813      	ldr	r3, [r2, #0]
1a001554:	3301      	adds	r3, #1
1a001556:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001558:	4b20      	ldr	r3, [pc, #128]	; (1a0015dc <prvAddNewTaskToReadyList+0x94>)
1a00155a:	681b      	ldr	r3, [r3, #0]
1a00155c:	b15b      	cbz	r3, 1a001576 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00155e:	4b20      	ldr	r3, [pc, #128]	; (1a0015e0 <prvAddNewTaskToReadyList+0x98>)
1a001560:	681b      	ldr	r3, [r3, #0]
1a001562:	b96b      	cbnz	r3, 1a001580 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001564:	4b1d      	ldr	r3, [pc, #116]	; (1a0015dc <prvAddNewTaskToReadyList+0x94>)
1a001566:	681b      	ldr	r3, [r3, #0]
1a001568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00156a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00156c:	429a      	cmp	r2, r3
1a00156e:	d807      	bhi.n	1a001580 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001570:	4b1a      	ldr	r3, [pc, #104]	; (1a0015dc <prvAddNewTaskToReadyList+0x94>)
1a001572:	601c      	str	r4, [r3, #0]
1a001574:	e004      	b.n	1a001580 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001576:	4b19      	ldr	r3, [pc, #100]	; (1a0015dc <prvAddNewTaskToReadyList+0x94>)
1a001578:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00157a:	6813      	ldr	r3, [r2, #0]
1a00157c:	2b01      	cmp	r3, #1
1a00157e:	d027      	beq.n	1a0015d0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001580:	4a18      	ldr	r2, [pc, #96]	; (1a0015e4 <prvAddNewTaskToReadyList+0x9c>)
1a001582:	6813      	ldr	r3, [r2, #0]
1a001584:	3301      	adds	r3, #1
1a001586:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001588:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00158a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00158c:	2201      	movs	r2, #1
1a00158e:	409a      	lsls	r2, r3
1a001590:	4915      	ldr	r1, [pc, #84]	; (1a0015e8 <prvAddNewTaskToReadyList+0xa0>)
1a001592:	6808      	ldr	r0, [r1, #0]
1a001594:	4302      	orrs	r2, r0
1a001596:	600a      	str	r2, [r1, #0]
1a001598:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00159c:	009a      	lsls	r2, r3, #2
1a00159e:	1d21      	adds	r1, r4, #4
1a0015a0:	4812      	ldr	r0, [pc, #72]	; (1a0015ec <prvAddNewTaskToReadyList+0xa4>)
1a0015a2:	4410      	add	r0, r2
1a0015a4:	f7ff fee7 	bl	1a001376 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0015a8:	f001 f856 	bl	1a002658 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0015ac:	4b0c      	ldr	r3, [pc, #48]	; (1a0015e0 <prvAddNewTaskToReadyList+0x98>)
1a0015ae:	681b      	ldr	r3, [r3, #0]
1a0015b0:	b16b      	cbz	r3, 1a0015ce <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0015b2:	4b0a      	ldr	r3, [pc, #40]	; (1a0015dc <prvAddNewTaskToReadyList+0x94>)
1a0015b4:	681b      	ldr	r3, [r3, #0]
1a0015b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0015b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0015ba:	429a      	cmp	r2, r3
1a0015bc:	d207      	bcs.n	1a0015ce <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0015be:	4b0c      	ldr	r3, [pc, #48]	; (1a0015f0 <prvAddNewTaskToReadyList+0xa8>)
1a0015c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015c4:	601a      	str	r2, [r3, #0]
1a0015c6:	f3bf 8f4f 	dsb	sy
1a0015ca:	f3bf 8f6f 	isb	sy
}
1a0015ce:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0015d0:	f7ff ff86 	bl	1a0014e0 <prvInitialiseTaskLists>
1a0015d4:	e7d4      	b.n	1a001580 <prvAddNewTaskToReadyList+0x38>
1a0015d6:	bf00      	nop
1a0015d8:	10002924 	.word	0x10002924
1a0015dc:	1000288c 	.word	0x1000288c
1a0015e0:	10002980 	.word	0x10002980
1a0015e4:	10002934 	.word	0x10002934
1a0015e8:	10002938 	.word	0x10002938
1a0015ec:	10002898 	.word	0x10002898
1a0015f0:	e000ed04 	.word	0xe000ed04

1a0015f4 <prvDeleteTCB>:
	{
1a0015f4:	b510      	push	{r4, lr}
1a0015f6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0015f8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0015fc:	b933      	cbnz	r3, 1a00160c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0015fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001600:	f7ff fa00 	bl	1a000a04 <vPortFree>
				vPortFree( pxTCB );
1a001604:	4620      	mov	r0, r4
1a001606:	f7ff f9fd 	bl	1a000a04 <vPortFree>
	}
1a00160a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00160c:	2b01      	cmp	r3, #1
1a00160e:	d00a      	beq.n	1a001626 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001610:	2b02      	cmp	r3, #2
1a001612:	d0fa      	beq.n	1a00160a <prvDeleteTCB+0x16>
1a001614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001618:	f383 8811 	msr	BASEPRI, r3
1a00161c:	f3bf 8f6f 	isb	sy
1a001620:	f3bf 8f4f 	dsb	sy
1a001624:	e7fe      	b.n	1a001624 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001626:	f7ff f9ed 	bl	1a000a04 <vPortFree>
1a00162a:	e7ee      	b.n	1a00160a <prvDeleteTCB+0x16>

1a00162c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00162c:	4b0f      	ldr	r3, [pc, #60]	; (1a00166c <prvCheckTasksWaitingTermination+0x40>)
1a00162e:	681b      	ldr	r3, [r3, #0]
1a001630:	b1d3      	cbz	r3, 1a001668 <prvCheckTasksWaitingTermination+0x3c>
{
1a001632:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001634:	f000 ffee 	bl	1a002614 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001638:	4b0d      	ldr	r3, [pc, #52]	; (1a001670 <prvCheckTasksWaitingTermination+0x44>)
1a00163a:	68db      	ldr	r3, [r3, #12]
1a00163c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00163e:	1d20      	adds	r0, r4, #4
1a001640:	f7ff febf 	bl	1a0013c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001644:	4a0b      	ldr	r2, [pc, #44]	; (1a001674 <prvCheckTasksWaitingTermination+0x48>)
1a001646:	6813      	ldr	r3, [r2, #0]
1a001648:	3b01      	subs	r3, #1
1a00164a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00164c:	4a07      	ldr	r2, [pc, #28]	; (1a00166c <prvCheckTasksWaitingTermination+0x40>)
1a00164e:	6813      	ldr	r3, [r2, #0]
1a001650:	3b01      	subs	r3, #1
1a001652:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001654:	f001 f800 	bl	1a002658 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001658:	4620      	mov	r0, r4
1a00165a:	f7ff ffcb 	bl	1a0015f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00165e:	4b03      	ldr	r3, [pc, #12]	; (1a00166c <prvCheckTasksWaitingTermination+0x40>)
1a001660:	681b      	ldr	r3, [r3, #0]
1a001662:	2b00      	cmp	r3, #0
1a001664:	d1e6      	bne.n	1a001634 <prvCheckTasksWaitingTermination+0x8>
}
1a001666:	bd10      	pop	{r4, pc}
1a001668:	4770      	bx	lr
1a00166a:	bf00      	nop
1a00166c:	10002928 	.word	0x10002928
1a001670:	10002998 	.word	0x10002998
1a001674:	10002924 	.word	0x10002924

1a001678 <prvIdleTask>:
{
1a001678:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00167a:	f7ff ffd7 	bl	1a00162c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00167e:	4b06      	ldr	r3, [pc, #24]	; (1a001698 <prvIdleTask+0x20>)
1a001680:	681b      	ldr	r3, [r3, #0]
1a001682:	2b01      	cmp	r3, #1
1a001684:	d9f9      	bls.n	1a00167a <prvIdleTask+0x2>
				taskYIELD();
1a001686:	4b05      	ldr	r3, [pc, #20]	; (1a00169c <prvIdleTask+0x24>)
1a001688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00168c:	601a      	str	r2, [r3, #0]
1a00168e:	f3bf 8f4f 	dsb	sy
1a001692:	f3bf 8f6f 	isb	sy
1a001696:	e7f0      	b.n	1a00167a <prvIdleTask+0x2>
1a001698:	10002898 	.word	0x10002898
1a00169c:	e000ed04 	.word	0xe000ed04

1a0016a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0016a0:	b570      	push	{r4, r5, r6, lr}
1a0016a2:	4604      	mov	r4, r0
1a0016a4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0016a6:	4b1d      	ldr	r3, [pc, #116]	; (1a00171c <prvAddCurrentTaskToDelayedList+0x7c>)
1a0016a8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0016aa:	4b1d      	ldr	r3, [pc, #116]	; (1a001720 <prvAddCurrentTaskToDelayedList+0x80>)
1a0016ac:	6818      	ldr	r0, [r3, #0]
1a0016ae:	3004      	adds	r0, #4
1a0016b0:	f7ff fe87 	bl	1a0013c2 <uxListRemove>
1a0016b4:	b950      	cbnz	r0, 1a0016cc <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0016b6:	4b1a      	ldr	r3, [pc, #104]	; (1a001720 <prvAddCurrentTaskToDelayedList+0x80>)
1a0016b8:	681b      	ldr	r3, [r3, #0]
1a0016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0016bc:	2301      	movs	r3, #1
1a0016be:	fa03 f202 	lsl.w	r2, r3, r2
1a0016c2:	4918      	ldr	r1, [pc, #96]	; (1a001724 <prvAddCurrentTaskToDelayedList+0x84>)
1a0016c4:	680b      	ldr	r3, [r1, #0]
1a0016c6:	ea23 0302 	bic.w	r3, r3, r2
1a0016ca:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0016cc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0016d0:	d013      	beq.n	1a0016fa <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0016d2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0016d4:	4b12      	ldr	r3, [pc, #72]	; (1a001720 <prvAddCurrentTaskToDelayedList+0x80>)
1a0016d6:	681b      	ldr	r3, [r3, #0]
1a0016d8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0016da:	42a5      	cmp	r5, r4
1a0016dc:	d816      	bhi.n	1a00170c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0016de:	4b12      	ldr	r3, [pc, #72]	; (1a001728 <prvAddCurrentTaskToDelayedList+0x88>)
1a0016e0:	6818      	ldr	r0, [r3, #0]
1a0016e2:	4b0f      	ldr	r3, [pc, #60]	; (1a001720 <prvAddCurrentTaskToDelayedList+0x80>)
1a0016e4:	6819      	ldr	r1, [r3, #0]
1a0016e6:	3104      	adds	r1, #4
1a0016e8:	f7ff fe51 	bl	1a00138e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0016ec:	4b0f      	ldr	r3, [pc, #60]	; (1a00172c <prvAddCurrentTaskToDelayedList+0x8c>)
1a0016ee:	681b      	ldr	r3, [r3, #0]
1a0016f0:	42a3      	cmp	r3, r4
1a0016f2:	d912      	bls.n	1a00171a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0016f4:	4b0d      	ldr	r3, [pc, #52]	; (1a00172c <prvAddCurrentTaskToDelayedList+0x8c>)
1a0016f6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0016f8:	e00f      	b.n	1a00171a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0016fa:	2e00      	cmp	r6, #0
1a0016fc:	d0e9      	beq.n	1a0016d2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0016fe:	4b08      	ldr	r3, [pc, #32]	; (1a001720 <prvAddCurrentTaskToDelayedList+0x80>)
1a001700:	6819      	ldr	r1, [r3, #0]
1a001702:	3104      	adds	r1, #4
1a001704:	480a      	ldr	r0, [pc, #40]	; (1a001730 <prvAddCurrentTaskToDelayedList+0x90>)
1a001706:	f7ff fe36 	bl	1a001376 <vListInsertEnd>
1a00170a:	e006      	b.n	1a00171a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00170c:	4b09      	ldr	r3, [pc, #36]	; (1a001734 <prvAddCurrentTaskToDelayedList+0x94>)
1a00170e:	6818      	ldr	r0, [r3, #0]
1a001710:	4b03      	ldr	r3, [pc, #12]	; (1a001720 <prvAddCurrentTaskToDelayedList+0x80>)
1a001712:	6819      	ldr	r1, [r3, #0]
1a001714:	3104      	adds	r1, #4
1a001716:	f7ff fe3a 	bl	1a00138e <vListInsert>
}
1a00171a:	bd70      	pop	{r4, r5, r6, pc}
1a00171c:	100029ac 	.word	0x100029ac
1a001720:	1000288c 	.word	0x1000288c
1a001724:	10002938 	.word	0x10002938
1a001728:	10002890 	.word	0x10002890
1a00172c:	10002964 	.word	0x10002964
1a001730:	10002984 	.word	0x10002984
1a001734:	10002894 	.word	0x10002894

1a001738 <xTaskCreateStatic>:
	{
1a001738:	b570      	push	{r4, r5, r6, lr}
1a00173a:	b086      	sub	sp, #24
1a00173c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00173e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001740:	b945      	cbnz	r5, 1a001754 <xTaskCreateStatic+0x1c>
1a001742:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001746:	f383 8811 	msr	BASEPRI, r3
1a00174a:	f3bf 8f6f 	isb	sy
1a00174e:	f3bf 8f4f 	dsb	sy
1a001752:	e7fe      	b.n	1a001752 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001754:	b944      	cbnz	r4, 1a001768 <xTaskCreateStatic+0x30>
1a001756:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00175a:	f383 8811 	msr	BASEPRI, r3
1a00175e:	f3bf 8f6f 	isb	sy
1a001762:	f3bf 8f4f 	dsb	sy
1a001766:	e7fe      	b.n	1a001766 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001768:	2660      	movs	r6, #96	; 0x60
1a00176a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00176c:	9e04      	ldr	r6, [sp, #16]
1a00176e:	2e60      	cmp	r6, #96	; 0x60
1a001770:	d008      	beq.n	1a001784 <xTaskCreateStatic+0x4c>
1a001772:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001776:	f383 8811 	msr	BASEPRI, r3
1a00177a:	f3bf 8f6f 	isb	sy
1a00177e:	f3bf 8f4f 	dsb	sy
1a001782:	e7fe      	b.n	1a001782 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001784:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001786:	2502      	movs	r5, #2
1a001788:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a00178c:	2500      	movs	r5, #0
1a00178e:	9503      	str	r5, [sp, #12]
1a001790:	9402      	str	r4, [sp, #8]
1a001792:	ad05      	add	r5, sp, #20
1a001794:	9501      	str	r5, [sp, #4]
1a001796:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001798:	9500      	str	r5, [sp, #0]
1a00179a:	f7ff fe57 	bl	1a00144c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00179e:	4620      	mov	r0, r4
1a0017a0:	f7ff fed2 	bl	1a001548 <prvAddNewTaskToReadyList>
	}
1a0017a4:	9805      	ldr	r0, [sp, #20]
1a0017a6:	b006      	add	sp, #24
1a0017a8:	bd70      	pop	{r4, r5, r6, pc}

1a0017aa <xTaskCreate>:
	{
1a0017aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0017ae:	b085      	sub	sp, #20
1a0017b0:	4607      	mov	r7, r0
1a0017b2:	4688      	mov	r8, r1
1a0017b4:	4615      	mov	r5, r2
1a0017b6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0017b8:	0090      	lsls	r0, r2, #2
1a0017ba:	f7ff f8eb 	bl	1a000994 <pvPortMalloc>
			if( pxStack != NULL )
1a0017be:	b308      	cbz	r0, 1a001804 <xTaskCreate+0x5a>
1a0017c0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0017c2:	2060      	movs	r0, #96	; 0x60
1a0017c4:	f7ff f8e6 	bl	1a000994 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0017c8:	4604      	mov	r4, r0
1a0017ca:	b1b8      	cbz	r0, 1a0017fc <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a0017cc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0017ce:	b1e4      	cbz	r4, 1a00180a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0017d0:	2300      	movs	r3, #0
1a0017d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0017d6:	9303      	str	r3, [sp, #12]
1a0017d8:	9402      	str	r4, [sp, #8]
1a0017da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0017dc:	9301      	str	r3, [sp, #4]
1a0017de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0017e0:	9300      	str	r3, [sp, #0]
1a0017e2:	464b      	mov	r3, r9
1a0017e4:	462a      	mov	r2, r5
1a0017e6:	4641      	mov	r1, r8
1a0017e8:	4638      	mov	r0, r7
1a0017ea:	f7ff fe2f 	bl	1a00144c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0017ee:	4620      	mov	r0, r4
1a0017f0:	f7ff feaa 	bl	1a001548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0017f4:	2001      	movs	r0, #1
	}
1a0017f6:	b005      	add	sp, #20
1a0017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0017fc:	4630      	mov	r0, r6
1a0017fe:	f7ff f901 	bl	1a000a04 <vPortFree>
1a001802:	e7e4      	b.n	1a0017ce <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001808:	e7f5      	b.n	1a0017f6 <xTaskCreate+0x4c>
1a00180a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00180e:	e7f2      	b.n	1a0017f6 <xTaskCreate+0x4c>

1a001810 <vTaskStartScheduler>:
{
1a001810:	b510      	push	{r4, lr}
1a001812:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001814:	2400      	movs	r4, #0
1a001816:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001818:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00181a:	aa07      	add	r2, sp, #28
1a00181c:	a906      	add	r1, sp, #24
1a00181e:	a805      	add	r0, sp, #20
1a001820:	f7ff fde4 	bl	1a0013ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001824:	9b05      	ldr	r3, [sp, #20]
1a001826:	9302      	str	r3, [sp, #8]
1a001828:	9b06      	ldr	r3, [sp, #24]
1a00182a:	9301      	str	r3, [sp, #4]
1a00182c:	9400      	str	r4, [sp, #0]
1a00182e:	4623      	mov	r3, r4
1a001830:	9a07      	ldr	r2, [sp, #28]
1a001832:	4917      	ldr	r1, [pc, #92]	; (1a001890 <vTaskStartScheduler+0x80>)
1a001834:	4817      	ldr	r0, [pc, #92]	; (1a001894 <vTaskStartScheduler+0x84>)
1a001836:	f7ff ff7f 	bl	1a001738 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00183a:	b140      	cbz	r0, 1a00184e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a00183c:	f000 fcac 	bl	1a002198 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001840:	2801      	cmp	r0, #1
1a001842:	d006      	beq.n	1a001852 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001844:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001848:	d018      	beq.n	1a00187c <vTaskStartScheduler+0x6c>
}
1a00184a:	b008      	add	sp, #32
1a00184c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00184e:	2000      	movs	r0, #0
1a001850:	e7f6      	b.n	1a001840 <vTaskStartScheduler+0x30>
1a001852:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001856:	f383 8811 	msr	BASEPRI, r3
1a00185a:	f3bf 8f6f 	isb	sy
1a00185e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001862:	4b0d      	ldr	r3, [pc, #52]	; (1a001898 <vTaskStartScheduler+0x88>)
1a001864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001868:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00186a:	4b0c      	ldr	r3, [pc, #48]	; (1a00189c <vTaskStartScheduler+0x8c>)
1a00186c:	2201      	movs	r2, #1
1a00186e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001870:	4b0b      	ldr	r3, [pc, #44]	; (1a0018a0 <vTaskStartScheduler+0x90>)
1a001872:	2200      	movs	r2, #0
1a001874:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001876:	f000 ff6f 	bl	1a002758 <xPortStartScheduler>
1a00187a:	e7e6      	b.n	1a00184a <vTaskStartScheduler+0x3a>
1a00187c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001880:	f383 8811 	msr	BASEPRI, r3
1a001884:	f3bf 8f6f 	isb	sy
1a001888:	f3bf 8f4f 	dsb	sy
1a00188c:	e7fe      	b.n	1a00188c <vTaskStartScheduler+0x7c>
1a00188e:	bf00      	nop
1a001890:	1a004044 	.word	0x1a004044
1a001894:	1a001679 	.word	0x1a001679
1a001898:	10002964 	.word	0x10002964
1a00189c:	10002980 	.word	0x10002980
1a0018a0:	100029ac 	.word	0x100029ac

1a0018a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0018a4:	4a02      	ldr	r2, [pc, #8]	; (1a0018b0 <vTaskSuspendAll+0xc>)
1a0018a6:	6813      	ldr	r3, [r2, #0]
1a0018a8:	3301      	adds	r3, #1
1a0018aa:	6013      	str	r3, [r2, #0]
}
1a0018ac:	4770      	bx	lr
1a0018ae:	bf00      	nop
1a0018b0:	10002930 	.word	0x10002930

1a0018b4 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0018b4:	4b01      	ldr	r3, [pc, #4]	; (1a0018bc <xTaskGetTickCount+0x8>)
1a0018b6:	6818      	ldr	r0, [r3, #0]
}
1a0018b8:	4770      	bx	lr
1a0018ba:	bf00      	nop
1a0018bc:	100029ac 	.word	0x100029ac

1a0018c0 <xTaskIncrementTick>:
{
1a0018c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0018c2:	4b3a      	ldr	r3, [pc, #232]	; (1a0019ac <xTaskIncrementTick+0xec>)
1a0018c4:	681b      	ldr	r3, [r3, #0]
1a0018c6:	2b00      	cmp	r3, #0
1a0018c8:	d164      	bne.n	1a001994 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0018ca:	4b39      	ldr	r3, [pc, #228]	; (1a0019b0 <xTaskIncrementTick+0xf0>)
1a0018cc:	681d      	ldr	r5, [r3, #0]
1a0018ce:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0018d0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0018d2:	b9c5      	cbnz	r5, 1a001906 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0018d4:	4b37      	ldr	r3, [pc, #220]	; (1a0019b4 <xTaskIncrementTick+0xf4>)
1a0018d6:	681b      	ldr	r3, [r3, #0]
1a0018d8:	681b      	ldr	r3, [r3, #0]
1a0018da:	b143      	cbz	r3, 1a0018ee <xTaskIncrementTick+0x2e>
1a0018dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018e0:	f383 8811 	msr	BASEPRI, r3
1a0018e4:	f3bf 8f6f 	isb	sy
1a0018e8:	f3bf 8f4f 	dsb	sy
1a0018ec:	e7fe      	b.n	1a0018ec <xTaskIncrementTick+0x2c>
1a0018ee:	4a31      	ldr	r2, [pc, #196]	; (1a0019b4 <xTaskIncrementTick+0xf4>)
1a0018f0:	6811      	ldr	r1, [r2, #0]
1a0018f2:	4b31      	ldr	r3, [pc, #196]	; (1a0019b8 <xTaskIncrementTick+0xf8>)
1a0018f4:	6818      	ldr	r0, [r3, #0]
1a0018f6:	6010      	str	r0, [r2, #0]
1a0018f8:	6019      	str	r1, [r3, #0]
1a0018fa:	4a30      	ldr	r2, [pc, #192]	; (1a0019bc <xTaskIncrementTick+0xfc>)
1a0018fc:	6813      	ldr	r3, [r2, #0]
1a0018fe:	3301      	adds	r3, #1
1a001900:	6013      	str	r3, [r2, #0]
1a001902:	f7ff fd8d 	bl	1a001420 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001906:	4b2e      	ldr	r3, [pc, #184]	; (1a0019c0 <xTaskIncrementTick+0x100>)
1a001908:	681b      	ldr	r3, [r3, #0]
1a00190a:	42ab      	cmp	r3, r5
1a00190c:	d938      	bls.n	1a001980 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00190e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001910:	4b2c      	ldr	r3, [pc, #176]	; (1a0019c4 <xTaskIncrementTick+0x104>)
1a001912:	681b      	ldr	r3, [r3, #0]
1a001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001916:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00191a:	009a      	lsls	r2, r3, #2
1a00191c:	4b2a      	ldr	r3, [pc, #168]	; (1a0019c8 <xTaskIncrementTick+0x108>)
1a00191e:	589b      	ldr	r3, [r3, r2]
1a001920:	2b01      	cmp	r3, #1
1a001922:	d93c      	bls.n	1a00199e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001924:	2401      	movs	r4, #1
1a001926:	e03a      	b.n	1a00199e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001928:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00192a:	4b22      	ldr	r3, [pc, #136]	; (1a0019b4 <xTaskIncrementTick+0xf4>)
1a00192c:	681b      	ldr	r3, [r3, #0]
1a00192e:	681b      	ldr	r3, [r3, #0]
1a001930:	b343      	cbz	r3, 1a001984 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001932:	4b20      	ldr	r3, [pc, #128]	; (1a0019b4 <xTaskIncrementTick+0xf4>)
1a001934:	681b      	ldr	r3, [r3, #0]
1a001936:	68db      	ldr	r3, [r3, #12]
1a001938:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00193a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00193c:	429d      	cmp	r5, r3
1a00193e:	d326      	bcc.n	1a00198e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001940:	1d37      	adds	r7, r6, #4
1a001942:	4638      	mov	r0, r7
1a001944:	f7ff fd3d 	bl	1a0013c2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001948:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00194a:	b11b      	cbz	r3, 1a001954 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00194c:	f106 0018 	add.w	r0, r6, #24
1a001950:	f7ff fd37 	bl	1a0013c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001954:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001956:	2201      	movs	r2, #1
1a001958:	409a      	lsls	r2, r3
1a00195a:	491c      	ldr	r1, [pc, #112]	; (1a0019cc <xTaskIncrementTick+0x10c>)
1a00195c:	6808      	ldr	r0, [r1, #0]
1a00195e:	4302      	orrs	r2, r0
1a001960:	600a      	str	r2, [r1, #0]
1a001962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001966:	009a      	lsls	r2, r3, #2
1a001968:	4639      	mov	r1, r7
1a00196a:	4817      	ldr	r0, [pc, #92]	; (1a0019c8 <xTaskIncrementTick+0x108>)
1a00196c:	4410      	add	r0, r2
1a00196e:	f7ff fd02 	bl	1a001376 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001972:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001974:	4b13      	ldr	r3, [pc, #76]	; (1a0019c4 <xTaskIncrementTick+0x104>)
1a001976:	681b      	ldr	r3, [r3, #0]
1a001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00197a:	429a      	cmp	r2, r3
1a00197c:	d2d4      	bcs.n	1a001928 <xTaskIncrementTick+0x68>
1a00197e:	e7d4      	b.n	1a00192a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001980:	2400      	movs	r4, #0
1a001982:	e7d2      	b.n	1a00192a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001984:	4b0e      	ldr	r3, [pc, #56]	; (1a0019c0 <xTaskIncrementTick+0x100>)
1a001986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00198a:	601a      	str	r2, [r3, #0]
					break;
1a00198c:	e7c0      	b.n	1a001910 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00198e:	4a0c      	ldr	r2, [pc, #48]	; (1a0019c0 <xTaskIncrementTick+0x100>)
1a001990:	6013      	str	r3, [r2, #0]
						break;
1a001992:	e7bd      	b.n	1a001910 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001994:	4a0e      	ldr	r2, [pc, #56]	; (1a0019d0 <xTaskIncrementTick+0x110>)
1a001996:	6813      	ldr	r3, [r2, #0]
1a001998:	3301      	adds	r3, #1
1a00199a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00199c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00199e:	4b0d      	ldr	r3, [pc, #52]	; (1a0019d4 <xTaskIncrementTick+0x114>)
1a0019a0:	681b      	ldr	r3, [r3, #0]
1a0019a2:	b103      	cbz	r3, 1a0019a6 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0019a4:	2401      	movs	r4, #1
}
1a0019a6:	4620      	mov	r0, r4
1a0019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0019aa:	bf00      	nop
1a0019ac:	10002930 	.word	0x10002930
1a0019b0:	100029ac 	.word	0x100029ac
1a0019b4:	10002890 	.word	0x10002890
1a0019b8:	10002894 	.word	0x10002894
1a0019bc:	10002968 	.word	0x10002968
1a0019c0:	10002964 	.word	0x10002964
1a0019c4:	1000288c 	.word	0x1000288c
1a0019c8:	10002898 	.word	0x10002898
1a0019cc:	10002938 	.word	0x10002938
1a0019d0:	1000292c 	.word	0x1000292c
1a0019d4:	100029b0 	.word	0x100029b0

1a0019d8 <xTaskResumeAll>:
{
1a0019d8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0019da:	4b33      	ldr	r3, [pc, #204]	; (1a001aa8 <xTaskResumeAll+0xd0>)
1a0019dc:	681b      	ldr	r3, [r3, #0]
1a0019de:	b943      	cbnz	r3, 1a0019f2 <xTaskResumeAll+0x1a>
1a0019e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019e4:	f383 8811 	msr	BASEPRI, r3
1a0019e8:	f3bf 8f6f 	isb	sy
1a0019ec:	f3bf 8f4f 	dsb	sy
1a0019f0:	e7fe      	b.n	1a0019f0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0019f2:	f000 fe0f 	bl	1a002614 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0019f6:	4b2c      	ldr	r3, [pc, #176]	; (1a001aa8 <xTaskResumeAll+0xd0>)
1a0019f8:	681a      	ldr	r2, [r3, #0]
1a0019fa:	3a01      	subs	r2, #1
1a0019fc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0019fe:	681b      	ldr	r3, [r3, #0]
1a001a00:	2b00      	cmp	r3, #0
1a001a02:	d14d      	bne.n	1a001aa0 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001a04:	4b29      	ldr	r3, [pc, #164]	; (1a001aac <xTaskResumeAll+0xd4>)
1a001a06:	681b      	ldr	r3, [r3, #0]
1a001a08:	b923      	cbnz	r3, 1a001a14 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001a0a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001a0c:	f000 fe24 	bl	1a002658 <vPortExitCritical>
}
1a001a10:	4620      	mov	r0, r4
1a001a12:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001a14:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001a16:	4b26      	ldr	r3, [pc, #152]	; (1a001ab0 <xTaskResumeAll+0xd8>)
1a001a18:	681b      	ldr	r3, [r3, #0]
1a001a1a:	b31b      	cbz	r3, 1a001a64 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001a1c:	4b24      	ldr	r3, [pc, #144]	; (1a001ab0 <xTaskResumeAll+0xd8>)
1a001a1e:	68db      	ldr	r3, [r3, #12]
1a001a20:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001a22:	f104 0018 	add.w	r0, r4, #24
1a001a26:	f7ff fccc 	bl	1a0013c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001a2a:	1d25      	adds	r5, r4, #4
1a001a2c:	4628      	mov	r0, r5
1a001a2e:	f7ff fcc8 	bl	1a0013c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001a34:	2201      	movs	r2, #1
1a001a36:	409a      	lsls	r2, r3
1a001a38:	491e      	ldr	r1, [pc, #120]	; (1a001ab4 <xTaskResumeAll+0xdc>)
1a001a3a:	6808      	ldr	r0, [r1, #0]
1a001a3c:	4302      	orrs	r2, r0
1a001a3e:	600a      	str	r2, [r1, #0]
1a001a40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a44:	009a      	lsls	r2, r3, #2
1a001a46:	4629      	mov	r1, r5
1a001a48:	481b      	ldr	r0, [pc, #108]	; (1a001ab8 <xTaskResumeAll+0xe0>)
1a001a4a:	4410      	add	r0, r2
1a001a4c:	f7ff fc93 	bl	1a001376 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001a50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001a52:	4b1a      	ldr	r3, [pc, #104]	; (1a001abc <xTaskResumeAll+0xe4>)
1a001a54:	681b      	ldr	r3, [r3, #0]
1a001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a58:	429a      	cmp	r2, r3
1a001a5a:	d3dc      	bcc.n	1a001a16 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001a5c:	4b18      	ldr	r3, [pc, #96]	; (1a001ac0 <xTaskResumeAll+0xe8>)
1a001a5e:	2201      	movs	r2, #1
1a001a60:	601a      	str	r2, [r3, #0]
1a001a62:	e7d8      	b.n	1a001a16 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001a64:	b10c      	cbz	r4, 1a001a6a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001a66:	f7ff fcdb 	bl	1a001420 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001a6a:	4b16      	ldr	r3, [pc, #88]	; (1a001ac4 <xTaskResumeAll+0xec>)
1a001a6c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001a6e:	b154      	cbz	r4, 1a001a86 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001a70:	f7ff ff26 	bl	1a0018c0 <xTaskIncrementTick>
1a001a74:	b110      	cbz	r0, 1a001a7c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001a76:	4b12      	ldr	r3, [pc, #72]	; (1a001ac0 <xTaskResumeAll+0xe8>)
1a001a78:	2201      	movs	r2, #1
1a001a7a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001a7c:	3c01      	subs	r4, #1
1a001a7e:	d1f7      	bne.n	1a001a70 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001a80:	4b10      	ldr	r3, [pc, #64]	; (1a001ac4 <xTaskResumeAll+0xec>)
1a001a82:	2200      	movs	r2, #0
1a001a84:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001a86:	4b0e      	ldr	r3, [pc, #56]	; (1a001ac0 <xTaskResumeAll+0xe8>)
1a001a88:	681b      	ldr	r3, [r3, #0]
1a001a8a:	b15b      	cbz	r3, 1a001aa4 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001a8c:	4b0e      	ldr	r3, [pc, #56]	; (1a001ac8 <xTaskResumeAll+0xf0>)
1a001a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a92:	601a      	str	r2, [r3, #0]
1a001a94:	f3bf 8f4f 	dsb	sy
1a001a98:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001a9c:	2401      	movs	r4, #1
1a001a9e:	e7b5      	b.n	1a001a0c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001aa0:	2400      	movs	r4, #0
1a001aa2:	e7b3      	b.n	1a001a0c <xTaskResumeAll+0x34>
1a001aa4:	2400      	movs	r4, #0
1a001aa6:	e7b1      	b.n	1a001a0c <xTaskResumeAll+0x34>
1a001aa8:	10002930 	.word	0x10002930
1a001aac:	10002924 	.word	0x10002924
1a001ab0:	1000296c 	.word	0x1000296c
1a001ab4:	10002938 	.word	0x10002938
1a001ab8:	10002898 	.word	0x10002898
1a001abc:	1000288c 	.word	0x1000288c
1a001ac0:	100029b0 	.word	0x100029b0
1a001ac4:	1000292c 	.word	0x1000292c
1a001ac8:	e000ed04 	.word	0xe000ed04

1a001acc <vTaskDelayUntil>:
	{
1a001acc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001ace:	b150      	cbz	r0, 1a001ae6 <vTaskDelayUntil+0x1a>
1a001ad0:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001ad2:	b989      	cbnz	r1, 1a001af8 <vTaskDelayUntil+0x2c>
1a001ad4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ad8:	f383 8811 	msr	BASEPRI, r3
1a001adc:	f3bf 8f6f 	isb	sy
1a001ae0:	f3bf 8f4f 	dsb	sy
1a001ae4:	e7fe      	b.n	1a001ae4 <vTaskDelayUntil+0x18>
1a001ae6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aea:	f383 8811 	msr	BASEPRI, r3
1a001aee:	f3bf 8f6f 	isb	sy
1a001af2:	f3bf 8f4f 	dsb	sy
1a001af6:	e7fe      	b.n	1a001af6 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001af8:	4b1a      	ldr	r3, [pc, #104]	; (1a001b64 <vTaskDelayUntil+0x98>)
1a001afa:	681b      	ldr	r3, [r3, #0]
1a001afc:	b143      	cbz	r3, 1a001b10 <vTaskDelayUntil+0x44>
1a001afe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b02:	f383 8811 	msr	BASEPRI, r3
1a001b06:	f3bf 8f6f 	isb	sy
1a001b0a:	f3bf 8f4f 	dsb	sy
1a001b0e:	e7fe      	b.n	1a001b0e <vTaskDelayUntil+0x42>
1a001b10:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001b12:	f7ff fec7 	bl	1a0018a4 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001b16:	4b14      	ldr	r3, [pc, #80]	; (1a001b68 <vTaskDelayUntil+0x9c>)
1a001b18:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001b1a:	682a      	ldr	r2, [r5, #0]
1a001b1c:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001b1e:	4282      	cmp	r2, r0
1a001b20:	d918      	bls.n	1a001b54 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001b22:	42a2      	cmp	r2, r4
1a001b24:	d80c      	bhi.n	1a001b40 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001b26:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001b28:	f7ff ff56 	bl	1a0019d8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001b2c:	b938      	cbnz	r0, 1a001b3e <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a001b2e:	4b0f      	ldr	r3, [pc, #60]	; (1a001b6c <vTaskDelayUntil+0xa0>)
1a001b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b34:	601a      	str	r2, [r3, #0]
1a001b36:	f3bf 8f4f 	dsb	sy
1a001b3a:	f3bf 8f6f 	isb	sy
	}
1a001b3e:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001b40:	42a0      	cmp	r0, r4
1a001b42:	d301      	bcc.n	1a001b48 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001b44:	602c      	str	r4, [r5, #0]
1a001b46:	e7ef      	b.n	1a001b28 <vTaskDelayUntil+0x5c>
1a001b48:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001b4a:	2100      	movs	r1, #0
1a001b4c:	1a20      	subs	r0, r4, r0
1a001b4e:	f7ff fda7 	bl	1a0016a0 <prvAddCurrentTaskToDelayedList>
1a001b52:	e7e9      	b.n	1a001b28 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001b54:	42a2      	cmp	r2, r4
1a001b56:	d801      	bhi.n	1a001b5c <vTaskDelayUntil+0x90>
1a001b58:	42a0      	cmp	r0, r4
1a001b5a:	d201      	bcs.n	1a001b60 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001b5c:	602c      	str	r4, [r5, #0]
1a001b5e:	e7f4      	b.n	1a001b4a <vTaskDelayUntil+0x7e>
1a001b60:	602c      	str	r4, [r5, #0]
1a001b62:	e7e1      	b.n	1a001b28 <vTaskDelayUntil+0x5c>
1a001b64:	10002930 	.word	0x10002930
1a001b68:	100029ac 	.word	0x100029ac
1a001b6c:	e000ed04 	.word	0xe000ed04

1a001b70 <vTaskDelay>:
	{
1a001b70:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001b72:	b1a8      	cbz	r0, 1a001ba0 <vTaskDelay+0x30>
1a001b74:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001b76:	4b0f      	ldr	r3, [pc, #60]	; (1a001bb4 <vTaskDelay+0x44>)
1a001b78:	681b      	ldr	r3, [r3, #0]
1a001b7a:	b143      	cbz	r3, 1a001b8e <vTaskDelay+0x1e>
1a001b7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b80:	f383 8811 	msr	BASEPRI, r3
1a001b84:	f3bf 8f6f 	isb	sy
1a001b88:	f3bf 8f4f 	dsb	sy
1a001b8c:	e7fe      	b.n	1a001b8c <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001b8e:	f7ff fe89 	bl	1a0018a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001b92:	2100      	movs	r1, #0
1a001b94:	4620      	mov	r0, r4
1a001b96:	f7ff fd83 	bl	1a0016a0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001b9a:	f7ff ff1d 	bl	1a0019d8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001b9e:	b938      	cbnz	r0, 1a001bb0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001ba0:	4b05      	ldr	r3, [pc, #20]	; (1a001bb8 <vTaskDelay+0x48>)
1a001ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ba6:	601a      	str	r2, [r3, #0]
1a001ba8:	f3bf 8f4f 	dsb	sy
1a001bac:	f3bf 8f6f 	isb	sy
	}
1a001bb0:	bd10      	pop	{r4, pc}
1a001bb2:	bf00      	nop
1a001bb4:	10002930 	.word	0x10002930
1a001bb8:	e000ed04 	.word	0xe000ed04

1a001bbc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001bbc:	4b2c      	ldr	r3, [pc, #176]	; (1a001c70 <vTaskSwitchContext+0xb4>)
1a001bbe:	681b      	ldr	r3, [r3, #0]
1a001bc0:	b11b      	cbz	r3, 1a001bca <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001bc2:	4b2c      	ldr	r3, [pc, #176]	; (1a001c74 <vTaskSwitchContext+0xb8>)
1a001bc4:	2201      	movs	r2, #1
1a001bc6:	601a      	str	r2, [r3, #0]
1a001bc8:	4770      	bx	lr
{
1a001bca:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001bcc:	4b29      	ldr	r3, [pc, #164]	; (1a001c74 <vTaskSwitchContext+0xb8>)
1a001bce:	2200      	movs	r2, #0
1a001bd0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001bd2:	4b29      	ldr	r3, [pc, #164]	; (1a001c78 <vTaskSwitchContext+0xbc>)
1a001bd4:	681b      	ldr	r3, [r3, #0]
1a001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001bd8:	681a      	ldr	r2, [r3, #0]
1a001bda:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001bde:	d103      	bne.n	1a001be8 <vTaskSwitchContext+0x2c>
1a001be0:	685a      	ldr	r2, [r3, #4]
1a001be2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001be6:	d01b      	beq.n	1a001c20 <vTaskSwitchContext+0x64>
1a001be8:	4b23      	ldr	r3, [pc, #140]	; (1a001c78 <vTaskSwitchContext+0xbc>)
1a001bea:	6818      	ldr	r0, [r3, #0]
1a001bec:	6819      	ldr	r1, [r3, #0]
1a001bee:	3134      	adds	r1, #52	; 0x34
1a001bf0:	f7ff fc14 	bl	1a00141c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001bf4:	4b21      	ldr	r3, [pc, #132]	; (1a001c7c <vTaskSwitchContext+0xc0>)
1a001bf6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001bf8:	fab3 f383 	clz	r3, r3
1a001bfc:	b2db      	uxtb	r3, r3
1a001bfe:	f1c3 031f 	rsb	r3, r3, #31
1a001c02:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001c06:	008a      	lsls	r2, r1, #2
1a001c08:	491d      	ldr	r1, [pc, #116]	; (1a001c80 <vTaskSwitchContext+0xc4>)
1a001c0a:	588a      	ldr	r2, [r1, r2]
1a001c0c:	b98a      	cbnz	r2, 1a001c32 <vTaskSwitchContext+0x76>
	__asm volatile
1a001c0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c12:	f383 8811 	msr	BASEPRI, r3
1a001c16:	f3bf 8f6f 	isb	sy
1a001c1a:	f3bf 8f4f 	dsb	sy
1a001c1e:	e7fe      	b.n	1a001c1e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001c20:	689a      	ldr	r2, [r3, #8]
1a001c22:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001c26:	d1df      	bne.n	1a001be8 <vTaskSwitchContext+0x2c>
1a001c28:	68db      	ldr	r3, [r3, #12]
1a001c2a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001c2e:	d1db      	bne.n	1a001be8 <vTaskSwitchContext+0x2c>
1a001c30:	e7e0      	b.n	1a001bf4 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001c32:	4813      	ldr	r0, [pc, #76]	; (1a001c80 <vTaskSwitchContext+0xc4>)
1a001c34:	009a      	lsls	r2, r3, #2
1a001c36:	18d4      	adds	r4, r2, r3
1a001c38:	00a1      	lsls	r1, r4, #2
1a001c3a:	4401      	add	r1, r0
1a001c3c:	684c      	ldr	r4, [r1, #4]
1a001c3e:	6864      	ldr	r4, [r4, #4]
1a001c40:	604c      	str	r4, [r1, #4]
1a001c42:	441a      	add	r2, r3
1a001c44:	0091      	lsls	r1, r2, #2
1a001c46:	3108      	adds	r1, #8
1a001c48:	4408      	add	r0, r1
1a001c4a:	4284      	cmp	r4, r0
1a001c4c:	d009      	beq.n	1a001c62 <vTaskSwitchContext+0xa6>
1a001c4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c52:	009a      	lsls	r2, r3, #2
1a001c54:	4b0a      	ldr	r3, [pc, #40]	; (1a001c80 <vTaskSwitchContext+0xc4>)
1a001c56:	4413      	add	r3, r2
1a001c58:	685b      	ldr	r3, [r3, #4]
1a001c5a:	68da      	ldr	r2, [r3, #12]
1a001c5c:	4b06      	ldr	r3, [pc, #24]	; (1a001c78 <vTaskSwitchContext+0xbc>)
1a001c5e:	601a      	str	r2, [r3, #0]
}
1a001c60:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001c62:	6861      	ldr	r1, [r4, #4]
1a001c64:	4806      	ldr	r0, [pc, #24]	; (1a001c80 <vTaskSwitchContext+0xc4>)
1a001c66:	2214      	movs	r2, #20
1a001c68:	fb02 0203 	mla	r2, r2, r3, r0
1a001c6c:	6051      	str	r1, [r2, #4]
1a001c6e:	e7ee      	b.n	1a001c4e <vTaskSwitchContext+0x92>
1a001c70:	10002930 	.word	0x10002930
1a001c74:	100029b0 	.word	0x100029b0
1a001c78:	1000288c 	.word	0x1000288c
1a001c7c:	10002938 	.word	0x10002938
1a001c80:	10002898 	.word	0x10002898

1a001c84 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001c84:	b940      	cbnz	r0, 1a001c98 <vTaskPlaceOnEventList+0x14>
1a001c86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c8a:	f383 8811 	msr	BASEPRI, r3
1a001c8e:	f3bf 8f6f 	isb	sy
1a001c92:	f3bf 8f4f 	dsb	sy
1a001c96:	e7fe      	b.n	1a001c96 <vTaskPlaceOnEventList+0x12>
{
1a001c98:	b510      	push	{r4, lr}
1a001c9a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001c9c:	4b04      	ldr	r3, [pc, #16]	; (1a001cb0 <vTaskPlaceOnEventList+0x2c>)
1a001c9e:	6819      	ldr	r1, [r3, #0]
1a001ca0:	3118      	adds	r1, #24
1a001ca2:	f7ff fb74 	bl	1a00138e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001ca6:	2101      	movs	r1, #1
1a001ca8:	4620      	mov	r0, r4
1a001caa:	f7ff fcf9 	bl	1a0016a0 <prvAddCurrentTaskToDelayedList>
}
1a001cae:	bd10      	pop	{r4, pc}
1a001cb0:	1000288c 	.word	0x1000288c

1a001cb4 <vTaskPlaceOnEventListRestricted>:
	{
1a001cb4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001cb6:	b940      	cbnz	r0, 1a001cca <vTaskPlaceOnEventListRestricted+0x16>
1a001cb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cbc:	f383 8811 	msr	BASEPRI, r3
1a001cc0:	f3bf 8f6f 	isb	sy
1a001cc4:	f3bf 8f4f 	dsb	sy
1a001cc8:	e7fe      	b.n	1a001cc8 <vTaskPlaceOnEventListRestricted+0x14>
1a001cca:	460c      	mov	r4, r1
1a001ccc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001cce:	4a06      	ldr	r2, [pc, #24]	; (1a001ce8 <vTaskPlaceOnEventListRestricted+0x34>)
1a001cd0:	6811      	ldr	r1, [r2, #0]
1a001cd2:	3118      	adds	r1, #24
1a001cd4:	f7ff fb4f 	bl	1a001376 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001cd8:	b10d      	cbz	r5, 1a001cde <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001cda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001cde:	4629      	mov	r1, r5
1a001ce0:	4620      	mov	r0, r4
1a001ce2:	f7ff fcdd 	bl	1a0016a0 <prvAddCurrentTaskToDelayedList>
	}
1a001ce6:	bd38      	pop	{r3, r4, r5, pc}
1a001ce8:	1000288c 	.word	0x1000288c

1a001cec <xTaskRemoveFromEventList>:
{
1a001cec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001cee:	68c3      	ldr	r3, [r0, #12]
1a001cf0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001cf2:	b944      	cbnz	r4, 1a001d06 <xTaskRemoveFromEventList+0x1a>
1a001cf4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cf8:	f383 8811 	msr	BASEPRI, r3
1a001cfc:	f3bf 8f6f 	isb	sy
1a001d00:	f3bf 8f4f 	dsb	sy
1a001d04:	e7fe      	b.n	1a001d04 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001d06:	f104 0518 	add.w	r5, r4, #24
1a001d0a:	4628      	mov	r0, r5
1a001d0c:	f7ff fb59 	bl	1a0013c2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d10:	4b13      	ldr	r3, [pc, #76]	; (1a001d60 <xTaskRemoveFromEventList+0x74>)
1a001d12:	681b      	ldr	r3, [r3, #0]
1a001d14:	b9e3      	cbnz	r3, 1a001d50 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001d16:	1d25      	adds	r5, r4, #4
1a001d18:	4628      	mov	r0, r5
1a001d1a:	f7ff fb52 	bl	1a0013c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001d1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d20:	2201      	movs	r2, #1
1a001d22:	409a      	lsls	r2, r3
1a001d24:	490f      	ldr	r1, [pc, #60]	; (1a001d64 <xTaskRemoveFromEventList+0x78>)
1a001d26:	6808      	ldr	r0, [r1, #0]
1a001d28:	4302      	orrs	r2, r0
1a001d2a:	600a      	str	r2, [r1, #0]
1a001d2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d30:	009a      	lsls	r2, r3, #2
1a001d32:	4629      	mov	r1, r5
1a001d34:	480c      	ldr	r0, [pc, #48]	; (1a001d68 <xTaskRemoveFromEventList+0x7c>)
1a001d36:	4410      	add	r0, r2
1a001d38:	f7ff fb1d 	bl	1a001376 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001d3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d3e:	4b0b      	ldr	r3, [pc, #44]	; (1a001d6c <xTaskRemoveFromEventList+0x80>)
1a001d40:	681b      	ldr	r3, [r3, #0]
1a001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001d44:	429a      	cmp	r2, r3
1a001d46:	d908      	bls.n	1a001d5a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001d48:	2001      	movs	r0, #1
1a001d4a:	4b09      	ldr	r3, [pc, #36]	; (1a001d70 <xTaskRemoveFromEventList+0x84>)
1a001d4c:	6018      	str	r0, [r3, #0]
}
1a001d4e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001d50:	4629      	mov	r1, r5
1a001d52:	4808      	ldr	r0, [pc, #32]	; (1a001d74 <xTaskRemoveFromEventList+0x88>)
1a001d54:	f7ff fb0f 	bl	1a001376 <vListInsertEnd>
1a001d58:	e7f0      	b.n	1a001d3c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001d5a:	2000      	movs	r0, #0
	return xReturn;
1a001d5c:	e7f7      	b.n	1a001d4e <xTaskRemoveFromEventList+0x62>
1a001d5e:	bf00      	nop
1a001d60:	10002930 	.word	0x10002930
1a001d64:	10002938 	.word	0x10002938
1a001d68:	10002898 	.word	0x10002898
1a001d6c:	1000288c 	.word	0x1000288c
1a001d70:	100029b0 	.word	0x100029b0
1a001d74:	1000296c 	.word	0x1000296c

1a001d78 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001d78:	4b03      	ldr	r3, [pc, #12]	; (1a001d88 <vTaskInternalSetTimeOutState+0x10>)
1a001d7a:	681b      	ldr	r3, [r3, #0]
1a001d7c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001d7e:	4b03      	ldr	r3, [pc, #12]	; (1a001d8c <vTaskInternalSetTimeOutState+0x14>)
1a001d80:	681b      	ldr	r3, [r3, #0]
1a001d82:	6043      	str	r3, [r0, #4]
}
1a001d84:	4770      	bx	lr
1a001d86:	bf00      	nop
1a001d88:	10002968 	.word	0x10002968
1a001d8c:	100029ac 	.word	0x100029ac

1a001d90 <xTaskCheckForTimeOut>:
{
1a001d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001d92:	b150      	cbz	r0, 1a001daa <xTaskCheckForTimeOut+0x1a>
1a001d94:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001d96:	b989      	cbnz	r1, 1a001dbc <xTaskCheckForTimeOut+0x2c>
1a001d98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d9c:	f383 8811 	msr	BASEPRI, r3
1a001da0:	f3bf 8f6f 	isb	sy
1a001da4:	f3bf 8f4f 	dsb	sy
1a001da8:	e7fe      	b.n	1a001da8 <xTaskCheckForTimeOut+0x18>
1a001daa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dae:	f383 8811 	msr	BASEPRI, r3
1a001db2:	f3bf 8f6f 	isb	sy
1a001db6:	f3bf 8f4f 	dsb	sy
1a001dba:	e7fe      	b.n	1a001dba <xTaskCheckForTimeOut+0x2a>
1a001dbc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001dbe:	f000 fc29 	bl	1a002614 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001dc2:	4b11      	ldr	r3, [pc, #68]	; (1a001e08 <xTaskCheckForTimeOut+0x78>)
1a001dc4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001dc6:	6868      	ldr	r0, [r5, #4]
1a001dc8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001dca:	6823      	ldr	r3, [r4, #0]
1a001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001dd0:	d016      	beq.n	1a001e00 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001dd2:	682f      	ldr	r7, [r5, #0]
1a001dd4:	4e0d      	ldr	r6, [pc, #52]	; (1a001e0c <xTaskCheckForTimeOut+0x7c>)
1a001dd6:	6836      	ldr	r6, [r6, #0]
1a001dd8:	42b7      	cmp	r7, r6
1a001dda:	d001      	beq.n	1a001de0 <xTaskCheckForTimeOut+0x50>
1a001ddc:	4288      	cmp	r0, r1
1a001dde:	d911      	bls.n	1a001e04 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001de0:	4293      	cmp	r3, r2
1a001de2:	d803      	bhi.n	1a001dec <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001de4:	2300      	movs	r3, #0
1a001de6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001de8:	2401      	movs	r4, #1
1a001dea:	e005      	b.n	1a001df8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001dec:	1a9b      	subs	r3, r3, r2
1a001dee:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001df0:	4628      	mov	r0, r5
1a001df2:	f7ff ffc1 	bl	1a001d78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001df6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001df8:	f000 fc2e 	bl	1a002658 <vPortExitCritical>
}
1a001dfc:	4620      	mov	r0, r4
1a001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001e00:	2400      	movs	r4, #0
1a001e02:	e7f9      	b.n	1a001df8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001e04:	2401      	movs	r4, #1
1a001e06:	e7f7      	b.n	1a001df8 <xTaskCheckForTimeOut+0x68>
1a001e08:	100029ac 	.word	0x100029ac
1a001e0c:	10002968 	.word	0x10002968

1a001e10 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001e10:	4b01      	ldr	r3, [pc, #4]	; (1a001e18 <vTaskMissedYield+0x8>)
1a001e12:	2201      	movs	r2, #1
1a001e14:	601a      	str	r2, [r3, #0]
}
1a001e16:	4770      	bx	lr
1a001e18:	100029b0 	.word	0x100029b0

1a001e1c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001e1c:	4b05      	ldr	r3, [pc, #20]	; (1a001e34 <xTaskGetSchedulerState+0x18>)
1a001e1e:	681b      	ldr	r3, [r3, #0]
1a001e20:	b133      	cbz	r3, 1a001e30 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001e22:	4b05      	ldr	r3, [pc, #20]	; (1a001e38 <xTaskGetSchedulerState+0x1c>)
1a001e24:	681b      	ldr	r3, [r3, #0]
1a001e26:	b10b      	cbz	r3, 1a001e2c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001e28:	2000      	movs	r0, #0
	}
1a001e2a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001e2c:	2002      	movs	r0, #2
1a001e2e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001e30:	2001      	movs	r0, #1
1a001e32:	4770      	bx	lr
1a001e34:	10002980 	.word	0x10002980
1a001e38:	10002930 	.word	0x10002930

1a001e3c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001e3c:	2800      	cmp	r0, #0
1a001e3e:	d050      	beq.n	1a001ee2 <xTaskPriorityInherit+0xa6>
	{
1a001e40:	b538      	push	{r3, r4, r5, lr}
1a001e42:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001e44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001e46:	4928      	ldr	r1, [pc, #160]	; (1a001ee8 <xTaskPriorityInherit+0xac>)
1a001e48:	6809      	ldr	r1, [r1, #0]
1a001e4a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001e4c:	428a      	cmp	r2, r1
1a001e4e:	d23e      	bcs.n	1a001ece <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001e50:	6981      	ldr	r1, [r0, #24]
1a001e52:	2900      	cmp	r1, #0
1a001e54:	db05      	blt.n	1a001e62 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001e56:	4924      	ldr	r1, [pc, #144]	; (1a001ee8 <xTaskPriorityInherit+0xac>)
1a001e58:	6809      	ldr	r1, [r1, #0]
1a001e5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001e5c:	f1c1 0107 	rsb	r1, r1, #7
1a001e60:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001e62:	6960      	ldr	r0, [r4, #20]
1a001e64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001e68:	0091      	lsls	r1, r2, #2
1a001e6a:	4a20      	ldr	r2, [pc, #128]	; (1a001eec <xTaskPriorityInherit+0xb0>)
1a001e6c:	440a      	add	r2, r1
1a001e6e:	4290      	cmp	r0, r2
1a001e70:	d005      	beq.n	1a001e7e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001e72:	4a1d      	ldr	r2, [pc, #116]	; (1a001ee8 <xTaskPriorityInherit+0xac>)
1a001e74:	6812      	ldr	r2, [r2, #0]
1a001e76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001e78:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001e7a:	2001      	movs	r0, #1
	}
1a001e7c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001e7e:	1d25      	adds	r5, r4, #4
1a001e80:	4628      	mov	r0, r5
1a001e82:	f7ff fa9e 	bl	1a0013c2 <uxListRemove>
1a001e86:	b968      	cbnz	r0, 1a001ea4 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001e88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001e8e:	008a      	lsls	r2, r1, #2
1a001e90:	4916      	ldr	r1, [pc, #88]	; (1a001eec <xTaskPriorityInherit+0xb0>)
1a001e92:	588a      	ldr	r2, [r1, r2]
1a001e94:	b932      	cbnz	r2, 1a001ea4 <xTaskPriorityInherit+0x68>
1a001e96:	2201      	movs	r2, #1
1a001e98:	409a      	lsls	r2, r3
1a001e9a:	4915      	ldr	r1, [pc, #84]	; (1a001ef0 <xTaskPriorityInherit+0xb4>)
1a001e9c:	680b      	ldr	r3, [r1, #0]
1a001e9e:	ea23 0302 	bic.w	r3, r3, r2
1a001ea2:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001ea4:	4b10      	ldr	r3, [pc, #64]	; (1a001ee8 <xTaskPriorityInherit+0xac>)
1a001ea6:	681b      	ldr	r3, [r3, #0]
1a001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001eac:	2401      	movs	r4, #1
1a001eae:	fa04 f203 	lsl.w	r2, r4, r3
1a001eb2:	490f      	ldr	r1, [pc, #60]	; (1a001ef0 <xTaskPriorityInherit+0xb4>)
1a001eb4:	6808      	ldr	r0, [r1, #0]
1a001eb6:	4302      	orrs	r2, r0
1a001eb8:	600a      	str	r2, [r1, #0]
1a001eba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ebe:	009a      	lsls	r2, r3, #2
1a001ec0:	4629      	mov	r1, r5
1a001ec2:	480a      	ldr	r0, [pc, #40]	; (1a001eec <xTaskPriorityInherit+0xb0>)
1a001ec4:	4410      	add	r0, r2
1a001ec6:	f7ff fa56 	bl	1a001376 <vListInsertEnd>
				xReturn = pdTRUE;
1a001eca:	4620      	mov	r0, r4
1a001ecc:	e7d6      	b.n	1a001e7c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001ece:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001ed0:	4b05      	ldr	r3, [pc, #20]	; (1a001ee8 <xTaskPriorityInherit+0xac>)
1a001ed2:	681b      	ldr	r3, [r3, #0]
1a001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001ed6:	429a      	cmp	r2, r3
1a001ed8:	d201      	bcs.n	1a001ede <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a001eda:	2001      	movs	r0, #1
		return xReturn;
1a001edc:	e7ce      	b.n	1a001e7c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a001ede:	2000      	movs	r0, #0
1a001ee0:	e7cc      	b.n	1a001e7c <xTaskPriorityInherit+0x40>
1a001ee2:	2000      	movs	r0, #0
	}
1a001ee4:	4770      	bx	lr
1a001ee6:	bf00      	nop
1a001ee8:	1000288c 	.word	0x1000288c
1a001eec:	10002898 	.word	0x10002898
1a001ef0:	10002938 	.word	0x10002938

1a001ef4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001ef4:	2800      	cmp	r0, #0
1a001ef6:	d049      	beq.n	1a001f8c <xTaskPriorityDisinherit+0x98>
	{
1a001ef8:	b538      	push	{r3, r4, r5, lr}
1a001efa:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001efc:	4a26      	ldr	r2, [pc, #152]	; (1a001f98 <xTaskPriorityDisinherit+0xa4>)
1a001efe:	6812      	ldr	r2, [r2, #0]
1a001f00:	4282      	cmp	r2, r0
1a001f02:	d008      	beq.n	1a001f16 <xTaskPriorityDisinherit+0x22>
1a001f04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f08:	f383 8811 	msr	BASEPRI, r3
1a001f0c:	f3bf 8f6f 	isb	sy
1a001f10:	f3bf 8f4f 	dsb	sy
1a001f14:	e7fe      	b.n	1a001f14 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001f16:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001f18:	b942      	cbnz	r2, 1a001f2c <xTaskPriorityDisinherit+0x38>
1a001f1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f1e:	f383 8811 	msr	BASEPRI, r3
1a001f22:	f3bf 8f6f 	isb	sy
1a001f26:	f3bf 8f4f 	dsb	sy
1a001f2a:	e7fe      	b.n	1a001f2a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001f2c:	3a01      	subs	r2, #1
1a001f2e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001f30:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001f32:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001f34:	4288      	cmp	r0, r1
1a001f36:	d02b      	beq.n	1a001f90 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001f38:	bb62      	cbnz	r2, 1a001f94 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001f3a:	1d25      	adds	r5, r4, #4
1a001f3c:	4628      	mov	r0, r5
1a001f3e:	f7ff fa40 	bl	1a0013c2 <uxListRemove>
1a001f42:	b970      	cbnz	r0, 1a001f62 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001f44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f46:	2314      	movs	r3, #20
1a001f48:	fb03 f302 	mul.w	r3, r3, r2
1a001f4c:	4913      	ldr	r1, [pc, #76]	; (1a001f9c <xTaskPriorityDisinherit+0xa8>)
1a001f4e:	58cb      	ldr	r3, [r1, r3]
1a001f50:	b93b      	cbnz	r3, 1a001f62 <xTaskPriorityDisinherit+0x6e>
1a001f52:	2301      	movs	r3, #1
1a001f54:	fa03 f202 	lsl.w	r2, r3, r2
1a001f58:	4911      	ldr	r1, [pc, #68]	; (1a001fa0 <xTaskPriorityDisinherit+0xac>)
1a001f5a:	680b      	ldr	r3, [r1, #0]
1a001f5c:	ea23 0302 	bic.w	r3, r3, r2
1a001f60:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001f62:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001f64:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f66:	f1c3 0207 	rsb	r2, r3, #7
1a001f6a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001f6c:	2401      	movs	r4, #1
1a001f6e:	fa04 f203 	lsl.w	r2, r4, r3
1a001f72:	490b      	ldr	r1, [pc, #44]	; (1a001fa0 <xTaskPriorityDisinherit+0xac>)
1a001f74:	6808      	ldr	r0, [r1, #0]
1a001f76:	4302      	orrs	r2, r0
1a001f78:	600a      	str	r2, [r1, #0]
1a001f7a:	4629      	mov	r1, r5
1a001f7c:	4a07      	ldr	r2, [pc, #28]	; (1a001f9c <xTaskPriorityDisinherit+0xa8>)
1a001f7e:	2014      	movs	r0, #20
1a001f80:	fb00 2003 	mla	r0, r0, r3, r2
1a001f84:	f7ff f9f7 	bl	1a001376 <vListInsertEnd>
					xReturn = pdTRUE;
1a001f88:	4620      	mov	r0, r4
	}
1a001f8a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001f8c:	2000      	movs	r0, #0
	}
1a001f8e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001f90:	2000      	movs	r0, #0
1a001f92:	e7fa      	b.n	1a001f8a <xTaskPriorityDisinherit+0x96>
1a001f94:	2000      	movs	r0, #0
		return xReturn;
1a001f96:	e7f8      	b.n	1a001f8a <xTaskPriorityDisinherit+0x96>
1a001f98:	1000288c 	.word	0x1000288c
1a001f9c:	10002898 	.word	0x10002898
1a001fa0:	10002938 	.word	0x10002938

1a001fa4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001fa4:	2800      	cmp	r0, #0
1a001fa6:	d055      	beq.n	1a002054 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a001fa8:	b538      	push	{r3, r4, r5, lr}
1a001faa:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001fac:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001fae:	b940      	cbnz	r0, 1a001fc2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001fb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fb4:	f383 8811 	msr	BASEPRI, r3
1a001fb8:	f3bf 8f6f 	isb	sy
1a001fbc:	f3bf 8f4f 	dsb	sy
1a001fc0:	e7fe      	b.n	1a001fc0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a001fc4:	428a      	cmp	r2, r1
1a001fc6:	d200      	bcs.n	1a001fca <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001fc8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a001fcc:	4291      	cmp	r1, r2
1a001fce:	d001      	beq.n	1a001fd4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001fd0:	2801      	cmp	r0, #1
1a001fd2:	d000      	beq.n	1a001fd6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a001fd4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001fd6:	4820      	ldr	r0, [pc, #128]	; (1a002058 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001fd8:	6800      	ldr	r0, [r0, #0]
1a001fda:	4298      	cmp	r0, r3
1a001fdc:	d108      	bne.n	1a001ff0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001fde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fe2:	f383 8811 	msr	BASEPRI, r3
1a001fe6:	f3bf 8f6f 	isb	sy
1a001fea:	f3bf 8f4f 	dsb	sy
1a001fee:	e7fe      	b.n	1a001fee <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001ff2:	6998      	ldr	r0, [r3, #24]
1a001ff4:	2800      	cmp	r0, #0
1a001ff6:	db02      	blt.n	1a001ffe <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ff8:	f1c2 0207 	rsb	r2, r2, #7
1a001ffc:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001ffe:	695a      	ldr	r2, [r3, #20]
1a002000:	4816      	ldr	r0, [pc, #88]	; (1a00205c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002002:	2414      	movs	r4, #20
1a002004:	fb04 0101 	mla	r1, r4, r1, r0
1a002008:	428a      	cmp	r2, r1
1a00200a:	d1e3      	bne.n	1a001fd4 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a00200c:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00200e:	1d1d      	adds	r5, r3, #4
1a002010:	4628      	mov	r0, r5
1a002012:	f7ff f9d6 	bl	1a0013c2 <uxListRemove>
1a002016:	b970      	cbnz	r0, 1a002036 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002018:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00201a:	2314      	movs	r3, #20
1a00201c:	fb03 f302 	mul.w	r3, r3, r2
1a002020:	490e      	ldr	r1, [pc, #56]	; (1a00205c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002022:	58cb      	ldr	r3, [r1, r3]
1a002024:	b93b      	cbnz	r3, 1a002036 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a002026:	2301      	movs	r3, #1
1a002028:	fa03 f202 	lsl.w	r2, r3, r2
1a00202c:	490c      	ldr	r1, [pc, #48]	; (1a002060 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a00202e:	680b      	ldr	r3, [r1, #0]
1a002030:	ea23 0302 	bic.w	r3, r3, r2
1a002034:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a002036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002038:	2301      	movs	r3, #1
1a00203a:	4093      	lsls	r3, r2
1a00203c:	4908      	ldr	r1, [pc, #32]	; (1a002060 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a00203e:	6808      	ldr	r0, [r1, #0]
1a002040:	4303      	orrs	r3, r0
1a002042:	600b      	str	r3, [r1, #0]
1a002044:	4629      	mov	r1, r5
1a002046:	4b05      	ldr	r3, [pc, #20]	; (1a00205c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002048:	2014      	movs	r0, #20
1a00204a:	fb00 3002 	mla	r0, r0, r2, r3
1a00204e:	f7ff f992 	bl	1a001376 <vListInsertEnd>
	}
1a002052:	e7bf      	b.n	1a001fd4 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002054:	4770      	bx	lr
1a002056:	bf00      	nop
1a002058:	1000288c 	.word	0x1000288c
1a00205c:	10002898 	.word	0x10002898
1a002060:	10002938 	.word	0x10002938

1a002064 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002064:	4b05      	ldr	r3, [pc, #20]	; (1a00207c <pvTaskIncrementMutexHeldCount+0x18>)
1a002066:	681b      	ldr	r3, [r3, #0]
1a002068:	b123      	cbz	r3, 1a002074 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a00206a:	4b04      	ldr	r3, [pc, #16]	; (1a00207c <pvTaskIncrementMutexHeldCount+0x18>)
1a00206c:	681a      	ldr	r2, [r3, #0]
1a00206e:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002070:	3301      	adds	r3, #1
1a002072:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002074:	4b01      	ldr	r3, [pc, #4]	; (1a00207c <pvTaskIncrementMutexHeldCount+0x18>)
1a002076:	6818      	ldr	r0, [r3, #0]
	}
1a002078:	4770      	bx	lr
1a00207a:	bf00      	nop
1a00207c:	1000288c 	.word	0x1000288c

1a002080 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002080:	4b06      	ldr	r3, [pc, #24]	; (1a00209c <prvGetNextExpireTime+0x1c>)
1a002082:	681a      	ldr	r2, [r3, #0]
1a002084:	6813      	ldr	r3, [r2, #0]
1a002086:	fab3 f383 	clz	r3, r3
1a00208a:	095b      	lsrs	r3, r3, #5
1a00208c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00208e:	b913      	cbnz	r3, 1a002096 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002090:	68d3      	ldr	r3, [r2, #12]
1a002092:	6818      	ldr	r0, [r3, #0]
1a002094:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002096:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002098:	4770      	bx	lr
1a00209a:	bf00      	nop
1a00209c:	100029b4 	.word	0x100029b4

1a0020a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0020a0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0020a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0020a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0020a6:	4291      	cmp	r1, r2
1a0020a8:	d80c      	bhi.n	1a0020c4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0020aa:	1ad2      	subs	r2, r2, r3
1a0020ac:	6983      	ldr	r3, [r0, #24]
1a0020ae:	429a      	cmp	r2, r3
1a0020b0:	d301      	bcc.n	1a0020b6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0020b2:	2001      	movs	r0, #1
1a0020b4:	e010      	b.n	1a0020d8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a0020b6:	1d01      	adds	r1, r0, #4
1a0020b8:	4b09      	ldr	r3, [pc, #36]	; (1a0020e0 <prvInsertTimerInActiveList+0x40>)
1a0020ba:	6818      	ldr	r0, [r3, #0]
1a0020bc:	f7ff f967 	bl	1a00138e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0020c0:	2000      	movs	r0, #0
1a0020c2:	e009      	b.n	1a0020d8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0020c4:	429a      	cmp	r2, r3
1a0020c6:	d201      	bcs.n	1a0020cc <prvInsertTimerInActiveList+0x2c>
1a0020c8:	4299      	cmp	r1, r3
1a0020ca:	d206      	bcs.n	1a0020da <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0020cc:	1d01      	adds	r1, r0, #4
1a0020ce:	4b05      	ldr	r3, [pc, #20]	; (1a0020e4 <prvInsertTimerInActiveList+0x44>)
1a0020d0:	6818      	ldr	r0, [r3, #0]
1a0020d2:	f7ff f95c 	bl	1a00138e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0020d6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a0020d8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a0020da:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0020dc:	e7fc      	b.n	1a0020d8 <prvInsertTimerInActiveList+0x38>
1a0020de:	bf00      	nop
1a0020e0:	100029b8 	.word	0x100029b8
1a0020e4:	100029b4 	.word	0x100029b4

1a0020e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0020e8:	b530      	push	{r4, r5, lr}
1a0020ea:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0020ec:	f000 fa92 	bl	1a002614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0020f0:	4b11      	ldr	r3, [pc, #68]	; (1a002138 <prvCheckForValidListAndQueue+0x50>)
1a0020f2:	681b      	ldr	r3, [r3, #0]
1a0020f4:	b11b      	cbz	r3, 1a0020fe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0020f6:	f000 faaf 	bl	1a002658 <vPortExitCritical>
}
1a0020fa:	b003      	add	sp, #12
1a0020fc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0020fe:	4d0f      	ldr	r5, [pc, #60]	; (1a00213c <prvCheckForValidListAndQueue+0x54>)
1a002100:	4628      	mov	r0, r5
1a002102:	f7ff f92a 	bl	1a00135a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002106:	4c0e      	ldr	r4, [pc, #56]	; (1a002140 <prvCheckForValidListAndQueue+0x58>)
1a002108:	4620      	mov	r0, r4
1a00210a:	f7ff f926 	bl	1a00135a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00210e:	4b0d      	ldr	r3, [pc, #52]	; (1a002144 <prvCheckForValidListAndQueue+0x5c>)
1a002110:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002112:	4b0d      	ldr	r3, [pc, #52]	; (1a002148 <prvCheckForValidListAndQueue+0x60>)
1a002114:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002116:	2300      	movs	r3, #0
1a002118:	9300      	str	r3, [sp, #0]
1a00211a:	4b0c      	ldr	r3, [pc, #48]	; (1a00214c <prvCheckForValidListAndQueue+0x64>)
1a00211c:	4a0c      	ldr	r2, [pc, #48]	; (1a002150 <prvCheckForValidListAndQueue+0x68>)
1a00211e:	2110      	movs	r1, #16
1a002120:	200a      	movs	r0, #10
1a002122:	f7fe fd76 	bl	1a000c12 <xQueueGenericCreateStatic>
1a002126:	4b04      	ldr	r3, [pc, #16]	; (1a002138 <prvCheckForValidListAndQueue+0x50>)
1a002128:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a00212a:	2800      	cmp	r0, #0
1a00212c:	d0e3      	beq.n	1a0020f6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00212e:	4909      	ldr	r1, [pc, #36]	; (1a002154 <prvCheckForValidListAndQueue+0x6c>)
1a002130:	f7ff f8d6 	bl	1a0012e0 <vQueueAddToRegistry>
1a002134:	e7df      	b.n	1a0020f6 <prvCheckForValidListAndQueue+0xe>
1a002136:	bf00      	nop
1a002138:	10002ad8 	.word	0x10002ad8
1a00213c:	10002a5c 	.word	0x10002a5c
1a002140:	10002a70 	.word	0x10002a70
1a002144:	100029b4 	.word	0x100029b4
1a002148:	100029b8 	.word	0x100029b8
1a00214c:	10002a88 	.word	0x10002a88
1a002150:	100029bc 	.word	0x100029bc
1a002154:	1a00404c 	.word	0x1a00404c

1a002158 <prvInitialiseNewTimer>:
{
1a002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00215c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a00215e:	b941      	cbnz	r1, 1a002172 <prvInitialiseNewTimer+0x1a>
1a002160:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002164:	f383 8811 	msr	BASEPRI, r3
1a002168:	f3bf 8f6f 	isb	sy
1a00216c:	f3bf 8f4f 	dsb	sy
1a002170:	e7fe      	b.n	1a002170 <prvInitialiseNewTimer+0x18>
1a002172:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a002174:	b174      	cbz	r4, 1a002194 <prvInitialiseNewTimer+0x3c>
1a002176:	461d      	mov	r5, r3
1a002178:	4616      	mov	r6, r2
1a00217a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a00217c:	f7ff ffb4 	bl	1a0020e8 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a002180:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002184:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a002186:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002188:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a00218a:	9b06      	ldr	r3, [sp, #24]
1a00218c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a00218e:	1d20      	adds	r0, r4, #4
1a002190:	f7ff f8ee 	bl	1a001370 <vListInitialiseItem>
}
1a002194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002198 <xTimerCreateTimerTask>:
{
1a002198:	b510      	push	{r4, lr}
1a00219a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a00219c:	f7ff ffa4 	bl	1a0020e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0021a0:	4b12      	ldr	r3, [pc, #72]	; (1a0021ec <xTimerCreateTimerTask+0x54>)
1a0021a2:	681b      	ldr	r3, [r3, #0]
1a0021a4:	b1cb      	cbz	r3, 1a0021da <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0021a6:	2400      	movs	r4, #0
1a0021a8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0021aa:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0021ac:	aa07      	add	r2, sp, #28
1a0021ae:	a906      	add	r1, sp, #24
1a0021b0:	a805      	add	r0, sp, #20
1a0021b2:	f7ff f927 	bl	1a001404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a0021b6:	9b05      	ldr	r3, [sp, #20]
1a0021b8:	9302      	str	r3, [sp, #8]
1a0021ba:	9b06      	ldr	r3, [sp, #24]
1a0021bc:	9301      	str	r3, [sp, #4]
1a0021be:	2304      	movs	r3, #4
1a0021c0:	9300      	str	r3, [sp, #0]
1a0021c2:	4623      	mov	r3, r4
1a0021c4:	9a07      	ldr	r2, [sp, #28]
1a0021c6:	490a      	ldr	r1, [pc, #40]	; (1a0021f0 <xTimerCreateTimerTask+0x58>)
1a0021c8:	480a      	ldr	r0, [pc, #40]	; (1a0021f4 <xTimerCreateTimerTask+0x5c>)
1a0021ca:	f7ff fab5 	bl	1a001738 <xTaskCreateStatic>
1a0021ce:	4b0a      	ldr	r3, [pc, #40]	; (1a0021f8 <xTimerCreateTimerTask+0x60>)
1a0021d0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a0021d2:	b110      	cbz	r0, 1a0021da <xTimerCreateTimerTask+0x42>
}
1a0021d4:	2001      	movs	r0, #1
1a0021d6:	b008      	add	sp, #32
1a0021d8:	bd10      	pop	{r4, pc}
1a0021da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021de:	f383 8811 	msr	BASEPRI, r3
1a0021e2:	f3bf 8f6f 	isb	sy
1a0021e6:	f3bf 8f4f 	dsb	sy
1a0021ea:	e7fe      	b.n	1a0021ea <xTimerCreateTimerTask+0x52>
1a0021ec:	10002ad8 	.word	0x10002ad8
1a0021f0:	1a004054 	.word	0x1a004054
1a0021f4:	1a002529 	.word	0x1a002529
1a0021f8:	10002adc 	.word	0x10002adc

1a0021fc <xTimerCreateStatic>:
	{
1a0021fc:	b530      	push	{r4, r5, lr}
1a0021fe:	b085      	sub	sp, #20
1a002200:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002202:	2530      	movs	r5, #48	; 0x30
1a002204:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002206:	9d03      	ldr	r5, [sp, #12]
1a002208:	2d30      	cmp	r5, #48	; 0x30
1a00220a:	d008      	beq.n	1a00221e <xTimerCreateStatic+0x22>
1a00220c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002210:	f383 8811 	msr	BASEPRI, r3
1a002214:	f3bf 8f6f 	isb	sy
1a002218:	f3bf 8f4f 	dsb	sy
1a00221c:	e7fe      	b.n	1a00221c <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a00221e:	b944      	cbnz	r4, 1a002232 <xTimerCreateStatic+0x36>
1a002220:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002224:	f383 8811 	msr	BASEPRI, r3
1a002228:	f3bf 8f6f 	isb	sy
1a00222c:	f3bf 8f4f 	dsb	sy
1a002230:	e7fe      	b.n	1a002230 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002232:	9401      	str	r4, [sp, #4]
1a002234:	9d08      	ldr	r5, [sp, #32]
1a002236:	9500      	str	r5, [sp, #0]
1a002238:	f7ff ff8e 	bl	1a002158 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a00223c:	2301      	movs	r3, #1
1a00223e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002242:	4620      	mov	r0, r4
1a002244:	b005      	add	sp, #20
1a002246:	bd30      	pop	{r4, r5, pc}

1a002248 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002248:	b1c8      	cbz	r0, 1a00227e <xTimerGenericCommand+0x36>
{
1a00224a:	b530      	push	{r4, r5, lr}
1a00224c:	b085      	sub	sp, #20
1a00224e:	4615      	mov	r5, r2
1a002250:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002252:	4a17      	ldr	r2, [pc, #92]	; (1a0022b0 <xTimerGenericCommand+0x68>)
1a002254:	6810      	ldr	r0, [r2, #0]
1a002256:	b340      	cbz	r0, 1a0022aa <xTimerGenericCommand+0x62>
1a002258:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00225a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a00225c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00225e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002260:	2905      	cmp	r1, #5
1a002262:	dc1d      	bgt.n	1a0022a0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002264:	f7ff fdda 	bl	1a001e1c <xTaskGetSchedulerState>
1a002268:	2802      	cmp	r0, #2
1a00226a:	d011      	beq.n	1a002290 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a00226c:	2300      	movs	r3, #0
1a00226e:	461a      	mov	r2, r3
1a002270:	4669      	mov	r1, sp
1a002272:	480f      	ldr	r0, [pc, #60]	; (1a0022b0 <xTimerGenericCommand+0x68>)
1a002274:	6800      	ldr	r0, [r0, #0]
1a002276:	f7fe fd3b 	bl	1a000cf0 <xQueueGenericSend>
}
1a00227a:	b005      	add	sp, #20
1a00227c:	bd30      	pop	{r4, r5, pc}
1a00227e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002282:	f383 8811 	msr	BASEPRI, r3
1a002286:	f3bf 8f6f 	isb	sy
1a00228a:	f3bf 8f4f 	dsb	sy
1a00228e:	e7fe      	b.n	1a00228e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002290:	2300      	movs	r3, #0
1a002292:	9a08      	ldr	r2, [sp, #32]
1a002294:	4669      	mov	r1, sp
1a002296:	4806      	ldr	r0, [pc, #24]	; (1a0022b0 <xTimerGenericCommand+0x68>)
1a002298:	6800      	ldr	r0, [r0, #0]
1a00229a:	f7fe fd29 	bl	1a000cf0 <xQueueGenericSend>
1a00229e:	e7ec      	b.n	1a00227a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0022a0:	2300      	movs	r3, #0
1a0022a2:	4669      	mov	r1, sp
1a0022a4:	f7fe fde2 	bl	1a000e6c <xQueueGenericSendFromISR>
1a0022a8:	e7e7      	b.n	1a00227a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0022aa:	2000      	movs	r0, #0
	return xReturn;
1a0022ac:	e7e5      	b.n	1a00227a <xTimerGenericCommand+0x32>
1a0022ae:	bf00      	nop
1a0022b0:	10002ad8 	.word	0x10002ad8

1a0022b4 <prvSwitchTimerLists>:
{
1a0022b4:	b570      	push	{r4, r5, r6, lr}
1a0022b6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0022b8:	4b1a      	ldr	r3, [pc, #104]	; (1a002324 <prvSwitchTimerLists+0x70>)
1a0022ba:	681b      	ldr	r3, [r3, #0]
1a0022bc:	681a      	ldr	r2, [r3, #0]
1a0022be:	b352      	cbz	r2, 1a002316 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0022c0:	68db      	ldr	r3, [r3, #12]
1a0022c2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0022c4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0022c6:	1d25      	adds	r5, r4, #4
1a0022c8:	4628      	mov	r0, r5
1a0022ca:	f7ff f87a 	bl	1a0013c2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0022ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0022d0:	4620      	mov	r0, r4
1a0022d2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0022d4:	69e3      	ldr	r3, [r4, #28]
1a0022d6:	2b01      	cmp	r3, #1
1a0022d8:	d1ee      	bne.n	1a0022b8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0022da:	69a3      	ldr	r3, [r4, #24]
1a0022dc:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0022de:	429e      	cmp	r6, r3
1a0022e0:	d207      	bcs.n	1a0022f2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0022e2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0022e4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0022e6:	4629      	mov	r1, r5
1a0022e8:	4b0e      	ldr	r3, [pc, #56]	; (1a002324 <prvSwitchTimerLists+0x70>)
1a0022ea:	6818      	ldr	r0, [r3, #0]
1a0022ec:	f7ff f84f 	bl	1a00138e <vListInsert>
1a0022f0:	e7e2      	b.n	1a0022b8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0022f2:	2100      	movs	r1, #0
1a0022f4:	9100      	str	r1, [sp, #0]
1a0022f6:	460b      	mov	r3, r1
1a0022f8:	4632      	mov	r2, r6
1a0022fa:	4620      	mov	r0, r4
1a0022fc:	f7ff ffa4 	bl	1a002248 <xTimerGenericCommand>
				configASSERT( xResult );
1a002300:	2800      	cmp	r0, #0
1a002302:	d1d9      	bne.n	1a0022b8 <prvSwitchTimerLists+0x4>
1a002304:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002308:	f383 8811 	msr	BASEPRI, r3
1a00230c:	f3bf 8f6f 	isb	sy
1a002310:	f3bf 8f4f 	dsb	sy
1a002314:	e7fe      	b.n	1a002314 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002316:	4a04      	ldr	r2, [pc, #16]	; (1a002328 <prvSwitchTimerLists+0x74>)
1a002318:	6810      	ldr	r0, [r2, #0]
1a00231a:	4902      	ldr	r1, [pc, #8]	; (1a002324 <prvSwitchTimerLists+0x70>)
1a00231c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00231e:	6013      	str	r3, [r2, #0]
}
1a002320:	b002      	add	sp, #8
1a002322:	bd70      	pop	{r4, r5, r6, pc}
1a002324:	100029b4 	.word	0x100029b4
1a002328:	100029b8 	.word	0x100029b8

1a00232c <prvSampleTimeNow>:
{
1a00232c:	b538      	push	{r3, r4, r5, lr}
1a00232e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002330:	f7ff fac0 	bl	1a0018b4 <xTaskGetTickCount>
1a002334:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002336:	4b07      	ldr	r3, [pc, #28]	; (1a002354 <prvSampleTimeNow+0x28>)
1a002338:	681b      	ldr	r3, [r3, #0]
1a00233a:	4283      	cmp	r3, r0
1a00233c:	d805      	bhi.n	1a00234a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00233e:	2300      	movs	r3, #0
1a002340:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002342:	4b04      	ldr	r3, [pc, #16]	; (1a002354 <prvSampleTimeNow+0x28>)
1a002344:	601c      	str	r4, [r3, #0]
}
1a002346:	4620      	mov	r0, r4
1a002348:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00234a:	f7ff ffb3 	bl	1a0022b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00234e:	2301      	movs	r3, #1
1a002350:	602b      	str	r3, [r5, #0]
1a002352:	e7f6      	b.n	1a002342 <prvSampleTimeNow+0x16>
1a002354:	10002a84 	.word	0x10002a84

1a002358 <prvProcessExpiredTimer>:
{
1a002358:	b570      	push	{r4, r5, r6, lr}
1a00235a:	b082      	sub	sp, #8
1a00235c:	4605      	mov	r5, r0
1a00235e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002360:	4b14      	ldr	r3, [pc, #80]	; (1a0023b4 <prvProcessExpiredTimer+0x5c>)
1a002362:	681b      	ldr	r3, [r3, #0]
1a002364:	68db      	ldr	r3, [r3, #12]
1a002366:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002368:	1d20      	adds	r0, r4, #4
1a00236a:	f7ff f82a 	bl	1a0013c2 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00236e:	69e3      	ldr	r3, [r4, #28]
1a002370:	2b01      	cmp	r3, #1
1a002372:	d004      	beq.n	1a00237e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002374:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002376:	4620      	mov	r0, r4
1a002378:	4798      	blx	r3
}
1a00237a:	b002      	add	sp, #8
1a00237c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00237e:	69a1      	ldr	r1, [r4, #24]
1a002380:	462b      	mov	r3, r5
1a002382:	4632      	mov	r2, r6
1a002384:	4429      	add	r1, r5
1a002386:	4620      	mov	r0, r4
1a002388:	f7ff fe8a 	bl	1a0020a0 <prvInsertTimerInActiveList>
1a00238c:	2800      	cmp	r0, #0
1a00238e:	d0f1      	beq.n	1a002374 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002390:	2100      	movs	r1, #0
1a002392:	9100      	str	r1, [sp, #0]
1a002394:	460b      	mov	r3, r1
1a002396:	462a      	mov	r2, r5
1a002398:	4620      	mov	r0, r4
1a00239a:	f7ff ff55 	bl	1a002248 <xTimerGenericCommand>
			configASSERT( xResult );
1a00239e:	2800      	cmp	r0, #0
1a0023a0:	d1e8      	bne.n	1a002374 <prvProcessExpiredTimer+0x1c>
1a0023a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023a6:	f383 8811 	msr	BASEPRI, r3
1a0023aa:	f3bf 8f6f 	isb	sy
1a0023ae:	f3bf 8f4f 	dsb	sy
1a0023b2:	e7fe      	b.n	1a0023b2 <prvProcessExpiredTimer+0x5a>
1a0023b4:	100029b4 	.word	0x100029b4

1a0023b8 <prvProcessTimerOrBlockTask>:
{
1a0023b8:	b570      	push	{r4, r5, r6, lr}
1a0023ba:	b082      	sub	sp, #8
1a0023bc:	4606      	mov	r6, r0
1a0023be:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0023c0:	f7ff fa70 	bl	1a0018a4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0023c4:	a801      	add	r0, sp, #4
1a0023c6:	f7ff ffb1 	bl	1a00232c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0023ca:	9b01      	ldr	r3, [sp, #4]
1a0023cc:	bb1b      	cbnz	r3, 1a002416 <prvProcessTimerOrBlockTask+0x5e>
1a0023ce:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0023d0:	b90c      	cbnz	r4, 1a0023d6 <prvProcessTimerOrBlockTask+0x1e>
1a0023d2:	42b0      	cmp	r0, r6
1a0023d4:	d218      	bcs.n	1a002408 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a0023d6:	b12c      	cbz	r4, 1a0023e4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a0023d8:	4b11      	ldr	r3, [pc, #68]	; (1a002420 <prvProcessTimerOrBlockTask+0x68>)
1a0023da:	681b      	ldr	r3, [r3, #0]
1a0023dc:	681c      	ldr	r4, [r3, #0]
1a0023de:	fab4 f484 	clz	r4, r4
1a0023e2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a0023e4:	4622      	mov	r2, r4
1a0023e6:	1b71      	subs	r1, r6, r5
1a0023e8:	4b0e      	ldr	r3, [pc, #56]	; (1a002424 <prvProcessTimerOrBlockTask+0x6c>)
1a0023ea:	6818      	ldr	r0, [r3, #0]
1a0023ec:	f7fe ff8c 	bl	1a001308 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a0023f0:	f7ff faf2 	bl	1a0019d8 <xTaskResumeAll>
1a0023f4:	b988      	cbnz	r0, 1a00241a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a0023f6:	4b0c      	ldr	r3, [pc, #48]	; (1a002428 <prvProcessTimerOrBlockTask+0x70>)
1a0023f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0023fc:	601a      	str	r2, [r3, #0]
1a0023fe:	f3bf 8f4f 	dsb	sy
1a002402:	f3bf 8f6f 	isb	sy
1a002406:	e008      	b.n	1a00241a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002408:	f7ff fae6 	bl	1a0019d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a00240c:	4629      	mov	r1, r5
1a00240e:	4630      	mov	r0, r6
1a002410:	f7ff ffa2 	bl	1a002358 <prvProcessExpiredTimer>
1a002414:	e001      	b.n	1a00241a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002416:	f7ff fadf 	bl	1a0019d8 <xTaskResumeAll>
}
1a00241a:	b002      	add	sp, #8
1a00241c:	bd70      	pop	{r4, r5, r6, pc}
1a00241e:	bf00      	nop
1a002420:	100029b8 	.word	0x100029b8
1a002424:	10002ad8 	.word	0x10002ad8
1a002428:	e000ed04 	.word	0xe000ed04

1a00242c <prvProcessReceivedCommands>:
{
1a00242c:	b530      	push	{r4, r5, lr}
1a00242e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002430:	e002      	b.n	1a002438 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002432:	9b04      	ldr	r3, [sp, #16]
1a002434:	2b00      	cmp	r3, #0
1a002436:	da0f      	bge.n	1a002458 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002438:	2200      	movs	r2, #0
1a00243a:	a904      	add	r1, sp, #16
1a00243c:	4b39      	ldr	r3, [pc, #228]	; (1a002524 <prvProcessReceivedCommands+0xf8>)
1a00243e:	6818      	ldr	r0, [r3, #0]
1a002440:	f7fe fdd4 	bl	1a000fec <xQueueReceive>
1a002444:	2800      	cmp	r0, #0
1a002446:	d06a      	beq.n	1a00251e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002448:	9b04      	ldr	r3, [sp, #16]
1a00244a:	2b00      	cmp	r3, #0
1a00244c:	daf1      	bge.n	1a002432 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00244e:	9907      	ldr	r1, [sp, #28]
1a002450:	9806      	ldr	r0, [sp, #24]
1a002452:	9b05      	ldr	r3, [sp, #20]
1a002454:	4798      	blx	r3
1a002456:	e7ec      	b.n	1a002432 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002458:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00245a:	6963      	ldr	r3, [r4, #20]
1a00245c:	b113      	cbz	r3, 1a002464 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00245e:	1d20      	adds	r0, r4, #4
1a002460:	f7fe ffaf 	bl	1a0013c2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002464:	a803      	add	r0, sp, #12
1a002466:	f7ff ff61 	bl	1a00232c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a00246a:	9b04      	ldr	r3, [sp, #16]
1a00246c:	2b09      	cmp	r3, #9
1a00246e:	d8e3      	bhi.n	1a002438 <prvProcessReceivedCommands+0xc>
1a002470:	a201      	add	r2, pc, #4	; (adr r2, 1a002478 <prvProcessReceivedCommands+0x4c>)
1a002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002476:	bf00      	nop
1a002478:	1a0024a1 	.word	0x1a0024a1
1a00247c:	1a0024a1 	.word	0x1a0024a1
1a002480:	1a0024a1 	.word	0x1a0024a1
1a002484:	1a002439 	.word	0x1a002439
1a002488:	1a0024e9 	.word	0x1a0024e9
1a00248c:	1a00250f 	.word	0x1a00250f
1a002490:	1a0024a1 	.word	0x1a0024a1
1a002494:	1a0024a1 	.word	0x1a0024a1
1a002498:	1a002439 	.word	0x1a002439
1a00249c:	1a0024e9 	.word	0x1a0024e9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0024a0:	9905      	ldr	r1, [sp, #20]
1a0024a2:	69a5      	ldr	r5, [r4, #24]
1a0024a4:	460b      	mov	r3, r1
1a0024a6:	4602      	mov	r2, r0
1a0024a8:	4429      	add	r1, r5
1a0024aa:	4620      	mov	r0, r4
1a0024ac:	f7ff fdf8 	bl	1a0020a0 <prvInsertTimerInActiveList>
1a0024b0:	2800      	cmp	r0, #0
1a0024b2:	d0c1      	beq.n	1a002438 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0024b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0024b6:	4620      	mov	r0, r4
1a0024b8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0024ba:	69e3      	ldr	r3, [r4, #28]
1a0024bc:	2b01      	cmp	r3, #1
1a0024be:	d1bb      	bne.n	1a002438 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0024c0:	69a2      	ldr	r2, [r4, #24]
1a0024c2:	2100      	movs	r1, #0
1a0024c4:	9100      	str	r1, [sp, #0]
1a0024c6:	460b      	mov	r3, r1
1a0024c8:	9805      	ldr	r0, [sp, #20]
1a0024ca:	4402      	add	r2, r0
1a0024cc:	4620      	mov	r0, r4
1a0024ce:	f7ff febb 	bl	1a002248 <xTimerGenericCommand>
							configASSERT( xResult );
1a0024d2:	2800      	cmp	r0, #0
1a0024d4:	d1b0      	bne.n	1a002438 <prvProcessReceivedCommands+0xc>
1a0024d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024da:	f383 8811 	msr	BASEPRI, r3
1a0024de:	f3bf 8f6f 	isb	sy
1a0024e2:	f3bf 8f4f 	dsb	sy
1a0024e6:	e7fe      	b.n	1a0024e6 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a0024e8:	9905      	ldr	r1, [sp, #20]
1a0024ea:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a0024ec:	b131      	cbz	r1, 1a0024fc <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a0024ee:	4603      	mov	r3, r0
1a0024f0:	4602      	mov	r2, r0
1a0024f2:	4401      	add	r1, r0
1a0024f4:	4620      	mov	r0, r4
1a0024f6:	f7ff fdd3 	bl	1a0020a0 <prvInsertTimerInActiveList>
					break;
1a0024fa:	e79d      	b.n	1a002438 <prvProcessReceivedCommands+0xc>
1a0024fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002500:	f383 8811 	msr	BASEPRI, r3
1a002504:	f3bf 8f6f 	isb	sy
1a002508:	f3bf 8f4f 	dsb	sy
1a00250c:	e7fe      	b.n	1a00250c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00250e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002512:	2b00      	cmp	r3, #0
1a002514:	d190      	bne.n	1a002438 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002516:	4620      	mov	r0, r4
1a002518:	f7fe fa74 	bl	1a000a04 <vPortFree>
1a00251c:	e78c      	b.n	1a002438 <prvProcessReceivedCommands+0xc>
}
1a00251e:	b009      	add	sp, #36	; 0x24
1a002520:	bd30      	pop	{r4, r5, pc}
1a002522:	bf00      	nop
1a002524:	10002ad8 	.word	0x10002ad8

1a002528 <prvTimerTask>:
{
1a002528:	b500      	push	{lr}
1a00252a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a00252c:	a801      	add	r0, sp, #4
1a00252e:	f7ff fda7 	bl	1a002080 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002532:	9901      	ldr	r1, [sp, #4]
1a002534:	f7ff ff40 	bl	1a0023b8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002538:	f7ff ff78 	bl	1a00242c <prvProcessReceivedCommands>
1a00253c:	e7f6      	b.n	1a00252c <prvTimerTask+0x4>
1a00253e:	Address 0x000000001a00253e is out of bounds.


1a002540 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002540:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002542:	2300      	movs	r3, #0
1a002544:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002546:	4b0d      	ldr	r3, [pc, #52]	; (1a00257c <prvTaskExitError+0x3c>)
1a002548:	681b      	ldr	r3, [r3, #0]
1a00254a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00254e:	d008      	beq.n	1a002562 <prvTaskExitError+0x22>
1a002550:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002554:	f383 8811 	msr	BASEPRI, r3
1a002558:	f3bf 8f6f 	isb	sy
1a00255c:	f3bf 8f4f 	dsb	sy
1a002560:	e7fe      	b.n	1a002560 <prvTaskExitError+0x20>
1a002562:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002566:	f383 8811 	msr	BASEPRI, r3
1a00256a:	f3bf 8f6f 	isb	sy
1a00256e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002572:	9b01      	ldr	r3, [sp, #4]
1a002574:	2b00      	cmp	r3, #0
1a002576:	d0fc      	beq.n	1a002572 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002578:	b002      	add	sp, #8
1a00257a:	4770      	bx	lr
1a00257c:	10000000 	.word	0x10000000

1a002580 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002580:	4808      	ldr	r0, [pc, #32]	; (1a0025a4 <prvPortStartFirstTask+0x24>)
1a002582:	6800      	ldr	r0, [r0, #0]
1a002584:	6800      	ldr	r0, [r0, #0]
1a002586:	f380 8808 	msr	MSP, r0
1a00258a:	f04f 0000 	mov.w	r0, #0
1a00258e:	f380 8814 	msr	CONTROL, r0
1a002592:	b662      	cpsie	i
1a002594:	b661      	cpsie	f
1a002596:	f3bf 8f4f 	dsb	sy
1a00259a:	f3bf 8f6f 	isb	sy
1a00259e:	df00      	svc	0
1a0025a0:	bf00      	nop
1a0025a2:	0000      	.short	0x0000
1a0025a4:	e000ed08 	.word	0xe000ed08

1a0025a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0025a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0025b8 <vPortEnableVFP+0x10>
1a0025ac:	6801      	ldr	r1, [r0, #0]
1a0025ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0025b2:	6001      	str	r1, [r0, #0]
1a0025b4:	4770      	bx	lr
1a0025b6:	0000      	.short	0x0000
1a0025b8:	e000ed88 	.word	0xe000ed88

1a0025bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0025bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0025c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0025c4:	f021 0101 	bic.w	r1, r1, #1
1a0025c8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0025cc:	4b05      	ldr	r3, [pc, #20]	; (1a0025e4 <pxPortInitialiseStack+0x28>)
1a0025ce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0025d2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0025d6:	f06f 0302 	mvn.w	r3, #2
1a0025da:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a0025de:	3844      	subs	r0, #68	; 0x44
1a0025e0:	4770      	bx	lr
1a0025e2:	bf00      	nop
1a0025e4:	1a002541 	.word	0x1a002541
1a0025e8:	ffffffff 	.word	0xffffffff
1a0025ec:	ffffffff 	.word	0xffffffff

1a0025f0 <SVC_Handler>:
	__asm volatile (
1a0025f0:	4b07      	ldr	r3, [pc, #28]	; (1a002610 <pxCurrentTCBConst2>)
1a0025f2:	6819      	ldr	r1, [r3, #0]
1a0025f4:	6808      	ldr	r0, [r1, #0]
1a0025f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0025fa:	f380 8809 	msr	PSP, r0
1a0025fe:	f3bf 8f6f 	isb	sy
1a002602:	f04f 0000 	mov.w	r0, #0
1a002606:	f380 8811 	msr	BASEPRI, r0
1a00260a:	4770      	bx	lr
1a00260c:	f3af 8000 	nop.w

1a002610 <pxCurrentTCBConst2>:
1a002610:	1000288c 	.word	0x1000288c

1a002614 <vPortEnterCritical>:
1a002614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002618:	f383 8811 	msr	BASEPRI, r3
1a00261c:	f3bf 8f6f 	isb	sy
1a002620:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002624:	4a0a      	ldr	r2, [pc, #40]	; (1a002650 <vPortEnterCritical+0x3c>)
1a002626:	6813      	ldr	r3, [r2, #0]
1a002628:	3301      	adds	r3, #1
1a00262a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00262c:	2b01      	cmp	r3, #1
1a00262e:	d000      	beq.n	1a002632 <vPortEnterCritical+0x1e>
}
1a002630:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002632:	4b08      	ldr	r3, [pc, #32]	; (1a002654 <vPortEnterCritical+0x40>)
1a002634:	681b      	ldr	r3, [r3, #0]
1a002636:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00263a:	d0f9      	beq.n	1a002630 <vPortEnterCritical+0x1c>
1a00263c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002640:	f383 8811 	msr	BASEPRI, r3
1a002644:	f3bf 8f6f 	isb	sy
1a002648:	f3bf 8f4f 	dsb	sy
1a00264c:	e7fe      	b.n	1a00264c <vPortEnterCritical+0x38>
1a00264e:	bf00      	nop
1a002650:	10000000 	.word	0x10000000
1a002654:	e000ed04 	.word	0xe000ed04

1a002658 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002658:	4b09      	ldr	r3, [pc, #36]	; (1a002680 <vPortExitCritical+0x28>)
1a00265a:	681b      	ldr	r3, [r3, #0]
1a00265c:	b943      	cbnz	r3, 1a002670 <vPortExitCritical+0x18>
1a00265e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002662:	f383 8811 	msr	BASEPRI, r3
1a002666:	f3bf 8f6f 	isb	sy
1a00266a:	f3bf 8f4f 	dsb	sy
1a00266e:	e7fe      	b.n	1a00266e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002670:	3b01      	subs	r3, #1
1a002672:	4a03      	ldr	r2, [pc, #12]	; (1a002680 <vPortExitCritical+0x28>)
1a002674:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002676:	b90b      	cbnz	r3, 1a00267c <vPortExitCritical+0x24>
	__asm volatile
1a002678:	f383 8811 	msr	BASEPRI, r3
}
1a00267c:	4770      	bx	lr
1a00267e:	bf00      	nop
1a002680:	10000000 	.word	0x10000000
1a002684:	ffffffff 	.word	0xffffffff
1a002688:	ffffffff 	.word	0xffffffff
1a00268c:	ffffffff 	.word	0xffffffff

1a002690 <PendSV_Handler>:
	__asm volatile
1a002690:	f3ef 8009 	mrs	r0, PSP
1a002694:	f3bf 8f6f 	isb	sy
1a002698:	4b15      	ldr	r3, [pc, #84]	; (1a0026f0 <pxCurrentTCBConst>)
1a00269a:	681a      	ldr	r2, [r3, #0]
1a00269c:	f01e 0f10 	tst.w	lr, #16
1a0026a0:	bf08      	it	eq
1a0026a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0026a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0026aa:	6010      	str	r0, [r2, #0]
1a0026ac:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0026b0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0026b4:	f380 8811 	msr	BASEPRI, r0
1a0026b8:	f3bf 8f4f 	dsb	sy
1a0026bc:	f3bf 8f6f 	isb	sy
1a0026c0:	f7ff fa7c 	bl	1a001bbc <vTaskSwitchContext>
1a0026c4:	f04f 0000 	mov.w	r0, #0
1a0026c8:	f380 8811 	msr	BASEPRI, r0
1a0026cc:	bc09      	pop	{r0, r3}
1a0026ce:	6819      	ldr	r1, [r3, #0]
1a0026d0:	6808      	ldr	r0, [r1, #0]
1a0026d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0026d6:	f01e 0f10 	tst.w	lr, #16
1a0026da:	bf08      	it	eq
1a0026dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0026e0:	f380 8809 	msr	PSP, r0
1a0026e4:	f3bf 8f6f 	isb	sy
1a0026e8:	4770      	bx	lr
1a0026ea:	bf00      	nop
1a0026ec:	f3af 8000 	nop.w

1a0026f0 <pxCurrentTCBConst>:
1a0026f0:	1000288c 	.word	0x1000288c

1a0026f4 <SysTick_Handler>:
{
1a0026f4:	b508      	push	{r3, lr}
	__asm volatile
1a0026f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026fa:	f383 8811 	msr	BASEPRI, r3
1a0026fe:	f3bf 8f6f 	isb	sy
1a002702:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002706:	f7ff f8db 	bl	1a0018c0 <xTaskIncrementTick>
1a00270a:	b118      	cbz	r0, 1a002714 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00270c:	4b03      	ldr	r3, [pc, #12]	; (1a00271c <SysTick_Handler+0x28>)
1a00270e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002712:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002714:	2300      	movs	r3, #0
1a002716:	f383 8811 	msr	BASEPRI, r3
}
1a00271a:	bd08      	pop	{r3, pc}
1a00271c:	e000ed04 	.word	0xe000ed04

1a002720 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002720:	4a08      	ldr	r2, [pc, #32]	; (1a002744 <vPortSetupTimerInterrupt+0x24>)
1a002722:	2300      	movs	r3, #0
1a002724:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002726:	4908      	ldr	r1, [pc, #32]	; (1a002748 <vPortSetupTimerInterrupt+0x28>)
1a002728:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00272a:	4b08      	ldr	r3, [pc, #32]	; (1a00274c <vPortSetupTimerInterrupt+0x2c>)
1a00272c:	681b      	ldr	r3, [r3, #0]
1a00272e:	4908      	ldr	r1, [pc, #32]	; (1a002750 <vPortSetupTimerInterrupt+0x30>)
1a002730:	fba1 1303 	umull	r1, r3, r1, r3
1a002734:	099b      	lsrs	r3, r3, #6
1a002736:	3b01      	subs	r3, #1
1a002738:	4906      	ldr	r1, [pc, #24]	; (1a002754 <vPortSetupTimerInterrupt+0x34>)
1a00273a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00273c:	2307      	movs	r3, #7
1a00273e:	6013      	str	r3, [r2, #0]
}
1a002740:	4770      	bx	lr
1a002742:	bf00      	nop
1a002744:	e000e010 	.word	0xe000e010
1a002748:	e000e018 	.word	0xe000e018
1a00274c:	10002b7c 	.word	0x10002b7c
1a002750:	10624dd3 	.word	0x10624dd3
1a002754:	e000e014 	.word	0xe000e014

1a002758 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002758:	4b3a      	ldr	r3, [pc, #232]	; (1a002844 <xPortStartScheduler+0xec>)
1a00275a:	681a      	ldr	r2, [r3, #0]
1a00275c:	4b3a      	ldr	r3, [pc, #232]	; (1a002848 <xPortStartScheduler+0xf0>)
1a00275e:	429a      	cmp	r2, r3
1a002760:	d00d      	beq.n	1a00277e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002762:	4b38      	ldr	r3, [pc, #224]	; (1a002844 <xPortStartScheduler+0xec>)
1a002764:	681a      	ldr	r2, [r3, #0]
1a002766:	4b39      	ldr	r3, [pc, #228]	; (1a00284c <xPortStartScheduler+0xf4>)
1a002768:	429a      	cmp	r2, r3
1a00276a:	d111      	bne.n	1a002790 <xPortStartScheduler+0x38>
	__asm volatile
1a00276c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002770:	f383 8811 	msr	BASEPRI, r3
1a002774:	f3bf 8f6f 	isb	sy
1a002778:	f3bf 8f4f 	dsb	sy
1a00277c:	e7fe      	b.n	1a00277c <xPortStartScheduler+0x24>
1a00277e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002782:	f383 8811 	msr	BASEPRI, r3
1a002786:	f3bf 8f6f 	isb	sy
1a00278a:	f3bf 8f4f 	dsb	sy
1a00278e:	e7fe      	b.n	1a00278e <xPortStartScheduler+0x36>
{
1a002790:	b510      	push	{r4, lr}
1a002792:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002794:	4b2e      	ldr	r3, [pc, #184]	; (1a002850 <xPortStartScheduler+0xf8>)
1a002796:	781a      	ldrb	r2, [r3, #0]
1a002798:	b2d2      	uxtb	r2, r2
1a00279a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00279c:	22ff      	movs	r2, #255	; 0xff
1a00279e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0027a0:	781b      	ldrb	r3, [r3, #0]
1a0027a2:	b2db      	uxtb	r3, r3
1a0027a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0027a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0027ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0027b0:	4a28      	ldr	r2, [pc, #160]	; (1a002854 <xPortStartScheduler+0xfc>)
1a0027b2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0027b4:	4b28      	ldr	r3, [pc, #160]	; (1a002858 <xPortStartScheduler+0x100>)
1a0027b6:	2207      	movs	r2, #7
1a0027b8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0027ba:	e009      	b.n	1a0027d0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0027bc:	4a26      	ldr	r2, [pc, #152]	; (1a002858 <xPortStartScheduler+0x100>)
1a0027be:	6813      	ldr	r3, [r2, #0]
1a0027c0:	3b01      	subs	r3, #1
1a0027c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0027c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0027c8:	005b      	lsls	r3, r3, #1
1a0027ca:	b2db      	uxtb	r3, r3
1a0027cc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0027d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0027d4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0027d8:	d1f0      	bne.n	1a0027bc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0027da:	4b1f      	ldr	r3, [pc, #124]	; (1a002858 <xPortStartScheduler+0x100>)
1a0027dc:	681b      	ldr	r3, [r3, #0]
1a0027de:	2b04      	cmp	r3, #4
1a0027e0:	d008      	beq.n	1a0027f4 <xPortStartScheduler+0x9c>
1a0027e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027e6:	f383 8811 	msr	BASEPRI, r3
1a0027ea:	f3bf 8f6f 	isb	sy
1a0027ee:	f3bf 8f4f 	dsb	sy
1a0027f2:	e7fe      	b.n	1a0027f2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0027f4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0027f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0027fa:	4a17      	ldr	r2, [pc, #92]	; (1a002858 <xPortStartScheduler+0x100>)
1a0027fc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0027fe:	9b01      	ldr	r3, [sp, #4]
1a002800:	b2db      	uxtb	r3, r3
1a002802:	4a13      	ldr	r2, [pc, #76]	; (1a002850 <xPortStartScheduler+0xf8>)
1a002804:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002806:	4b15      	ldr	r3, [pc, #84]	; (1a00285c <xPortStartScheduler+0x104>)
1a002808:	681a      	ldr	r2, [r3, #0]
1a00280a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00280e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002810:	681a      	ldr	r2, [r3, #0]
1a002812:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002816:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002818:	f7ff ff82 	bl	1a002720 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00281c:	2400      	movs	r4, #0
1a00281e:	4b10      	ldr	r3, [pc, #64]	; (1a002860 <xPortStartScheduler+0x108>)
1a002820:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002822:	f7ff fec1 	bl	1a0025a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002826:	4a0f      	ldr	r2, [pc, #60]	; (1a002864 <xPortStartScheduler+0x10c>)
1a002828:	6813      	ldr	r3, [r2, #0]
1a00282a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00282e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002830:	f7ff fea6 	bl	1a002580 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002834:	f7ff f9c2 	bl	1a001bbc <vTaskSwitchContext>
	prvTaskExitError();
1a002838:	f7ff fe82 	bl	1a002540 <prvTaskExitError>
}
1a00283c:	4620      	mov	r0, r4
1a00283e:	b002      	add	sp, #8
1a002840:	bd10      	pop	{r4, pc}
1a002842:	bf00      	nop
1a002844:	e000ed00 	.word	0xe000ed00
1a002848:	410fc271 	.word	0x410fc271
1a00284c:	410fc270 	.word	0x410fc270
1a002850:	e000e400 	.word	0xe000e400
1a002854:	10002ae0 	.word	0x10002ae0
1a002858:	10002ae4 	.word	0x10002ae4
1a00285c:	e000ed20 	.word	0xe000ed20
1a002860:	10000000 	.word	0x10000000
1a002864:	e000ef34 	.word	0xe000ef34

1a002868 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002868:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00286c:	2b0f      	cmp	r3, #15
1a00286e:	d90f      	bls.n	1a002890 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002870:	4a10      	ldr	r2, [pc, #64]	; (1a0028b4 <vPortValidateInterruptPriority+0x4c>)
1a002872:	5c9b      	ldrb	r3, [r3, r2]
1a002874:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002876:	4a10      	ldr	r2, [pc, #64]	; (1a0028b8 <vPortValidateInterruptPriority+0x50>)
1a002878:	7812      	ldrb	r2, [r2, #0]
1a00287a:	429a      	cmp	r2, r3
1a00287c:	d908      	bls.n	1a002890 <vPortValidateInterruptPriority+0x28>
1a00287e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002882:	f383 8811 	msr	BASEPRI, r3
1a002886:	f3bf 8f6f 	isb	sy
1a00288a:	f3bf 8f4f 	dsb	sy
1a00288e:	e7fe      	b.n	1a00288e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002890:	4b0a      	ldr	r3, [pc, #40]	; (1a0028bc <vPortValidateInterruptPriority+0x54>)
1a002892:	681b      	ldr	r3, [r3, #0]
1a002894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002898:	4a09      	ldr	r2, [pc, #36]	; (1a0028c0 <vPortValidateInterruptPriority+0x58>)
1a00289a:	6812      	ldr	r2, [r2, #0]
1a00289c:	4293      	cmp	r3, r2
1a00289e:	d908      	bls.n	1a0028b2 <vPortValidateInterruptPriority+0x4a>
1a0028a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028a4:	f383 8811 	msr	BASEPRI, r3
1a0028a8:	f3bf 8f6f 	isb	sy
1a0028ac:	f3bf 8f4f 	dsb	sy
1a0028b0:	e7fe      	b.n	1a0028b0 <vPortValidateInterruptPriority+0x48>
	}
1a0028b2:	4770      	bx	lr
1a0028b4:	e000e3f0 	.word	0xe000e3f0
1a0028b8:	10002ae0 	.word	0x10002ae0
1a0028bc:	e000ed0c 	.word	0xe000ed0c
1a0028c0:	10002ae4 	.word	0x10002ae4

1a0028c4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0028c4:	4b04      	ldr	r3, [pc, #16]	; (1a0028d8 <cyclesCounterInit+0x14>)
1a0028c6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0028c8:	4b04      	ldr	r3, [pc, #16]	; (1a0028dc <cyclesCounterInit+0x18>)
1a0028ca:	681a      	ldr	r2, [r3, #0]
1a0028cc:	6813      	ldr	r3, [r2, #0]
1a0028ce:	f043 0301 	orr.w	r3, r3, #1
1a0028d2:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0028d4:	2001      	movs	r0, #1
1a0028d6:	4770      	bx	lr
1a0028d8:	10000004 	.word	0x10000004
1a0028dc:	10000008 	.word	0x10000008

1a0028e0 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0028e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0028e4:	4680      	mov	r8, r0
1a0028e6:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0028e8:	4c19      	ldr	r4, [pc, #100]	; (1a002950 <uartInit+0x70>)
1a0028ea:	0045      	lsls	r5, r0, #1
1a0028ec:	182a      	adds	r2, r5, r0
1a0028ee:	0093      	lsls	r3, r2, #2
1a0028f0:	18e6      	adds	r6, r4, r3
1a0028f2:	58e7      	ldr	r7, [r4, r3]
1a0028f4:	4638      	mov	r0, r7
1a0028f6:	f000 fc17 	bl	1a003128 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0028fa:	4649      	mov	r1, r9
1a0028fc:	4638      	mov	r0, r7
1a0028fe:	f000 fc3d 	bl	1a00317c <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002902:	2307      	movs	r3, #7
1a002904:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002906:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a002908:	2301      	movs	r3, #1
1a00290a:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00290c:	7930      	ldrb	r0, [r6, #4]
1a00290e:	7973      	ldrb	r3, [r6, #5]
1a002910:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002912:	f042 0218 	orr.w	r2, r2, #24
1a002916:	490f      	ldr	r1, [pc, #60]	; (1a002954 <uartInit+0x74>)
1a002918:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002920:	79f0      	ldrb	r0, [r6, #7]
1a002922:	7a33      	ldrb	r3, [r6, #8]
1a002924:	7a72      	ldrb	r2, [r6, #9]
1a002926:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00292a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002932:	f1b8 0f01 	cmp.w	r8, #1
1a002936:	d001      	beq.n	1a00293c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00293c:	4a06      	ldr	r2, [pc, #24]	; (1a002958 <uartInit+0x78>)
1a00293e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002940:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002944:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002946:	221a      	movs	r2, #26
1a002948:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00294c:	e7f4      	b.n	1a002938 <uartInit+0x58>
1a00294e:	bf00      	nop
1a002950:	1a00405c 	.word	0x1a00405c
1a002954:	40086000 	.word	0x40086000
1a002958:	40081000 	.word	0x40081000

1a00295c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00295c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a002960:	4908      	ldr	r1, [pc, #32]	; (1a002984 <tickerCallback+0x28>)
1a002962:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002966:	f112 0b01 	adds.w	fp, r2, #1
1a00296a:	f143 0c00 	adc.w	ip, r3, #0
1a00296e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002972:	4b05      	ldr	r3, [pc, #20]	; (1a002988 <tickerCallback+0x2c>)
1a002974:	681b      	ldr	r3, [r3, #0]
1a002976:	b113      	cbz	r3, 1a00297e <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002978:	4a04      	ldr	r2, [pc, #16]	; (1a00298c <tickerCallback+0x30>)
1a00297a:	6810      	ldr	r0, [r2, #0]
1a00297c:	4798      	blx	r3
   }
}
1a00297e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a002982:	bf00      	nop
1a002984:	10002af0 	.word	0x10002af0
1a002988:	10002af8 	.word	0x10002af8
1a00298c:	10002ae8 	.word	0x10002ae8

1a002990 <tickInit>:
{
1a002990:	b510      	push	{r4, lr}
1a002992:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a002994:	4b0e      	ldr	r3, [pc, #56]	; (1a0029d0 <tickInit+0x40>)
1a002996:	9301      	str	r3, [sp, #4]
1a002998:	4b0e      	ldr	r3, [pc, #56]	; (1a0029d4 <tickInit+0x44>)
1a00299a:	9300      	str	r3, [sp, #0]
1a00299c:	2300      	movs	r3, #0
1a00299e:	2201      	movs	r2, #1
1a0029a0:	4601      	mov	r1, r0
1a0029a2:	480d      	ldr	r0, [pc, #52]	; (1a0029d8 <tickInit+0x48>)
1a0029a4:	f7ff fc2a 	bl	1a0021fc <xTimerCreateStatic>
         if (h == NULL)
1a0029a8:	b178      	cbz	r0, 1a0029ca <tickInit+0x3a>
1a0029aa:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a0029ac:	f7fe ff82 	bl	1a0018b4 <xTaskGetTickCount>
1a0029b0:	2300      	movs	r3, #0
1a0029b2:	9300      	str	r3, [sp, #0]
1a0029b4:	4602      	mov	r2, r0
1a0029b6:	2101      	movs	r1, #1
1a0029b8:	4620      	mov	r0, r4
1a0029ba:	f7ff fc45 	bl	1a002248 <xTimerGenericCommand>
1a0029be:	2801      	cmp	r0, #1
1a0029c0:	bf14      	ite	ne
1a0029c2:	2000      	movne	r0, #0
1a0029c4:	2001      	moveq	r0, #1
}
1a0029c6:	b002      	add	sp, #8
1a0029c8:	bd10      	pop	{r4, pc}
            return 0;
1a0029ca:	2000      	movs	r0, #0
1a0029cc:	e7fb      	b.n	1a0029c6 <tickInit+0x36>
1a0029ce:	bf00      	nop
1a0029d0:	10002afc 	.word	0x10002afc
1a0029d4:	1a00295d 	.word	0x1a00295d
1a0029d8:	1a0040a4 	.word	0x1a0040a4

1a0029dc <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0029dc:	e7fe      	b.n	1a0029dc <errorOcurred>

1a0029de <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0029de:	4770      	bx	lr

1a0029e0 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0029e0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0029e2:	2400      	movs	r4, #0
1a0029e4:	e001      	b.n	1a0029ea <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0029e6:	3401      	adds	r4, #1
1a0029e8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0029ea:	2c03      	cmp	r4, #3
1a0029ec:	d812      	bhi.n	1a002a14 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0029ee:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0029f0:	4b09      	ldr	r3, [pc, #36]	; (1a002a18 <TIMER0_IRQHandler+0x38>)
1a0029f2:	681a      	ldr	r2, [r3, #0]
1a0029f4:	f004 010f 	and.w	r1, r4, #15
1a0029f8:	2301      	movs	r3, #1
1a0029fa:	408b      	lsls	r3, r1
1a0029fc:	421a      	tst	r2, r3
1a0029fe:	d0f2      	beq.n	1a0029e6 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002a00:	4b06      	ldr	r3, [pc, #24]	; (1a002a1c <TIMER0_IRQHandler+0x3c>)
1a002a02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002a06:	2000      	movs	r0, #0
1a002a08:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002a0a:	2301      	movs	r3, #1
1a002a0c:	40ab      	lsls	r3, r5
1a002a0e:	4a02      	ldr	r2, [pc, #8]	; (1a002a18 <TIMER0_IRQHandler+0x38>)
1a002a10:	6013      	str	r3, [r2, #0]
1a002a12:	e7e8      	b.n	1a0029e6 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002a14:	bd38      	pop	{r3, r4, r5, pc}
1a002a16:	bf00      	nop
1a002a18:	40084000 	.word	0x40084000
1a002a1c:	1000000c 	.word	0x1000000c

1a002a20 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002a20:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002a22:	2400      	movs	r4, #0
1a002a24:	e001      	b.n	1a002a2a <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002a26:	3401      	adds	r4, #1
1a002a28:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002a2a:	2c03      	cmp	r4, #3
1a002a2c:	d813      	bhi.n	1a002a56 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002a2e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002a30:	4b09      	ldr	r3, [pc, #36]	; (1a002a58 <TIMER1_IRQHandler+0x38>)
1a002a32:	681a      	ldr	r2, [r3, #0]
1a002a34:	f004 010f 	and.w	r1, r4, #15
1a002a38:	2301      	movs	r3, #1
1a002a3a:	408b      	lsls	r3, r1
1a002a3c:	421a      	tst	r2, r3
1a002a3e:	d0f2      	beq.n	1a002a26 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002a40:	1d23      	adds	r3, r4, #4
1a002a42:	4a06      	ldr	r2, [pc, #24]	; (1a002a5c <TIMER1_IRQHandler+0x3c>)
1a002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002a48:	2000      	movs	r0, #0
1a002a4a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002a4c:	2301      	movs	r3, #1
1a002a4e:	40ab      	lsls	r3, r5
1a002a50:	4a01      	ldr	r2, [pc, #4]	; (1a002a58 <TIMER1_IRQHandler+0x38>)
1a002a52:	6013      	str	r3, [r2, #0]
1a002a54:	e7e7      	b.n	1a002a26 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002a56:	bd38      	pop	{r3, r4, r5, pc}
1a002a58:	40085000 	.word	0x40085000
1a002a5c:	1000000c 	.word	0x1000000c

1a002a60 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002a60:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002a62:	2400      	movs	r4, #0
1a002a64:	e001      	b.n	1a002a6a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002a66:	3401      	adds	r4, #1
1a002a68:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002a6a:	2c03      	cmp	r4, #3
1a002a6c:	d814      	bhi.n	1a002a98 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a002a6e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002a70:	4b0a      	ldr	r3, [pc, #40]	; (1a002a9c <TIMER2_IRQHandler+0x3c>)
1a002a72:	681a      	ldr	r2, [r3, #0]
1a002a74:	f004 010f 	and.w	r1, r4, #15
1a002a78:	2301      	movs	r3, #1
1a002a7a:	408b      	lsls	r3, r1
1a002a7c:	421a      	tst	r2, r3
1a002a7e:	d0f2      	beq.n	1a002a66 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002a80:	f104 0308 	add.w	r3, r4, #8
1a002a84:	4a06      	ldr	r2, [pc, #24]	; (1a002aa0 <TIMER2_IRQHandler+0x40>)
1a002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002a8a:	2000      	movs	r0, #0
1a002a8c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002a8e:	2301      	movs	r3, #1
1a002a90:	40ab      	lsls	r3, r5
1a002a92:	4a02      	ldr	r2, [pc, #8]	; (1a002a9c <TIMER2_IRQHandler+0x3c>)
1a002a94:	6013      	str	r3, [r2, #0]
1a002a96:	e7e6      	b.n	1a002a66 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a002a98:	bd38      	pop	{r3, r4, r5, pc}
1a002a9a:	bf00      	nop
1a002a9c:	400c3000 	.word	0x400c3000
1a002aa0:	1000000c 	.word	0x1000000c

1a002aa4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002aa4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002aa6:	2400      	movs	r4, #0
1a002aa8:	e001      	b.n	1a002aae <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002aaa:	3401      	adds	r4, #1
1a002aac:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002aae:	2c03      	cmp	r4, #3
1a002ab0:	d814      	bhi.n	1a002adc <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a002ab2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002ab4:	4b0a      	ldr	r3, [pc, #40]	; (1a002ae0 <TIMER3_IRQHandler+0x3c>)
1a002ab6:	681a      	ldr	r2, [r3, #0]
1a002ab8:	f004 010f 	and.w	r1, r4, #15
1a002abc:	2301      	movs	r3, #1
1a002abe:	408b      	lsls	r3, r1
1a002ac0:	421a      	tst	r2, r3
1a002ac2:	d0f2      	beq.n	1a002aaa <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002ac4:	f104 030c 	add.w	r3, r4, #12
1a002ac8:	4a06      	ldr	r2, [pc, #24]	; (1a002ae4 <TIMER3_IRQHandler+0x40>)
1a002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002ace:	2000      	movs	r0, #0
1a002ad0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002ad2:	2301      	movs	r3, #1
1a002ad4:	40ab      	lsls	r3, r5
1a002ad6:	4a02      	ldr	r2, [pc, #8]	; (1a002ae0 <TIMER3_IRQHandler+0x3c>)
1a002ad8:	6013      	str	r3, [r2, #0]
1a002ada:	e7e6      	b.n	1a002aaa <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a002adc:	bd38      	pop	{r3, r4, r5, pc}
1a002ade:	bf00      	nop
1a002ae0:	400c4000 	.word	0x400c4000
1a002ae4:	1000000c 	.word	0x1000000c

1a002ae8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002ae8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002aea:	4d0b      	ldr	r5, [pc, #44]	; (1a002b18 <gpioObtainPinInit+0x30>)
1a002aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002af0:	182c      	adds	r4, r5, r0
1a002af2:	5628      	ldrsb	r0, [r5, r0]
1a002af4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002af6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002afa:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002afc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002b00:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002b02:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002b06:	9b02      	ldr	r3, [sp, #8]
1a002b08:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002b0a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002b0e:	9b03      	ldr	r3, [sp, #12]
1a002b10:	701a      	strb	r2, [r3, #0]
}
1a002b12:	bc30      	pop	{r4, r5}
1a002b14:	4770      	bx	lr
1a002b16:	bf00      	nop
1a002b18:	1a0040b0 	.word	0x1a0040b0

1a002b1c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002b1c:	b570      	push	{r4, r5, r6, lr}
1a002b1e:	b084      	sub	sp, #16
1a002b20:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002b22:	2300      	movs	r3, #0
1a002b24:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002b28:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002b2c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002b30:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002b34:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002b38:	f10d 030b 	add.w	r3, sp, #11
1a002b3c:	9301      	str	r3, [sp, #4]
1a002b3e:	ab03      	add	r3, sp, #12
1a002b40:	9300      	str	r3, [sp, #0]
1a002b42:	f10d 030d 	add.w	r3, sp, #13
1a002b46:	f10d 020e 	add.w	r2, sp, #14
1a002b4a:	f10d 010f 	add.w	r1, sp, #15
1a002b4e:	f7ff ffcb 	bl	1a002ae8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002b52:	2c05      	cmp	r4, #5
1a002b54:	f200 80a5 	bhi.w	1a002ca2 <gpioInit+0x186>
1a002b58:	e8df f004 	tbb	[pc, r4]
1a002b5c:	45278109 	.word	0x45278109
1a002b60:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002b62:	4851      	ldr	r0, [pc, #324]	; (1a002ca8 <gpioInit+0x18c>)
1a002b64:	f000 fefe 	bl	1a003964 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002b68:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a002b6a:	b004      	add	sp, #16
1a002b6c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a002b6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002b72:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002b76:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002b7a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002b7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002b82:	494a      	ldr	r1, [pc, #296]	; (1a002cac <gpioInit+0x190>)
1a002b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002b88:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002b8c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002b90:	2001      	movs	r0, #1
1a002b92:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002b96:	4c44      	ldr	r4, [pc, #272]	; (1a002ca8 <gpioInit+0x18c>)
1a002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002b9c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002ba0:	ea22 0201 	bic.w	r2, r2, r1
1a002ba4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002ba8:	e7df      	b.n	1a002b6a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002baa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002bae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002bb2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002bb6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a002bba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002bbe:	493b      	ldr	r1, [pc, #236]	; (1a002cac <gpioInit+0x190>)
1a002bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002bc4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002bc8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002bcc:	2001      	movs	r0, #1
1a002bce:	fa00 f102 	lsl.w	r1, r0, r2
1a002bd2:	4c35      	ldr	r4, [pc, #212]	; (1a002ca8 <gpioInit+0x18c>)
1a002bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002bd8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002bdc:	ea22 0201 	bic.w	r2, r2, r1
1a002be0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002be4:	e7c1      	b.n	1a002b6a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002be6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002bea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002bee:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002bf2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002bf6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002bfa:	492c      	ldr	r1, [pc, #176]	; (1a002cac <gpioInit+0x190>)
1a002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002c00:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002c04:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c08:	2001      	movs	r0, #1
1a002c0a:	fa00 f102 	lsl.w	r1, r0, r2
1a002c0e:	4c26      	ldr	r4, [pc, #152]	; (1a002ca8 <gpioInit+0x18c>)
1a002c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002c14:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002c18:	ea22 0201 	bic.w	r2, r2, r1
1a002c1c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002c20:	e7a3      	b.n	1a002b6a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002c22:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002c26:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002c2a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002c2e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002c32:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002c36:	491d      	ldr	r1, [pc, #116]	; (1a002cac <gpioInit+0x190>)
1a002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002c3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002c40:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c44:	2001      	movs	r0, #1
1a002c46:	fa00 f102 	lsl.w	r1, r0, r2
1a002c4a:	4c17      	ldr	r4, [pc, #92]	; (1a002ca8 <gpioInit+0x18c>)
1a002c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002c50:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002c54:	ea22 0201 	bic.w	r2, r2, r1
1a002c58:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002c5c:	e785      	b.n	1a002b6a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002c5e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002c62:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002c66:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002c6a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002c6e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002c72:	490e      	ldr	r1, [pc, #56]	; (1a002cac <gpioInit+0x190>)
1a002c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002c78:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002c7c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c80:	2001      	movs	r0, #1
1a002c82:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a002c86:	4b08      	ldr	r3, [pc, #32]	; (1a002ca8 <gpioInit+0x18c>)
1a002c88:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002c8c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002c90:	4331      	orrs	r1, r6
1a002c92:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a002c96:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a002c98:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002c9c:	2100      	movs	r1, #0
1a002c9e:	5499      	strb	r1, [r3, r2]
1a002ca0:	e763      	b.n	1a002b6a <gpioInit+0x4e>
      ret_val = 0;
1a002ca2:	2000      	movs	r0, #0
1a002ca4:	e761      	b.n	1a002b6a <gpioInit+0x4e>
1a002ca6:	bf00      	nop
1a002ca8:	400f4000 	.word	0x400f4000
1a002cac:	40086000 	.word	0x40086000

1a002cb0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002cb0:	b510      	push	{r4, lr}
1a002cb2:	b084      	sub	sp, #16
1a002cb4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002cb6:	2300      	movs	r3, #0
1a002cb8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002cbc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002cc0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002cc4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002cc8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002ccc:	f10d 030b 	add.w	r3, sp, #11
1a002cd0:	9301      	str	r3, [sp, #4]
1a002cd2:	ab03      	add	r3, sp, #12
1a002cd4:	9300      	str	r3, [sp, #0]
1a002cd6:	f10d 030d 	add.w	r3, sp, #13
1a002cda:	f10d 020e 	add.w	r2, sp, #14
1a002cde:	f10d 010f 	add.w	r1, sp, #15
1a002ce2:	f7ff ff01 	bl	1a002ae8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002ce6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002cea:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002cee:	3400      	adds	r4, #0
1a002cf0:	bf18      	it	ne
1a002cf2:	2401      	movne	r4, #1
1a002cf4:	015b      	lsls	r3, r3, #5
1a002cf6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002cfa:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002cfe:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002d00:	2001      	movs	r0, #1
1a002d02:	b004      	add	sp, #16
1a002d04:	bd10      	pop	{r4, pc}

1a002d06 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002d06:	b500      	push	{lr}
1a002d08:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002d0a:	2300      	movs	r3, #0
1a002d0c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002d10:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002d14:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002d18:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002d1c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002d20:	f10d 030b 	add.w	r3, sp, #11
1a002d24:	9301      	str	r3, [sp, #4]
1a002d26:	ab03      	add	r3, sp, #12
1a002d28:	9300      	str	r3, [sp, #0]
1a002d2a:	f10d 030d 	add.w	r3, sp, #13
1a002d2e:	f10d 020e 	add.w	r2, sp, #14
1a002d32:	f10d 010f 	add.w	r1, sp, #15
1a002d36:	f7ff fed7 	bl	1a002ae8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002d3a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002d3e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a002d42:	015b      	lsls	r3, r3, #5
1a002d44:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002d48:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002d4c:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a002d4e:	3000      	adds	r0, #0
1a002d50:	bf18      	it	ne
1a002d52:	2001      	movne	r0, #1
1a002d54:	b005      	add	sp, #20
1a002d56:	f85d fb04 	ldr.w	pc, [sp], #4

1a002d5a <gpioToggle>:
{
1a002d5a:	b510      	push	{r4, lr}
1a002d5c:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a002d5e:	f7ff ffd2 	bl	1a002d06 <gpioRead>
1a002d62:	fab0 f180 	clz	r1, r0
1a002d66:	0949      	lsrs	r1, r1, #5
1a002d68:	4620      	mov	r0, r4
1a002d6a:	f7ff ffa1 	bl	1a002cb0 <gpioWrite>
}
1a002d6e:	bd10      	pop	{r4, pc}

1a002d70 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002d70:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002d72:	4b04      	ldr	r3, [pc, #16]	; (1a002d84 <USB0_IRQHandler+0x14>)
1a002d74:	681b      	ldr	r3, [r3, #0]
1a002d76:	681b      	ldr	r3, [r3, #0]
1a002d78:	68db      	ldr	r3, [r3, #12]
1a002d7a:	4a03      	ldr	r2, [pc, #12]	; (1a002d88 <USB0_IRQHandler+0x18>)
1a002d7c:	6810      	ldr	r0, [r2, #0]
1a002d7e:	4798      	blx	r3
}
1a002d80:	bd08      	pop	{r3, pc}
1a002d82:	bf00      	nop
1a002d84:	10002b78 	.word	0x10002b78
1a002d88:	10002b2c 	.word	0x10002b2c

1a002d8c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002d8c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002d8e:	f000 faed 	bl	1a00336c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002d92:	4b3a      	ldr	r3, [pc, #232]	; (1a002e7c <boardInit+0xf0>)
1a002d94:	6818      	ldr	r0, [r3, #0]
1a002d96:	f7ff fd95 	bl	1a0028c4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002d9a:	2001      	movs	r0, #1
1a002d9c:	2100      	movs	r1, #0
1a002d9e:	f7ff fdf7 	bl	1a002990 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a002da2:	2105      	movs	r1, #5
1a002da4:	2000      	movs	r0, #0
1a002da6:	f7ff feb9 	bl	1a002b1c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002daa:	2100      	movs	r1, #0
1a002dac:	2024      	movs	r0, #36	; 0x24
1a002dae:	f7ff feb5 	bl	1a002b1c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002db2:	2100      	movs	r1, #0
1a002db4:	2025      	movs	r0, #37	; 0x25
1a002db6:	f7ff feb1 	bl	1a002b1c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002dba:	2100      	movs	r1, #0
1a002dbc:	2026      	movs	r0, #38	; 0x26
1a002dbe:	f7ff fead 	bl	1a002b1c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002dc2:	2100      	movs	r1, #0
1a002dc4:	2027      	movs	r0, #39	; 0x27
1a002dc6:	f7ff fea9 	bl	1a002b1c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002dca:	2101      	movs	r1, #1
1a002dcc:	2028      	movs	r0, #40	; 0x28
1a002dce:	f7ff fea5 	bl	1a002b1c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002dd2:	2101      	movs	r1, #1
1a002dd4:	2029      	movs	r0, #41	; 0x29
1a002dd6:	f7ff fea1 	bl	1a002b1c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002dda:	2101      	movs	r1, #1
1a002ddc:	202a      	movs	r0, #42	; 0x2a
1a002dde:	f7ff fe9d 	bl	1a002b1c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002de2:	2101      	movs	r1, #1
1a002de4:	202b      	movs	r0, #43	; 0x2b
1a002de6:	f7ff fe99 	bl	1a002b1c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a002dea:	2101      	movs	r1, #1
1a002dec:	202c      	movs	r0, #44	; 0x2c
1a002dee:	f7ff fe95 	bl	1a002b1c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002df2:	2101      	movs	r1, #1
1a002df4:	202d      	movs	r0, #45	; 0x2d
1a002df6:	f7ff fe91 	bl	1a002b1c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a002dfa:	2100      	movs	r1, #0
1a002dfc:	202e      	movs	r0, #46	; 0x2e
1a002dfe:	f7ff fe8d 	bl	1a002b1c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002e02:	2100      	movs	r1, #0
1a002e04:	202f      	movs	r0, #47	; 0x2f
1a002e06:	f7ff fe89 	bl	1a002b1c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a002e0a:	2100      	movs	r1, #0
1a002e0c:	2030      	movs	r0, #48	; 0x30
1a002e0e:	f7ff fe85 	bl	1a002b1c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002e12:	2100      	movs	r1, #0
1a002e14:	2031      	movs	r0, #49	; 0x31
1a002e16:	f7ff fe81 	bl	1a002b1c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a002e1a:	2100      	movs	r1, #0
1a002e1c:	2032      	movs	r0, #50	; 0x32
1a002e1e:	f7ff fe7d 	bl	1a002b1c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002e22:	2100      	movs	r1, #0
1a002e24:	2033      	movs	r0, #51	; 0x33
1a002e26:	f7ff fe79 	bl	1a002b1c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a002e2a:	2100      	movs	r1, #0
1a002e2c:	2034      	movs	r0, #52	; 0x34
1a002e2e:	f7ff fe75 	bl	1a002b1c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002e32:	2100      	movs	r1, #0
1a002e34:	2035      	movs	r0, #53	; 0x35
1a002e36:	f7ff fe71 	bl	1a002b1c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002e3a:	2101      	movs	r1, #1
1a002e3c:	2036      	movs	r0, #54	; 0x36
1a002e3e:	f7ff fe6d 	bl	1a002b1c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a002e42:	2101      	movs	r1, #1
1a002e44:	2037      	movs	r0, #55	; 0x37
1a002e46:	f7ff fe69 	bl	1a002b1c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002e4a:	2101      	movs	r1, #1
1a002e4c:	2038      	movs	r0, #56	; 0x38
1a002e4e:	f7ff fe65 	bl	1a002b1c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a002e52:	2101      	movs	r1, #1
1a002e54:	2039      	movs	r0, #57	; 0x39
1a002e56:	f7ff fe61 	bl	1a002b1c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002e5a:	2101      	movs	r1, #1
1a002e5c:	203a      	movs	r0, #58	; 0x3a
1a002e5e:	f7ff fe5d 	bl	1a002b1c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a002e62:	2101      	movs	r1, #1
1a002e64:	203b      	movs	r0, #59	; 0x3b
1a002e66:	f7ff fe59 	bl	1a002b1c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002e6a:	2101      	movs	r1, #1
1a002e6c:	203c      	movs	r0, #60	; 0x3c
1a002e6e:	f7ff fe55 	bl	1a002b1c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a002e72:	2101      	movs	r1, #1
1a002e74:	203d      	movs	r0, #61	; 0x3d
1a002e76:	f7ff fe51 	bl	1a002b1c <gpioInit>

}
1a002e7a:	bd08      	pop	{r3, pc}
1a002e7c:	10002b7c 	.word	0x10002b7c

1a002e80 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002e80:	b508      	push	{r3, lr}
1a002e82:	460b      	mov	r3, r1
   *printer = uart;
1a002e84:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a002e86:	4611      	mov	r1, r2
1a002e88:	4618      	mov	r0, r3
1a002e8a:	f7ff fd29 	bl	1a0028e0 <uartInit>
}
1a002e8e:	bd08      	pop	{r3, pc}

1a002e90 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002e90:	2200      	movs	r2, #0
1a002e92:	2a05      	cmp	r2, #5
1a002e94:	d819      	bhi.n	1a002eca <Board_LED_Init+0x3a>
{
1a002e96:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002e98:	490c      	ldr	r1, [pc, #48]	; (1a002ecc <Board_LED_Init+0x3c>)
1a002e9a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002e9e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002ea2:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a002ea4:	4b0a      	ldr	r3, [pc, #40]	; (1a002ed0 <Board_LED_Init+0x40>)
1a002ea6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002eaa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002eae:	2001      	movs	r0, #1
1a002eb0:	40a0      	lsls	r0, r4
1a002eb2:	4301      	orrs	r1, r0
1a002eb4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002eb8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002ebc:	2100      	movs	r1, #0
1a002ebe:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002ec0:	3201      	adds	r2, #1
1a002ec2:	2a05      	cmp	r2, #5
1a002ec4:	d9e8      	bls.n	1a002e98 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002ec6:	bc70      	pop	{r4, r5, r6}
1a002ec8:	4770      	bx	lr
1a002eca:	4770      	bx	lr
1a002ecc:	1a0041f4 	.word	0x1a0041f4
1a002ed0:	400f4000 	.word	0x400f4000

1a002ed4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002ed4:	2300      	movs	r3, #0
1a002ed6:	2b03      	cmp	r3, #3
1a002ed8:	d816      	bhi.n	1a002f08 <Board_TEC_Init+0x34>
{
1a002eda:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002edc:	490b      	ldr	r1, [pc, #44]	; (1a002f0c <Board_TEC_Init+0x38>)
1a002ede:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002ee2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002ee6:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002ee8:	4c09      	ldr	r4, [pc, #36]	; (1a002f10 <Board_TEC_Init+0x3c>)
1a002eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002eee:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002ef2:	2001      	movs	r0, #1
1a002ef4:	40a8      	lsls	r0, r5
1a002ef6:	ea21 0100 	bic.w	r1, r1, r0
1a002efa:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002efe:	3301      	adds	r3, #1
1a002f00:	2b03      	cmp	r3, #3
1a002f02:	d9eb      	bls.n	1a002edc <Board_TEC_Init+0x8>
    }
}
1a002f04:	bc30      	pop	{r4, r5}
1a002f06:	4770      	bx	lr
1a002f08:	4770      	bx	lr
1a002f0a:	bf00      	nop
1a002f0c:	1a0041ec 	.word	0x1a0041ec
1a002f10:	400f4000 	.word	0x400f4000

1a002f14 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002f14:	2300      	movs	r3, #0
1a002f16:	2b08      	cmp	r3, #8
1a002f18:	d816      	bhi.n	1a002f48 <Board_GPIO_Init+0x34>
{
1a002f1a:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002f1c:	490b      	ldr	r1, [pc, #44]	; (1a002f4c <Board_GPIO_Init+0x38>)
1a002f1e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002f22:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002f26:	784d      	ldrb	r5, [r1, #1]
1a002f28:	4c09      	ldr	r4, [pc, #36]	; (1a002f50 <Board_GPIO_Init+0x3c>)
1a002f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002f2e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002f32:	2001      	movs	r0, #1
1a002f34:	40a8      	lsls	r0, r5
1a002f36:	ea21 0100 	bic.w	r1, r1, r0
1a002f3a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002f3e:	3301      	adds	r3, #1
1a002f40:	2b08      	cmp	r3, #8
1a002f42:	d9eb      	bls.n	1a002f1c <Board_GPIO_Init+0x8>
    }
}
1a002f44:	bc30      	pop	{r4, r5}
1a002f46:	4770      	bx	lr
1a002f48:	4770      	bx	lr
1a002f4a:	bf00      	nop
1a002f4c:	1a004200 	.word	0x1a004200
1a002f50:	400f4000 	.word	0x400f4000

1a002f54 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a002f54:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002f56:	4c0b      	ldr	r4, [pc, #44]	; (1a002f84 <Board_SPI_Init+0x30>)
1a002f58:	4620      	mov	r0, r4
1a002f5a:	f000 fe2b 	bl	1a003bb4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002f5e:	6863      	ldr	r3, [r4, #4]
1a002f60:	f023 0304 	bic.w	r3, r3, #4
1a002f64:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002f66:	6823      	ldr	r3, [r4, #0]
1a002f68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002f6c:	f043 0307 	orr.w	r3, r3, #7
1a002f70:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002f72:	4905      	ldr	r1, [pc, #20]	; (1a002f88 <Board_SPI_Init+0x34>)
1a002f74:	4620      	mov	r0, r4
1a002f76:	f000 fdfe 	bl	1a003b76 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002f7a:	6863      	ldr	r3, [r4, #4]
1a002f7c:	f043 0302 	orr.w	r3, r3, #2
1a002f80:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a002f82:	bd10      	pop	{r4, pc}
1a002f84:	400c5000 	.word	0x400c5000
1a002f88:	000186a0 	.word	0x000186a0

1a002f8c <Board_I2C_Init>:
{
1a002f8c:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002f8e:	2000      	movs	r0, #0
1a002f90:	f000 fda4 	bl	1a003adc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002f94:	4b04      	ldr	r3, [pc, #16]	; (1a002fa8 <Board_I2C_Init+0x1c>)
1a002f96:	f640 0208 	movw	r2, #2056	; 0x808
1a002f9a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002f9e:	4903      	ldr	r1, [pc, #12]	; (1a002fac <Board_I2C_Init+0x20>)
1a002fa0:	2000      	movs	r0, #0
1a002fa2:	f000 fdad 	bl	1a003b00 <Chip_I2C_SetClockRate>
}
1a002fa6:	bd08      	pop	{r3, pc}
1a002fa8:	40086000 	.word	0x40086000
1a002fac:	000f4240 	.word	0x000f4240

1a002fb0 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a002fb0:	b510      	push	{r4, lr}
1a002fb2:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002fb4:	4c08      	ldr	r4, [pc, #32]	; (1a002fd8 <Board_ADC_Init+0x28>)
1a002fb6:	4669      	mov	r1, sp
1a002fb8:	4620      	mov	r0, r4
1a002fba:	f000 f997 	bl	1a0032ec <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002fbe:	4a07      	ldr	r2, [pc, #28]	; (1a002fdc <Board_ADC_Init+0x2c>)
1a002fc0:	4669      	mov	r1, sp
1a002fc2:	4620      	mov	r0, r4
1a002fc4:	f000 f9b2 	bl	1a00332c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002fc8:	2200      	movs	r2, #0
1a002fca:	4669      	mov	r1, sp
1a002fcc:	4620      	mov	r0, r4
1a002fce:	f000 f9c6 	bl	1a00335e <Chip_ADC_SetResolution>
}
1a002fd2:	b002      	add	sp, #8
1a002fd4:	bd10      	pop	{r4, pc}
1a002fd6:	bf00      	nop
1a002fd8:	400e3000 	.word	0x400e3000
1a002fdc:	00061a80 	.word	0x00061a80

1a002fe0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002fe0:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002fe2:	4c07      	ldr	r4, [pc, #28]	; (1a003000 <Board_Debug_Init+0x20>)
1a002fe4:	4620      	mov	r0, r4
1a002fe6:	f000 f89f 	bl	1a003128 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002fea:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002fee:	4620      	mov	r0, r4
1a002ff0:	f000 f8e4 	bl	1a0031bc <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a002ff4:	2303      	movs	r3, #3
1a002ff6:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002ff8:	2301      	movs	r3, #1
1a002ffa:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002ffc:	bd10      	pop	{r4, pc}
1a002ffe:	bf00      	nop
1a003000:	400c1000 	.word	0x400c1000

1a003004 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003004:	b508      	push	{r3, lr}
   DEBUGINIT();
1a003006:	f7ff ffeb 	bl	1a002fe0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00300a:	4808      	ldr	r0, [pc, #32]	; (1a00302c <Board_Init+0x28>)
1a00300c:	f000 fcaa 	bl	1a003964 <Chip_GPIO_Init>

   Board_LED_Init();
1a003010:	f7ff ff3e 	bl	1a002e90 <Board_LED_Init>
   Board_TEC_Init();
1a003014:	f7ff ff5e 	bl	1a002ed4 <Board_TEC_Init>
   Board_SPI_Init();
1a003018:	f7ff ff9c 	bl	1a002f54 <Board_SPI_Init>
   Board_GPIO_Init();
1a00301c:	f7ff ff7a 	bl	1a002f14 <Board_GPIO_Init>
   Board_I2C_Init();
1a003020:	f7ff ffb4 	bl	1a002f8c <Board_I2C_Init>
   Board_ADC_Init();
1a003024:	f7ff ffc4 	bl	1a002fb0 <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a003028:	bd08      	pop	{r3, pc}
1a00302a:	bf00      	nop
1a00302c:	400f4000 	.word	0x400f4000

1a003030 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a003030:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a003032:	4a04      	ldr	r2, [pc, #16]	; (1a003044 <SystemInit+0x14>)
1a003034:	4b04      	ldr	r3, [pc, #16]	; (1a003048 <SystemInit+0x18>)
1a003036:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a003038:	f000 fc6a 	bl	1a003910 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a00303c:	f000 f858 	bl	1a0030f0 <Board_SystemInit>
}
1a003040:	bd08      	pop	{r3, pc}
1a003042:	bf00      	nop
1a003044:	1a000000 	.word	0x1a000000
1a003048:	e000ed08 	.word	0xe000ed08

1a00304c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00304c:	2300      	movs	r3, #0
1a00304e:	2b1c      	cmp	r3, #28
1a003050:	d812      	bhi.n	1a003078 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a003052:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003054:	4a09      	ldr	r2, [pc, #36]	; (1a00307c <Board_SetupMuxing+0x30>)
1a003056:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00305a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00305e:	784a      	ldrb	r2, [r1, #1]
1a003060:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003062:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a003066:	4906      	ldr	r1, [pc, #24]	; (1a003080 <Board_SetupMuxing+0x34>)
1a003068:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00306c:	3301      	adds	r3, #1
1a00306e:	2b1c      	cmp	r3, #28
1a003070:	d9f0      	bls.n	1a003054 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003072:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003076:	4770      	bx	lr
1a003078:	4770      	bx	lr
1a00307a:	bf00      	nop
1a00307c:	1a00421c 	.word	0x1a00421c
1a003080:	40086000 	.word	0x40086000

1a003084 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003084:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a003086:	4a17      	ldr	r2, [pc, #92]	; (1a0030e4 <Board_SetupClocking+0x60>)
1a003088:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00308c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003090:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003094:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003098:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00309c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0030a0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0030a4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0030a8:	2201      	movs	r2, #1
1a0030aa:	490f      	ldr	r1, [pc, #60]	; (1a0030e8 <Board_SetupClocking+0x64>)
1a0030ac:	2006      	movs	r0, #6
1a0030ae:	f000 fc5b 	bl	1a003968 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0030b2:	2400      	movs	r4, #0
1a0030b4:	b14c      	cbz	r4, 1a0030ca <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0030b6:	4b0b      	ldr	r3, [pc, #44]	; (1a0030e4 <Board_SetupClocking+0x60>)
1a0030b8:	685a      	ldr	r2, [r3, #4]
1a0030ba:	f022 020c 	bic.w	r2, r2, #12
1a0030be:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0030c0:	685a      	ldr	r2, [r3, #4]
1a0030c2:	f042 0203 	orr.w	r2, r2, #3
1a0030c6:	605a      	str	r2, [r3, #4]
}
1a0030c8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0030ca:	4808      	ldr	r0, [pc, #32]	; (1a0030ec <Board_SetupClocking+0x68>)
1a0030cc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0030d0:	2301      	movs	r3, #1
1a0030d2:	788a      	ldrb	r2, [r1, #2]
1a0030d4:	7849      	ldrb	r1, [r1, #1]
1a0030d6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0030da:	f000 fb75 	bl	1a0037c8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0030de:	3401      	adds	r4, #1
1a0030e0:	e7e8      	b.n	1a0030b4 <Board_SetupClocking+0x30>
1a0030e2:	bf00      	nop
1a0030e4:	40043000 	.word	0x40043000
1a0030e8:	0c28cb00 	.word	0x0c28cb00
1a0030ec:	1a004218 	.word	0x1a004218

1a0030f0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0030f0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0030f2:	f7ff ffab 	bl	1a00304c <Board_SetupMuxing>
    Board_SetupClocking();
1a0030f6:	f7ff ffc5 	bl	1a003084 <Board_SetupClocking>
}
1a0030fa:	bd08      	pop	{r3, pc}

1a0030fc <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0030fc:	4b09      	ldr	r3, [pc, #36]	; (1a003124 <Chip_UART_GetIndex+0x28>)
1a0030fe:	4298      	cmp	r0, r3
1a003100:	d009      	beq.n	1a003116 <Chip_UART_GetIndex+0x1a>
1a003102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003106:	4298      	cmp	r0, r3
1a003108:	d007      	beq.n	1a00311a <Chip_UART_GetIndex+0x1e>
1a00310a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00310e:	4298      	cmp	r0, r3
1a003110:	d005      	beq.n	1a00311e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003112:	2000      	movs	r0, #0
1a003114:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003116:	2002      	movs	r0, #2
1a003118:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00311a:	2003      	movs	r0, #3
1a00311c:	4770      	bx	lr
			return 1;
1a00311e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003120:	4770      	bx	lr
1a003122:	bf00      	nop
1a003124:	400c1000 	.word	0x400c1000

1a003128 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003128:	b530      	push	{r4, r5, lr}
1a00312a:	b083      	sub	sp, #12
1a00312c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00312e:	f7ff ffe5 	bl	1a0030fc <Chip_UART_GetIndex>
1a003132:	2301      	movs	r3, #1
1a003134:	461a      	mov	r2, r3
1a003136:	4619      	mov	r1, r3
1a003138:	4d0e      	ldr	r5, [pc, #56]	; (1a003174 <Chip_UART_Init+0x4c>)
1a00313a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00313e:	f000 fb89 	bl	1a003854 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003142:	2307      	movs	r3, #7
1a003144:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a003146:	2300      	movs	r3, #0
1a003148:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00314a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00314c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00314e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003150:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003152:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003154:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003156:	4b08      	ldr	r3, [pc, #32]	; (1a003178 <Chip_UART_Init+0x50>)
1a003158:	429c      	cmp	r4, r3
1a00315a:	d006      	beq.n	1a00316a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00315c:	2303      	movs	r3, #3
1a00315e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003160:	2310      	movs	r3, #16
1a003162:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003164:	9b01      	ldr	r3, [sp, #4]
}
1a003166:	b003      	add	sp, #12
1a003168:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00316a:	2300      	movs	r3, #0
1a00316c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00316e:	69a3      	ldr	r3, [r4, #24]
1a003170:	9301      	str	r3, [sp, #4]
1a003172:	e7f3      	b.n	1a00315c <Chip_UART_Init+0x34>
1a003174:	1a004298 	.word	0x1a004298
1a003178:	40082000 	.word	0x40082000

1a00317c <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a00317c:	b538      	push	{r3, r4, r5, lr}
1a00317e:	4605      	mov	r5, r0
1a003180:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003182:	f7ff ffbb 	bl	1a0030fc <Chip_UART_GetIndex>
1a003186:	4b0c      	ldr	r3, [pc, #48]	; (1a0031b8 <Chip_UART_SetBaud+0x3c>)
1a003188:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00318c:	f000 fb9a 	bl	1a0038c4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003190:	0123      	lsls	r3, r4, #4
1a003192:	fbb0 f3f3 	udiv	r3, r0, r3
1a003196:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003198:	68ea      	ldr	r2, [r5, #12]
1a00319a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00319e:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0031a0:	6029      	str	r1, [r5, #0]
1a0031a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0031a6:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0031a8:	68ea      	ldr	r2, [r5, #12]
1a0031aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0031ae:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0031b0:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0031b4:	0900      	lsrs	r0, r0, #4
1a0031b6:	bd38      	pop	{r3, r4, r5, pc}
1a0031b8:	1a004290 	.word	0x1a004290

1a0031bc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0031bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0031c0:	b083      	sub	sp, #12
1a0031c2:	4683      	mov	fp, r0
1a0031c4:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0031c6:	f7ff ff99 	bl	1a0030fc <Chip_UART_GetIndex>
1a0031ca:	4b35      	ldr	r3, [pc, #212]	; (1a0032a0 <Chip_UART_SetBaudFDR+0xe4>)
1a0031cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0031d0:	f000 fb78 	bl	1a0038c4 <Chip_Clock_GetRate>
1a0031d4:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0031d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0031da:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0031dc:	2300      	movs	r3, #0
1a0031de:	9301      	str	r3, [sp, #4]
1a0031e0:	46a2      	mov	sl, r4
1a0031e2:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0031e4:	e02a      	b.n	1a00323c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0031e6:	4242      	negs	r2, r0
				div ++;
1a0031e8:	1c4b      	adds	r3, r1, #1
1a0031ea:	e017      	b.n	1a00321c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0031ec:	b30a      	cbz	r2, 1a003232 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0031ee:	4617      	mov	r7, r2
			sd = d;
1a0031f0:	9501      	str	r5, [sp, #4]
			sm = m;
1a0031f2:	46a2      	mov	sl, r4
			sdiv = div;
1a0031f4:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0031f6:	3501      	adds	r5, #1
1a0031f8:	42ac      	cmp	r4, r5
1a0031fa:	d91e      	bls.n	1a00323a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0031fc:	0933      	lsrs	r3, r6, #4
1a0031fe:	0730      	lsls	r0, r6, #28
1a003200:	fba4 0100 	umull	r0, r1, r4, r0
1a003204:	fb04 1103 	mla	r1, r4, r3, r1
1a003208:	1962      	adds	r2, r4, r5
1a00320a:	fb08 f202 	mul.w	r2, r8, r2
1a00320e:	2300      	movs	r3, #0
1a003210:	f000 fd30 	bl	1a003c74 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003214:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a003216:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003218:	2800      	cmp	r0, #0
1a00321a:	dbe4      	blt.n	1a0031e6 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00321c:	4297      	cmp	r7, r2
1a00321e:	d3ea      	bcc.n	1a0031f6 <Chip_UART_SetBaudFDR+0x3a>
1a003220:	2b00      	cmp	r3, #0
1a003222:	d0e8      	beq.n	1a0031f6 <Chip_UART_SetBaudFDR+0x3a>
1a003224:	0c19      	lsrs	r1, r3, #16
1a003226:	d1e6      	bne.n	1a0031f6 <Chip_UART_SetBaudFDR+0x3a>
1a003228:	2b02      	cmp	r3, #2
1a00322a:	d8df      	bhi.n	1a0031ec <Chip_UART_SetBaudFDR+0x30>
1a00322c:	2d00      	cmp	r5, #0
1a00322e:	d0dd      	beq.n	1a0031ec <Chip_UART_SetBaudFDR+0x30>
1a003230:	e7e1      	b.n	1a0031f6 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003232:	4617      	mov	r7, r2
			sd = d;
1a003234:	9501      	str	r5, [sp, #4]
			sm = m;
1a003236:	46a2      	mov	sl, r4
			sdiv = div;
1a003238:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00323a:	3401      	adds	r4, #1
1a00323c:	b11f      	cbz	r7, 1a003246 <Chip_UART_SetBaudFDR+0x8a>
1a00323e:	2c0f      	cmp	r4, #15
1a003240:	d801      	bhi.n	1a003246 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003242:	2500      	movs	r5, #0
1a003244:	e7d8      	b.n	1a0031f8 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003246:	f1b9 0f00 	cmp.w	r9, #0
1a00324a:	d024      	beq.n	1a003296 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00324c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003254:	f8cb 300c 	str.w	r3, [fp, #12]
1a003258:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a00325c:	f8cb 3000 	str.w	r3, [fp]
1a003260:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003264:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003268:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00326c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003270:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003274:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003278:	b2db      	uxtb	r3, r3
1a00327a:	9901      	ldr	r1, [sp, #4]
1a00327c:	f001 020f 	and.w	r2, r1, #15
1a003280:	4313      	orrs	r3, r2
1a003282:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003286:	0933      	lsrs	r3, r6, #4
1a003288:	fb0a f303 	mul.w	r3, sl, r3
1a00328c:	448a      	add	sl, r1
1a00328e:	fb09 f90a 	mul.w	r9, r9, sl
1a003292:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003296:	4648      	mov	r0, r9
1a003298:	b003      	add	sp, #12
1a00329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00329e:	bf00      	nop
1a0032a0:	1a004290 	.word	0x1a004290

1a0032a4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0032a4:	4b03      	ldr	r3, [pc, #12]	; (1a0032b4 <Chip_ADC_GetClockIndex+0x10>)
1a0032a6:	4298      	cmp	r0, r3
1a0032a8:	d001      	beq.n	1a0032ae <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0032aa:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0032ac:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0032ae:	2004      	movs	r0, #4
1a0032b0:	4770      	bx	lr
1a0032b2:	bf00      	nop
1a0032b4:	400e4000 	.word	0x400e4000

1a0032b8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0032b8:	b570      	push	{r4, r5, r6, lr}
1a0032ba:	460d      	mov	r5, r1
1a0032bc:	4614      	mov	r4, r2
1a0032be:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0032c0:	f7ff fff0 	bl	1a0032a4 <Chip_ADC_GetClockIndex>
1a0032c4:	f000 fafe 	bl	1a0038c4 <Chip_Clock_GetRate>
	if (burstMode) {
1a0032c8:	b965      	cbnz	r5, 1a0032e4 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0032ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0032ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0032d2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0032d6:	0064      	lsls	r4, r4, #1
1a0032d8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0032dc:	b2c0      	uxtb	r0, r0
1a0032de:	3801      	subs	r0, #1
	return div;
}
1a0032e0:	b2c0      	uxtb	r0, r0
1a0032e2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0032e4:	fb04 f406 	mul.w	r4, r4, r6
1a0032e8:	e7f3      	b.n	1a0032d2 <getClkDiv+0x1a>
1a0032ea:	Address 0x000000001a0032ea is out of bounds.


1a0032ec <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0032ec:	b538      	push	{r3, r4, r5, lr}
1a0032ee:	4605      	mov	r5, r0
1a0032f0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0032f2:	f7ff ffd7 	bl	1a0032a4 <Chip_ADC_GetClockIndex>
1a0032f6:	2301      	movs	r3, #1
1a0032f8:	461a      	mov	r2, r3
1a0032fa:	4619      	mov	r1, r3
1a0032fc:	f000 faaa 	bl	1a003854 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003300:	2100      	movs	r1, #0
1a003302:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003304:	4a08      	ldr	r2, [pc, #32]	; (1a003328 <Chip_ADC_Init+0x3c>)
1a003306:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003308:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00330a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00330c:	230b      	movs	r3, #11
1a00330e:	4628      	mov	r0, r5
1a003310:	f7ff ffd2 	bl	1a0032b8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003314:	0200      	lsls	r0, r0, #8
1a003316:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00331a:	7920      	ldrb	r0, [r4, #4]
1a00331c:	0440      	lsls	r0, r0, #17
1a00331e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003322:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003324:	6028      	str	r0, [r5, #0]
}
1a003326:	bd38      	pop	{r3, r4, r5, pc}
1a003328:	00061a80 	.word	0x00061a80

1a00332c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00332c:	b570      	push	{r4, r5, r6, lr}
1a00332e:	4605      	mov	r5, r0
1a003330:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003332:	6804      	ldr	r4, [r0, #0]
1a003334:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003338:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00333c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00333e:	790b      	ldrb	r3, [r1, #4]
1a003340:	f1c3 030b 	rsb	r3, r3, #11
1a003344:	b2db      	uxtb	r3, r3
1a003346:	7949      	ldrb	r1, [r1, #5]
1a003348:	f7ff ffb6 	bl	1a0032b8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00334c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003350:	7930      	ldrb	r0, [r6, #4]
1a003352:	0440      	lsls	r0, r0, #17
1a003354:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003358:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00335a:	6028      	str	r0, [r5, #0]
}
1a00335c:	bd70      	pop	{r4, r5, r6, pc}

1a00335e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00335e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003360:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003362:	680a      	ldr	r2, [r1, #0]
1a003364:	f7ff ffe2 	bl	1a00332c <Chip_ADC_SetSampleRate>
}
1a003368:	bd08      	pop	{r3, pc}
1a00336a:	Address 0x000000001a00336a is out of bounds.


1a00336c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00336c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00336e:	2069      	movs	r0, #105	; 0x69
1a003370:	f000 faa8 	bl	1a0038c4 <Chip_Clock_GetRate>
1a003374:	4b01      	ldr	r3, [pc, #4]	; (1a00337c <SystemCoreClockUpdate+0x10>)
1a003376:	6018      	str	r0, [r3, #0]
}
1a003378:	bd08      	pop	{r3, pc}
1a00337a:	bf00      	nop
1a00337c:	10002b7c 	.word	0x10002b7c

1a003380 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003380:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003382:	680b      	ldr	r3, [r1, #0]
1a003384:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003388:	d002      	beq.n	1a003390 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00338a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00338e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003390:	4607      	mov	r7, r0
1a003392:	2501      	movs	r5, #1
1a003394:	e03b      	b.n	1a00340e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003396:	694b      	ldr	r3, [r1, #20]
1a003398:	fb03 f302 	mul.w	r3, r3, r2
1a00339c:	fbb3 f3f5 	udiv	r3, r3, r5
1a0033a0:	e014      	b.n	1a0033cc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0033a2:	461c      	mov	r4, r3
1a0033a4:	e020      	b.n	1a0033e8 <pll_calc_divs+0x68>
		return -val;
1a0033a6:	f1cc 0c00 	rsb	ip, ip, #0
1a0033aa:	e020      	b.n	1a0033ee <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0033ac:	3201      	adds	r2, #1
1a0033ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0033b2:	dc26      	bgt.n	1a003402 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0033b4:	680c      	ldr	r4, [r1, #0]
1a0033b6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0033ba:	d0ec      	beq.n	1a003396 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0033bc:	1c73      	adds	r3, r6, #1
1a0033be:	fa02 fc03 	lsl.w	ip, r2, r3
1a0033c2:	694b      	ldr	r3, [r1, #20]
1a0033c4:	fb03 f30c 	mul.w	r3, r3, ip
1a0033c8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0033cc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00341c <pll_calc_divs+0x9c>
1a0033d0:	4563      	cmp	r3, ip
1a0033d2:	d9eb      	bls.n	1a0033ac <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0033d4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003420 <pll_calc_divs+0xa0>
1a0033d8:	4563      	cmp	r3, ip
1a0033da:	d812      	bhi.n	1a003402 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0033dc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0033e0:	d1df      	bne.n	1a0033a2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0033e2:	1c74      	adds	r4, r6, #1
1a0033e4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0033e8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0033ec:	d4db      	bmi.n	1a0033a6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0033ee:	4567      	cmp	r7, ip
1a0033f0:	d9dc      	bls.n	1a0033ac <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0033f2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0033f4:	1c77      	adds	r7, r6, #1
1a0033f6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0033f8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0033fa:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0033fc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0033fe:	4667      	mov	r7, ip
1a003400:	e7d4      	b.n	1a0033ac <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003402:	3601      	adds	r6, #1
1a003404:	2e03      	cmp	r6, #3
1a003406:	dc01      	bgt.n	1a00340c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a003408:	2201      	movs	r2, #1
1a00340a:	e7d0      	b.n	1a0033ae <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00340c:	3501      	adds	r5, #1
1a00340e:	2d04      	cmp	r5, #4
1a003410:	dc01      	bgt.n	1a003416 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003412:	2600      	movs	r6, #0
1a003414:	e7f6      	b.n	1a003404 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a003416:	bcf0      	pop	{r4, r5, r6, r7}
1a003418:	4770      	bx	lr
1a00341a:	bf00      	nop
1a00341c:	094c5eff 	.word	0x094c5eff
1a003420:	1312d000 	.word	0x1312d000

1a003424 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003424:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003426:	b099      	sub	sp, #100	; 0x64
1a003428:	4605      	mov	r5, r0
1a00342a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00342c:	225c      	movs	r2, #92	; 0x5c
1a00342e:	2100      	movs	r1, #0
1a003430:	a801      	add	r0, sp, #4
1a003432:	f000 fdce 	bl	1a003fd2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003436:	2380      	movs	r3, #128	; 0x80
1a003438:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00343a:	6963      	ldr	r3, [r4, #20]
1a00343c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00343e:	7923      	ldrb	r3, [r4, #4]
1a003440:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003444:	4669      	mov	r1, sp
1a003446:	4628      	mov	r0, r5
1a003448:	f7ff ff9a 	bl	1a003380 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00344c:	9b06      	ldr	r3, [sp, #24]
1a00344e:	42ab      	cmp	r3, r5
1a003450:	d027      	beq.n	1a0034a2 <pll_get_frac+0x7e>
	if (val < 0)
1a003452:	1aeb      	subs	r3, r5, r3
1a003454:	d42e      	bmi.n	1a0034b4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003456:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003458:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00345a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00345e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003460:	6963      	ldr	r3, [r4, #20]
1a003462:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003464:	7923      	ldrb	r3, [r4, #4]
1a003466:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00346a:	a910      	add	r1, sp, #64	; 0x40
1a00346c:	4628      	mov	r0, r5
1a00346e:	f7ff ff87 	bl	1a003380 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003472:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003474:	42ab      	cmp	r3, r5
1a003476:	d01f      	beq.n	1a0034b8 <pll_get_frac+0x94>
	if (val < 0)
1a003478:	1aeb      	subs	r3, r5, r3
1a00347a:	d425      	bmi.n	1a0034c8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00347c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00347e:	4b2b      	ldr	r3, [pc, #172]	; (1a00352c <pll_get_frac+0x108>)
1a003480:	429d      	cmp	r5, r3
1a003482:	d923      	bls.n	1a0034cc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a003486:	1aed      	subs	r5, r5, r3
1a003488:	d433      	bmi.n	1a0034f2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00348a:	42ae      	cmp	r6, r5
1a00348c:	dc3b      	bgt.n	1a003506 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00348e:	42be      	cmp	r6, r7
1a003490:	dc31      	bgt.n	1a0034f6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003492:	466d      	mov	r5, sp
1a003494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003498:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00349c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0034a0:	e006      	b.n	1a0034b0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0034a2:	466d      	mov	r5, sp
1a0034a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0034b0:	b019      	add	sp, #100	; 0x64
1a0034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0034b4:	425b      	negs	r3, r3
1a0034b6:	e7ce      	b.n	1a003456 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0034b8:	ad10      	add	r5, sp, #64	; 0x40
1a0034ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0034c6:	e7f3      	b.n	1a0034b0 <pll_get_frac+0x8c>
		return -val;
1a0034c8:	425b      	negs	r3, r3
1a0034ca:	e7d7      	b.n	1a00347c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0034cc:	2340      	movs	r3, #64	; 0x40
1a0034ce:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0034d0:	6963      	ldr	r3, [r4, #20]
1a0034d2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0034d4:	a908      	add	r1, sp, #32
1a0034d6:	4628      	mov	r0, r5
1a0034d8:	f7ff ff52 	bl	1a003380 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0034dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0034de:	42ab      	cmp	r3, r5
1a0034e0:	d1d0      	bne.n	1a003484 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0034e2:	ad08      	add	r5, sp, #32
1a0034e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0034f0:	e7de      	b.n	1a0034b0 <pll_get_frac+0x8c>
		return -val;
1a0034f2:	426d      	negs	r5, r5
1a0034f4:	e7c9      	b.n	1a00348a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0034f6:	ad10      	add	r5, sp, #64	; 0x40
1a0034f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003504:	e7d4      	b.n	1a0034b0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003506:	42af      	cmp	r7, r5
1a003508:	db07      	blt.n	1a00351a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00350a:	ad08      	add	r5, sp, #32
1a00350c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00350e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003510:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003518:	e7ca      	b.n	1a0034b0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00351a:	ad10      	add	r5, sp, #64	; 0x40
1a00351c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00351e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003520:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003528:	e7c2      	b.n	1a0034b0 <pll_get_frac+0x8c>
1a00352a:	bf00      	nop
1a00352c:	068e7780 	.word	0x068e7780

1a003530 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003530:	b430      	push	{r4, r5}
1a003532:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003534:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003536:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003538:	e000      	b.n	1a00353c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00353a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00353c:	281c      	cmp	r0, #28
1a00353e:	d118      	bne.n	1a003572 <Chip_Clock_FindBaseClock+0x42>
1a003540:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003544:	0051      	lsls	r1, r2, #1
1a003546:	4a0c      	ldr	r2, [pc, #48]	; (1a003578 <Chip_Clock_FindBaseClock+0x48>)
1a003548:	440a      	add	r2, r1
1a00354a:	7914      	ldrb	r4, [r2, #4]
1a00354c:	4284      	cmp	r4, r0
1a00354e:	d010      	beq.n	1a003572 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003550:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003554:	004a      	lsls	r2, r1, #1
1a003556:	4908      	ldr	r1, [pc, #32]	; (1a003578 <Chip_Clock_FindBaseClock+0x48>)
1a003558:	5a8a      	ldrh	r2, [r1, r2]
1a00355a:	42aa      	cmp	r2, r5
1a00355c:	d8ed      	bhi.n	1a00353a <Chip_Clock_FindBaseClock+0xa>
1a00355e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003562:	0051      	lsls	r1, r2, #1
1a003564:	4a04      	ldr	r2, [pc, #16]	; (1a003578 <Chip_Clock_FindBaseClock+0x48>)
1a003566:	440a      	add	r2, r1
1a003568:	8852      	ldrh	r2, [r2, #2]
1a00356a:	42aa      	cmp	r2, r5
1a00356c:	d3e5      	bcc.n	1a00353a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00356e:	4620      	mov	r0, r4
1a003570:	e7e4      	b.n	1a00353c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003572:	bc30      	pop	{r4, r5}
1a003574:	4770      	bx	lr
1a003576:	bf00      	nop
1a003578:	1a0042ac 	.word	0x1a0042ac

1a00357c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00357c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00357e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003582:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003584:	4a0d      	ldr	r2, [pc, #52]	; (1a0035bc <Chip_Clock_EnableCrystal+0x40>)
1a003586:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003588:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00358c:	6992      	ldr	r2, [r2, #24]
1a00358e:	428a      	cmp	r2, r1
1a003590:	d001      	beq.n	1a003596 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003592:	4a0a      	ldr	r2, [pc, #40]	; (1a0035bc <Chip_Clock_EnableCrystal+0x40>)
1a003594:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003596:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00359a:	4a09      	ldr	r2, [pc, #36]	; (1a0035c0 <Chip_Clock_EnableCrystal+0x44>)
1a00359c:	6811      	ldr	r1, [r2, #0]
1a00359e:	4a09      	ldr	r2, [pc, #36]	; (1a0035c4 <Chip_Clock_EnableCrystal+0x48>)
1a0035a0:	4291      	cmp	r1, r2
1a0035a2:	d901      	bls.n	1a0035a8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0035a4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0035a8:	4a04      	ldr	r2, [pc, #16]	; (1a0035bc <Chip_Clock_EnableCrystal+0x40>)
1a0035aa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0035ac:	9b01      	ldr	r3, [sp, #4]
1a0035ae:	1e5a      	subs	r2, r3, #1
1a0035b0:	9201      	str	r2, [sp, #4]
1a0035b2:	2b00      	cmp	r3, #0
1a0035b4:	d1fa      	bne.n	1a0035ac <Chip_Clock_EnableCrystal+0x30>
}
1a0035b6:	b002      	add	sp, #8
1a0035b8:	4770      	bx	lr
1a0035ba:	bf00      	nop
1a0035bc:	40050000 	.word	0x40050000
1a0035c0:	1a004214 	.word	0x1a004214
1a0035c4:	01312cff 	.word	0x01312cff

1a0035c8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0035c8:	3012      	adds	r0, #18
1a0035ca:	4b05      	ldr	r3, [pc, #20]	; (1a0035e0 <Chip_Clock_GetDividerSource+0x18>)
1a0035cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0035d0:	f010 0f01 	tst.w	r0, #1
1a0035d4:	d102      	bne.n	1a0035dc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0035d6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0035da:	4770      	bx	lr
		return CLKINPUT_PD;
1a0035dc:	2011      	movs	r0, #17
}
1a0035de:	4770      	bx	lr
1a0035e0:	40050000 	.word	0x40050000

1a0035e4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0035e4:	f100 0212 	add.w	r2, r0, #18
1a0035e8:	4b03      	ldr	r3, [pc, #12]	; (1a0035f8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0035ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0035ee:	4b03      	ldr	r3, [pc, #12]	; (1a0035fc <Chip_Clock_GetDividerDivisor+0x18>)
1a0035f0:	5c18      	ldrb	r0, [r3, r0]
}
1a0035f2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0035f6:	4770      	bx	lr
1a0035f8:	40050000 	.word	0x40050000
1a0035fc:	1a0042a4 	.word	0x1a0042a4

1a003600 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003600:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003602:	2810      	cmp	r0, #16
1a003604:	d80a      	bhi.n	1a00361c <Chip_Clock_GetClockInputHz+0x1c>
1a003606:	e8df f000 	tbb	[pc, r0]
1a00360a:	0b42      	.short	0x0b42
1a00360c:	091f160d 	.word	0x091f160d
1a003610:	2b282522 	.word	0x2b282522
1a003614:	322e0909 	.word	0x322e0909
1a003618:	3a36      	.short	0x3a36
1a00361a:	3e          	.byte	0x3e
1a00361b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00361c:	2000      	movs	r0, #0
1a00361e:	e038      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003620:	481e      	ldr	r0, [pc, #120]	; (1a00369c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003622:	e036      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003624:	4b1e      	ldr	r3, [pc, #120]	; (1a0036a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003626:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00362a:	f003 0307 	and.w	r3, r3, #7
1a00362e:	2b04      	cmp	r3, #4
1a003630:	d130      	bne.n	1a003694 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003632:	2000      	movs	r0, #0
1a003634:	e02d      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003636:	4b1a      	ldr	r3, [pc, #104]	; (1a0036a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003638:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00363c:	f003 0307 	and.w	r3, r3, #7
1a003640:	2b04      	cmp	r3, #4
1a003642:	d029      	beq.n	1a003698 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003644:	4817      	ldr	r0, [pc, #92]	; (1a0036a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003646:	e024      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003648:	4b17      	ldr	r3, [pc, #92]	; (1a0036a8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00364a:	6818      	ldr	r0, [r3, #0]
		break;
1a00364c:	e021      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00364e:	4b17      	ldr	r3, [pc, #92]	; (1a0036ac <Chip_Clock_GetClockInputHz+0xac>)
1a003650:	6818      	ldr	r0, [r3, #0]
		break;
1a003652:	e01e      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003654:	4b16      	ldr	r3, [pc, #88]	; (1a0036b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003656:	6818      	ldr	r0, [r3, #0]
		break;
1a003658:	e01b      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00365a:	4b15      	ldr	r3, [pc, #84]	; (1a0036b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00365c:	6858      	ldr	r0, [r3, #4]
		break;
1a00365e:	e018      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003660:	f000 f86a 	bl	1a003738 <Chip_Clock_GetMainPLLHz>
		break;
1a003664:	e015      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003666:	2100      	movs	r1, #0
1a003668:	f000 f89c 	bl	1a0037a4 <Chip_Clock_GetDivRate>
		break;
1a00366c:	e011      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00366e:	2101      	movs	r1, #1
1a003670:	f000 f898 	bl	1a0037a4 <Chip_Clock_GetDivRate>
		break;
1a003674:	e00d      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003676:	2102      	movs	r1, #2
1a003678:	f000 f894 	bl	1a0037a4 <Chip_Clock_GetDivRate>
		break;
1a00367c:	e009      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00367e:	2103      	movs	r1, #3
1a003680:	f000 f890 	bl	1a0037a4 <Chip_Clock_GetDivRate>
		break;
1a003684:	e005      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003686:	2104      	movs	r1, #4
1a003688:	f000 f88c 	bl	1a0037a4 <Chip_Clock_GetDivRate>
		break;
1a00368c:	e001      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00368e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003692:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003694:	4803      	ldr	r0, [pc, #12]	; (1a0036a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003696:	e7fc      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a003698:	4806      	ldr	r0, [pc, #24]	; (1a0036b4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00369a:	e7fa      	b.n	1a003692 <Chip_Clock_GetClockInputHz+0x92>
1a00369c:	00b71b00 	.word	0x00b71b00
1a0036a0:	40043000 	.word	0x40043000
1a0036a4:	017d7840 	.word	0x017d7840
1a0036a8:	1a0041e8 	.word	0x1a0041e8
1a0036ac:	1a004214 	.word	0x1a004214
1a0036b0:	10002b30 	.word	0x10002b30
1a0036b4:	02faf080 	.word	0x02faf080

1a0036b8 <Chip_Clock_CalcMainPLLValue>:
{
1a0036b8:	b538      	push	{r3, r4, r5, lr}
1a0036ba:	4605      	mov	r5, r0
1a0036bc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0036be:	7908      	ldrb	r0, [r1, #4]
1a0036c0:	f7ff ff9e 	bl	1a003600 <Chip_Clock_GetClockInputHz>
1a0036c4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0036c6:	4b19      	ldr	r3, [pc, #100]	; (1a00372c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0036c8:	442b      	add	r3, r5
1a0036ca:	4a19      	ldr	r2, [pc, #100]	; (1a003730 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0036cc:	4293      	cmp	r3, r2
1a0036ce:	d821      	bhi.n	1a003714 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0036d0:	b318      	cbz	r0, 1a00371a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0036d2:	2380      	movs	r3, #128	; 0x80
1a0036d4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0036d6:	2300      	movs	r3, #0
1a0036d8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0036da:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0036dc:	fbb5 f3f0 	udiv	r3, r5, r0
1a0036e0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0036e2:	4a14      	ldr	r2, [pc, #80]	; (1a003734 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0036e4:	4295      	cmp	r5, r2
1a0036e6:	d903      	bls.n	1a0036f0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0036e8:	fb03 f000 	mul.w	r0, r3, r0
1a0036ec:	42a8      	cmp	r0, r5
1a0036ee:	d007      	beq.n	1a003700 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0036f0:	4621      	mov	r1, r4
1a0036f2:	4628      	mov	r0, r5
1a0036f4:	f7ff fe96 	bl	1a003424 <pll_get_frac>
		if (!ppll->nsel) {
1a0036f8:	68a3      	ldr	r3, [r4, #8]
1a0036fa:	b18b      	cbz	r3, 1a003720 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0036fc:	3b01      	subs	r3, #1
1a0036fe:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003700:	6923      	ldr	r3, [r4, #16]
1a003702:	b183      	cbz	r3, 1a003726 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003704:	68e2      	ldr	r2, [r4, #12]
1a003706:	b10a      	cbz	r2, 1a00370c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003708:	3a01      	subs	r2, #1
1a00370a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00370c:	3b01      	subs	r3, #1
1a00370e:	6123      	str	r3, [r4, #16]
	return 0;
1a003710:	2000      	movs	r0, #0
}
1a003712:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003718:	e7fb      	b.n	1a003712 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00371a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00371e:	e7f8      	b.n	1a003712 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003724:	e7f5      	b.n	1a003712 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00372a:	e7f2      	b.n	1a003712 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00372c:	ff6b3a10 	.word	0xff6b3a10
1a003730:	0b940510 	.word	0x0b940510
1a003734:	094c5eff 	.word	0x094c5eff

1a003738 <Chip_Clock_GetMainPLLHz>:
{
1a003738:	b530      	push	{r4, r5, lr}
1a00373a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00373c:	4d17      	ldr	r5, [pc, #92]	; (1a00379c <Chip_Clock_GetMainPLLHz+0x64>)
1a00373e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003740:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003744:	f7ff ff5c 	bl	1a003600 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003748:	4b15      	ldr	r3, [pc, #84]	; (1a0037a0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00374a:	681b      	ldr	r3, [r3, #0]
1a00374c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00374e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003750:	f013 0f01 	tst.w	r3, #1
1a003754:	d01f      	beq.n	1a003796 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003756:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00375a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00375e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003762:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003766:	3301      	adds	r3, #1
	n = nsel + 1;
1a003768:	3201      	adds	r2, #1
	p = ptab[psel];
1a00376a:	f10d 0c08 	add.w	ip, sp, #8
1a00376e:	4461      	add	r1, ip
1a003770:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003774:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003778:	d108      	bne.n	1a00378c <Chip_Clock_GetMainPLLHz+0x54>
1a00377a:	b93d      	cbnz	r5, 1a00378c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00377c:	0049      	lsls	r1, r1, #1
1a00377e:	fbb3 f3f1 	udiv	r3, r3, r1
1a003782:	fbb0 f0f2 	udiv	r0, r0, r2
1a003786:	fb00 f003 	mul.w	r0, r0, r3
1a00378a:	e005      	b.n	1a003798 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a00378c:	fbb0 f0f2 	udiv	r0, r0, r2
1a003790:	fb03 f000 	mul.w	r0, r3, r0
1a003794:	e000      	b.n	1a003798 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003796:	2000      	movs	r0, #0
}
1a003798:	b003      	add	sp, #12
1a00379a:	bd30      	pop	{r4, r5, pc}
1a00379c:	40050000 	.word	0x40050000
1a0037a0:	1a0042a0 	.word	0x1a0042a0

1a0037a4 <Chip_Clock_GetDivRate>:
{
1a0037a4:	b538      	push	{r3, r4, r5, lr}
1a0037a6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0037a8:	4608      	mov	r0, r1
1a0037aa:	f7ff ff0d 	bl	1a0035c8 <Chip_Clock_GetDividerSource>
1a0037ae:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0037b0:	4620      	mov	r0, r4
1a0037b2:	f7ff ff17 	bl	1a0035e4 <Chip_Clock_GetDividerDivisor>
1a0037b6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0037b8:	4628      	mov	r0, r5
1a0037ba:	f7ff ff21 	bl	1a003600 <Chip_Clock_GetClockInputHz>
1a0037be:	3401      	adds	r4, #1
}
1a0037c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0037c4:	bd38      	pop	{r3, r4, r5, pc}
1a0037c6:	Address 0x000000001a0037c6 is out of bounds.


1a0037c8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0037c8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0037ca:	f100 0416 	add.w	r4, r0, #22
1a0037ce:	00a4      	lsls	r4, r4, #2
1a0037d0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0037d4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0037d8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0037da:	281b      	cmp	r0, #27
1a0037dc:	d813      	bhi.n	1a003806 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0037de:	2911      	cmp	r1, #17
1a0037e0:	d01a      	beq.n	1a003818 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0037e2:	4d0e      	ldr	r5, [pc, #56]	; (1a00381c <Chip_Clock_SetBaseClock+0x54>)
1a0037e4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0037e6:	b10a      	cbz	r2, 1a0037ec <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0037e8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0037ec:	b10b      	cbz	r3, 1a0037f2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0037ee:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0037f2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0037f6:	3016      	adds	r0, #22
1a0037f8:	0080      	lsls	r0, r0, #2
1a0037fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0037fe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003802:	6045      	str	r5, [r0, #4]
1a003804:	e008      	b.n	1a003818 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003806:	f044 0401 	orr.w	r4, r4, #1
1a00380a:	3016      	adds	r0, #22
1a00380c:	0080      	lsls	r0, r0, #2
1a00380e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003812:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003816:	6044      	str	r4, [r0, #4]
	}
}
1a003818:	bc30      	pop	{r4, r5}
1a00381a:	4770      	bx	lr
1a00381c:	e0fff7fe 	.word	0xe0fff7fe

1a003820 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003820:	281b      	cmp	r0, #27
1a003822:	d80c      	bhi.n	1a00383e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003824:	3016      	adds	r0, #22
1a003826:	0080      	lsls	r0, r0, #2
1a003828:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00382c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003830:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003832:	f010 0f01 	tst.w	r0, #1
1a003836:	d104      	bne.n	1a003842 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003838:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00383c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00383e:	2011      	movs	r0, #17
1a003840:	4770      	bx	lr
		return CLKINPUT_PD;
1a003842:	2011      	movs	r0, #17
}
1a003844:	4770      	bx	lr

1a003846 <Chip_Clock_GetBaseClocktHz>:
{
1a003846:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003848:	f7ff ffea 	bl	1a003820 <Chip_Clock_GetBaseClock>
1a00384c:	f7ff fed8 	bl	1a003600 <Chip_Clock_GetClockInputHz>
}
1a003850:	bd08      	pop	{r3, pc}
1a003852:	Address 0x000000001a003852 is out of bounds.


1a003854 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003854:	b969      	cbnz	r1, 1a003872 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003856:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003858:	b10a      	cbz	r2, 1a00385e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00385a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00385e:	2b02      	cmp	r3, #2
1a003860:	d009      	beq.n	1a003876 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003862:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003866:	d209      	bcs.n	1a00387c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003868:	3020      	adds	r0, #32
1a00386a:	4b07      	ldr	r3, [pc, #28]	; (1a003888 <Chip_Clock_EnableOpts+0x34>)
1a00386c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003870:	4770      	bx	lr
		reg |= (1 << 1);
1a003872:	2103      	movs	r1, #3
1a003874:	e7f0      	b.n	1a003858 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003876:	f041 0120 	orr.w	r1, r1, #32
1a00387a:	e7f2      	b.n	1a003862 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00387c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003880:	4b02      	ldr	r3, [pc, #8]	; (1a00388c <Chip_Clock_EnableOpts+0x38>)
1a003882:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003886:	4770      	bx	lr
1a003888:	40051000 	.word	0x40051000
1a00388c:	40052000 	.word	0x40052000

1a003890 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003890:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003894:	d208      	bcs.n	1a0038a8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003896:	4a09      	ldr	r2, [pc, #36]	; (1a0038bc <Chip_Clock_Enable+0x2c>)
1a003898:	3020      	adds	r0, #32
1a00389a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00389e:	f043 0301 	orr.w	r3, r3, #1
1a0038a2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0038a6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0038a8:	4a05      	ldr	r2, [pc, #20]	; (1a0038c0 <Chip_Clock_Enable+0x30>)
1a0038aa:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0038ae:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0038b2:	f043 0301 	orr.w	r3, r3, #1
1a0038b6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0038ba:	4770      	bx	lr
1a0038bc:	40051000 	.word	0x40051000
1a0038c0:	40052000 	.word	0x40052000

1a0038c4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0038c4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0038c6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0038ca:	d309      	bcc.n	1a0038e0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0038cc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0038d0:	4a0d      	ldr	r2, [pc, #52]	; (1a003908 <Chip_Clock_GetRate+0x44>)
1a0038d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0038d6:	f014 0f01 	tst.w	r4, #1
1a0038da:	d107      	bne.n	1a0038ec <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0038dc:	2000      	movs	r0, #0
	}

	return rate;
}
1a0038de:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0038e0:	f100 0320 	add.w	r3, r0, #32
1a0038e4:	4a09      	ldr	r2, [pc, #36]	; (1a00390c <Chip_Clock_GetRate+0x48>)
1a0038e6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0038ea:	e7f4      	b.n	1a0038d6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0038ec:	f7ff fe20 	bl	1a003530 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0038f0:	f7ff ffa9 	bl	1a003846 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0038f4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0038f8:	d103      	bne.n	1a003902 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0038fa:	2301      	movs	r3, #1
		rate = rate / div;
1a0038fc:	fbb0 f0f3 	udiv	r0, r0, r3
1a003900:	e7ed      	b.n	1a0038de <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003902:	2302      	movs	r3, #2
1a003904:	e7fa      	b.n	1a0038fc <Chip_Clock_GetRate+0x38>
1a003906:	bf00      	nop
1a003908:	40052000 	.word	0x40052000
1a00390c:	40051000 	.word	0x40051000

1a003910 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a003910:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a003912:	4b0f      	ldr	r3, [pc, #60]	; (1a003950 <fpuInit+0x40>)
1a003914:	681b      	ldr	r3, [r3, #0]
1a003916:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a003918:	4b0e      	ldr	r3, [pc, #56]	; (1a003954 <fpuInit+0x44>)
1a00391a:	681b      	ldr	r3, [r3, #0]
1a00391c:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00391e:	9a02      	ldr	r2, [sp, #8]
1a003920:	4b0d      	ldr	r3, [pc, #52]	; (1a003958 <fpuInit+0x48>)
1a003922:	429a      	cmp	r2, r3
1a003924:	d00c      	beq.n	1a003940 <fpuInit+0x30>
1a003926:	2300      	movs	r3, #0

	if (vfpPresent) {
1a003928:	b143      	cbz	r3, 1a00393c <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a00392a:	4a0c      	ldr	r2, [pc, #48]	; (1a00395c <fpuInit+0x4c>)
1a00392c:	6813      	ldr	r3, [r2, #0]
1a00392e:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a003930:	9b03      	ldr	r3, [sp, #12]
1a003932:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003936:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a003938:	9b03      	ldr	r3, [sp, #12]
1a00393a:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a00393c:	b004      	add	sp, #16
1a00393e:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003940:	9a01      	ldr	r2, [sp, #4]
1a003942:	4b07      	ldr	r3, [pc, #28]	; (1a003960 <fpuInit+0x50>)
1a003944:	429a      	cmp	r2, r3
1a003946:	d001      	beq.n	1a00394c <fpuInit+0x3c>
1a003948:	2300      	movs	r3, #0
1a00394a:	e7ed      	b.n	1a003928 <fpuInit+0x18>
1a00394c:	2301      	movs	r3, #1
1a00394e:	e7eb      	b.n	1a003928 <fpuInit+0x18>
1a003950:	e000ef40 	.word	0xe000ef40
1a003954:	e000ef44 	.word	0xe000ef44
1a003958:	10110021 	.word	0x10110021
1a00395c:	e000ed88 	.word	0xe000ed88
1a003960:	11000011 	.word	0x11000011

1a003964 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003964:	4770      	bx	lr
1a003966:	Address 0x000000001a003966 is out of bounds.


1a003968 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003968:	b570      	push	{r4, r5, r6, lr}
1a00396a:	b08a      	sub	sp, #40	; 0x28
1a00396c:	4605      	mov	r5, r0
1a00396e:	460e      	mov	r6, r1
1a003970:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003972:	f242 7310 	movw	r3, #10000	; 0x2710
1a003976:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003978:	2806      	cmp	r0, #6
1a00397a:	d018      	beq.n	1a0039ae <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00397c:	2300      	movs	r3, #0
1a00397e:	2201      	movs	r2, #1
1a003980:	4629      	mov	r1, r5
1a003982:	2004      	movs	r0, #4
1a003984:	f7ff ff20 	bl	1a0037c8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003988:	4a49      	ldr	r2, [pc, #292]	; (1a003ab0 <Chip_SetupCoreClock+0x148>)
1a00398a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00398c:	f043 0301 	orr.w	r3, r3, #1
1a003990:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003992:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003996:	a901      	add	r1, sp, #4
1a003998:	4630      	mov	r0, r6
1a00399a:	f7ff fe8d 	bl	1a0036b8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00399e:	4b45      	ldr	r3, [pc, #276]	; (1a003ab4 <Chip_SetupCoreClock+0x14c>)
1a0039a0:	429e      	cmp	r6, r3
1a0039a2:	d916      	bls.n	1a0039d2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0039a4:	9b01      	ldr	r3, [sp, #4]
1a0039a6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0039aa:	d003      	beq.n	1a0039b4 <Chip_SetupCoreClock+0x4c>
1a0039ac:	e7fe      	b.n	1a0039ac <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0039ae:	f7ff fde5 	bl	1a00357c <Chip_Clock_EnableCrystal>
1a0039b2:	e7e3      	b.n	1a00397c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0039b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0039b8:	d005      	beq.n	1a0039c6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0039ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0039be:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0039c0:	2500      	movs	r5, #0
			direct = 1;
1a0039c2:	2601      	movs	r6, #1
1a0039c4:	e007      	b.n	1a0039d6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0039c6:	9b04      	ldr	r3, [sp, #16]
1a0039c8:	3301      	adds	r3, #1
1a0039ca:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0039cc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0039ce:	2600      	movs	r6, #0
1a0039d0:	e001      	b.n	1a0039d6 <Chip_SetupCoreClock+0x6e>
1a0039d2:	2500      	movs	r5, #0
1a0039d4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0039d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0039da:	9b01      	ldr	r3, [sp, #4]
1a0039dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0039e0:	9a05      	ldr	r2, [sp, #20]
1a0039e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0039e6:	9a03      	ldr	r2, [sp, #12]
1a0039e8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0039ec:	9a04      	ldr	r2, [sp, #16]
1a0039ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0039f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0039f6:	4a2e      	ldr	r2, [pc, #184]	; (1a003ab0 <Chip_SetupCoreClock+0x148>)
1a0039f8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0039fa:	4b2d      	ldr	r3, [pc, #180]	; (1a003ab0 <Chip_SetupCoreClock+0x148>)
1a0039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0039fe:	f013 0f01 	tst.w	r3, #1
1a003a02:	d0fa      	beq.n	1a0039fa <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003a04:	2300      	movs	r3, #0
1a003a06:	2201      	movs	r2, #1
1a003a08:	2109      	movs	r1, #9
1a003a0a:	2004      	movs	r0, #4
1a003a0c:	f7ff fedc 	bl	1a0037c8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003a10:	b1fe      	cbz	r6, 1a003a52 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003a12:	f242 7310 	movw	r3, #10000	; 0x2710
1a003a16:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a1a:	1e5a      	subs	r2, r3, #1
1a003a1c:	9209      	str	r2, [sp, #36]	; 0x24
1a003a1e:	2b00      	cmp	r3, #0
1a003a20:	d1fa      	bne.n	1a003a18 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003a22:	9b01      	ldr	r3, [sp, #4]
1a003a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003a28:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003a2a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003a2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003a32:	9a05      	ldr	r2, [sp, #20]
1a003a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003a38:	9a03      	ldr	r2, [sp, #12]
1a003a3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003a3e:	9a04      	ldr	r2, [sp, #16]
1a003a40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003a48:	4a19      	ldr	r2, [pc, #100]	; (1a003ab0 <Chip_SetupCoreClock+0x148>)
1a003a4a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003a4c:	b36c      	cbz	r4, 1a003aaa <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003a4e:	2400      	movs	r4, #0
1a003a50:	e029      	b.n	1a003aa6 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003a52:	2d00      	cmp	r5, #0
1a003a54:	d0fa      	beq.n	1a003a4c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003a56:	f242 7310 	movw	r3, #10000	; 0x2710
1a003a5a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a5e:	1e5a      	subs	r2, r3, #1
1a003a60:	9209      	str	r2, [sp, #36]	; 0x24
1a003a62:	2b00      	cmp	r3, #0
1a003a64:	d1fa      	bne.n	1a003a5c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003a66:	9b04      	ldr	r3, [sp, #16]
1a003a68:	1e5a      	subs	r2, r3, #1
1a003a6a:	9204      	str	r2, [sp, #16]
1a003a6c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003a70:	9b01      	ldr	r3, [sp, #4]
1a003a72:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003a76:	9905      	ldr	r1, [sp, #20]
1a003a78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003a7c:	9903      	ldr	r1, [sp, #12]
1a003a7e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003a8a:	4a09      	ldr	r2, [pc, #36]	; (1a003ab0 <Chip_SetupCoreClock+0x148>)
1a003a8c:	6453      	str	r3, [r2, #68]	; 0x44
1a003a8e:	e7dd      	b.n	1a003a4c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003a90:	4809      	ldr	r0, [pc, #36]	; (1a003ab8 <Chip_SetupCoreClock+0x150>)
1a003a92:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003a96:	78cb      	ldrb	r3, [r1, #3]
1a003a98:	788a      	ldrb	r2, [r1, #2]
1a003a9a:	7849      	ldrb	r1, [r1, #1]
1a003a9c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003aa0:	f7ff fe92 	bl	1a0037c8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003aa4:	3401      	adds	r4, #1
1a003aa6:	2c11      	cmp	r4, #17
1a003aa8:	d9f2      	bls.n	1a003a90 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003aaa:	b00a      	add	sp, #40	; 0x28
1a003aac:	bd70      	pop	{r4, r5, r6, pc}
1a003aae:	bf00      	nop
1a003ab0:	40050000 	.word	0x40050000
1a003ab4:	068e7780 	.word	0x068e7780
1a003ab8:	1a004318 	.word	0x1a004318

1a003abc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003abc:	2901      	cmp	r1, #1
1a003abe:	d000      	beq.n	1a003ac2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003ac0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003ac2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003ac6:	0082      	lsls	r2, r0, #2
1a003ac8:	4b03      	ldr	r3, [pc, #12]	; (1a003ad8 <Chip_I2C_EventHandler+0x1c>)
1a003aca:	4413      	add	r3, r2
1a003acc:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003ace:	7d13      	ldrb	r3, [r2, #20]
1a003ad0:	b2db      	uxtb	r3, r3
1a003ad2:	2b04      	cmp	r3, #4
1a003ad4:	d0fb      	beq.n	1a003ace <Chip_I2C_EventHandler+0x12>
1a003ad6:	e7f3      	b.n	1a003ac0 <Chip_I2C_EventHandler+0x4>
1a003ad8:	1000004c 	.word	0x1000004c

1a003adc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003adc:	b570      	push	{r4, r5, r6, lr}
1a003ade:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003ae0:	4e06      	ldr	r6, [pc, #24]	; (1a003afc <Chip_I2C_Init+0x20>)
1a003ae2:	00c4      	lsls	r4, r0, #3
1a003ae4:	1a22      	subs	r2, r4, r0
1a003ae6:	0093      	lsls	r3, r2, #2
1a003ae8:	4433      	add	r3, r6
1a003aea:	8898      	ldrh	r0, [r3, #4]
1a003aec:	f7ff fed0 	bl	1a003890 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003af0:	1b64      	subs	r4, r4, r5
1a003af2:	00a3      	lsls	r3, r4, #2
1a003af4:	58f3      	ldr	r3, [r6, r3]
1a003af6:	226c      	movs	r2, #108	; 0x6c
1a003af8:	619a      	str	r2, [r3, #24]
}
1a003afa:	bd70      	pop	{r4, r5, r6, pc}
1a003afc:	1000004c 	.word	0x1000004c

1a003b00 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003b04:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003b06:	4e0b      	ldr	r6, [pc, #44]	; (1a003b34 <Chip_I2C_SetClockRate+0x34>)
1a003b08:	00c5      	lsls	r5, r0, #3
1a003b0a:	1a2b      	subs	r3, r5, r0
1a003b0c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003b10:	eb06 0308 	add.w	r3, r6, r8
1a003b14:	8898      	ldrh	r0, [r3, #4]
1a003b16:	f7ff fed5 	bl	1a0038c4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003b1a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003b1e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003b22:	0842      	lsrs	r2, r0, #1
1a003b24:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003b26:	f856 3008 	ldr.w	r3, [r6, r8]
1a003b2a:	691a      	ldr	r2, [r3, #16]
1a003b2c:	1a80      	subs	r0, r0, r2
1a003b2e:	6158      	str	r0, [r3, #20]
}
1a003b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003b34:	1000004c 	.word	0x1000004c

1a003b38 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003b38:	4b03      	ldr	r3, [pc, #12]	; (1a003b48 <Chip_SSP_GetClockIndex+0x10>)
1a003b3a:	4298      	cmp	r0, r3
1a003b3c:	d001      	beq.n	1a003b42 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003b3e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003b40:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003b42:	20a5      	movs	r0, #165	; 0xa5
1a003b44:	4770      	bx	lr
1a003b46:	bf00      	nop
1a003b48:	400c5000 	.word	0x400c5000

1a003b4c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003b4c:	4b04      	ldr	r3, [pc, #16]	; (1a003b60 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003b4e:	4298      	cmp	r0, r3
1a003b50:	d002      	beq.n	1a003b58 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003b52:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003b56:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003b58:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003b5c:	4770      	bx	lr
1a003b5e:	bf00      	nop
1a003b60:	400c5000 	.word	0x400c5000

1a003b64 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003b64:	6803      	ldr	r3, [r0, #0]
1a003b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003b6a:	0209      	lsls	r1, r1, #8
1a003b6c:	b289      	uxth	r1, r1
1a003b6e:	4319      	orrs	r1, r3
1a003b70:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003b72:	6102      	str	r2, [r0, #16]
}
1a003b74:	4770      	bx	lr

1a003b76 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003b76:	b570      	push	{r4, r5, r6, lr}
1a003b78:	4606      	mov	r6, r0
1a003b7a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003b7c:	f7ff ffe6 	bl	1a003b4c <Chip_SSP_GetPeriphClockIndex>
1a003b80:	f7ff fea0 	bl	1a0038c4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003b84:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003b8a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003b8c:	e000      	b.n	1a003b90 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003b8e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003b90:	42ab      	cmp	r3, r5
1a003b92:	d90b      	bls.n	1a003bac <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003b94:	1c4c      	adds	r4, r1, #1
1a003b96:	fb02 f304 	mul.w	r3, r2, r4
1a003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003b9e:	429d      	cmp	r5, r3
1a003ba0:	d2f6      	bcs.n	1a003b90 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003ba2:	2cff      	cmp	r4, #255	; 0xff
1a003ba4:	d9f3      	bls.n	1a003b8e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003ba6:	3202      	adds	r2, #2
				cr0_div = 0;
1a003ba8:	2100      	movs	r1, #0
1a003baa:	e7f1      	b.n	1a003b90 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003bac:	4630      	mov	r0, r6
1a003bae:	f7ff ffd9 	bl	1a003b64 <Chip_SSP_SetClockRate>
}
1a003bb2:	bd70      	pop	{r4, r5, r6, pc}

1a003bb4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003bb4:	b510      	push	{r4, lr}
1a003bb6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003bb8:	f7ff ffbe 	bl	1a003b38 <Chip_SSP_GetClockIndex>
1a003bbc:	f7ff fe68 	bl	1a003890 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003bc0:	4620      	mov	r0, r4
1a003bc2:	f7ff ffc3 	bl	1a003b4c <Chip_SSP_GetPeriphClockIndex>
1a003bc6:	f7ff fe63 	bl	1a003890 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003bca:	6863      	ldr	r3, [r4, #4]
1a003bcc:	f023 0304 	bic.w	r3, r3, #4
1a003bd0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003bd2:	6823      	ldr	r3, [r4, #0]
1a003bd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003bd8:	f043 0307 	orr.w	r3, r3, #7
1a003bdc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003bde:	4902      	ldr	r1, [pc, #8]	; (1a003be8 <Chip_SSP_Init+0x34>)
1a003be0:	4620      	mov	r0, r4
1a003be2:	f7ff ffc8 	bl	1a003b76 <Chip_SSP_SetBitRate>
}
1a003be6:	bd10      	pop	{r4, pc}
1a003be8:	000186a0 	.word	0x000186a0

1a003bec <ResetISR>:
void ResetISR(void) {
1a003bec:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a003bee:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a003bf0:	4b18      	ldr	r3, [pc, #96]	; (1a003c54 <ResetISR+0x68>)
1a003bf2:	4a19      	ldr	r2, [pc, #100]	; (1a003c58 <ResetISR+0x6c>)
1a003bf4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003bf6:	3304      	adds	r3, #4
1a003bf8:	4a18      	ldr	r2, [pc, #96]	; (1a003c5c <ResetISR+0x70>)
1a003bfa:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003bfc:	2300      	movs	r3, #0
1a003bfe:	e005      	b.n	1a003c0c <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a003c00:	4a17      	ldr	r2, [pc, #92]	; (1a003c60 <ResetISR+0x74>)
1a003c02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a003c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003c0a:	3301      	adds	r3, #1
1a003c0c:	2b07      	cmp	r3, #7
1a003c0e:	d9f7      	bls.n	1a003c00 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a003c10:	b662      	cpsie	i
    SystemInit();
1a003c12:	f7ff fa0d 	bl	1a003030 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a003c16:	4b13      	ldr	r3, [pc, #76]	; (1a003c64 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a003c18:	e007      	b.n	1a003c2a <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a003c1a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a003c1e:	689a      	ldr	r2, [r3, #8]
1a003c20:	6859      	ldr	r1, [r3, #4]
1a003c22:	6818      	ldr	r0, [r3, #0]
1a003c24:	f7fc fab2 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a003c28:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a003c2a:	4a0f      	ldr	r2, [pc, #60]	; (1a003c68 <ResetISR+0x7c>)
1a003c2c:	4293      	cmp	r3, r2
1a003c2e:	d3f4      	bcc.n	1a003c1a <ResetISR+0x2e>
1a003c30:	e006      	b.n	1a003c40 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a003c32:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a003c34:	6859      	ldr	r1, [r3, #4]
1a003c36:	f854 0b08 	ldr.w	r0, [r4], #8
1a003c3a:	f7fc fab6 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a003c3e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a003c40:	4a0a      	ldr	r2, [pc, #40]	; (1a003c6c <ResetISR+0x80>)
1a003c42:	4293      	cmp	r3, r2
1a003c44:	d3f5      	bcc.n	1a003c32 <ResetISR+0x46>
    __libc_init_array();
1a003c46:	f000 f995 	bl	1a003f74 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a003c4a:	f7ff f9db 	bl	1a003004 <Board_Init>
    main();
1a003c4e:	f7fc fd79 	bl	1a000744 <main>
1a003c52:	e7fe      	b.n	1a003c52 <ResetISR+0x66>
1a003c54:	40053100 	.word	0x40053100
1a003c58:	10df1000 	.word	0x10df1000
1a003c5c:	01dff7ff 	.word	0x01dff7ff
1a003c60:	e000e280 	.word	0xe000e280
1a003c64:	1a000114 	.word	0x1a000114
1a003c68:	1a000150 	.word	0x1a000150
1a003c6c:	1a000178 	.word	0x1a000178

1a003c70 <_init>:
void _init(void) {}
1a003c70:	4770      	bx	lr
1a003c72:	Address 0x000000001a003c72 is out of bounds.


1a003c74 <__aeabi_uldivmod>:
1a003c74:	b953      	cbnz	r3, 1a003c8c <__aeabi_uldivmod+0x18>
1a003c76:	b94a      	cbnz	r2, 1a003c8c <__aeabi_uldivmod+0x18>
1a003c78:	2900      	cmp	r1, #0
1a003c7a:	bf08      	it	eq
1a003c7c:	2800      	cmpeq	r0, #0
1a003c7e:	bf1c      	itt	ne
1a003c80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003c84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003c88:	f000 b972 	b.w	1a003f70 <__aeabi_idiv0>
1a003c8c:	f1ad 0c08 	sub.w	ip, sp, #8
1a003c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003c94:	f000 f806 	bl	1a003ca4 <__udivmoddi4>
1a003c98:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003ca0:	b004      	add	sp, #16
1a003ca2:	4770      	bx	lr

1a003ca4 <__udivmoddi4>:
1a003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003ca8:	9e08      	ldr	r6, [sp, #32]
1a003caa:	4604      	mov	r4, r0
1a003cac:	4688      	mov	r8, r1
1a003cae:	2b00      	cmp	r3, #0
1a003cb0:	d14b      	bne.n	1a003d4a <__udivmoddi4+0xa6>
1a003cb2:	428a      	cmp	r2, r1
1a003cb4:	4615      	mov	r5, r2
1a003cb6:	d967      	bls.n	1a003d88 <__udivmoddi4+0xe4>
1a003cb8:	fab2 f282 	clz	r2, r2
1a003cbc:	b14a      	cbz	r2, 1a003cd2 <__udivmoddi4+0x2e>
1a003cbe:	f1c2 0720 	rsb	r7, r2, #32
1a003cc2:	fa01 f302 	lsl.w	r3, r1, r2
1a003cc6:	fa20 f707 	lsr.w	r7, r0, r7
1a003cca:	4095      	lsls	r5, r2
1a003ccc:	ea47 0803 	orr.w	r8, r7, r3
1a003cd0:	4094      	lsls	r4, r2
1a003cd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003cd6:	0c23      	lsrs	r3, r4, #16
1a003cd8:	fbb8 f7fe 	udiv	r7, r8, lr
1a003cdc:	fa1f fc85 	uxth.w	ip, r5
1a003ce0:	fb0e 8817 	mls	r8, lr, r7, r8
1a003ce4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003ce8:	fb07 f10c 	mul.w	r1, r7, ip
1a003cec:	4299      	cmp	r1, r3
1a003cee:	d909      	bls.n	1a003d04 <__udivmoddi4+0x60>
1a003cf0:	18eb      	adds	r3, r5, r3
1a003cf2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003cf6:	f080 811b 	bcs.w	1a003f30 <__udivmoddi4+0x28c>
1a003cfa:	4299      	cmp	r1, r3
1a003cfc:	f240 8118 	bls.w	1a003f30 <__udivmoddi4+0x28c>
1a003d00:	3f02      	subs	r7, #2
1a003d02:	442b      	add	r3, r5
1a003d04:	1a5b      	subs	r3, r3, r1
1a003d06:	b2a4      	uxth	r4, r4
1a003d08:	fbb3 f0fe 	udiv	r0, r3, lr
1a003d0c:	fb0e 3310 	mls	r3, lr, r0, r3
1a003d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003d14:	fb00 fc0c 	mul.w	ip, r0, ip
1a003d18:	45a4      	cmp	ip, r4
1a003d1a:	d909      	bls.n	1a003d30 <__udivmoddi4+0x8c>
1a003d1c:	192c      	adds	r4, r5, r4
1a003d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003d22:	f080 8107 	bcs.w	1a003f34 <__udivmoddi4+0x290>
1a003d26:	45a4      	cmp	ip, r4
1a003d28:	f240 8104 	bls.w	1a003f34 <__udivmoddi4+0x290>
1a003d2c:	3802      	subs	r0, #2
1a003d2e:	442c      	add	r4, r5
1a003d30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003d34:	eba4 040c 	sub.w	r4, r4, ip
1a003d38:	2700      	movs	r7, #0
1a003d3a:	b11e      	cbz	r6, 1a003d44 <__udivmoddi4+0xa0>
1a003d3c:	40d4      	lsrs	r4, r2
1a003d3e:	2300      	movs	r3, #0
1a003d40:	e9c6 4300 	strd	r4, r3, [r6]
1a003d44:	4639      	mov	r1, r7
1a003d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003d4a:	428b      	cmp	r3, r1
1a003d4c:	d909      	bls.n	1a003d62 <__udivmoddi4+0xbe>
1a003d4e:	2e00      	cmp	r6, #0
1a003d50:	f000 80eb 	beq.w	1a003f2a <__udivmoddi4+0x286>
1a003d54:	2700      	movs	r7, #0
1a003d56:	e9c6 0100 	strd	r0, r1, [r6]
1a003d5a:	4638      	mov	r0, r7
1a003d5c:	4639      	mov	r1, r7
1a003d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003d62:	fab3 f783 	clz	r7, r3
1a003d66:	2f00      	cmp	r7, #0
1a003d68:	d147      	bne.n	1a003dfa <__udivmoddi4+0x156>
1a003d6a:	428b      	cmp	r3, r1
1a003d6c:	d302      	bcc.n	1a003d74 <__udivmoddi4+0xd0>
1a003d6e:	4282      	cmp	r2, r0
1a003d70:	f200 80fa 	bhi.w	1a003f68 <__udivmoddi4+0x2c4>
1a003d74:	1a84      	subs	r4, r0, r2
1a003d76:	eb61 0303 	sbc.w	r3, r1, r3
1a003d7a:	2001      	movs	r0, #1
1a003d7c:	4698      	mov	r8, r3
1a003d7e:	2e00      	cmp	r6, #0
1a003d80:	d0e0      	beq.n	1a003d44 <__udivmoddi4+0xa0>
1a003d82:	e9c6 4800 	strd	r4, r8, [r6]
1a003d86:	e7dd      	b.n	1a003d44 <__udivmoddi4+0xa0>
1a003d88:	b902      	cbnz	r2, 1a003d8c <__udivmoddi4+0xe8>
1a003d8a:	deff      	udf	#255	; 0xff
1a003d8c:	fab2 f282 	clz	r2, r2
1a003d90:	2a00      	cmp	r2, #0
1a003d92:	f040 808f 	bne.w	1a003eb4 <__udivmoddi4+0x210>
1a003d96:	1b49      	subs	r1, r1, r5
1a003d98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003d9c:	fa1f f885 	uxth.w	r8, r5
1a003da0:	2701      	movs	r7, #1
1a003da2:	fbb1 fcfe 	udiv	ip, r1, lr
1a003da6:	0c23      	lsrs	r3, r4, #16
1a003da8:	fb0e 111c 	mls	r1, lr, ip, r1
1a003dac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003db0:	fb08 f10c 	mul.w	r1, r8, ip
1a003db4:	4299      	cmp	r1, r3
1a003db6:	d907      	bls.n	1a003dc8 <__udivmoddi4+0x124>
1a003db8:	18eb      	adds	r3, r5, r3
1a003dba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003dbe:	d202      	bcs.n	1a003dc6 <__udivmoddi4+0x122>
1a003dc0:	4299      	cmp	r1, r3
1a003dc2:	f200 80cd 	bhi.w	1a003f60 <__udivmoddi4+0x2bc>
1a003dc6:	4684      	mov	ip, r0
1a003dc8:	1a59      	subs	r1, r3, r1
1a003dca:	b2a3      	uxth	r3, r4
1a003dcc:	fbb1 f0fe 	udiv	r0, r1, lr
1a003dd0:	fb0e 1410 	mls	r4, lr, r0, r1
1a003dd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003dd8:	fb08 f800 	mul.w	r8, r8, r0
1a003ddc:	45a0      	cmp	r8, r4
1a003dde:	d907      	bls.n	1a003df0 <__udivmoddi4+0x14c>
1a003de0:	192c      	adds	r4, r5, r4
1a003de2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003de6:	d202      	bcs.n	1a003dee <__udivmoddi4+0x14a>
1a003de8:	45a0      	cmp	r8, r4
1a003dea:	f200 80b6 	bhi.w	1a003f5a <__udivmoddi4+0x2b6>
1a003dee:	4618      	mov	r0, r3
1a003df0:	eba4 0408 	sub.w	r4, r4, r8
1a003df4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003df8:	e79f      	b.n	1a003d3a <__udivmoddi4+0x96>
1a003dfa:	f1c7 0c20 	rsb	ip, r7, #32
1a003dfe:	40bb      	lsls	r3, r7
1a003e00:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003e04:	ea4e 0e03 	orr.w	lr, lr, r3
1a003e08:	fa01 f407 	lsl.w	r4, r1, r7
1a003e0c:	fa20 f50c 	lsr.w	r5, r0, ip
1a003e10:	fa21 f30c 	lsr.w	r3, r1, ip
1a003e14:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003e18:	4325      	orrs	r5, r4
1a003e1a:	fbb3 f9f8 	udiv	r9, r3, r8
1a003e1e:	0c2c      	lsrs	r4, r5, #16
1a003e20:	fb08 3319 	mls	r3, r8, r9, r3
1a003e24:	fa1f fa8e 	uxth.w	sl, lr
1a003e28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003e2c:	fb09 f40a 	mul.w	r4, r9, sl
1a003e30:	429c      	cmp	r4, r3
1a003e32:	fa02 f207 	lsl.w	r2, r2, r7
1a003e36:	fa00 f107 	lsl.w	r1, r0, r7
1a003e3a:	d90b      	bls.n	1a003e54 <__udivmoddi4+0x1b0>
1a003e3c:	eb1e 0303 	adds.w	r3, lr, r3
1a003e40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003e44:	f080 8087 	bcs.w	1a003f56 <__udivmoddi4+0x2b2>
1a003e48:	429c      	cmp	r4, r3
1a003e4a:	f240 8084 	bls.w	1a003f56 <__udivmoddi4+0x2b2>
1a003e4e:	f1a9 0902 	sub.w	r9, r9, #2
1a003e52:	4473      	add	r3, lr
1a003e54:	1b1b      	subs	r3, r3, r4
1a003e56:	b2ad      	uxth	r5, r5
1a003e58:	fbb3 f0f8 	udiv	r0, r3, r8
1a003e5c:	fb08 3310 	mls	r3, r8, r0, r3
1a003e60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003e64:	fb00 fa0a 	mul.w	sl, r0, sl
1a003e68:	45a2      	cmp	sl, r4
1a003e6a:	d908      	bls.n	1a003e7e <__udivmoddi4+0x1da>
1a003e6c:	eb1e 0404 	adds.w	r4, lr, r4
1a003e70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003e74:	d26b      	bcs.n	1a003f4e <__udivmoddi4+0x2aa>
1a003e76:	45a2      	cmp	sl, r4
1a003e78:	d969      	bls.n	1a003f4e <__udivmoddi4+0x2aa>
1a003e7a:	3802      	subs	r0, #2
1a003e7c:	4474      	add	r4, lr
1a003e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003e82:	fba0 8902 	umull	r8, r9, r0, r2
1a003e86:	eba4 040a 	sub.w	r4, r4, sl
1a003e8a:	454c      	cmp	r4, r9
1a003e8c:	46c2      	mov	sl, r8
1a003e8e:	464b      	mov	r3, r9
1a003e90:	d354      	bcc.n	1a003f3c <__udivmoddi4+0x298>
1a003e92:	d051      	beq.n	1a003f38 <__udivmoddi4+0x294>
1a003e94:	2e00      	cmp	r6, #0
1a003e96:	d069      	beq.n	1a003f6c <__udivmoddi4+0x2c8>
1a003e98:	ebb1 050a 	subs.w	r5, r1, sl
1a003e9c:	eb64 0403 	sbc.w	r4, r4, r3
1a003ea0:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003ea4:	40fd      	lsrs	r5, r7
1a003ea6:	40fc      	lsrs	r4, r7
1a003ea8:	ea4c 0505 	orr.w	r5, ip, r5
1a003eac:	e9c6 5400 	strd	r5, r4, [r6]
1a003eb0:	2700      	movs	r7, #0
1a003eb2:	e747      	b.n	1a003d44 <__udivmoddi4+0xa0>
1a003eb4:	f1c2 0320 	rsb	r3, r2, #32
1a003eb8:	fa20 f703 	lsr.w	r7, r0, r3
1a003ebc:	4095      	lsls	r5, r2
1a003ebe:	fa01 f002 	lsl.w	r0, r1, r2
1a003ec2:	fa21 f303 	lsr.w	r3, r1, r3
1a003ec6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003eca:	4338      	orrs	r0, r7
1a003ecc:	0c01      	lsrs	r1, r0, #16
1a003ece:	fbb3 f7fe 	udiv	r7, r3, lr
1a003ed2:	fa1f f885 	uxth.w	r8, r5
1a003ed6:	fb0e 3317 	mls	r3, lr, r7, r3
1a003eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003ede:	fb07 f308 	mul.w	r3, r7, r8
1a003ee2:	428b      	cmp	r3, r1
1a003ee4:	fa04 f402 	lsl.w	r4, r4, r2
1a003ee8:	d907      	bls.n	1a003efa <__udivmoddi4+0x256>
1a003eea:	1869      	adds	r1, r5, r1
1a003eec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003ef0:	d22f      	bcs.n	1a003f52 <__udivmoddi4+0x2ae>
1a003ef2:	428b      	cmp	r3, r1
1a003ef4:	d92d      	bls.n	1a003f52 <__udivmoddi4+0x2ae>
1a003ef6:	3f02      	subs	r7, #2
1a003ef8:	4429      	add	r1, r5
1a003efa:	1acb      	subs	r3, r1, r3
1a003efc:	b281      	uxth	r1, r0
1a003efe:	fbb3 f0fe 	udiv	r0, r3, lr
1a003f02:	fb0e 3310 	mls	r3, lr, r0, r3
1a003f06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003f0a:	fb00 f308 	mul.w	r3, r0, r8
1a003f0e:	428b      	cmp	r3, r1
1a003f10:	d907      	bls.n	1a003f22 <__udivmoddi4+0x27e>
1a003f12:	1869      	adds	r1, r5, r1
1a003f14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003f18:	d217      	bcs.n	1a003f4a <__udivmoddi4+0x2a6>
1a003f1a:	428b      	cmp	r3, r1
1a003f1c:	d915      	bls.n	1a003f4a <__udivmoddi4+0x2a6>
1a003f1e:	3802      	subs	r0, #2
1a003f20:	4429      	add	r1, r5
1a003f22:	1ac9      	subs	r1, r1, r3
1a003f24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003f28:	e73b      	b.n	1a003da2 <__udivmoddi4+0xfe>
1a003f2a:	4637      	mov	r7, r6
1a003f2c:	4630      	mov	r0, r6
1a003f2e:	e709      	b.n	1a003d44 <__udivmoddi4+0xa0>
1a003f30:	4607      	mov	r7, r0
1a003f32:	e6e7      	b.n	1a003d04 <__udivmoddi4+0x60>
1a003f34:	4618      	mov	r0, r3
1a003f36:	e6fb      	b.n	1a003d30 <__udivmoddi4+0x8c>
1a003f38:	4541      	cmp	r1, r8
1a003f3a:	d2ab      	bcs.n	1a003e94 <__udivmoddi4+0x1f0>
1a003f3c:	ebb8 0a02 	subs.w	sl, r8, r2
1a003f40:	eb69 020e 	sbc.w	r2, r9, lr
1a003f44:	3801      	subs	r0, #1
1a003f46:	4613      	mov	r3, r2
1a003f48:	e7a4      	b.n	1a003e94 <__udivmoddi4+0x1f0>
1a003f4a:	4660      	mov	r0, ip
1a003f4c:	e7e9      	b.n	1a003f22 <__udivmoddi4+0x27e>
1a003f4e:	4618      	mov	r0, r3
1a003f50:	e795      	b.n	1a003e7e <__udivmoddi4+0x1da>
1a003f52:	4667      	mov	r7, ip
1a003f54:	e7d1      	b.n	1a003efa <__udivmoddi4+0x256>
1a003f56:	4681      	mov	r9, r0
1a003f58:	e77c      	b.n	1a003e54 <__udivmoddi4+0x1b0>
1a003f5a:	3802      	subs	r0, #2
1a003f5c:	442c      	add	r4, r5
1a003f5e:	e747      	b.n	1a003df0 <__udivmoddi4+0x14c>
1a003f60:	f1ac 0c02 	sub.w	ip, ip, #2
1a003f64:	442b      	add	r3, r5
1a003f66:	e72f      	b.n	1a003dc8 <__udivmoddi4+0x124>
1a003f68:	4638      	mov	r0, r7
1a003f6a:	e708      	b.n	1a003d7e <__udivmoddi4+0xda>
1a003f6c:	4637      	mov	r7, r6
1a003f6e:	e6e9      	b.n	1a003d44 <__udivmoddi4+0xa0>

1a003f70 <__aeabi_idiv0>:
1a003f70:	4770      	bx	lr
1a003f72:	bf00      	nop

1a003f74 <__libc_init_array>:
1a003f74:	b570      	push	{r4, r5, r6, lr}
1a003f76:	4e0d      	ldr	r6, [pc, #52]	; (1a003fac <__libc_init_array+0x38>)
1a003f78:	4c0d      	ldr	r4, [pc, #52]	; (1a003fb0 <__libc_init_array+0x3c>)
1a003f7a:	1ba4      	subs	r4, r4, r6
1a003f7c:	10a4      	asrs	r4, r4, #2
1a003f7e:	2500      	movs	r5, #0
1a003f80:	42a5      	cmp	r5, r4
1a003f82:	d109      	bne.n	1a003f98 <__libc_init_array+0x24>
1a003f84:	4e0b      	ldr	r6, [pc, #44]	; (1a003fb4 <__libc_init_array+0x40>)
1a003f86:	4c0c      	ldr	r4, [pc, #48]	; (1a003fb8 <__libc_init_array+0x44>)
1a003f88:	f7ff fe72 	bl	1a003c70 <_init>
1a003f8c:	1ba4      	subs	r4, r4, r6
1a003f8e:	10a4      	asrs	r4, r4, #2
1a003f90:	2500      	movs	r5, #0
1a003f92:	42a5      	cmp	r5, r4
1a003f94:	d105      	bne.n	1a003fa2 <__libc_init_array+0x2e>
1a003f96:	bd70      	pop	{r4, r5, r6, pc}
1a003f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003f9c:	4798      	blx	r3
1a003f9e:	3501      	adds	r5, #1
1a003fa0:	e7ee      	b.n	1a003f80 <__libc_init_array+0xc>
1a003fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003fa6:	4798      	blx	r3
1a003fa8:	3501      	adds	r5, #1
1a003faa:	e7f2      	b.n	1a003f92 <__libc_init_array+0x1e>
1a003fac:	1a004360 	.word	0x1a004360
1a003fb0:	1a004360 	.word	0x1a004360
1a003fb4:	1a004360 	.word	0x1a004360
1a003fb8:	1a004360 	.word	0x1a004360

1a003fbc <memcpy>:
1a003fbc:	b510      	push	{r4, lr}
1a003fbe:	1e43      	subs	r3, r0, #1
1a003fc0:	440a      	add	r2, r1
1a003fc2:	4291      	cmp	r1, r2
1a003fc4:	d100      	bne.n	1a003fc8 <memcpy+0xc>
1a003fc6:	bd10      	pop	{r4, pc}
1a003fc8:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003fcc:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003fd0:	e7f7      	b.n	1a003fc2 <memcpy+0x6>

1a003fd2 <memset>:
1a003fd2:	4402      	add	r2, r0
1a003fd4:	4603      	mov	r3, r0
1a003fd6:	4293      	cmp	r3, r2
1a003fd8:	d100      	bne.n	1a003fdc <memset+0xa>
1a003fda:	4770      	bx	lr
1a003fdc:	f803 1b01 	strb.w	r1, [r3], #1
1a003fe0:	e7f9      	b.n	1a003fd6 <memset+0x4>
1a003fe2:	ffff 6174 	vsra.u32	q11, q10, #1
1a003fe6:	6b73      	.short	0x6b73
1a003fe8:	5664654c 	.word	0x5664654c
1a003fec:	61697261 	.word	0x61697261
1a003ff0:	00656c62 	.word	0x00656c62
1a003ff4:	6b736174 	.word	0x6b736174
1a003ff8:	69746e41 	.word	0x69746e41
1a003ffc:	62657272 	.word	0x62657272
1a004000:	5465746f 	.word	0x5465746f
1a004004:	00316365 	.word	0x00316365
1a004008:	6b736174 	.word	0x6b736174
1a00400c:	69746e41 	.word	0x69746e41
1a004010:	62657272 	.word	0x62657272
1a004014:	5465746f 	.word	0x5465746f
1a004018:	00326365 	.word	0x00326365
1a00401c:	6b736174 	.word	0x6b736174
1a004020:	69746e41 	.word	0x69746e41
1a004024:	62657272 	.word	0x62657272
1a004028:	5465746f 	.word	0x5465746f
1a00402c:	00336365 	.word	0x00336365
1a004030:	6b736174 	.word	0x6b736174
1a004034:	69746e41 	.word	0x69746e41
1a004038:	62657272 	.word	0x62657272
1a00403c:	5465746f 	.word	0x5465746f
1a004040:	00346365 	.word	0x00346365
1a004044:	454c4449 	.word	0x454c4449
1a004048:	ffffff00 	.word	0xffffff00
1a00404c:	51726d54 	.word	0x51726d54
1a004050:	ffffff00 	.word	0xffffff00
1a004054:	20726d54 	.word	0x20726d54
1a004058:	00637653 	.word	0x00637653

1a00405c <lpcUarts>:
1a00405c:	40081000 06020406 00180205 40081000     ...@...........@
1a00406c:	09070509 00180706 40082000 00000000     ......... .@....
1a00407c:	00190000 400c1000 07060107 001a0602     .......@........
1a00408c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00409c:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0040ac:	0072656d                                mer.

1a0040b0 <gpioPinsInit>:
1a0040b0:	02000104 00050701 05010d03 04080100     ................
1a0040c0:	02020002 02000304 00000403 04070002     ................
1a0040d0:	030c0300 09050402 05040103 04030208     ................
1a0040e0:	04020305 06040504 0802000c 03000b06     ................
1a0040f0:	00090607 07060503 060f0504 03030004     ................
1a004100:	02000404 00050404 06040502 04060200     ................
1a004110:	0c050408 05040a04 0003010e 14010a00     ................
1a004120:	010f0000 0d000012 00001101 0010010c     ................
1a004130:	07070300 000f0300 01000001 00000000     ................
1a004140:	000a0600 08060603 06100504 04030005     ................
1a004150:	03000106 04090400 04010d05 010b0000     ................
1a004160:	0200000f 00000001 00010104 02010800     ................
1a004170:	01090000 09010006 05040002 04010200     ................
1a004180:	02020105 02020504 0e00000a 01000b02     ................
1a004190:	000c020b 00040c01 04000200 01020001     ................
1a0041a0:	02000204 00030402 03070302 070b0300     ................
1a0041b0:	0c030004 03000507 0006070d 01020e03     ................
1a0041c0:	04010504 06020006 02000504 00040405     ................
1a0041d0:	08040402 040c0504 0d050409 05040a04     ................
1a0041e0:	0005010e ffff0801                       ........

1a0041e8 <ExtRateIn>:
1a0041e8:	00000000                                ....

1a0041ec <GpioButtons>:
1a0041ec:	08000400 09010900                       ........

1a0041f4 <GpioLeds>:
1a0041f4:	01050005 0e000205 0c010b01              ............

1a004200 <GpioPorts>:
1a004200:	03030003 0f050403 05031005 07030603     ................
1a004210:	ffff0802                                ....

1a004214 <OscRateIn>:
1a004214:	00b71b00                                ....

1a004218 <InitClkStates>:
1a004218:	01010f01                                ....

1a00421c <pinmuxing>:
1a00421c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00422c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00423c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00424c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00425c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00426c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00427c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00428c:	00570206                                ..W.

1a004290 <UART_BClock>:
1a004290:	01a201c2 01620182                       ......b.

1a004298 <UART_PClock>:
1a004298:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0042a8:	000000ff                                ....

1a0042ac <periph_to_base>:
1a0042ac:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0042bc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0042cc:	000100e0 01000100 01200003 00060120     .......... . ...
1a0042dc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0042ec:	01820013 00120182 01a201a2 01c20011     ................
1a0042fc:	001001c2 01e201e2 0202000f 000e0202     ................
1a00430c:	02220222 0223000d 001c0223              "."...#.#...

1a004318 <InitClkStates>:
1a004318:	00010100 00010909 0001090a 01010701     ................
1a004328:	00010902 00010906 0101090c 0001090d     ................
1a004338:	0001090e 0001090f 00010910 00010911     ................
1a004348:	00010912 00010913 00011114 00011119     ................
1a004358:	0001111a 0001111b                       ........
