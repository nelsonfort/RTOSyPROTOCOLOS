
mis_proyectos/FinalRtosProtocolos/out/FinalRtosProtocolos.elf:     file format elf32-littlearm
mis_proyectos/FinalRtosProtocolos/out/FinalRtosProtocolos.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a004b35

Program Header:
0x70000001 off    0x00015bbc vaddr 0x1a005bbc paddr 0x1a005bbc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002d90 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005bc4 memsz 0x00005bc4 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005bc4 align 2**16
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bbc  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
  6 .bss          00002cc0  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a005bbc  1a005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 17 .noinit       00000000  10002d90  10002d90  000200cc  2**2
                  CONTENTS
 18 .debug_info   0002ea05  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000062fa  00000000  00000000  0004ead1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000ba34  00000000  00000000  00054dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000010c8  00000000  00000000  000607ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000011a0  00000000  00000000  000618c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000105f0  00000000  00000000  00062a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00014dc2  00000000  00000000  00073057  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002e308  00000000  00000000  00087e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000b6121  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000b61a0  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002cfc  00000000  00000000  000b61d8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005bbc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002d90 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 mpu9250_RTOS_Compatible.c
1a000300 l     F .text	00000080 mpu9250InitializeControlStructure_RTOS
1a000380 l     F .text	00000034 mpu9250ReadRegisters_RTOS
1a0003b4 l     F .text	00000020 mpu9250WhoAmI_RTOS
1a0003d4 l     F .text	0000004c mpu9250WriteRegister_RTOS
1a000420 l     F .text	0000005c mpu9250ReadAK8963Registers_RTOS
1a00047c l     F .text	00000020 mpu9250WhoAmIAK8963_RTOS
1a00049c l     F .text	00000078 mpu9250WriteAK8963Register_RTOS
1a000514 l     F .text	00000094 mpu9250SetGyroRange_RTOS
1a0005a8 l     F .text	000000f8 mpu9250SetDlpfBandwidth_RTOS
1a0006a0 l     F .text	000000b4 mpu9250SetSrd_RTOS
1a000a00 l     F .text	0000015c mpu9250CalibrateGyro_RTOS
100000d0 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 FinalRtosProtocolos.c
10000228 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 heap_1.c
10000230 l     O .bss	00002000 ucHeap
1000022c l     O .bss	00000004 pucAlignedHeap.11323
10002230 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a001386 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a001398 l     F .text	0000001e prvIsQueueFull
1a0013b6 l     F .text	0000001a prvIsQueueEmpty
1a0013d0 l     F .text	00000076 prvCopyDataToQueue
1a001446 l     F .text	00000024 prvCopyDataFromQueue
1a00146a l     F .text	0000006e prvUnlockQueue
1a00155c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002234 l     O .bss	00000168 uxIdleTaskStack.10613
1000239c l     O .bss	000005a0 uxTimerTaskStack.10620
1000293c l     O .bss	00000060 xIdleTaskTCB.10612
1000299c l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001cd8 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001d04 l     F .text	00000092 prvInitialiseNewTask
1a001d98 l     F .text	00000068 prvInitialiseTaskLists
1a001e00 l     F .text	000000ac prvAddNewTaskToReadyList
1a001eac l     F .text	00000038 prvDeleteTCB
1a001ee4 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001f30 l     F .text	00000028 prvIdleTask
1a001f58 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002a00 l     O .bss	00000004 pxDelayedTaskList
10002a04 l     O .bss	00000004 pxOverflowDelayedTaskList
10002a08 l     O .bss	0000008c pxReadyTasksLists
10002a94 l     O .bss	00000004 uxCurrentNumberOfTasks
10002a98 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002a9c l     O .bss	00000004 uxPendedTicks
10002aa0 l     O .bss	00000004 uxSchedulerSuspended
10002aa4 l     O .bss	00000004 uxTaskNumber
10002aa8 l     O .bss	00000004 uxTopReadyPriority
10002aac l     O .bss	00000014 xDelayedTaskList1
10002ac0 l     O .bss	00000014 xDelayedTaskList2
10002ad4 l     O .bss	00000004 xNextTaskUnblockTime
10002ad8 l     O .bss	00000004 xNumOfOverflows
10002adc l     O .bss	00000014 xPendingReadyList
10002af0 l     O .bss	00000004 xSchedulerRunning
10002af4 l     O .bss	00000014 xSuspendedTaskList
10002b08 l     O .bss	00000014 xTasksWaitingTermination
10002b1c l     O .bss	00000004 xTickCount
10002b20 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002938 l     F .text	00000020 prvGetNextExpireTime
1a002958 l     F .text	00000048 prvInsertTimerInActiveList
1a0029a0 l     F .text	00000070 prvCheckForValidListAndQueue
1a002a10 l     F .text	00000040 prvInitialiseNewTimer
1a002de0 l     F .text	00000016 prvTimerTask
1a002b6c l     F .text	00000078 prvSwitchTimerLists
1a002be4 l     F .text	0000002c prvSampleTimeNow
1a002c10 l     F .text	00000060 prvProcessExpiredTimer
1a002c70 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002ce4 l     F .text	000000fc prvProcessReceivedCommands
10002b24 l     O .bss	00000004 pxCurrentTimerList
10002b28 l     O .bss	00000004 pxOverflowTimerList
10002b2c l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002bcc l     O .bss	00000014 xActiveTimerList1
10002be0 l     O .bss	00000014 xActiveTimerList2
10002bf4 l     O .bss	00000004 xLastTime.11662
10002bf8 l     O .bss	00000050 xStaticTimerQueue.11712
10002c48 l     O .bss	00000004 xTimerQueue
10002c4c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002df8 l     F .text	00000040 prvTaskExitError
1a002e38 l     F .text	00000022 prvPortStartFirstTask
1a002e60 l     F .text	0000000e vPortEnableVFP
1a002ec0 l       .text	00000000 pxCurrentTCBConst2
1a002fa0 l       .text	00000000 pxCurrentTCBConst
10002c50 l     O .bss	00000001 ucMaxSysCallPriority
10002c54 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0058b0 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002c58 l     O .bss	00000004 callBackFuncParams
10002c60 l     O .bss	00000008 tickCounter
10002c68 l     O .bss	00000004 tickHookFunction
10002c6c l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a003270 l     F .text	00000030 i2cHardwareInit
1a0032a0 l     F .text	0000003c i2cHardwareRead
1a0032dc l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a003366 l     F .text	00000002 errorOcurred
1a003368 l     F .text	00000002 doNothing
1000000c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003558 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002c9c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003958 l     F .text	00000010 clearInterrupt
1a003968 l     F .text	0000005c serveInterrupt
1000004c l     O .data	00000048 ultrasonicSensors
1a005a40 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 board.c
1a0039e4 l     F .text	00000044 Board_LED_Init
1a003a28 l     F .text	00000040 Board_TEC_Init
1a003a68 l     F .text	00000040 Board_GPIO_Init
1a003aa8 l     F .text	00000038 Board_SPI_Init
1a003ae0 l     F .text	00000024 Board_I2C_Init
1a003b04 l     F .text	00000030 Board_ADC_Init
1a005a48 l     O .text	00000008 GpioButtons
1a005a50 l     O .text	0000000c GpioLeds
1a005a5c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005a74 l     O .text	00000004 InitClkStates
1a005a78 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003c50 l     F .text	0000002c Chip_UART_GetIndex
1a005aec l     O .text	00000008 UART_BClock
1a005af4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003db8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a003dcc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003f94 l     F .text	000000a4 pll_calc_divs
1a004038 l     F .text	0000010c pll_get_frac
1a004144 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0043b8 l     F .text	00000022 Chip_Clock_GetDivRate
10002ca0 l     O .bss	00000008 audio_usb_pll_freq
1a005b08 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005b74 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004a80 l     F .text	00000014 Chip_SSP_GetClockIndex
1a004a94 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a005bbc l       .bss_RAM5	00000000 __init_array_end
1a005bbc l       .bss_RAM5	00000000 __preinit_array_end
1a005bbc l       .bss_RAM5	00000000 __init_array_start
1a005bbc l       .bss_RAM5	00000000 __preinit_array_start
1a0041dc g     F .text	0000001c Chip_Clock_GetDividerSource
10002ca8 g     O .bss	00000040 vehiculo
1a004654 g     F .text	0000000e Chip_I2CM_Xfer
1a0033ec g     F .text	00000044 TIMER2_IRQHandler
1a003318 g     F .text	0000000e i2cInit
1a000184  w    F .text	00000002 DebugMon_Handler
1a0009dc g     F .text	0000000c mpu9250GetGyroX_rads_RTOS
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a003e64 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002f08 g     F .text	0000002c vPortExitCritical
1a004ed8 g     F .text	0000005a .hidden __floatdidf
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a001bc0 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004854 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a003f2a g     F .text	0000000c Chip_ADC_SetResolution
1a002fa4 g     F .text	0000002c SysTick_Handler
1a003940 g     F .text	00000008 printString
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a002f40 g     F .text	00000064 PendSV_Handler
1a0017d8 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005bc4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a003326 g     F .text	00000028 i2cRead
100029fc g     O .bss	00000004 pxCurrentTCB
53ff2d5a g       *ABS*	00000000 __valid_user_code_checksum
1a005bc4 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a002630 g     F .text	00000018 vTaskInternalSetTimeOutState
1a000e3c g     F .text	00000194 taskProcessor
1a003430 g     F .text	00000044 TIMER3_IRQHandler
1a00445a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a003008 g     F .text	00000110 xPortStartScheduler
1a005740 g     F .text	00000016 memcpy
1a00253c g     F .text	00000030 vTaskPlaceOnEventList
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a004e60 g     F .text	00000022 .hidden __floatsidf
1a002fd0  w    F .text	00000038 vPortSetupTimerInterrupt
1a004a00 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a000e10 g     F .text	0000002a taskLedVariable
1a0053f8 g     F .text	00000000 .hidden __aeabi_uldivmod
10002d90 g       .noinit	00000000 _noinit
1a001370 g     F .text	00000016 vPortFree
1a0031d6 g     F .text	00000018 uartWriteString
10002d8c g     O .bss	00000004 SystemCoreClock
1a003c7c g     F .text	00000054 Chip_UART_Init
1a0019fc g     F .text	0000019c xQueueSemaphoreTake
1a000754 g     F .text	00000288 mpu9250Read_RTOS
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a0031f0 g     F .text	00000034 tickerCallback
1a003118 g     F .text	0000005c vPortValidateInterruptPriority
1a003e0c g     F .text	00000018 readAdcVal
1a000b5c g     F .text	000002b4 mpu9250Init_RTOS
1a000180  w    F .text	00000002 UsageFault_Handler
1a00450c g     F .text	0000004c Chip_Clock_GetRate
1a001c2e g     F .text	00000018 vListInsertEnd
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a003bd8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004e40 g     F .text	0000001e .hidden __aeabi_ui2d
1a0049d0 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a005428 g     F .text	000002cc .hidden __udivmoddi4
1a004bbc g     F .text	00000000 .hidden __aeabi_drsub
1a005a44 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001c28 g     F .text	00000006 vListInitialiseItem
1a0039ce g     F .text	0000000a GPIO1_IRQHandler
1a0018a4 g     F .text	00000158 xQueueReceive
10002d48 g     O .bss	00000040 xQueueRegistry
1a004e84 g     F .text	00000042 .hidden __extendsfdf2
1a005188 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001cbc g     F .text	00000018 vApplicationGetTimerTaskMemory
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a004bc8 g     F .text	00000276 .hidden __adddf3
1a005bbc g       .ARM.exidx	00000000 __exidx_start
1a004f34 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a003dfe g     F .text	0000000e setStartMode
1a0056f8 g     F .text	00000048 __libc_init_array
1a003474 g     F .text	0000008c adcInit
1a004e40 g     F .text	0000001e .hidden __floatunsidf
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a001300 g     F .text	00000070 pvPortMalloc
1a003b58 g     F .text	0000002c Board_Init
1a004bb8 g     F .text	00000002 _init
1a001c12 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a005358 g     F .text	0000009e .hidden __aeabi_d2f
1a00216c g     F .text	0000000c xTaskGetTickCount
1a00165c g     F .text	0000017c xQueueGenericSend
1a00018a  w    F .text	00000002 RTC_IRQHandler
10002d90 g       .bss	00000000 _ebss
1a003f36 g     F .text	00000028 Chip_ADC_EnableChannel
1a00336c g     F .text	00000040 TIMER0_IRQHandler
1a003224 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a004662 g     F .text	00000024 Chip_I2CM_XferBlocking
1a004998 g     F .text	00000038 Chip_I2C_SetClockRate
1a0009f4 g     F .text	0000000c mpu9250GetGyroZ_rads_RTOS
1a0027ac g     F .text	000000b0 xTaskPriorityDisinherit
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a004190 g     F .text	0000004c Chip_Clock_EnableCrystal
1a003e7a g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0025a4 g     F .text	0000008c xTaskRemoveFromEventList
1a001cd6 g     F .text	00000002 vApplicationMallocFailedHook
1a004bc8 g     F .text	00000276 .hidden __aeabi_dadd
1a00018c g     F .text	0000001e data_init
1a003ed8 g     F .text	00000020 Chip_ADC_SetStartMode
1a004ec8 g     F .text	0000006a .hidden __aeabi_ul2d
1a0033ac g     F .text	00000040 TIMER1_IRQHandler
1a004974 g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a003948 g     F .text	00000010 printEnter
1a00434c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a005904 g     O .text	00000136 gpioPinsInit
1a0031bc g     F .text	0000001a uartWriteByte
1a00291c g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a004aac g     F .text	00000012 Chip_SSP_SetClockRate
1a0039d8 g     F .text	0000000a GPIO2_IRQHandler
1a002648 g     F .text	00000080 xTaskCheckForTimeOut
1a003500 g     F .text	00000058 adcRead
1a004434 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0026f4 g     F .text	000000b8 xTaskPriorityInherit
100000d0 g       .bss	00000000 _bss
1a003e82 g     F .text	00000036 Chip_ADC_ReadStatus
1a003ef8 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00118c g     F .text	00000034 taskAceleradorFreno
1a004bc4 g     F .text	0000027a .hidden __aeabi_dsub
1a00215c g     F .text	00000010 vTaskSuspendAll
1a004ec8 g     F .text	0000006a .hidden __floatundidf
10002ce8 g     O .bss	00000010 SemBin
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a004abe g     F .text	0000003e Chip_SSP_SetBitRate
1a001c7a g     F .text	00000028 uxListRemove
1a0046dc g     F .text	00000002 Chip_GPIO_Init
1a005a70 g     O .text	00000004 OscRateIn
1a001ff0 g     F .text	00000072 xTaskCreateStatic
10002d90 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a002474 g     F .text	000000c8 vTaskSwitchContext
1a0038dc g     F .text	00000064 delayInaccurate
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a00157e g     F .text	00000090 xQueueGenericCreateStatic
1a00256c g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a004e60 g     F .text	00000022 .hidden __aeabi_i2d
1a00358c g     F .text	00000194 gpioInit
1a001ca4 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002b00 g     F .text	0000006c xTimerGenericCommand
1a001cd4 g     F .text	00000002 vApplicationStackOverflowHook
1a0056f4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005188 g     F .text	000001d0 .hidden __divdf3
1a004f34 g     F .text	00000254 .hidden __muldf3
1a0037cc g     F .text	0000001c USB0_IRQHandler
1a0044d8 g     F .text	00000034 Chip_Clock_Disable
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a004a30 g     F .text	00000018 Chip_I2C_IsStateChanged
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a0041f8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a005756 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a001274 g     F .text	0000008c main
1a0009e8 g     F .text	0000000c mpu9250GetGyroY_rads_RTOS
1a00018a  w    F .text	00000002 WDT_IRQHandler
1a001c46 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002ea0 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a002a50 g     F .text	00000064 xTimerCreateTimerTask
1a005358 g     F .text	0000009e .hidden __truncdfsf2
1a004ed8 g     F .text	0000005a .hidden __aeabi_l2d
1a003190 g     F .text	00000018 uartTxReady
1a002384 g     F .text	000000a4 vTaskDelayUntil
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a004468 g     F .text	0000003c Chip_Clock_EnableOpts
1a00160e g     F .text	0000004e xQueueGenericCreate
1a004214 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a004688 g     F .text	00000054 fpuInit
1a0042cc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003b84 g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003720 g     F .text	00000056 gpioWrite
1a002290 g     F .text	000000f4 xTaskResumeAll
1a0020c8 g     F .text	00000094 vTaskStartScheduler
1a003e24 g     F .text	00000040 Chip_ADC_Init
10002d88 g     O .bss	00000004 g_pUsbApi
1a003ba0 g     F .text	00000038 Board_SetupMuxing
1a003cd0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a003f5e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0031a8 g     F .text	00000014 uartTxWrite
1a00018a  w    F .text	00000002 CAN0_IRQHandler
1a004558 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a0026c8 g     F .text	0000000c vTaskMissedYield
10002d90 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a004afc g     F .text	00000038 Chip_SSP_Init
1a004a48 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a001b98 g     F .text	00000028 vQueueAddToRegistry
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a002178 g     F .text	00000118 xTaskIncrementTick
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a00334e g     F .text	00000018 i2cWrite
1a003b34 g     F .text	00000024 Board_Debug_Init
1a0014d8 g     F .text	00000084 xQueueGenericReset
1a003eb8 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
100000cc g       .data	00000000 _edata
1a004834 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a002062 g     F .text	00000066 xTaskCreate
1a0046e0 g     F .text	00000154 Chip_SetupCoreClock
1a0039c4 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a004b34 g     F .text	00000084 ResetISR
1a003f80 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a002428 g     F .text	0000004c vTaskDelay
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0026d4 g     F .text	00000020 xTaskGetSchedulerState
1a00285c g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0056f4  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a002e74 g     F .text	0000002c pxPortInitialiseStack
1a0044a4 g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a002ab4 g     F .text	0000004c xTimerCreateStatic
1a0011c0 g     F .text	000000b4 taskGiroscopo
10002cf8 g     O .bss	00000050 datosAntirrebote
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a003776 g     F .text	00000054 gpioRead
1a004e84 g     F .text	00000042 .hidden __aeabi_f2d
1a0037e8 g     F .text	000000f4 boardInit
1a002ec4 g     F .text	00000044 vPortEnterCritical
1a004bc4 g     F .text	0000027a .hidden __subdf3
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000fd0 g     F .text	000001bc taskMefAntirrebote
1a0043dc g     F .text	00000058 Chip_Clock_SetBaseClock
1a003174 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a003c44 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 35 4b 00 1a 79 01 00 1a 7b 01 00 1a     ....5K..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 5a 2d ff 53     }...........Z-.S
	...
1a00002c:	a1 2e 00 1a 85 01 00 1a 00 00 00 00 41 2f 00 1a     ............A/..
1a00003c:	a5 2f 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ./..............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a cd 37 00 1a 8b 01 00 1a 8b 01 00 1a     .....7..........
1a00006c:	8b 01 00 1a 6d 33 00 1a ad 33 00 1a ed 33 00 1a     ....m3...3...3..
1a00007c:	31 34 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     14..............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a c5 39 00 1a cf 39 00 1a d9 39 00 1a     .....9...9...9..
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a005bc4 	.word	0x1a005bc4
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a005bc4 	.word	0x1a005bc4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005bc4 	.word	0x1a005bc4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005bc4 	.word	0x1a005bc4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005bc4 	.word	0x1a005bc4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	00002cc0 	.word	0x00002cc0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <mpu9250InitializeControlStructure_RTOS>:

/*==================[internal functions definition]==========================*/

static int8_t mpu9250InitializeControlStructure_RTOS( void )
{
	control._tempScale = 333.87f;
1a000300:	4b1b      	ldr	r3, [pc, #108]	; (1a000370 <mpu9250InitializeControlStructure_RTOS+0x70>)
1a000302:	4a1c      	ldr	r2, [pc, #112]	; (1a000374 <mpu9250InitializeControlStructure_RTOS+0x74>)
1a000304:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a000306:	4a1c      	ldr	r2, [pc, #112]	; (1a000378 <mpu9250InitializeControlStructure_RTOS+0x78>)
1a000308:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a00030a:	2264      	movs	r2, #100	; 0x64
1a00030c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a000310:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a000314:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a000318:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a00031c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a000320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000324:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a000328:	4914      	ldr	r1, [pc, #80]	; (1a00037c <mpu9250InitializeControlStructure_RTOS+0x7c>)
1a00032a:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a00032e:	2108      	movs	r1, #8
1a000330:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a000334:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a000338:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a00033c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a000340:	2200      	movs	r2, #0
1a000342:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a000346:	2101      	movs	r1, #1
1a000348:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a00034c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a000350:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a000354:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a000358:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a00035c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a000360:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a000364:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a000368:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a00036c:	4770      	bx	lr
1a00036e:	bf00      	nop
1a000370:	100000d0 	.word	0x100000d0
1a000374:	43a6ef5c 	.word	0x43a6ef5c
1a000378:	41a80000 	.word	0x41a80000
1a00037c:	3e99999a 	.word	0x3e99999a

1a000380 <mpu9250ReadRegisters_RTOS>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters_RTOS( uint8_t subAddress, uint8_t count )
{
1a000380:	b510      	push	{r4, lr}
1a000382:	b086      	sub	sp, #24
1a000384:	aa06      	add	r2, sp, #24
1a000386:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a00038a:	4809      	ldr	r0, [pc, #36]	; (1a0003b0 <mpu9250ReadRegisters_RTOS+0x30>)
1a00038c:	f810 4b24 	ldrb.w	r4, [r0], #36
1a000390:	2301      	movs	r3, #1
1a000392:	9303      	str	r3, [sp, #12]
1a000394:	9102      	str	r1, [sp, #8]
1a000396:	9001      	str	r0, [sp, #4]
1a000398:	9300      	str	r3, [sp, #0]
1a00039a:	4621      	mov	r1, r4
1a00039c:	2000      	movs	r0, #0
1a00039e:	f002 ffc2 	bl	1a003326 <i2cRead>
1a0003a2:	b110      	cbz	r0, 1a0003aa <mpu9250ReadRegisters_RTOS+0x2a>
		return 1;
1a0003a4:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a0003a6:	b006      	add	sp, #24
1a0003a8:	bd10      	pop	{r4, pc}
		return -1;
1a0003aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003ae:	e7fa      	b.n	1a0003a6 <mpu9250ReadRegisters_RTOS+0x26>
1a0003b0:	100000d0 	.word	0x100000d0

1a0003b4 <mpu9250WhoAmI_RTOS>:
		return -6;
	}
}

static int8_t mpu9250WhoAmI_RTOS( void )
{
1a0003b4:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadRegisters_RTOS(MPU9250_WHO_AM_I,1) < 0) {
1a0003b6:	2101      	movs	r1, #1
1a0003b8:	2075      	movs	r0, #117	; 0x75
1a0003ba:	f7ff ffe1 	bl	1a000380 <mpu9250ReadRegisters_RTOS>
1a0003be:	2800      	cmp	r0, #0
1a0003c0:	db03      	blt.n	1a0003ca <mpu9250WhoAmI_RTOS+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a0003c2:	4b03      	ldr	r3, [pc, #12]	; (1a0003d0 <mpu9250WhoAmI_RTOS+0x1c>)
1a0003c4:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a0003c8:	bd08      	pop	{r3, pc}
		return -1;
1a0003ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003ce:	e7fb      	b.n	1a0003c8 <mpu9250WhoAmI_RTOS+0x14>
1a0003d0:	100000d0 	.word	0x100000d0

1a0003d4 <mpu9250WriteRegister_RTOS>:
{
1a0003d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0003d6:	b085      	sub	sp, #20
1a0003d8:	4606      	mov	r6, r0
1a0003da:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a0003dc:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a0003e0:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a0003e4:	4d0d      	ldr	r5, [pc, #52]	; (1a00041c <mpu9250WriteRegister_RTOS+0x48>)
1a0003e6:	7829      	ldrb	r1, [r5, #0]
1a0003e8:	2701      	movs	r7, #1
1a0003ea:	9700      	str	r7, [sp, #0]
1a0003ec:	2302      	movs	r3, #2
1a0003ee:	aa03      	add	r2, sp, #12
1a0003f0:	2000      	movs	r0, #0
1a0003f2:	f002 ffac 	bl	1a00334e <i2cWrite>
	delayInaccurate(10);
1a0003f6:	200a      	movs	r0, #10
1a0003f8:	2100      	movs	r1, #0
1a0003fa:	f003 fa6f 	bl	1a0038dc <delayInaccurate>
	mpu9250ReadRegisters_RTOS(subAddress,1);
1a0003fe:	4639      	mov	r1, r7
1a000400:	4630      	mov	r0, r6
1a000402:	f7ff ffbd 	bl	1a000380 <mpu9250ReadRegisters_RTOS>
	if(control._buffer[0] == data) {
1a000406:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a00040a:	42a3      	cmp	r3, r4
1a00040c:	d102      	bne.n	1a000414 <mpu9250WriteRegister_RTOS+0x40>
      return 1;
1a00040e:	4638      	mov	r0, r7
}
1a000410:	b005      	add	sp, #20
1a000412:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
1a000414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000418:	e7fa      	b.n	1a000410 <mpu9250WriteRegister_RTOS+0x3c>
1a00041a:	bf00      	nop
1a00041c:	100000d0 	.word	0x100000d0

1a000420 <mpu9250ReadAK8963Registers_RTOS>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250ReadAK8963Registers_RTOS( uint8_t subAddress, uint8_t count )
{
1a000420:	b538      	push	{r3, r4, r5, lr}
1a000422:	4605      	mov	r5, r0
1a000424:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister_RTOS( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a000426:	218c      	movs	r1, #140	; 0x8c
1a000428:	2025      	movs	r0, #37	; 0x25
1a00042a:	f7ff ffd3 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00042e:	2800      	cmp	r0, #0
1a000430:	db18      	blt.n	1a000464 <mpu9250ReadAK8963Registers_RTOS+0x44>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister_RTOS( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a000432:	4629      	mov	r1, r5
1a000434:	2026      	movs	r0, #38	; 0x26
1a000436:	f7ff ffcd 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00043a:	2800      	cmp	r0, #0
1a00043c:	db15      	blt.n	1a00046a <mpu9250ReadAK8963Registers_RTOS+0x4a>
		return -2;
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister_RTOS( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a00043e:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a000442:	2027      	movs	r0, #39	; 0x27
1a000444:	f7ff ffc6 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000448:	2800      	cmp	r0, #0
1a00044a:	db11      	blt.n	1a000470 <mpu9250ReadAK8963Registers_RTOS+0x50>
		return -3;
	}
	delayInaccurate(1); // takes some time for these registers to fill
1a00044c:	2001      	movs	r0, #1
1a00044e:	2100      	movs	r1, #0
1a000450:	f003 fa44 	bl	1a0038dc <delayInaccurate>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters_RTOS(MPU9250_EXT_SENS_DATA_00,count);
1a000454:	4621      	mov	r1, r4
1a000456:	2049      	movs	r0, #73	; 0x49
1a000458:	f7ff ff92 	bl	1a000380 <mpu9250ReadRegisters_RTOS>
1a00045c:	4b06      	ldr	r3, [pc, #24]	; (1a000478 <mpu9250ReadAK8963Registers_RTOS+0x58>)
1a00045e:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
}
1a000462:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000468:	e7fb      	b.n	1a000462 <mpu9250ReadAK8963Registers_RTOS+0x42>
		return -2;
1a00046a:	f06f 0001 	mvn.w	r0, #1
1a00046e:	e7f8      	b.n	1a000462 <mpu9250ReadAK8963Registers_RTOS+0x42>
		return -3;
1a000470:	f06f 0002 	mvn.w	r0, #2
1a000474:	e7f5      	b.n	1a000462 <mpu9250ReadAK8963Registers_RTOS+0x42>
1a000476:	bf00      	nop
1a000478:	100000d0 	.word	0x100000d0

1a00047c <mpu9250WhoAmIAK8963_RTOS>:
{
1a00047c:	b508      	push	{r3, lr}
	if (mpu9250ReadAK8963Registers_RTOS(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a00047e:	2101      	movs	r1, #1
1a000480:	2000      	movs	r0, #0
1a000482:	f7ff ffcd 	bl	1a000420 <mpu9250ReadAK8963Registers_RTOS>
1a000486:	2800      	cmp	r0, #0
1a000488:	db03      	blt.n	1a000492 <mpu9250WhoAmIAK8963_RTOS+0x16>
	return control._buffer[0];
1a00048a:	4b03      	ldr	r3, [pc, #12]	; (1a000498 <mpu9250WhoAmIAK8963_RTOS+0x1c>)
1a00048c:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a000490:	bd08      	pop	{r3, pc}
		return -1;
1a000492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000496:	e7fb      	b.n	1a000490 <mpu9250WhoAmIAK8963_RTOS+0x14>
1a000498:	100000d0 	.word	0x100000d0

1a00049c <mpu9250WriteAK8963Register_RTOS>:
{
1a00049c:	b538      	push	{r3, r4, r5, lr}
1a00049e:	4604      	mov	r4, r0
1a0004a0:	460d      	mov	r5, r1
	if (mpu9250WriteRegister_RTOS( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a0004a2:	210c      	movs	r1, #12
1a0004a4:	2025      	movs	r0, #37	; 0x25
1a0004a6:	f7ff ff95 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0004aa:	2800      	cmp	r0, #0
1a0004ac:	db1e      	blt.n	1a0004ec <mpu9250WriteAK8963Register_RTOS+0x50>
	if (mpu9250WriteRegister_RTOS( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a0004ae:	4621      	mov	r1, r4
1a0004b0:	2026      	movs	r0, #38	; 0x26
1a0004b2:	f7ff ff8f 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0004b6:	2800      	cmp	r0, #0
1a0004b8:	db1b      	blt.n	1a0004f2 <mpu9250WriteAK8963Register_RTOS+0x56>
	if (mpu9250WriteRegister_RTOS( MPU9250_I2C_SLV0_DO, data) < 0) {
1a0004ba:	4629      	mov	r1, r5
1a0004bc:	2063      	movs	r0, #99	; 0x63
1a0004be:	f7ff ff89 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0004c2:	2800      	cmp	r0, #0
1a0004c4:	db18      	blt.n	1a0004f8 <mpu9250WriteAK8963Register_RTOS+0x5c>
	if (mpu9250WriteRegister_RTOS( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a0004c6:	2181      	movs	r1, #129	; 0x81
1a0004c8:	2027      	movs	r0, #39	; 0x27
1a0004ca:	f7ff ff83 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0004ce:	2800      	cmp	r0, #0
1a0004d0:	db15      	blt.n	1a0004fe <mpu9250WriteAK8963Register_RTOS+0x62>
	if (mpu9250ReadAK8963Registers_RTOS(subAddress,1) < 0) {
1a0004d2:	2101      	movs	r1, #1
1a0004d4:	4620      	mov	r0, r4
1a0004d6:	f7ff ffa3 	bl	1a000420 <mpu9250ReadAK8963Registers_RTOS>
1a0004da:	2800      	cmp	r0, #0
1a0004dc:	db12      	blt.n	1a000504 <mpu9250WriteAK8963Register_RTOS+0x68>
	if(control._buffer[0] == data) {
1a0004de:	4b0c      	ldr	r3, [pc, #48]	; (1a000510 <mpu9250WriteAK8963Register_RTOS+0x74>)
1a0004e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a0004e4:	42ab      	cmp	r3, r5
1a0004e6:	d110      	bne.n	1a00050a <mpu9250WriteAK8963Register_RTOS+0x6e>
		return 1;
1a0004e8:	2001      	movs	r0, #1
}
1a0004ea:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0004ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004f0:	e7fb      	b.n	1a0004ea <mpu9250WriteAK8963Register_RTOS+0x4e>
		return -2;
1a0004f2:	f06f 0001 	mvn.w	r0, #1
1a0004f6:	e7f8      	b.n	1a0004ea <mpu9250WriteAK8963Register_RTOS+0x4e>
		return -3;
1a0004f8:	f06f 0002 	mvn.w	r0, #2
1a0004fc:	e7f5      	b.n	1a0004ea <mpu9250WriteAK8963Register_RTOS+0x4e>
		return -4;
1a0004fe:	f06f 0003 	mvn.w	r0, #3
1a000502:	e7f2      	b.n	1a0004ea <mpu9250WriteAK8963Register_RTOS+0x4e>
		return -5;
1a000504:	f06f 0004 	mvn.w	r0, #4
1a000508:	e7ef      	b.n	1a0004ea <mpu9250WriteAK8963Register_RTOS+0x4e>
		return -6;
1a00050a:	f06f 0005 	mvn.w	r0, #5
1a00050e:	e7ec      	b.n	1a0004ea <mpu9250WriteAK8963Register_RTOS+0x4e>
1a000510:	100000d0 	.word	0x100000d0

1a000514 <mpu9250SetGyroRange_RTOS>:
	}
	return 1;
}

static int8_t mpu9250SetGyroRange_RTOS( MPU9250_GyroRange_t range )
{
1a000514:	b510      	push	{r4, lr}
1a000516:	4604      	mov	r4, r0
	switch(range) {
1a000518:	2803      	cmp	r0, #3
1a00051a:	d80c      	bhi.n	1a000536 <mpu9250SetGyroRange_RTOS+0x22>
1a00051c:	e8df f000 	tbb	[pc, r0]
1a000520:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister_RTOS(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a000524:	2100      	movs	r1, #0
1a000526:	201b      	movs	r0, #27
1a000528:	f7ff ff54 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00052c:	2800      	cmp	r0, #0
1a00052e:	db25      	blt.n	1a00057c <mpu9250SetGyroRange_RTOS+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a000530:	4b18      	ldr	r3, [pc, #96]	; (1a000594 <mpu9250SetGyroRange_RTOS+0x80>)
1a000532:	4a19      	ldr	r2, [pc, #100]	; (1a000598 <mpu9250SetGyroRange_RTOS+0x84>)
1a000534:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
		  break;
		}
	}
	control._gyroRange = range;
1a000536:	4b17      	ldr	r3, [pc, #92]	; (1a000594 <mpu9250SetGyroRange_RTOS+0x80>)
1a000538:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a00053c:	2001      	movs	r0, #1
}
1a00053e:	bd10      	pop	{r4, pc}
		  if(mpu9250WriteRegister_RTOS(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a000540:	2108      	movs	r1, #8
1a000542:	201b      	movs	r0, #27
1a000544:	f7ff ff46 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000548:	2800      	cmp	r0, #0
1a00054a:	db1a      	blt.n	1a000582 <mpu9250SetGyroRange_RTOS+0x6e>
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a00054c:	4b11      	ldr	r3, [pc, #68]	; (1a000594 <mpu9250SetGyroRange_RTOS+0x80>)
1a00054e:	4a13      	ldr	r2, [pc, #76]	; (1a00059c <mpu9250SetGyroRange_RTOS+0x88>)
1a000550:	609a      	str	r2, [r3, #8]
		  break;
1a000552:	e7f0      	b.n	1a000536 <mpu9250SetGyroRange_RTOS+0x22>
		  if(mpu9250WriteRegister_RTOS(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a000554:	2110      	movs	r1, #16
1a000556:	201b      	movs	r0, #27
1a000558:	f7ff ff3c 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00055c:	2800      	cmp	r0, #0
1a00055e:	db13      	blt.n	1a000588 <mpu9250SetGyroRange_RTOS+0x74>
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a000560:	4b0c      	ldr	r3, [pc, #48]	; (1a000594 <mpu9250SetGyroRange_RTOS+0x80>)
1a000562:	4a0f      	ldr	r2, [pc, #60]	; (1a0005a0 <mpu9250SetGyroRange_RTOS+0x8c>)
1a000564:	609a      	str	r2, [r3, #8]
		  break;
1a000566:	e7e6      	b.n	1a000536 <mpu9250SetGyroRange_RTOS+0x22>
		  if(mpu9250WriteRegister_RTOS(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a000568:	2118      	movs	r1, #24
1a00056a:	201b      	movs	r0, #27
1a00056c:	f7ff ff32 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000570:	2800      	cmp	r0, #0
1a000572:	db0c      	blt.n	1a00058e <mpu9250SetGyroRange_RTOS+0x7a>
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a000574:	4b07      	ldr	r3, [pc, #28]	; (1a000594 <mpu9250SetGyroRange_RTOS+0x80>)
1a000576:	4a0b      	ldr	r2, [pc, #44]	; (1a0005a4 <mpu9250SetGyroRange_RTOS+0x90>)
1a000578:	609a      	str	r2, [r3, #8]
		  break;
1a00057a:	e7dc      	b.n	1a000536 <mpu9250SetGyroRange_RTOS+0x22>
			return -1;
1a00057c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000580:	e7dd      	b.n	1a00053e <mpu9250SetGyroRange_RTOS+0x2a>
			return -1;
1a000582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000586:	e7da      	b.n	1a00053e <mpu9250SetGyroRange_RTOS+0x2a>
			return -1;
1a000588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00058c:	e7d7      	b.n	1a00053e <mpu9250SetGyroRange_RTOS+0x2a>
			return -1;
1a00058e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000592:	e7d4      	b.n	1a00053e <mpu9250SetGyroRange_RTOS+0x2a>
1a000594:	100000d0 	.word	0x100000d0
1a000598:	390ba0e4 	.word	0x390ba0e4
1a00059c:	398ba0e4 	.word	0x398ba0e4
1a0005a0:	3a0ba0e4 	.word	0x3a0ba0e4
1a0005a4:	3a8ba0e4 	.word	0x3a8ba0e4

1a0005a8 <mpu9250SetDlpfBandwidth_RTOS>:

static int8_t mpu9250SetDlpfBandwidth_RTOS( MPU9250_DlpfBandwidth_t bandwidth )
{
1a0005a8:	b510      	push	{r4, lr}
1a0005aa:	4604      	mov	r4, r0
	switch (bandwidth) {
1a0005ac:	2805      	cmp	r0, #5
1a0005ae:	d810      	bhi.n	1a0005d2 <mpu9250SetDlpfBandwidth_RTOS+0x2a>
1a0005b0:	e8df f000 	tbb	[pc, r0]
1a0005b4:	32231403 	.word	0x32231403
1a0005b8:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a0005ba:	2101      	movs	r1, #1
1a0005bc:	201d      	movs	r0, #29
1a0005be:	f7ff ff09 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0005c2:	2800      	cmp	r0, #0
1a0005c4:	db55      	blt.n	1a000672 <mpu9250SetDlpfBandwidth_RTOS+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister_RTOS(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) {
1a0005c6:	2101      	movs	r1, #1
1a0005c8:	201a      	movs	r0, #26
1a0005ca:	f7ff ff03 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0005ce:	2800      	cmp	r0, #0
1a0005d0:	db52      	blt.n	1a000678 <mpu9250SetDlpfBandwidth_RTOS+0xd0>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a0005d2:	4b32      	ldr	r3, [pc, #200]	; (1a00069c <mpu9250SetDlpfBandwidth_RTOS+0xf4>)
1a0005d4:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a0005d8:	2001      	movs	r0, #1
}
1a0005da:	bd10      	pop	{r4, pc}
			if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) {
1a0005dc:	2102      	movs	r1, #2
1a0005de:	201d      	movs	r0, #29
1a0005e0:	f7ff fef8 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0005e4:	2800      	cmp	r0, #0
1a0005e6:	db4a      	blt.n	1a00067e <mpu9250SetDlpfBandwidth_RTOS+0xd6>
			if (mpu9250WriteRegister_RTOS(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) {
1a0005e8:	2102      	movs	r1, #2
1a0005ea:	201a      	movs	r0, #26
1a0005ec:	f7ff fef2 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0005f0:	2800      	cmp	r0, #0
1a0005f2:	daee      	bge.n	1a0005d2 <mpu9250SetDlpfBandwidth_RTOS+0x2a>
				return -2;
1a0005f4:	f06f 0001 	mvn.w	r0, #1
1a0005f8:	e7ef      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
			if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) {
1a0005fa:	2103      	movs	r1, #3
1a0005fc:	201d      	movs	r0, #29
1a0005fe:	f7ff fee9 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000602:	2800      	cmp	r0, #0
1a000604:	db3e      	blt.n	1a000684 <mpu9250SetDlpfBandwidth_RTOS+0xdc>
			if (mpu9250WriteRegister_RTOS(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) {
1a000606:	2103      	movs	r1, #3
1a000608:	201a      	movs	r0, #26
1a00060a:	f7ff fee3 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00060e:	2800      	cmp	r0, #0
1a000610:	dadf      	bge.n	1a0005d2 <mpu9250SetDlpfBandwidth_RTOS+0x2a>
				return -2;
1a000612:	f06f 0001 	mvn.w	r0, #1
1a000616:	e7e0      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
			if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) {
1a000618:	2104      	movs	r1, #4
1a00061a:	201d      	movs	r0, #29
1a00061c:	f7ff feda 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000620:	2800      	cmp	r0, #0
1a000622:	db32      	blt.n	1a00068a <mpu9250SetDlpfBandwidth_RTOS+0xe2>
			if (mpu9250WriteRegister_RTOS(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) {
1a000624:	2104      	movs	r1, #4
1a000626:	201a      	movs	r0, #26
1a000628:	f7ff fed4 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00062c:	2800      	cmp	r0, #0
1a00062e:	dad0      	bge.n	1a0005d2 <mpu9250SetDlpfBandwidth_RTOS+0x2a>
				return -2;
1a000630:	f06f 0001 	mvn.w	r0, #1
1a000634:	e7d1      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
			if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) {
1a000636:	2105      	movs	r1, #5
1a000638:	201d      	movs	r0, #29
1a00063a:	f7ff fecb 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00063e:	2800      	cmp	r0, #0
1a000640:	db26      	blt.n	1a000690 <mpu9250SetDlpfBandwidth_RTOS+0xe8>
			if (mpu9250WriteRegister_RTOS(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) {
1a000642:	2105      	movs	r1, #5
1a000644:	201a      	movs	r0, #26
1a000646:	f7ff fec5 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00064a:	2800      	cmp	r0, #0
1a00064c:	dac1      	bge.n	1a0005d2 <mpu9250SetDlpfBandwidth_RTOS+0x2a>
				return -2;
1a00064e:	f06f 0001 	mvn.w	r0, #1
1a000652:	e7c2      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
			if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) {
1a000654:	2106      	movs	r1, #6
1a000656:	201d      	movs	r0, #29
1a000658:	f7ff febc 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a00065c:	2800      	cmp	r0, #0
1a00065e:	db1a      	blt.n	1a000696 <mpu9250SetDlpfBandwidth_RTOS+0xee>
			if (mpu9250WriteRegister_RTOS(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) {
1a000660:	2106      	movs	r1, #6
1a000662:	201a      	movs	r0, #26
1a000664:	f7ff feb6 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000668:	2800      	cmp	r0, #0
1a00066a:	dab2      	bge.n	1a0005d2 <mpu9250SetDlpfBandwidth_RTOS+0x2a>
				return -2;
1a00066c:	f06f 0001 	mvn.w	r0, #1
1a000670:	e7b3      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
				return -1;
1a000672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000676:	e7b0      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
				return -2;
1a000678:	f06f 0001 	mvn.w	r0, #1
1a00067c:	e7ad      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
				return -1;
1a00067e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000682:	e7aa      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
				return -1;
1a000684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000688:	e7a7      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
				return -1;
1a00068a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00068e:	e7a4      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
				return -1;
1a000690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000694:	e7a1      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
				return -1;
1a000696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00069a:	e79e      	b.n	1a0005da <mpu9250SetDlpfBandwidth_RTOS+0x32>
1a00069c:	100000d0 	.word	0x100000d0

1a0006a0 <mpu9250SetSrd_RTOS>:

static int8_t mpu9250SetSrd_RTOS( uint8_t srd )
{
1a0006a0:	b510      	push	{r4, lr}
1a0006a2:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister_RTOS(MPU9250_SMPDIV, 19) < 0) {
1a0006a4:	2113      	movs	r1, #19
1a0006a6:	2019      	movs	r0, #25
1a0006a8:	f7ff fe94 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0006ac:	2800      	cmp	r0, #0
1a0006ae:	db3d      	blt.n	1a00072c <mpu9250SetSrd_RTOS+0x8c>
		return -1;
	}
	if (srd > 9) {
1a0006b0:	2c09      	cmp	r4, #9
1a0006b2:	d922      	bls.n	1a0006fa <mpu9250SetSrd_RTOS+0x5a>
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0006b4:	2100      	movs	r1, #0
1a0006b6:	200a      	movs	r0, #10
1a0006b8:	f7ff fef0 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a0006bc:	2800      	cmp	r0, #0
1a0006be:	db38      	blt.n	1a000732 <mpu9250SetSrd_RTOS+0x92>
			return -2;
		}
		delayInaccurate(100); // long wait between AK8963 mode changes
1a0006c0:	2064      	movs	r0, #100	; 0x64
1a0006c2:	2100      	movs	r1, #0
1a0006c4:	f003 f90a 	bl	1a0038dc <delayInaccurate>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a0006c8:	2112      	movs	r1, #18
1a0006ca:	200a      	movs	r0, #10
1a0006cc:	f7ff fee6 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a0006d0:	2800      	cmp	r0, #0
1a0006d2:	db31      	blt.n	1a000738 <mpu9250SetSrd_RTOS+0x98>
			return -3;
		}
		delayInaccurate(100); // long wait between AK8963 mode changes
1a0006d4:	2064      	movs	r0, #100	; 0x64
1a0006d6:	2100      	movs	r1, #0
1a0006d8:	f003 f900 	bl	1a0038dc <delayInaccurate>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers_RTOS(MPU9250_AK8963_HXL, 7);
1a0006dc:	2107      	movs	r1, #7
1a0006de:	2003      	movs	r0, #3
1a0006e0:	f7ff fe9e 	bl	1a000420 <mpu9250ReadAK8963Registers_RTOS>
		delayInaccurate(100); // long wait between AK8963 mode changes
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers_RTOS(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister_RTOS(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a0006e4:	4621      	mov	r1, r4
1a0006e6:	2019      	movs	r0, #25
1a0006e8:	f7ff fe74 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a0006ec:	2800      	cmp	r0, #0
1a0006ee:	db2c      	blt.n	1a00074a <mpu9250SetSrd_RTOS+0xaa>
		return -4;
	}
	control._srd = srd;
1a0006f0:	4b17      	ldr	r3, [pc, #92]	; (1a000750 <mpu9250SetSrd_RTOS+0xb0>)
1a0006f2:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a0006f6:	2001      	movs	r0, #1
}
1a0006f8:	bd10      	pop	{r4, pc}
		if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0006fa:	2100      	movs	r1, #0
1a0006fc:	200a      	movs	r0, #10
1a0006fe:	f7ff fecd 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a000702:	2800      	cmp	r0, #0
1a000704:	db1b      	blt.n	1a00073e <mpu9250SetSrd_RTOS+0x9e>
		delayInaccurate(100); // long wait between AK8963 mode changes
1a000706:	2064      	movs	r0, #100	; 0x64
1a000708:	2100      	movs	r1, #0
1a00070a:	f003 f8e7 	bl	1a0038dc <delayInaccurate>
		if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a00070e:	2116      	movs	r1, #22
1a000710:	200a      	movs	r0, #10
1a000712:	f7ff fec3 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a000716:	2800      	cmp	r0, #0
1a000718:	db14      	blt.n	1a000744 <mpu9250SetSrd_RTOS+0xa4>
		delayInaccurate(100); // long wait between AK8963 mode changes
1a00071a:	2064      	movs	r0, #100	; 0x64
1a00071c:	2100      	movs	r1, #0
1a00071e:	f003 f8dd 	bl	1a0038dc <delayInaccurate>
		mpu9250ReadAK8963Registers_RTOS(MPU9250_AK8963_HXL, 7);
1a000722:	2107      	movs	r1, #7
1a000724:	2003      	movs	r0, #3
1a000726:	f7ff fe7b 	bl	1a000420 <mpu9250ReadAK8963Registers_RTOS>
1a00072a:	e7db      	b.n	1a0006e4 <mpu9250SetSrd_RTOS+0x44>
		return -1;
1a00072c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000730:	e7e2      	b.n	1a0006f8 <mpu9250SetSrd_RTOS+0x58>
			return -2;
1a000732:	f06f 0001 	mvn.w	r0, #1
1a000736:	e7df      	b.n	1a0006f8 <mpu9250SetSrd_RTOS+0x58>
			return -3;
1a000738:	f06f 0002 	mvn.w	r0, #2
1a00073c:	e7dc      	b.n	1a0006f8 <mpu9250SetSrd_RTOS+0x58>
			return -2;
1a00073e:	f06f 0001 	mvn.w	r0, #1
1a000742:	e7d9      	b.n	1a0006f8 <mpu9250SetSrd_RTOS+0x58>
			return -3;
1a000744:	f06f 0002 	mvn.w	r0, #2
1a000748:	e7d6      	b.n	1a0006f8 <mpu9250SetSrd_RTOS+0x58>
		return -4;
1a00074a:	f06f 0003 	mvn.w	r0, #3
1a00074e:	e7d3      	b.n	1a0006f8 <mpu9250SetSrd_RTOS+0x58>
1a000750:	100000d0 	.word	0x100000d0

1a000754 <mpu9250Read_RTOS>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read_RTOS(void)
{
1a000754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000758:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters_RTOS(MPU9250_ACCEL_OUT, 21) ){
1a00075a:	2115      	movs	r1, #21
1a00075c:	203b      	movs	r0, #59	; 0x3b
1a00075e:	f7ff fe0f 	bl	1a000380 <mpu9250ReadRegisters_RTOS>
1a000762:	2800      	cmp	r0, #0
1a000764:	f000 8136 	beq.w	1a0009d4 <mpu9250Read_RTOS+0x280>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a000768:	4b9b      	ldr	r3, [pc, #620]	; (1a0009d8 <mpu9250Read_RTOS+0x284>)
1a00076a:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a00076e:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a000772:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a000776:	fa0f fb81 	sxth.w	fp, r1
1a00077a:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a00077e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a000782:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a000786:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a00078a:	b209      	sxth	r1, r1
1a00078c:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a000790:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a000794:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a000798:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a00079c:	b212      	sxth	r2, r2
1a00079e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a0007a2:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a0007a6:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a0007aa:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a0007ae:	b200      	sxth	r0, r0
1a0007b0:	ee05 0a90 	vmov	s11, r0
1a0007b4:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a0007b8:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a0007bc:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a0007c0:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a0007c4:	b236      	sxth	r6, r6
1a0007c6:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a0007ca:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a0007ce:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a0007d2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a0007d6:	b200      	sxth	r0, r0
1a0007d8:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a0007dc:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a0007e0:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a0007e4:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a0007e8:	b22d      	sxth	r5, r5
1a0007ea:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a0007ee:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a0007f2:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a0007f6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a0007fa:	b224      	sxth	r4, r4
1a0007fc:	ee06 4a90 	vmov	s13, r4
1a000800:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a000804:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a000808:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a00080c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000810:	b224      	sxth	r4, r4
1a000812:	ee07 4a10 	vmov	s14, r4
1a000816:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a00081a:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a00081e:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a000822:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000826:	b224      	sxth	r4, r4
1a000828:	ee07 4a90 	vmov	s15, r4
1a00082c:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a000830:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a000834:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a000838:	fb01 f407 	mul.w	r4, r1, r7
1a00083c:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a000840:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a000844:	9401      	str	r4, [sp, #4]
1a000846:	fb02 cc04 	mla	ip, r2, r4, ip
1a00084a:	ee06 ca10 	vmov	s12, ip
1a00084e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000852:	ed93 5a01 	vldr	s10, [r3, #4]
1a000856:	ee26 6a05 	vmul.f32	s12, s12, s10
1a00085a:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a00085e:	ee36 6a64 	vsub.f32	s12, s12, s9
1a000862:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a000866:	ee26 6a24 	vmul.f32	s12, s12, s9
1a00086a:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a00086e:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a000872:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a000876:	fb08 fc01 	mul.w	ip, r8, r1
1a00087a:	fb0e cc0b 	mla	ip, lr, fp, ip
1a00087e:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a000882:	fb04 cc02 	mla	ip, r4, r2, ip
1a000886:	ee06 ca10 	vmov	s12, ip
1a00088a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a00088e:	ee25 6a06 	vmul.f32	s12, s10, s12
1a000892:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a000896:	ee36 6a64 	vsub.f32	s12, s12, s9
1a00089a:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a00089e:	ee26 6a24 	vmul.f32	s12, s12, s9
1a0008a2:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a0008a6:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a0008aa:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a0008ae:	fb09 f101 	mul.w	r1, r9, r1
1a0008b2:	fb0c 110b 	mla	r1, ip, fp, r1
1a0008b6:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a0008ba:	fb0b 1102 	mla	r1, fp, r2, r1
1a0008be:	ee06 1a10 	vmov	s12, r1
1a0008c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0008c6:	ee25 5a06 	vmul.f32	s10, s10, s12
1a0008ca:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a0008ce:	ee35 5a46 	vsub.f32	s10, s10, s12
1a0008d2:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a0008d6:	ee25 5a06 	vmul.f32	s10, s10, s12
1a0008da:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a0008de:	fb00 f707 	mul.w	r7, r0, r7
1a0008e2:	fb06 770a 	mla	r7, r6, sl, r7
1a0008e6:	9a01      	ldr	r2, [sp, #4]
1a0008e8:	fb05 7202 	mla	r2, r5, r2, r7
1a0008ec:	ee06 2a10 	vmov	s12, r2
1a0008f0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0008f4:	ed93 5a02 	vldr	s10, [r3, #8]
1a0008f8:	ee26 6a05 	vmul.f32	s12, s12, s10
1a0008fc:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a000900:	ee36 6a64 	vsub.f32	s12, s12, s9
1a000904:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a000908:	fb00 f808 	mul.w	r8, r0, r8
1a00090c:	fb06 8e0e 	mla	lr, r6, lr, r8
1a000910:	fb05 e204 	mla	r2, r5, r4, lr
1a000914:	ee06 2a10 	vmov	s12, r2
1a000918:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a00091c:	ee25 6a06 	vmul.f32	s12, s10, s12
1a000920:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a000924:	ee36 6a64 	vsub.f32	s12, s12, s9
1a000928:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a00092c:	fb00 f009 	mul.w	r0, r0, r9
1a000930:	fb06 000c 	mla	r0, r6, ip, r0
1a000934:	fb05 050b 	mla	r5, r5, fp, r0
1a000938:	ee06 5a10 	vmov	s12, r5
1a00093c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000940:	ee25 5a06 	vmul.f32	s10, s10, s12
1a000944:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a000948:	ee35 5a46 	vsub.f32	s10, s10, s12
1a00094c:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a000950:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a000954:	ed93 6a03 	vldr	s12, [r3, #12]
1a000958:	ee66 6a86 	vmul.f32	s13, s13, s12
1a00095c:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a000960:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a000964:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a000968:	ee66 6a86 	vmul.f32	s13, s13, s12
1a00096c:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a000970:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a000974:	edd3 6a04 	vldr	s13, [r3, #16]
1a000978:	ee27 7a26 	vmul.f32	s14, s14, s13
1a00097c:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a000980:	ee37 7a66 	vsub.f32	s14, s14, s13
1a000984:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a000988:	ee27 7a26 	vmul.f32	s14, s14, s13
1a00098c:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000994:	ed93 7a05 	vldr	s14, [r3, #20]
1a000998:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00099c:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a0009a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a0009a4:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a0009a8:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0009ac:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a0009b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a0009b4:	edd3 7a07 	vldr	s15, [r3, #28]
1a0009b8:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a0009bc:	edd3 6a06 	vldr	s13, [r3, #24]
1a0009c0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a0009c4:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0009c8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a0009cc:	2001      	movs	r0, #1
}
1a0009ce:	b003      	add	sp, #12
1a0009d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a0009d4:	2000      	movs	r0, #0
1a0009d6:	e7fa      	b.n	1a0009ce <mpu9250Read_RTOS+0x27a>
1a0009d8:	100000d0 	.word	0x100000d0

1a0009dc <mpu9250GetGyroX_rads_RTOS>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu9250GetGyroX_rads_RTOS( void )
{
	return control._gx;
}
1a0009dc:	4b01      	ldr	r3, [pc, #4]	; (1a0009e4 <mpu9250GetGyroX_rads_RTOS+0x8>)
1a0009de:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a0009e2:	4770      	bx	lr
1a0009e4:	100000d0 	.word	0x100000d0

1a0009e8 <mpu9250GetGyroY_rads_RTOS>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu9250GetGyroY_rads_RTOS( void )
{
	return control._gy;
}
1a0009e8:	4b01      	ldr	r3, [pc, #4]	; (1a0009f0 <mpu9250GetGyroY_rads_RTOS+0x8>)
1a0009ea:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a0009ee:	4770      	bx	lr
1a0009f0:	100000d0 	.word	0x100000d0

1a0009f4 <mpu9250GetGyroZ_rads_RTOS>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu9250GetGyroZ_rads_RTOS( void )
{
	return control._gz;
}
1a0009f4:	4b01      	ldr	r3, [pc, #4]	; (1a0009fc <mpu9250GetGyroZ_rads_RTOS+0x8>)
1a0009f6:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a0009fa:	4770      	bx	lr
1a0009fc:	100000d0 	.word	0x100000d0

1a000a00 <mpu9250CalibrateGyro_RTOS>:
{
1a000a00:	b538      	push	{r3, r4, r5, lr}
1a000a02:	ed2d 8b02 	vpush	{d8}
	if (mpu9250SetGyroRange_RTOS(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a000a06:	2000      	movs	r0, #0
1a000a08:	f7ff fd84 	bl	1a000514 <mpu9250SetGyroRange_RTOS>
1a000a0c:	2800      	cmp	r0, #0
1a000a0e:	f2c0 8093 	blt.w	1a000b38 <mpu9250CalibrateGyro_RTOS+0x138>
	if (mpu9250SetDlpfBandwidth_RTOS(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a000a12:	2003      	movs	r0, #3
1a000a14:	f7ff fdc8 	bl	1a0005a8 <mpu9250SetDlpfBandwidth_RTOS>
1a000a18:	2800      	cmp	r0, #0
1a000a1a:	f2c0 8090 	blt.w	1a000b3e <mpu9250CalibrateGyro_RTOS+0x13e>
	if (mpu9250SetSrd_RTOS(19) < 0) {
1a000a1e:	2013      	movs	r0, #19
1a000a20:	f7ff fe3e 	bl	1a0006a0 <mpu9250SetSrd_RTOS>
1a000a24:	2800      	cmp	r0, #0
1a000a26:	f2c0 808d 	blt.w	1a000b44 <mpu9250CalibrateGyro_RTOS+0x144>
	control._gxbD = 0;
1a000a2a:	4b4b      	ldr	r3, [pc, #300]	; (1a000b58 <mpu9250CalibrateGyro_RTOS+0x158>)
1a000a2c:	2000      	movs	r0, #0
1a000a2e:	2100      	movs	r1, #0
1a000a30:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a000a34:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a000a38:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a000a3c:	2500      	movs	r5, #0
1a000a3e:	e04a      	b.n	1a000ad6 <mpu9250CalibrateGyro_RTOS+0xd6>
		mpu9250Read_RTOS();
1a000a40:	f7ff fe88 	bl	1a000754 <mpu9250Read_RTOS>
		control._gxbD += ((mpu9250GetGyroX_rads_RTOS() + control._gxb)/control._numSamples);
1a000a44:	f7ff ffca 	bl	1a0009dc <mpu9250GetGyroX_rads_RTOS>
1a000a48:	4c43      	ldr	r4, [pc, #268]	; (1a000b58 <mpu9250CalibrateGyro_RTOS+0x158>)
1a000a4a:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a000a4e:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000a52:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a000a56:	ee08 3a10 	vmov	s16, r3
1a000a5a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a000a5e:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a000a62:	ee17 0a90 	vmov	r0, s15
1a000a66:	f004 fa0d 	bl	1a004e84 <__aeabi_f2d>
1a000a6a:	4602      	mov	r2, r0
1a000a6c:	460b      	mov	r3, r1
1a000a6e:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a000a72:	f004 f8a9 	bl	1a004bc8 <__adddf3>
1a000a76:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((mpu9250GetGyroY_rads_RTOS() + control._gyb)/control._numSamples);
1a000a7a:	f7ff ffb5 	bl	1a0009e8 <mpu9250GetGyroY_rads_RTOS>
1a000a7e:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a000a82:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000a86:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a000a8a:	ee17 0a90 	vmov	r0, s15
1a000a8e:	f004 f9f9 	bl	1a004e84 <__aeabi_f2d>
1a000a92:	4602      	mov	r2, r0
1a000a94:	460b      	mov	r3, r1
1a000a96:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a000a9a:	f004 f895 	bl	1a004bc8 <__adddf3>
1a000a9e:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((mpu9250GetGyroZ_rads_RTOS() + control._gzb)/control._numSamples);
1a000aa2:	f7ff ffa7 	bl	1a0009f4 <mpu9250GetGyroZ_rads_RTOS>
1a000aa6:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a000aaa:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000aae:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a000ab2:	ee17 0a90 	vmov	r0, s15
1a000ab6:	f004 f9e5 	bl	1a004e84 <__aeabi_f2d>
1a000aba:	4602      	mov	r2, r0
1a000abc:	460b      	mov	r3, r1
1a000abe:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a000ac2:	f004 f881 	bl	1a004bc8 <__adddf3>
1a000ac6:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		delayInaccurate(20);
1a000aca:	2014      	movs	r0, #20
1a000acc:	2100      	movs	r1, #0
1a000ace:	f002 ff05 	bl	1a0038dc <delayInaccurate>
	for (uint8_t i=0; i < control._numSamples; i++) {
1a000ad2:	3501      	adds	r5, #1
1a000ad4:	b2ed      	uxtb	r5, r5
1a000ad6:	4b20      	ldr	r3, [pc, #128]	; (1a000b58 <mpu9250CalibrateGyro_RTOS+0x158>)
1a000ad8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a000adc:	42ab      	cmp	r3, r5
1a000ade:	d8af      	bhi.n	1a000a40 <mpu9250CalibrateGyro_RTOS+0x40>
	control._gxb = (float)control._gxbD;
1a000ae0:	4c1d      	ldr	r4, [pc, #116]	; (1a000b58 <mpu9250CalibrateGyro_RTOS+0x158>)
1a000ae2:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a000ae6:	f004 fc37 	bl	1a005358 <__aeabi_d2f>
1a000aea:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a000aee:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a000af2:	f004 fc31 	bl	1a005358 <__aeabi_d2f>
1a000af6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a000afa:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a000afe:	f004 fc2b 	bl	1a005358 <__aeabi_d2f>
1a000b02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (mpu9250SetGyroRange_RTOS(control._gyroRange) < 0) {
1a000b06:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a000b0a:	f7ff fd03 	bl	1a000514 <mpu9250SetGyroRange_RTOS>
1a000b0e:	2800      	cmp	r0, #0
1a000b10:	db1b      	blt.n	1a000b4a <mpu9250CalibrateGyro_RTOS+0x14a>
	if (mpu9250SetDlpfBandwidth_RTOS(control._bandwidth) < 0) {
1a000b12:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a000b16:	f7ff fd47 	bl	1a0005a8 <mpu9250SetDlpfBandwidth_RTOS>
1a000b1a:	2800      	cmp	r0, #0
1a000b1c:	db18      	blt.n	1a000b50 <mpu9250CalibrateGyro_RTOS+0x150>
	if (mpu9250SetSrd_RTOS(control._srd) < 0) {
1a000b1e:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a000b22:	f7ff fdbd 	bl	1a0006a0 <mpu9250SetSrd_RTOS>
1a000b26:	2800      	cmp	r0, #0
1a000b28:	db03      	blt.n	1a000b32 <mpu9250CalibrateGyro_RTOS+0x132>
	return 1;
1a000b2a:	2001      	movs	r0, #1
}
1a000b2c:	ecbd 8b02 	vpop	{d8}
1a000b30:	bd38      	pop	{r3, r4, r5, pc}
		return -6;
1a000b32:	f06f 0005 	mvn.w	r0, #5
1a000b36:	e7f9      	b.n	1a000b2c <mpu9250CalibrateGyro_RTOS+0x12c>
		return -1;
1a000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000b3c:	e7f6      	b.n	1a000b2c <mpu9250CalibrateGyro_RTOS+0x12c>
		return -2;
1a000b3e:	f06f 0001 	mvn.w	r0, #1
1a000b42:	e7f3      	b.n	1a000b2c <mpu9250CalibrateGyro_RTOS+0x12c>
		return -3;
1a000b44:	f06f 0002 	mvn.w	r0, #2
1a000b48:	e7f0      	b.n	1a000b2c <mpu9250CalibrateGyro_RTOS+0x12c>
		return -4;
1a000b4a:	f06f 0003 	mvn.w	r0, #3
1a000b4e:	e7ed      	b.n	1a000b2c <mpu9250CalibrateGyro_RTOS+0x12c>
		return -5;
1a000b50:	f06f 0004 	mvn.w	r0, #4
1a000b54:	e7ea      	b.n	1a000b2c <mpu9250CalibrateGyro_RTOS+0x12c>
1a000b56:	bf00      	nop
1a000b58:	100000d0 	.word	0x100000d0

1a000b5c <mpu9250Init_RTOS>:
{
1a000b5c:	b510      	push	{r4, lr}
1a000b5e:	4604      	mov	r4, r0
	mpu9250InitializeControlStructure_RTOS();
1a000b60:	f7ff fbce 	bl	1a000300 <mpu9250InitializeControlStructure_RTOS>
	control.address = address;
1a000b64:	4ba2      	ldr	r3, [pc, #648]	; (1a000df0 <mpu9250Init_RTOS+0x294>)
1a000b66:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a000b68:	49a2      	ldr	r1, [pc, #648]	; (1a000df4 <mpu9250Init_RTOS+0x298>)
1a000b6a:	2000      	movs	r0, #0
1a000b6c:	f002 fbd4 	bl	1a003318 <i2cInit>
	if (mpu9250WriteRegister_RTOS(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a000b70:	2101      	movs	r1, #1
1a000b72:	206b      	movs	r0, #107	; 0x6b
1a000b74:	f7ff fc2e 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000b78:	2800      	cmp	r0, #0
1a000b7a:	f2c0 8100 	blt.w	1a000d7e <mpu9250Init_RTOS+0x222>
	if (mpu9250WriteRegister_RTOS(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a000b7e:	2120      	movs	r1, #32
1a000b80:	206a      	movs	r0, #106	; 0x6a
1a000b82:	f7ff fc27 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000b86:	2800      	cmp	r0, #0
1a000b88:	f2c0 80fc 	blt.w	1a000d84 <mpu9250Init_RTOS+0x228>
	if (mpu9250WriteRegister_RTOS(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a000b8c:	210d      	movs	r1, #13
1a000b8e:	2024      	movs	r0, #36	; 0x24
1a000b90:	f7ff fc20 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000b94:	2800      	cmp	r0, #0
1a000b96:	f2c0 80f8 	blt.w	1a000d8a <mpu9250Init_RTOS+0x22e>
	mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a000b9a:	2100      	movs	r1, #0
1a000b9c:	200a      	movs	r0, #10
1a000b9e:	f7ff fc7d 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
	mpu9250WriteRegister_RTOS(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a000ba2:	2180      	movs	r1, #128	; 0x80
1a000ba4:	206b      	movs	r0, #107	; 0x6b
1a000ba6:	f7ff fc15 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
	delayInaccurate(1);
1a000baa:	2001      	movs	r0, #1
1a000bac:	2100      	movs	r1, #0
1a000bae:	f002 fe95 	bl	1a0038dc <delayInaccurate>
	mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a000bb2:	2101      	movs	r1, #1
1a000bb4:	200b      	movs	r0, #11
1a000bb6:	f7ff fc71 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
	if (mpu9250WriteRegister_RTOS(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a000bba:	2101      	movs	r1, #1
1a000bbc:	206b      	movs	r0, #107	; 0x6b
1a000bbe:	f7ff fc09 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000bc2:	2800      	cmp	r0, #0
1a000bc4:	f2c0 80e4 	blt.w	1a000d90 <mpu9250Init_RTOS+0x234>
	if ((mpu9250WhoAmI_RTOS() != 113) && (mpu9250WhoAmI_RTOS() != 115)) {
1a000bc8:	f7ff fbf4 	bl	1a0003b4 <mpu9250WhoAmI_RTOS>
1a000bcc:	2871      	cmp	r0, #113	; 0x71
1a000bce:	d004      	beq.n	1a000bda <mpu9250Init_RTOS+0x7e>
1a000bd0:	f7ff fbf0 	bl	1a0003b4 <mpu9250WhoAmI_RTOS>
1a000bd4:	2873      	cmp	r0, #115	; 0x73
1a000bd6:	f040 80de 	bne.w	1a000d96 <mpu9250Init_RTOS+0x23a>
	if (mpu9250WriteRegister_RTOS(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a000bda:	2100      	movs	r1, #0
1a000bdc:	206c      	movs	r0, #108	; 0x6c
1a000bde:	f7ff fbf9 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000be2:	2800      	cmp	r0, #0
1a000be4:	f2c0 80da 	blt.w	1a000d9c <mpu9250Init_RTOS+0x240>
	if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a000be8:	2118      	movs	r1, #24
1a000bea:	201c      	movs	r0, #28
1a000bec:	f7ff fbf2 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000bf0:	2800      	cmp	r0, #0
1a000bf2:	f2c0 80d6 	blt.w	1a000da2 <mpu9250Init_RTOS+0x246>
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a000bf6:	4b7e      	ldr	r3, [pc, #504]	; (1a000df0 <mpu9250Init_RTOS+0x294>)
1a000bf8:	4a7f      	ldr	r2, [pc, #508]	; (1a000df8 <mpu9250Init_RTOS+0x29c>)
1a000bfa:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a000bfc:	2203      	movs	r2, #3
1a000bfe:	f883 2020 	strb.w	r2, [r3, #32]
	if (mpu9250WriteRegister_RTOS(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a000c02:	2118      	movs	r1, #24
1a000c04:	201b      	movs	r0, #27
1a000c06:	f7ff fbe5 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000c0a:	2800      	cmp	r0, #0
1a000c0c:	f2c0 80cc 	blt.w	1a000da8 <mpu9250Init_RTOS+0x24c>
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a000c10:	4b77      	ldr	r3, [pc, #476]	; (1a000df0 <mpu9250Init_RTOS+0x294>)
1a000c12:	4a7a      	ldr	r2, [pc, #488]	; (1a000dfc <mpu9250Init_RTOS+0x2a0>)
1a000c14:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a000c16:	2203      	movs	r2, #3
1a000c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (mpu9250WriteRegister_RTOS(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a000c1c:	2101      	movs	r1, #1
1a000c1e:	201d      	movs	r0, #29
1a000c20:	f7ff fbd8 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000c24:	2800      	cmp	r0, #0
1a000c26:	f2c0 80c2 	blt.w	1a000dae <mpu9250Init_RTOS+0x252>
	if (mpu9250WriteRegister_RTOS(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) {
1a000c2a:	2101      	movs	r1, #1
1a000c2c:	201a      	movs	r0, #26
1a000c2e:	f7ff fbd1 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000c32:	2800      	cmp	r0, #0
1a000c34:	f2c0 80be 	blt.w	1a000db4 <mpu9250Init_RTOS+0x258>
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a000c38:	2100      	movs	r1, #0
1a000c3a:	4b6d      	ldr	r3, [pc, #436]	; (1a000df0 <mpu9250Init_RTOS+0x294>)
1a000c3c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (mpu9250WriteRegister_RTOS(MPU9250_SMPDIV, 0x00) < 0) {
1a000c40:	2019      	movs	r0, #25
1a000c42:	f7ff fbc7 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000c46:	2800      	cmp	r0, #0
1a000c48:	f2c0 80b7 	blt.w	1a000dba <mpu9250Init_RTOS+0x25e>
	control._srd = 0;
1a000c4c:	4b68      	ldr	r3, [pc, #416]	; (1a000df0 <mpu9250Init_RTOS+0x294>)
1a000c4e:	2200      	movs	r2, #0
1a000c50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (mpu9250WriteRegister_RTOS(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a000c54:	2120      	movs	r1, #32
1a000c56:	206a      	movs	r0, #106	; 0x6a
1a000c58:	f7ff fbbc 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000c5c:	2800      	cmp	r0, #0
1a000c5e:	f2c0 80af 	blt.w	1a000dc0 <mpu9250Init_RTOS+0x264>
	if (mpu9250WriteRegister_RTOS(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a000c62:	210d      	movs	r1, #13
1a000c64:	2024      	movs	r0, #36	; 0x24
1a000c66:	f7ff fbb5 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000c6a:	2800      	cmp	r0, #0
1a000c6c:	f2c0 80ab 	blt.w	1a000dc6 <mpu9250Init_RTOS+0x26a>
	if (mpu9250WhoAmIAK8963_RTOS() != 72) {
1a000c70:	f7ff fc04 	bl	1a00047c <mpu9250WhoAmIAK8963_RTOS>
1a000c74:	2848      	cmp	r0, #72	; 0x48
1a000c76:	f040 80a9 	bne.w	1a000dcc <mpu9250Init_RTOS+0x270>
	if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000c7a:	2100      	movs	r1, #0
1a000c7c:	200a      	movs	r0, #10
1a000c7e:	f7ff fc0d 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a000c82:	2800      	cmp	r0, #0
1a000c84:	f2c0 80a5 	blt.w	1a000dd2 <mpu9250Init_RTOS+0x276>
	delayInaccurate(100); // long wait between AK8963 mode changes
1a000c88:	2064      	movs	r0, #100	; 0x64
1a000c8a:	2100      	movs	r1, #0
1a000c8c:	f002 fe26 	bl	1a0038dc <delayInaccurate>
	if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a000c90:	210f      	movs	r1, #15
1a000c92:	200a      	movs	r0, #10
1a000c94:	f7ff fc02 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a000c98:	2800      	cmp	r0, #0
1a000c9a:	f2c0 809d 	blt.w	1a000dd8 <mpu9250Init_RTOS+0x27c>
	delayInaccurate(100); // long wait between AK8963 mode changes
1a000c9e:	2064      	movs	r0, #100	; 0x64
1a000ca0:	2100      	movs	r1, #0
1a000ca2:	f002 fe1b 	bl	1a0038dc <delayInaccurate>
	mpu9250ReadAK8963Registers_RTOS(MPU9250_AK8963_ASA, 3);
1a000ca6:	2103      	movs	r1, #3
1a000ca8:	2010      	movs	r0, #16
1a000caa:	f7ff fbb9 	bl	1a000420 <mpu9250ReadAK8963Registers_RTOS>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a000cae:	4b50      	ldr	r3, [pc, #320]	; (1a000df0 <mpu9250Init_RTOS+0x294>)
1a000cb0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a000cb4:	ee07 2a10 	vmov	s14, r2
1a000cb8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a000cbc:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a000e00 <mpu9250Init_RTOS+0x2a4>
1a000cc0:	ee37 7a64 	vsub.f32	s14, s14, s9
1a000cc4:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a000e04 <mpu9250Init_RTOS+0x2a8>
1a000cc8:	ee27 7a05 	vmul.f32	s14, s14, s10
1a000ccc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a000cd0:	ee37 7a25 	vadd.f32	s14, s14, s11
1a000cd4:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a000e08 <mpu9250Init_RTOS+0x2ac>
1a000cd8:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a000cdc:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a000e0c <mpu9250Init_RTOS+0x2b0>
1a000ce0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a000ce4:	edc3 7a03 	vstr	s15, [r3, #12]
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a000ce8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a000cec:	ee07 2a10 	vmov	s14, r2
1a000cf0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a000cf4:	ee37 7a64 	vsub.f32	s14, s14, s9
1a000cf8:	ee27 7a05 	vmul.f32	s14, s14, s10
1a000cfc:	ee37 7a25 	vadd.f32	s14, s14, s11
1a000d00:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a000d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a000d08:	edc3 7a04 	vstr	s15, [r3, #16]
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a000d0c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a000d10:	ee07 2a90 	vmov	s15, r2
1a000d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a000d18:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a000d1c:	ee67 7a85 	vmul.f32	s15, s15, s10
1a000d20:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a000d24:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a000d28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a000d2c:	ed83 7a05 	vstr	s14, [r3, #20]
	if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000d30:	2100      	movs	r1, #0
1a000d32:	200a      	movs	r0, #10
1a000d34:	f7ff fbb2 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a000d38:	2800      	cmp	r0, #0
1a000d3a:	db50      	blt.n	1a000dde <mpu9250Init_RTOS+0x282>
	delayInaccurate(100); // long wait between AK8963 mode changes
1a000d3c:	2064      	movs	r0, #100	; 0x64
1a000d3e:	2100      	movs	r1, #0
1a000d40:	f002 fdcc 	bl	1a0038dc <delayInaccurate>
	if (mpu9250WriteAK8963Register_RTOS(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a000d44:	2116      	movs	r1, #22
1a000d46:	200a      	movs	r0, #10
1a000d48:	f7ff fba8 	bl	1a00049c <mpu9250WriteAK8963Register_RTOS>
1a000d4c:	2800      	cmp	r0, #0
1a000d4e:	db49      	blt.n	1a000de4 <mpu9250Init_RTOS+0x288>
	delayInaccurate(100); // long wait between AK8963 mode changes
1a000d50:	2064      	movs	r0, #100	; 0x64
1a000d52:	2100      	movs	r1, #0
1a000d54:	f002 fdc2 	bl	1a0038dc <delayInaccurate>
	if (mpu9250WriteRegister_RTOS(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a000d58:	2101      	movs	r1, #1
1a000d5a:	206b      	movs	r0, #107	; 0x6b
1a000d5c:	f7ff fb3a 	bl	1a0003d4 <mpu9250WriteRegister_RTOS>
1a000d60:	2800      	cmp	r0, #0
1a000d62:	db42      	blt.n	1a000dea <mpu9250Init_RTOS+0x28e>
	mpu9250ReadAK8963Registers_RTOS(MPU9250_AK8963_HXL, 7);
1a000d64:	2107      	movs	r1, #7
1a000d66:	2003      	movs	r0, #3
1a000d68:	f7ff fb5a 	bl	1a000420 <mpu9250ReadAK8963Registers_RTOS>
	if (mpu9250CalibrateGyro_RTOS() < 0) {
1a000d6c:	f7ff fe48 	bl	1a000a00 <mpu9250CalibrateGyro_RTOS>
1a000d70:	2800      	cmp	r0, #0
1a000d72:	db01      	blt.n	1a000d78 <mpu9250Init_RTOS+0x21c>
	return 1;
1a000d74:	2001      	movs	r0, #1
}
1a000d76:	bd10      	pop	{r4, pc}
		return -20;
1a000d78:	f06f 0013 	mvn.w	r0, #19
1a000d7c:	e7fb      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -1;
1a000d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d82:	e7f8      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -2;
1a000d84:	f06f 0001 	mvn.w	r0, #1
1a000d88:	e7f5      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -3;
1a000d8a:	f06f 0002 	mvn.w	r0, #2
1a000d8e:	e7f2      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -4;
1a000d90:	f06f 0003 	mvn.w	r0, #3
1a000d94:	e7ef      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -5;
1a000d96:	f06f 0004 	mvn.w	r0, #4
1a000d9a:	e7ec      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -6;
1a000d9c:	f06f 0005 	mvn.w	r0, #5
1a000da0:	e7e9      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -7;
1a000da2:	f06f 0006 	mvn.w	r0, #6
1a000da6:	e7e6      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -8;
1a000da8:	f06f 0007 	mvn.w	r0, #7
1a000dac:	e7e3      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -9;
1a000dae:	f06f 0008 	mvn.w	r0, #8
1a000db2:	e7e0      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -10;
1a000db4:	f06f 0009 	mvn.w	r0, #9
1a000db8:	e7dd      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -11;
1a000dba:	f06f 000a 	mvn.w	r0, #10
1a000dbe:	e7da      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -12;
1a000dc0:	f06f 000b 	mvn.w	r0, #11
1a000dc4:	e7d7      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -13;
1a000dc6:	f06f 000c 	mvn.w	r0, #12
1a000dca:	e7d4      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -14;
1a000dcc:	f06f 000d 	mvn.w	r0, #13
1a000dd0:	e7d1      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -15;
1a000dd2:	f06f 000e 	mvn.w	r0, #14
1a000dd6:	e7ce      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -16;
1a000dd8:	f06f 000f 	mvn.w	r0, #15
1a000ddc:	e7cb      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -17;
1a000dde:	f06f 0010 	mvn.w	r0, #16
1a000de2:	e7c8      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -18;
1a000de4:	f06f 0011 	mvn.w	r0, #17
1a000de8:	e7c5      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
		return -19;
1a000dea:	f06f 0012 	mvn.w	r0, #18
1a000dee:	e7c2      	b.n	1a000d76 <mpu9250Init_RTOS+0x21a>
1a000df0:	100000d0 	.word	0x100000d0
1a000df4:	00061a80 	.word	0x00061a80
1a000df8:	3b9cea16 	.word	0x3b9cea16
1a000dfc:	3a8ba0e4 	.word	0x3a8ba0e4
1a000e00:	43000000 	.word	0x43000000
1a000e04:	3b800000 	.word	0x3b800000
1a000e08:	45998000 	.word	0x45998000
1a000e0c:	46fff000 	.word	0x46fff000

1a000e10 <taskLedVariable>:

/*==================[definiciones de funciones externas]=====================*/

// ----------------- CON vTaskDelayUntil----------------------------
void taskLedVariable( void* taskParmPtr )
{
1a000e10:	b500      	push	{lr}
1a000e12:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000e14:	f001 f9aa 	bl	1a00216c <xTaskGetTickCount>
1a000e18:	9001      	str	r0, [sp, #4]
	uint8_t delay_on =100;

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      // Intercambia el estado del LEDB
      gpioWrite( LED1, HIGH );
1a000e1a:	2101      	movs	r1, #1
1a000e1c:	202b      	movs	r0, #43	; 0x2b
1a000e1e:	f002 fc7f 	bl	1a003720 <gpioWrite>

      // Envia la tarea al estado bloqueado duranta el tiempo delay_on
      vTaskDelay( delay_on / portTICK_RATE_MS );
1a000e22:	2064      	movs	r0, #100	; 0x64
1a000e24:	f001 fb00 	bl	1a002428 <vTaskDelay>
      gpioWrite( LED1, LOW);
1a000e28:	2100      	movs	r1, #0
1a000e2a:	202b      	movs	r0, #43	; 0x2b
1a000e2c:	f002 fc78 	bl	1a003720 <gpioWrite>
      //delay_on += 100;
      //if( delay_on == 1000) delay_on = 0;

      vTaskDelayUntil(&tiempo_inicio_ciclo,(delay_on*2)/ portTICK_RATE_MS);
1a000e30:	21c8      	movs	r1, #200	; 0xc8
1a000e32:	a801      	add	r0, sp, #4
1a000e34:	f001 faa6 	bl	1a002384 <vTaskDelayUntil>
1a000e38:	e7ef      	b.n	1a000e1a <taskLedVariable+0xa>
1a000e3a:	Address 0x000000001a000e3a is out of bounds.


1a000e3c <taskProcessor>:

      }

}*/

void taskProcessor(void* taskParmPtr){
1a000e3c:	b500      	push	{lr}
1a000e3e:	b083      	sub	sp, #12
	//-- Setup tarea
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000e40:	f001 f994 	bl	1a00216c <xTaskGetTickCount>
1a000e44:	9001      	str	r0, [sp, #4]
	// --- Inicializacion del estado del vehiculo y variables de salida
	vehiculo.start = 0;
	vehiculo.alarma = 0;
1a000e46:	4b59      	ldr	r3, [pc, #356]	; (1a000fac <taskProcessor+0x170>)
1a000e48:	2200      	movs	r2, #0
1a000e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	vehiculo.estado = PARADO;
1a000e4e:	701a      	strb	r2, [r3, #0]
	vehiculo.frenoOutMD = 0;
1a000e50:	2200      	movs	r2, #0
1a000e52:	63da      	str	r2, [r3, #60]	; 0x3c
	vehiculo.frenoOutMI = 0;
1a000e54:	639a      	str	r2, [r3, #56]	; 0x38
	vehiculo.aceleradorOutMD = 0;
1a000e56:	635a      	str	r2, [r3, #52]	; 0x34
	vehiculo.aceleradorOutMI = 0;
1a000e58:	631a      	str	r2, [r3, #48]	; 0x30
	// --- Inicializacion de variables para debug no implementadas en otras tareas
	vehiculo.start = 1;
1a000e5a:	2201      	movs	r2, #1
1a000e5c:	f883 2020 	strb.w	r2, [r3, #32]
	vehiculo.tempBMS= 30;
1a000e60:	4a53      	ldr	r2, [pc, #332]	; (1a000fb0 <taskProcessor+0x174>)
1a000e62:	62da      	str	r2, [r3, #44]	; 0x2c
	vehiculo.tempMD=45;
1a000e64:	4a53      	ldr	r2, [pc, #332]	; (1a000fb4 <taskProcessor+0x178>)
1a000e66:	629a      	str	r2, [r3, #40]	; 0x28
	vehiculo.tempMI=50;
1a000e68:	4a53      	ldr	r2, [pc, #332]	; (1a000fb8 <taskProcessor+0x17c>)
1a000e6a:	625a      	str	r2, [r3, #36]	; 0x24
1a000e6c:	e00b      	b.n	1a000e86 <taskProcessor+0x4a>


		if(vehiculo.alarma ==ON){
			//-- Se presiono el boton de parada de emergencia
			//--- debugPrintlnString( "--- ALARMA --- Se presiono el boton de parada de emergencia");
			vehiculo.estado = ALARMA;
1a000e6e:	4b4f      	ldr	r3, [pc, #316]	; (1a000fac <taskProcessor+0x170>)
1a000e70:	2204      	movs	r2, #4
1a000e72:	701a      	strb	r2, [r3, #0]
			//--- Nos aseguramos que las salidas queden desactivadas
			vehiculo.aceleradorOutMD = 0;
1a000e74:	2200      	movs	r2, #0
1a000e76:	635a      	str	r2, [r3, #52]	; 0x34
			vehiculo.aceleradorOutMI = 0;
1a000e78:	631a      	str	r2, [r3, #48]	; 0x30
			vehiculo.frenoOutMD = 0;
1a000e7a:	63da      	str	r2, [r3, #60]	; 0x3c
			vehiculo.frenoOutMI = 0;
1a000e7c:	639a      	str	r2, [r3, #56]	; 0x38
				vehiculo.aceleradorOutMI = 0;
				vehiculo.frenoOutMD = 0;
				vehiculo.frenoOutMI = 0;
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,10/portTICK_RATE_MS);
1a000e7e:	210a      	movs	r1, #10
1a000e80:	a801      	add	r0, sp, #4
1a000e82:	f001 fa7f 	bl	1a002384 <vTaskDelayUntil>
		if(vehiculo.alarma ==ON){
1a000e86:	4b49      	ldr	r3, [pc, #292]	; (1a000fac <taskProcessor+0x170>)
1a000e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a000e8c:	2b01      	cmp	r3, #1
1a000e8e:	d0ee      	beq.n	1a000e6e <taskProcessor+0x32>
		else if ((vehiculo.tempBMS > SAFE_TEMP_BMS) || (vehiculo.tempMI > SAFE_TEMP_MI) || (vehiculo.tempMD > SAFE_TEMP_MD)){
1a000e90:	4b46      	ldr	r3, [pc, #280]	; (1a000fac <taskProcessor+0x170>)
1a000e92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
1a000e96:	ed9f 7a49 	vldr	s14, [pc, #292]	; 1a000fbc <taskProcessor+0x180>
1a000e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
1a000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000ea2:	dc0d      	bgt.n	1a000ec0 <taskProcessor+0x84>
1a000ea4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
1a000ea8:	eef4 6ac7 	vcmpe.f32	s13, s14
1a000eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000eb0:	dc06      	bgt.n	1a000ec0 <taskProcessor+0x84>
1a000eb2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
1a000eb6:	eef4 6ac7 	vcmpe.f32	s13, s14
1a000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000ebe:	dd33      	ble.n	1a000f28 <taskProcessor+0xec>
			vehiculo.estado = ALARMA;
1a000ec0:	4b3a      	ldr	r3, [pc, #232]	; (1a000fac <taskProcessor+0x170>)
1a000ec2:	2204      	movs	r2, #4
1a000ec4:	701a      	strb	r2, [r3, #0]
			vehiculo.aceleradorOutMD = 0;
1a000ec6:	2200      	movs	r2, #0
1a000ec8:	635a      	str	r2, [r3, #52]	; 0x34
			vehiculo.aceleradorOutMI = 0;
1a000eca:	631a      	str	r2, [r3, #48]	; 0x30
			vehiculo.frenoOutMD = 0;
1a000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
			vehiculo.frenoOutMI = 0;
1a000ece:	639a      	str	r2, [r3, #56]	; 0x38
			if(vehiculo.tempBMS > SAFE_TEMP_BMS){
1a000ed0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 1a000fbc <taskProcessor+0x180>
1a000ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
1a000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000edc:	dc12      	bgt.n	1a000f04 <taskProcessor+0xc8>
			else if(vehiculo.tempMI > SAFE_TEMP_MI){
1a000ede:	4b33      	ldr	r3, [pc, #204]	; (1a000fac <taskProcessor+0x170>)
1a000ee0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
1a000ee4:	eddf 7a35 	vldr	s15, [pc, #212]	; 1a000fbc <taskProcessor+0x180>
1a000ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000ef0:	dd11      	ble.n	1a000f16 <taskProcessor+0xda>
				debugPrintlnString( "--- ALARMA --- El motor izquierdo sobrepaso la temperatura limite");
1a000ef2:	4c33      	ldr	r4, [pc, #204]	; (1a000fc0 <taskProcessor+0x184>)
1a000ef4:	4933      	ldr	r1, [pc, #204]	; (1a000fc4 <taskProcessor+0x188>)
1a000ef6:	7820      	ldrb	r0, [r4, #0]
1a000ef8:	f002 fd22 	bl	1a003940 <printString>
1a000efc:	7820      	ldrb	r0, [r4, #0]
1a000efe:	f002 fd23 	bl	1a003948 <printEnter>
1a000f02:	e7bc      	b.n	1a000e7e <taskProcessor+0x42>
				debugPrintlnString( "--- ALARMA --- El pack de baterias sobrepaso la temperatura limite");
1a000f04:	4c2e      	ldr	r4, [pc, #184]	; (1a000fc0 <taskProcessor+0x184>)
1a000f06:	4930      	ldr	r1, [pc, #192]	; (1a000fc8 <taskProcessor+0x18c>)
1a000f08:	7820      	ldrb	r0, [r4, #0]
1a000f0a:	f002 fd19 	bl	1a003940 <printString>
1a000f0e:	7820      	ldrb	r0, [r4, #0]
1a000f10:	f002 fd1a 	bl	1a003948 <printEnter>
1a000f14:	e7b3      	b.n	1a000e7e <taskProcessor+0x42>
				debugPrintlnString( "--- ALARMA --- El motor derecho sobrepaso la temperatura limite");
1a000f16:	4c2a      	ldr	r4, [pc, #168]	; (1a000fc0 <taskProcessor+0x184>)
1a000f18:	492c      	ldr	r1, [pc, #176]	; (1a000fcc <taskProcessor+0x190>)
1a000f1a:	7820      	ldrb	r0, [r4, #0]
1a000f1c:	f002 fd10 	bl	1a003940 <printString>
1a000f20:	7820      	ldrb	r0, [r4, #0]
1a000f22:	f002 fd11 	bl	1a003948 <printEnter>
1a000f26:	e7aa      	b.n	1a000e7e <taskProcessor+0x42>
			if(vehiculo.start ==ON){
1a000f28:	4b20      	ldr	r3, [pc, #128]	; (1a000fac <taskProcessor+0x170>)
1a000f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
1a000f2e:	2b01      	cmp	r3, #1
1a000f30:	d008      	beq.n	1a000f44 <taskProcessor+0x108>
				vehiculo.estado = PARADO;
1a000f32:	4b1e      	ldr	r3, [pc, #120]	; (1a000fac <taskProcessor+0x170>)
1a000f34:	2200      	movs	r2, #0
1a000f36:	701a      	strb	r2, [r3, #0]
				vehiculo.aceleradorOutMD = 0;
1a000f38:	2200      	movs	r2, #0
1a000f3a:	635a      	str	r2, [r3, #52]	; 0x34
				vehiculo.aceleradorOutMI = 0;
1a000f3c:	631a      	str	r2, [r3, #48]	; 0x30
				vehiculo.frenoOutMD = 0;
1a000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
				vehiculo.frenoOutMI = 0;
1a000f40:	639a      	str	r2, [r3, #56]	; 0x38
1a000f42:	e79c      	b.n	1a000e7e <taskProcessor+0x42>
				if( (vehiculo.frenoIn ==0) && (vehiculo.aceleradorIn ==0) ){
1a000f44:	4b19      	ldr	r3, [pc, #100]	; (1a000fac <taskProcessor+0x170>)
1a000f46:	889b      	ldrh	r3, [r3, #4]
1a000f48:	b95b      	cbnz	r3, 1a000f62 <taskProcessor+0x126>
1a000f4a:	4a18      	ldr	r2, [pc, #96]	; (1a000fac <taskProcessor+0x170>)
1a000f4c:	8852      	ldrh	r2, [r2, #2]
1a000f4e:	b942      	cbnz	r2, 1a000f62 <taskProcessor+0x126>
					vehiculo.estado = LISTO;
1a000f50:	4b16      	ldr	r3, [pc, #88]	; (1a000fac <taskProcessor+0x170>)
1a000f52:	2203      	movs	r2, #3
1a000f54:	701a      	strb	r2, [r3, #0]
					vehiculo.aceleradorOutMD = 0;
1a000f56:	2200      	movs	r2, #0
1a000f58:	635a      	str	r2, [r3, #52]	; 0x34
					vehiculo.aceleradorOutMI = 0;
1a000f5a:	631a      	str	r2, [r3, #48]	; 0x30
					vehiculo.frenoOutMD = 0;
1a000f5c:	63da      	str	r2, [r3, #60]	; 0x3c
					vehiculo.frenoOutMI = 0;
1a000f5e:	639a      	str	r2, [r3, #56]	; 0x38
1a000f60:	e78d      	b.n	1a000e7e <taskProcessor+0x42>
				else if(vehiculo.frenoIn >0){
1a000f62:	b173      	cbz	r3, 1a000f82 <taskProcessor+0x146>
					vehiculo.estado = FRENANDO;
1a000f64:	4a11      	ldr	r2, [pc, #68]	; (1a000fac <taskProcessor+0x170>)
1a000f66:	2102      	movs	r1, #2
1a000f68:	7011      	strb	r1, [r2, #0]
					vehiculo.aceleradorOutMD = 0;
1a000f6a:	2100      	movs	r1, #0
1a000f6c:	6351      	str	r1, [r2, #52]	; 0x34
					vehiculo.aceleradorOutMI = 0;
1a000f6e:	6311      	str	r1, [r2, #48]	; 0x30
					vehiculo.frenoOutMD = vehiculo.frenoIn;
1a000f70:	ee07 3a90 	vmov	s15, r3
1a000f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a000f78:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
					vehiculo.frenoOutMI = vehiculo.frenoIn;
1a000f7c:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
1a000f80:	e77d      	b.n	1a000e7e <taskProcessor+0x42>
				else if(vehiculo.aceleradorIn > 0){
1a000f82:	4b0a      	ldr	r3, [pc, #40]	; (1a000fac <taskProcessor+0x170>)
1a000f84:	885b      	ldrh	r3, [r3, #2]
1a000f86:	2b00      	cmp	r3, #0
1a000f88:	f43f af79 	beq.w	1a000e7e <taskProcessor+0x42>
					vehiculo.estado = ACELERANDO;
1a000f8c:	4a07      	ldr	r2, [pc, #28]	; (1a000fac <taskProcessor+0x170>)
1a000f8e:	2101      	movs	r1, #1
1a000f90:	7011      	strb	r1, [r2, #0]
					vehiculo.aceleradorOutMD = vehiculo.aceleradorIn;
1a000f92:	ee07 3a90 	vmov	s15, r3
1a000f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a000f9a:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
					vehiculo.aceleradorOutMI = vehiculo.aceleradorIn;
1a000f9e:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
					vehiculo.frenoOutMD = 0;
1a000fa2:	2300      	movs	r3, #0
1a000fa4:	63d3      	str	r3, [r2, #60]	; 0x3c
					vehiculo.frenoOutMI = 0;
1a000fa6:	6393      	str	r3, [r2, #56]	; 0x38
1a000fa8:	e769      	b.n	1a000e7e <taskProcessor+0x42>
1a000faa:	bf00      	nop
1a000fac:	10002ca8 	.word	0x10002ca8
1a000fb0:	41f00000 	.word	0x41f00000
1a000fb4:	42340000 	.word	0x42340000
1a000fb8:	42480000 	.word	0x42480000
1a000fbc:	42700000 	.word	0x42700000
1a000fc0:	10000228 	.word	0x10000228
1a000fc4:	1a005814 	.word	0x1a005814
1a000fc8:	1a0057d0 	.word	0x1a0057d0
1a000fcc:	1a005858 	.word	0x1a005858

1a000fd0 <taskMefAntirrebote>:
{
1a000fd0:	b570      	push	{r4, r5, r6, lr}
1a000fd2:	b082      	sub	sp, #8
	datosAntirrebote[0].tecla = TEC1;
1a000fd4:	4b69      	ldr	r3, [pc, #420]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a000fd6:	2224      	movs	r2, #36	; 0x24
1a000fd8:	701a      	strb	r2, [r3, #0]
	datosAntirrebote[0].state = BUTTON_UP;
1a000fda:	2400      	movs	r4, #0
1a000fdc:	705c      	strb	r4, [r3, #1]
	datosAntirrebote[0].delay = 50;
1a000fde:	2232      	movs	r2, #50	; 0x32
1a000fe0:	605a      	str	r2, [r3, #4]
	datosAntirrebote[1].tecla = TEC2;
1a000fe2:	2125      	movs	r1, #37	; 0x25
1a000fe4:	7519      	strb	r1, [r3, #20]
	datosAntirrebote[1].state = BUTTON_UP;
1a000fe6:	755c      	strb	r4, [r3, #21]
	datosAntirrebote[1].delay = 50;
1a000fe8:	619a      	str	r2, [r3, #24]
	datosAntirrebote[2].tecla = TEC3;
1a000fea:	2126      	movs	r1, #38	; 0x26
1a000fec:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
	datosAntirrebote[2].state = BUTTON_UP;
1a000ff0:	f883 4029 	strb.w	r4, [r3, #41]	; 0x29
	datosAntirrebote[2].delay = 50;
1a000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	datosAntirrebote[3].tecla = TEC4;
1a000ff6:	2127      	movs	r1, #39	; 0x27
1a000ff8:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	datosAntirrebote[3].state = BUTTON_UP;
1a000ffc:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
	datosAntirrebote[3].delay = 50;
1a001000:	641a      	str	r2, [r3, #64]	; 0x40
	SemBin[0] = xSemaphoreCreateBinary();
1a001002:	2203      	movs	r2, #3
1a001004:	4621      	mov	r1, r4
1a001006:	2001      	movs	r0, #1
1a001008:	f000 fb01 	bl	1a00160e <xQueueGenericCreate>
1a00100c:	4d5c      	ldr	r5, [pc, #368]	; (1a001180 <taskMefAntirrebote+0x1b0>)
1a00100e:	6028      	str	r0, [r5, #0]
	SemBin[1] = xSemaphoreCreateBinary();
1a001010:	2203      	movs	r2, #3
1a001012:	4621      	mov	r1, r4
1a001014:	2001      	movs	r0, #1
1a001016:	f000 fafa 	bl	1a00160e <xQueueGenericCreate>
1a00101a:	6068      	str	r0, [r5, #4]
	SemBin[2] = xSemaphoreCreateBinary();
1a00101c:	2203      	movs	r2, #3
1a00101e:	4621      	mov	r1, r4
1a001020:	2001      	movs	r0, #1
1a001022:	f000 faf4 	bl	1a00160e <xQueueGenericCreate>
1a001026:	60a8      	str	r0, [r5, #8]
	SemBin[3] = xSemaphoreCreateBinary();
1a001028:	2203      	movs	r2, #3
1a00102a:	4621      	mov	r1, r4
1a00102c:	2001      	movs	r0, #1
1a00102e:	f000 faee 	bl	1a00160e <xQueueGenericCreate>
1a001032:	60e8      	str	r0, [r5, #12]
{
1a001034:	2400      	movs	r4, #0
1a001036:	e072      	b.n	1a00111e <taskMefAntirrebote+0x14e>
	   		   	   if(!gpioRead(datosAntirrebote[index].tecla)){
1a001038:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00103c:	0093      	lsls	r3, r2, #2
1a00103e:	4a4f      	ldr	r2, [pc, #316]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a001040:	5cd0      	ldrb	r0, [r2, r3]
1a001042:	f002 fb98 	bl	1a003776 <gpioRead>
1a001046:	2800      	cmp	r0, #0
1a001048:	d166      	bne.n	1a001118 <taskMefAntirrebote+0x148>
	   		   		   datosAntirrebote[index].state = BUTTON_FALLING;
1a00104a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00104e:	009a      	lsls	r2, r3, #2
1a001050:	4b4a      	ldr	r3, [pc, #296]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a001052:	4413      	add	r3, r2
1a001054:	2201      	movs	r2, #1
1a001056:	705a      	strb	r2, [r3, #1]
1a001058:	e05e      	b.n	1a001118 <taskMefAntirrebote+0x148>
	   		   	   vTaskDelay( datosAntirrebote[index].delay / portTICK_RATE_MS );
1a00105a:	4e48      	ldr	r6, [pc, #288]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a00105c:	00a3      	lsls	r3, r4, #2
1a00105e:	4423      	add	r3, r4
1a001060:	009d      	lsls	r5, r3, #2
1a001062:	1973      	adds	r3, r6, r5
1a001064:	6858      	ldr	r0, [r3, #4]
1a001066:	f001 f9df 	bl	1a002428 <vTaskDelay>
	   		   	   if(!gpioRead(datosAntirrebote[index].tecla)) {
1a00106a:	5d70      	ldrb	r0, [r6, r5]
1a00106c:	f002 fb83 	bl	1a003776 <gpioRead>
1a001070:	b138      	cbz	r0, 1a001082 <taskMefAntirrebote+0xb2>
	   		   		   datosAntirrebote[index].state = BUTTON_UP;
1a001072:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001076:	009a      	lsls	r2, r3, #2
1a001078:	4b40      	ldr	r3, [pc, #256]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a00107a:	4413      	add	r3, r2
1a00107c:	2200      	movs	r2, #0
1a00107e:	705a      	strb	r2, [r3, #1]
1a001080:	e04a      	b.n	1a001118 <taskMefAntirrebote+0x148>
	   		   		   datosAntirrebote[index].tiempo_inicio_ciclo = xTaskGetTickCount();
1a001082:	f001 f873 	bl	1a00216c <xTaskGetTickCount>
1a001086:	4633      	mov	r3, r6
1a001088:	442b      	add	r3, r5
1a00108a:	6098      	str	r0, [r3, #8]
	   		   		   datosAntirrebote[index].state = BUTTON_DOWN;
1a00108c:	2202      	movs	r2, #2
1a00108e:	705a      	strb	r2, [r3, #1]
1a001090:	e042      	b.n	1a001118 <taskMefAntirrebote+0x148>
	   		   	   if(gpioRead(datosAntirrebote[index].tecla))
1a001092:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001096:	0093      	lsls	r3, r2, #2
1a001098:	4a38      	ldr	r2, [pc, #224]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a00109a:	5cd0      	ldrb	r0, [r2, r3]
1a00109c:	f002 fb6b 	bl	1a003776 <gpioRead>
1a0010a0:	2800      	cmp	r0, #0
1a0010a2:	d039      	beq.n	1a001118 <taskMefAntirrebote+0x148>
	   		   		   datosAntirrebote[index].state = BUTTON_RAISING;
1a0010a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0010a8:	009a      	lsls	r2, r3, #2
1a0010aa:	4b34      	ldr	r3, [pc, #208]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a0010ac:	4413      	add	r3, r2
1a0010ae:	2203      	movs	r2, #3
1a0010b0:	705a      	strb	r2, [r3, #1]
1a0010b2:	e031      	b.n	1a001118 <taskMefAntirrebote+0x148>
	   		   	   if(gpioRead(datosAntirrebote[index].tecla)) {
1a0010b4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0010b8:	0093      	lsls	r3, r2, #2
1a0010ba:	4a30      	ldr	r2, [pc, #192]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a0010bc:	5cd0      	ldrb	r0, [r2, r3]
1a0010be:	f002 fb5a 	bl	1a003776 <gpioRead>
1a0010c2:	b938      	cbnz	r0, 1a0010d4 <taskMefAntirrebote+0x104>
	   		   		datosAntirrebote[index].state = BUTTON_DOWN;
1a0010c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0010c8:	009a      	lsls	r2, r3, #2
1a0010ca:	4b2c      	ldr	r3, [pc, #176]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a0010cc:	4413      	add	r3, r2
1a0010ce:	2202      	movs	r2, #2
1a0010d0:	705a      	strb	r2, [r3, #1]
1a0010d2:	e021      	b.n	1a001118 <taskMefAntirrebote+0x148>
					   datosAntirrebote[index].tiempo_presionado = xTaskGetTickCount() - datosAntirrebote[index].tiempo_inicio_ciclo;
1a0010d4:	f001 f84a 	bl	1a00216c <xTaskGetTickCount>
1a0010d8:	00a3      	lsls	r3, r4, #2
1a0010da:	4423      	add	r3, r4
1a0010dc:	009a      	lsls	r2, r3, #2
1a0010de:	4d27      	ldr	r5, [pc, #156]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a0010e0:	4415      	add	r5, r2
1a0010e2:	68ab      	ldr	r3, [r5, #8]
1a0010e4:	1ac0      	subs	r0, r0, r3
1a0010e6:	6128      	str	r0, [r5, #16]
					   xSemaphoreGive(SemBin[index]);
1a0010e8:	2300      	movs	r3, #0
1a0010ea:	461a      	mov	r2, r3
1a0010ec:	4619      	mov	r1, r3
1a0010ee:	4824      	ldr	r0, [pc, #144]	; (1a001180 <taskMefAntirrebote+0x1b0>)
1a0010f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
1a0010f4:	f000 fab2 	bl	1a00165c <xQueueGenericSend>
					   giveRealizado[index] = 1;
1a0010f8:	2201      	movs	r2, #1
1a0010fa:	ab02      	add	r3, sp, #8
1a0010fc:	4423      	add	r3, r4
1a0010fe:	f803 2c04 	strb.w	r2, [r3, #-4]
					   datosAntirrebote[index].state = BUTTON_UP;
1a001102:	2300      	movs	r3, #0
1a001104:	706b      	strb	r3, [r5, #1]
1a001106:	e007      	b.n	1a001118 <taskMefAntirrebote+0x148>
	   		   	   debugPrintlnString( "MEF Default\r\n" );
1a001108:	4d1e      	ldr	r5, [pc, #120]	; (1a001184 <taskMefAntirrebote+0x1b4>)
1a00110a:	491f      	ldr	r1, [pc, #124]	; (1a001188 <taskMefAntirrebote+0x1b8>)
1a00110c:	7828      	ldrb	r0, [r5, #0]
1a00110e:	f002 fc17 	bl	1a003940 <printString>
1a001112:	7828      	ldrb	r0, [r5, #0]
1a001114:	f002 fc18 	bl	1a003948 <printEnter>
	   index++;
1a001118:	3401      	adds	r4, #1
	   if (index ==4){
1a00111a:	2c04      	cmp	r4, #4
1a00111c:	d02c      	beq.n	1a001178 <taskMefAntirrebote+0x1a8>
	   switch(datosAntirrebote[index].state){
1a00111e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001122:	009a      	lsls	r2, r3, #2
1a001124:	4b15      	ldr	r3, [pc, #84]	; (1a00117c <taskMefAntirrebote+0x1ac>)
1a001126:	4413      	add	r3, r2
1a001128:	785b      	ldrb	r3, [r3, #1]
1a00112a:	2b03      	cmp	r3, #3
1a00112c:	d8ec      	bhi.n	1a001108 <taskMefAntirrebote+0x138>
1a00112e:	a201      	add	r2, pc, #4	; (adr r2, 1a001134 <taskMefAntirrebote+0x164>)
1a001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001134:	1a001039 	.word	0x1a001039
1a001138:	1a00105b 	.word	0x1a00105b
1a00113c:	1a001093 	.word	0x1a001093
1a001140:	1a0010b5 	.word	0x1a0010b5
		   for(i=0;i<4;i++){
1a001144:	3401      	adds	r4, #1
1a001146:	2c03      	cmp	r4, #3
1a001148:	f73f af74 	bgt.w	1a001034 <taskMefAntirrebote+0x64>
			   if(giveRealizado[i] ==1){
1a00114c:	ab02      	add	r3, sp, #8
1a00114e:	4423      	add	r3, r4
1a001150:	f813 3c04 	ldrb.w	r3, [r3, #-4]
1a001154:	2b01      	cmp	r3, #1
1a001156:	d1f5      	bne.n	1a001144 <taskMefAntirrebote+0x174>
				   vTaskDelay( 1/ portTICK_RATE_MS );
1a001158:	2001      	movs	r0, #1
1a00115a:	f001 f965 	bl	1a002428 <vTaskDelay>
				   xSemaphoreTake(SemBin[i],portMAX_DELAY);
1a00115e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001162:	4b07      	ldr	r3, [pc, #28]	; (1a001180 <taskMefAntirrebote+0x1b0>)
1a001164:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a001168:	f000 fc48 	bl	1a0019fc <xQueueSemaphoreTake>
				   giveRealizado[i] = 0;
1a00116c:	2200      	movs	r2, #0
1a00116e:	ab02      	add	r3, sp, #8
1a001170:	4423      	add	r3, r4
1a001172:	f803 2c04 	strb.w	r2, [r3, #-4]
1a001176:	e7e5      	b.n	1a001144 <taskMefAntirrebote+0x174>
		   for(i=0;i<4;i++){
1a001178:	2400      	movs	r4, #0
1a00117a:	e7e4      	b.n	1a001146 <taskMefAntirrebote+0x176>
1a00117c:	10002cf8 	.word	0x10002cf8
1a001180:	10002ce8 	.word	0x10002ce8
1a001184:	10000228 	.word	0x10000228
1a001188:	1a0057c0 	.word	0x1a0057c0

1a00118c <taskAceleradorFreno>:
	}
}
void taskAceleradorFreno(void* taskParmPtr ){
1a00118c:	b510      	push	{r4, lr}
1a00118e:	b082      	sub	sp, #8
	//-- Setup tarea
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a001190:	f000 ffec 	bl	1a00216c <xTaskGetTickCount>
1a001194:	9001      	str	r0, [sp, #4]
	adcConfig( ADC_ENABLE ); /* ADC */
1a001196:	2000      	movs	r0, #0
1a001198:	f002 f96c 	bl	1a003474 <adcInit>
	uint16_t freno = 0;
	//vTaskDelay( delayInicial / portTICK_RATE_MS );
	//-- Loop tarea
	while(1){

		acelerador= adcRead( CH1 );
1a00119c:	2041      	movs	r0, #65	; 0x41
1a00119e:	f002 f9af 	bl	1a003500 <adcRead>
1a0011a2:	4604      	mov	r4, r0
		freno = adcRead( CH2 );
1a0011a4:	2040      	movs	r0, #64	; 0x40
1a0011a6:	f002 f9ab 	bl	1a003500 <adcRead>

		//--- Mutex Lock
		vehiculo.aceleradorIn = acelerador;
1a0011aa:	4b04      	ldr	r3, [pc, #16]	; (1a0011bc <taskAceleradorFreno+0x30>)
1a0011ac:	805c      	strh	r4, [r3, #2]
		vehiculo.frenoIn = freno;
1a0011ae:	8098      	strh	r0, [r3, #4]
		//--- Mutex unlock

		vTaskDelayUntil(&tiempo_inicio_ciclo,60/portTICK_RATE_MS);
1a0011b0:	213c      	movs	r1, #60	; 0x3c
1a0011b2:	a801      	add	r0, sp, #4
1a0011b4:	f001 f8e6 	bl	1a002384 <vTaskDelayUntil>
1a0011b8:	e7f0      	b.n	1a00119c <taskAceleradorFreno+0x10>
1a0011ba:	bf00      	nop
1a0011bc:	10002ca8 	.word	0x10002ca8

1a0011c0 <taskGiroscopo>:
	//-- Loop tarea
	while(1){

	}
}*/
void taskGiroscopo(void* taskParmPtr ){
1a0011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011c2:	b083      	sub	sp, #12

	float giroX;
	float giroY;
	float giroZ;

	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0011c4:	f000 ffd2 	bl	1a00216c <xTaskGetTickCount>
1a0011c8:	9001      	str	r0, [sp, #4]
	//-- Configuracion de la direccion I2C
	MPU9250_address_t addr = 0x68; // If MPU9250 AD0 pin is connected to GND
	status = mpu9250Init_RTOS( addr );
1a0011ca:	2068      	movs	r0, #104	; 0x68
1a0011cc:	f7ff fcc6 	bl	1a000b5c <mpu9250Init_RTOS>
	//debugPrintInt(status);
	if( status < 0 ){
1a0011d0:	2800      	cmp	r0, #0
1a0011d2:	da05      	bge.n	1a0011e0 <taskGiroscopo+0x20>

	      while(1){
	    	  //debugPrintlnString( "Error al inicializar el modulo MPU9250");
	    	  vTaskDelayUntil(&tiempo_inicio_ciclo,1000/portTICK_RATE_MS);
1a0011d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0011d8:	a801      	add	r0, sp, #4
1a0011da:	f001 f8d3 	bl	1a002384 <vTaskDelayUntil>
1a0011de:	e7f9      	b.n	1a0011d4 <taskGiroscopo+0x14>

	//-- Loop tarea
	while(1){

		//Leer el sensor y guardar en estructura de control
		mpu9250Read_RTOS();
1a0011e0:	f7ff fab8 	bl	1a000754 <mpu9250Read_RTOS>

		giroX = mpu9250GetGyroX_rads_RTOS()*(180/3.14159);
1a0011e4:	f7ff fbfa 	bl	1a0009dc <mpu9250GetGyroX_rads_RTOS>
1a0011e8:	ee10 0a10 	vmov	r0, s0
1a0011ec:	f003 fe4a 	bl	1a004e84 <__aeabi_f2d>
1a0011f0:	a31e      	add	r3, pc, #120	; (adr r3, 1a00126c <taskGiroscopo+0xac>)
1a0011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0011f6:	f003 fe9d 	bl	1a004f34 <__aeabi_dmul>
1a0011fa:	f004 f8ad 	bl	1a005358 <__aeabi_d2f>
1a0011fe:	4607      	mov	r7, r0
		giroY = mpu9250GetGyroY_rads_RTOS()*(180/3.14159);
1a001200:	f7ff fbf2 	bl	1a0009e8 <mpu9250GetGyroY_rads_RTOS>
1a001204:	ee10 0a10 	vmov	r0, s0
1a001208:	f003 fe3c 	bl	1a004e84 <__aeabi_f2d>
1a00120c:	a317      	add	r3, pc, #92	; (adr r3, 1a00126c <taskGiroscopo+0xac>)
1a00120e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001212:	f003 fe8f 	bl	1a004f34 <__aeabi_dmul>
1a001216:	f004 f89f 	bl	1a005358 <__aeabi_d2f>
1a00121a:	4606      	mov	r6, r0
		giroZ = mpu9250GetGyroZ_rads_RTOS()*(180/3.14159);
1a00121c:	f7ff fbea 	bl	1a0009f4 <mpu9250GetGyroZ_rads_RTOS>
1a001220:	ee10 0a10 	vmov	r0, s0
1a001224:	f003 fe2e 	bl	1a004e84 <__aeabi_f2d>
1a001228:	a310      	add	r3, pc, #64	; (adr r3, 1a00126c <taskGiroscopo+0xac>)
1a00122a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00122e:	f003 fe81 	bl	1a004f34 <__aeabi_dmul>
1a001232:	f004 f891 	bl	1a005358 <__aeabi_d2f>
1a001236:	4605      	mov	r5, r0

		//--- Mutex LOCK
		vehiculo.giroscopoX = giroX;
1a001238:	4c0b      	ldr	r4, [pc, #44]	; (1a001268 <taskGiroscopo+0xa8>)
1a00123a:	4638      	mov	r0, r7
1a00123c:	f003 fe22 	bl	1a004e84 <__aeabi_f2d>
1a001240:	e9c4 0102 	strd	r0, r1, [r4, #8]
		vehiculo.giroscopoY = giroY;
1a001244:	4630      	mov	r0, r6
1a001246:	f003 fe1d 	bl	1a004e84 <__aeabi_f2d>
1a00124a:	e9c4 0104 	strd	r0, r1, [r4, #16]
		vehiculo.giroscopoZ = giroZ;
1a00124e:	4628      	mov	r0, r5
1a001250:	f003 fe18 	bl	1a004e84 <__aeabi_f2d>
1a001254:	e9c4 0106 	strd	r0, r1, [r4, #24]
		//--- Mutex UNLOCK

		vTaskDelayUntil(&tiempo_inicio_ciclo,80/portTICK_RATE_MS);
1a001258:	2150      	movs	r1, #80	; 0x50
1a00125a:	a801      	add	r0, sp, #4
1a00125c:	f001 f892 	bl	1a002384 <vTaskDelayUntil>
1a001260:	e7be      	b.n	1a0011e0 <taskGiroscopo+0x20>
1a001262:	bf00      	nop
1a001264:	f3af 8000 	nop.w
1a001268:	10002ca8 	.word	0x10002ca8
1a00126c:	b05cc3e8 	.word	0xb05cc3e8
1a001270:	404ca5dd 	.word	0x404ca5dd

1a001274 <main>:
{
1a001274:	b500      	push	{lr}
1a001276:	b083      	sub	sp, #12
   boardConfig();
1a001278:	f002 fab6 	bl	1a0037e8 <boardInit>
   xTaskCreate(
1a00127c:	2400      	movs	r4, #0
1a00127e:	9401      	str	r4, [sp, #4]
1a001280:	2501      	movs	r5, #1
1a001282:	9500      	str	r5, [sp, #0]
1a001284:	4623      	mov	r3, r4
1a001286:	22b4      	movs	r2, #180	; 0xb4
1a001288:	4913      	ldr	r1, [pc, #76]	; (1a0012d8 <main+0x64>)
1a00128a:	4814      	ldr	r0, [pc, #80]	; (1a0012dc <main+0x68>)
1a00128c:	f000 fee9 	bl	1a002062 <xTaskCreate>
   xTaskCreate(
1a001290:	9401      	str	r4, [sp, #4]
1a001292:	9500      	str	r5, [sp, #0]
1a001294:	4623      	mov	r3, r4
1a001296:	22b4      	movs	r2, #180	; 0xb4
1a001298:	4911      	ldr	r1, [pc, #68]	; (1a0012e0 <main+0x6c>)
1a00129a:	4812      	ldr	r0, [pc, #72]	; (1a0012e4 <main+0x70>)
1a00129c:	f000 fee1 	bl	1a002062 <xTaskCreate>
   xTaskCreate(
1a0012a0:	9401      	str	r4, [sp, #4]
1a0012a2:	9500      	str	r5, [sp, #0]
1a0012a4:	4623      	mov	r3, r4
1a0012a6:	22b4      	movs	r2, #180	; 0xb4
1a0012a8:	490f      	ldr	r1, [pc, #60]	; (1a0012e8 <main+0x74>)
1a0012aa:	4810      	ldr	r0, [pc, #64]	; (1a0012ec <main+0x78>)
1a0012ac:	f000 fed9 	bl	1a002062 <xTaskCreate>
   xTaskCreate(
1a0012b0:	9401      	str	r4, [sp, #4]
1a0012b2:	9500      	str	r5, [sp, #0]
1a0012b4:	4623      	mov	r3, r4
1a0012b6:	22b4      	movs	r2, #180	; 0xb4
1a0012b8:	490d      	ldr	r1, [pc, #52]	; (1a0012f0 <main+0x7c>)
1a0012ba:	480e      	ldr	r0, [pc, #56]	; (1a0012f4 <main+0x80>)
1a0012bc:	f000 fed1 	bl	1a002062 <xTaskCreate>
   xTaskCreate(
1a0012c0:	9401      	str	r4, [sp, #4]
1a0012c2:	9500      	str	r5, [sp, #0]
1a0012c4:	4623      	mov	r3, r4
1a0012c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a0012ca:	490b      	ldr	r1, [pc, #44]	; (1a0012f8 <main+0x84>)
1a0012cc:	480b      	ldr	r0, [pc, #44]	; (1a0012fc <main+0x88>)
1a0012ce:	f000 fec8 	bl	1a002062 <xTaskCreate>
   vTaskStartScheduler();
1a0012d2:	f000 fef9 	bl	1a0020c8 <vTaskStartScheduler>
1a0012d6:	e7fe      	b.n	1a0012d6 <main+0x62>
1a0012d8:	1a005768 	.word	0x1a005768
1a0012dc:	1a000e11 	.word	0x1a000e11
1a0012e0:	1a005778 	.word	0x1a005778
1a0012e4:	1a000fd1 	.word	0x1a000fd1
1a0012e8:	1a00578c 	.word	0x1a00578c
1a0012ec:	1a000e3d 	.word	0x1a000e3d
1a0012f0:	1a00579c 	.word	0x1a00579c
1a0012f4:	1a00118d 	.word	0x1a00118d
1a0012f8:	1a0057b0 	.word	0x1a0057b0
1a0012fc:	1a0011c1 	.word	0x1a0011c1

1a001300 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a001300:	b538      	push	{r3, r4, r5, lr}
1a001302:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a001304:	f010 0f07 	tst.w	r0, #7
1a001308:	d002      	beq.n	1a001310 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00130a:	f020 0407 	bic.w	r4, r0, #7
1a00130e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a001310:	f000 ff24 	bl	1a00215c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a001314:	4b13      	ldr	r3, [pc, #76]	; (1a001364 <pvPortMalloc+0x64>)
1a001316:	681b      	ldr	r3, [r3, #0]
1a001318:	b17b      	cbz	r3, 1a00133a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a00131a:	4b13      	ldr	r3, [pc, #76]	; (1a001368 <pvPortMalloc+0x68>)
1a00131c:	681b      	ldr	r3, [r3, #0]
1a00131e:	441c      	add	r4, r3
1a001320:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a001324:	4294      	cmp	r4, r2
1a001326:	d80e      	bhi.n	1a001346 <pvPortMalloc+0x46>
1a001328:	42a3      	cmp	r3, r4
1a00132a:	d310      	bcc.n	1a00134e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00132c:	f000 ffb0 	bl	1a002290 <xTaskResumeAll>
void *pvReturn = NULL;
1a001330:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a001332:	f000 fcd0 	bl	1a001cd6 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a001336:	4628      	mov	r0, r5
1a001338:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00133a:	4b0c      	ldr	r3, [pc, #48]	; (1a00136c <pvPortMalloc+0x6c>)
1a00133c:	f023 0307 	bic.w	r3, r3, #7
1a001340:	4a08      	ldr	r2, [pc, #32]	; (1a001364 <pvPortMalloc+0x64>)
1a001342:	6013      	str	r3, [r2, #0]
1a001344:	e7e9      	b.n	1a00131a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a001346:	f000 ffa3 	bl	1a002290 <xTaskResumeAll>
void *pvReturn = NULL;
1a00134a:	2500      	movs	r5, #0
1a00134c:	e7f1      	b.n	1a001332 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00134e:	4a05      	ldr	r2, [pc, #20]	; (1a001364 <pvPortMalloc+0x64>)
1a001350:	6815      	ldr	r5, [r2, #0]
1a001352:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a001354:	4b04      	ldr	r3, [pc, #16]	; (1a001368 <pvPortMalloc+0x68>)
1a001356:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a001358:	f000 ff9a 	bl	1a002290 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00135c:	2d00      	cmp	r5, #0
1a00135e:	d1ea      	bne.n	1a001336 <pvPortMalloc+0x36>
1a001360:	e7e7      	b.n	1a001332 <pvPortMalloc+0x32>
1a001362:	bf00      	nop
1a001364:	1000022c 	.word	0x1000022c
1a001368:	10002230 	.word	0x10002230
1a00136c:	10000238 	.word	0x10000238

1a001370 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a001370:	b140      	cbz	r0, 1a001384 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001372:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001376:	f383 8811 	msr	BASEPRI, r3
1a00137a:	f3bf 8f6f 	isb	sy
1a00137e:	f3bf 8f4f 	dsb	sy
1a001382:	e7fe      	b.n	1a001382 <vPortFree+0x12>
}
1a001384:	4770      	bx	lr

1a001386 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a001386:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a001388:	b123      	cbz	r3, 1a001394 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a00138a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00138c:	6818      	ldr	r0, [r3, #0]
1a00138e:	f1c0 0007 	rsb	r0, r0, #7
1a001392:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a001394:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a001396:	4770      	bx	lr

1a001398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001398:	b510      	push	{r4, lr}
1a00139a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00139c:	f001 fd92 	bl	1a002ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0013a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0013a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0013a4:	429a      	cmp	r2, r3
1a0013a6:	d004      	beq.n	1a0013b2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0013a8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0013aa:	f001 fdad 	bl	1a002f08 <vPortExitCritical>

	return xReturn;
}
1a0013ae:	4620      	mov	r0, r4
1a0013b0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0013b2:	2401      	movs	r4, #1
1a0013b4:	e7f9      	b.n	1a0013aa <prvIsQueueFull+0x12>

1a0013b6 <prvIsQueueEmpty>:
{
1a0013b6:	b510      	push	{r4, lr}
1a0013b8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0013ba:	f001 fd83 	bl	1a002ec4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0013be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0013c0:	b123      	cbz	r3, 1a0013cc <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0013c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0013c4:	f001 fda0 	bl	1a002f08 <vPortExitCritical>
}
1a0013c8:	4620      	mov	r0, r4
1a0013ca:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0013cc:	2401      	movs	r4, #1
1a0013ce:	e7f9      	b.n	1a0013c4 <prvIsQueueEmpty+0xe>

1a0013d0 <prvCopyDataToQueue>:
{
1a0013d0:	b570      	push	{r4, r5, r6, lr}
1a0013d2:	4604      	mov	r4, r0
1a0013d4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0013d6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0013d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0013da:	b95a      	cbnz	r2, 1a0013f4 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0013dc:	6803      	ldr	r3, [r0, #0]
1a0013de:	b11b      	cbz	r3, 1a0013e8 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0013e0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0013e2:	3501      	adds	r5, #1
1a0013e4:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0013e6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0013e8:	6840      	ldr	r0, [r0, #4]
1a0013ea:	f001 f9df 	bl	1a0027ac <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0013ee:	2300      	movs	r3, #0
1a0013f0:	6063      	str	r3, [r4, #4]
1a0013f2:	e7f6      	b.n	1a0013e2 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0013f4:	b96e      	cbnz	r6, 1a001412 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0013f6:	6880      	ldr	r0, [r0, #8]
1a0013f8:	f004 f9a2 	bl	1a005740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0013fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0013fe:	68a3      	ldr	r3, [r4, #8]
1a001400:	4413      	add	r3, r2
1a001402:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001404:	6862      	ldr	r2, [r4, #4]
1a001406:	4293      	cmp	r3, r2
1a001408:	d319      	bcc.n	1a00143e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a00140a:	6823      	ldr	r3, [r4, #0]
1a00140c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00140e:	2000      	movs	r0, #0
1a001410:	e7e7      	b.n	1a0013e2 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001412:	68c0      	ldr	r0, [r0, #12]
1a001414:	f004 f994 	bl	1a005740 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001418:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00141a:	4252      	negs	r2, r2
1a00141c:	68e3      	ldr	r3, [r4, #12]
1a00141e:	4413      	add	r3, r2
1a001420:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001422:	6821      	ldr	r1, [r4, #0]
1a001424:	428b      	cmp	r3, r1
1a001426:	d202      	bcs.n	1a00142e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001428:	6863      	ldr	r3, [r4, #4]
1a00142a:	441a      	add	r2, r3
1a00142c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00142e:	2e02      	cmp	r6, #2
1a001430:	d001      	beq.n	1a001436 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a001432:	2000      	movs	r0, #0
1a001434:	e7d5      	b.n	1a0013e2 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001436:	b125      	cbz	r5, 1a001442 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001438:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a00143a:	2000      	movs	r0, #0
1a00143c:	e7d1      	b.n	1a0013e2 <prvCopyDataToQueue+0x12>
1a00143e:	2000      	movs	r0, #0
1a001440:	e7cf      	b.n	1a0013e2 <prvCopyDataToQueue+0x12>
1a001442:	2000      	movs	r0, #0
1a001444:	e7cd      	b.n	1a0013e2 <prvCopyDataToQueue+0x12>

1a001446 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001446:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001448:	b172      	cbz	r2, 1a001468 <prvCopyDataFromQueue+0x22>
{
1a00144a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00144c:	68c3      	ldr	r3, [r0, #12]
1a00144e:	4413      	add	r3, r2
1a001450:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a001452:	6844      	ldr	r4, [r0, #4]
1a001454:	42a3      	cmp	r3, r4
1a001456:	d301      	bcc.n	1a00145c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001458:	6803      	ldr	r3, [r0, #0]
1a00145a:	60c3      	str	r3, [r0, #12]
1a00145c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00145e:	68c1      	ldr	r1, [r0, #12]
1a001460:	4620      	mov	r0, r4
1a001462:	f004 f96d 	bl	1a005740 <memcpy>
}
1a001466:	bd10      	pop	{r4, pc}
1a001468:	4770      	bx	lr

1a00146a <prvUnlockQueue>:
{
1a00146a:	b538      	push	{r3, r4, r5, lr}
1a00146c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00146e:	f001 fd29 	bl	1a002ec4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a001472:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a001476:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001478:	e003      	b.n	1a001482 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00147a:	f001 f925 	bl	1a0026c8 <vTaskMissedYield>
			--cTxLock;
1a00147e:	3c01      	subs	r4, #1
1a001480:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001482:	2c00      	cmp	r4, #0
1a001484:	dd08      	ble.n	1a001498 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001488:	b133      	cbz	r3, 1a001498 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00148a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00148e:	f001 f889 	bl	1a0025a4 <xTaskRemoveFromEventList>
1a001492:	2800      	cmp	r0, #0
1a001494:	d0f3      	beq.n	1a00147e <prvUnlockQueue+0x14>
1a001496:	e7f0      	b.n	1a00147a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001498:	23ff      	movs	r3, #255	; 0xff
1a00149a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00149e:	f001 fd33 	bl	1a002f08 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0014a2:	f001 fd0f 	bl	1a002ec4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0014a6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0014aa:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0014ac:	e003      	b.n	1a0014b6 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0014ae:	f001 f90b 	bl	1a0026c8 <vTaskMissedYield>
				--cRxLock;
1a0014b2:	3c01      	subs	r4, #1
1a0014b4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0014b6:	2c00      	cmp	r4, #0
1a0014b8:	dd08      	ble.n	1a0014cc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014ba:	692b      	ldr	r3, [r5, #16]
1a0014bc:	b133      	cbz	r3, 1a0014cc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014be:	f105 0010 	add.w	r0, r5, #16
1a0014c2:	f001 f86f 	bl	1a0025a4 <xTaskRemoveFromEventList>
1a0014c6:	2800      	cmp	r0, #0
1a0014c8:	d0f3      	beq.n	1a0014b2 <prvUnlockQueue+0x48>
1a0014ca:	e7f0      	b.n	1a0014ae <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0014cc:	23ff      	movs	r3, #255	; 0xff
1a0014ce:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0014d2:	f001 fd19 	bl	1a002f08 <vPortExitCritical>
}
1a0014d6:	bd38      	pop	{r3, r4, r5, pc}

1a0014d8 <xQueueGenericReset>:
{
1a0014d8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0014da:	b940      	cbnz	r0, 1a0014ee <xQueueGenericReset+0x16>
1a0014dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014e0:	f383 8811 	msr	BASEPRI, r3
1a0014e4:	f3bf 8f6f 	isb	sy
1a0014e8:	f3bf 8f4f 	dsb	sy
1a0014ec:	e7fe      	b.n	1a0014ec <xQueueGenericReset+0x14>
1a0014ee:	4604      	mov	r4, r0
1a0014f0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0014f2:	f001 fce7 	bl	1a002ec4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0014f6:	6821      	ldr	r1, [r4, #0]
1a0014f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0014fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0014fc:	fb03 1002 	mla	r0, r3, r2, r1
1a001500:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a001502:	2000      	movs	r0, #0
1a001504:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001506:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001508:	3a01      	subs	r2, #1
1a00150a:	fb02 1303 	mla	r3, r2, r3, r1
1a00150e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a001510:	23ff      	movs	r3, #255	; 0xff
1a001512:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a001516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a00151a:	b9a5      	cbnz	r5, 1a001546 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00151c:	6923      	ldr	r3, [r4, #16]
1a00151e:	b91b      	cbnz	r3, 1a001528 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a001520:	f001 fcf2 	bl	1a002f08 <vPortExitCritical>
}
1a001524:	2001      	movs	r0, #1
1a001526:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001528:	f104 0010 	add.w	r0, r4, #16
1a00152c:	f001 f83a 	bl	1a0025a4 <xTaskRemoveFromEventList>
1a001530:	2800      	cmp	r0, #0
1a001532:	d0f5      	beq.n	1a001520 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a001534:	4b08      	ldr	r3, [pc, #32]	; (1a001558 <xQueueGenericReset+0x80>)
1a001536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00153a:	601a      	str	r2, [r3, #0]
1a00153c:	f3bf 8f4f 	dsb	sy
1a001540:	f3bf 8f6f 	isb	sy
1a001544:	e7ec      	b.n	1a001520 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001546:	f104 0010 	add.w	r0, r4, #16
1a00154a:	f000 fb62 	bl	1a001c12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00154e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001552:	f000 fb5e 	bl	1a001c12 <vListInitialise>
1a001556:	e7e3      	b.n	1a001520 <xQueueGenericReset+0x48>
1a001558:	e000ed04 	.word	0xe000ed04

1a00155c <prvInitialiseNewQueue>:
{
1a00155c:	b538      	push	{r3, r4, r5, lr}
1a00155e:	461d      	mov	r5, r3
1a001560:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a001562:	460b      	mov	r3, r1
1a001564:	b149      	cbz	r1, 1a00157a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001566:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001568:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00156a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00156c:	2101      	movs	r1, #1
1a00156e:	4620      	mov	r0, r4
1a001570:	f7ff ffb2 	bl	1a0014d8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001574:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001578:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00157a:	6024      	str	r4, [r4, #0]
1a00157c:	e7f4      	b.n	1a001568 <prvInitialiseNewQueue+0xc>

1a00157e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00157e:	b940      	cbnz	r0, 1a001592 <xQueueGenericCreateStatic+0x14>
1a001580:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001584:	f383 8811 	msr	BASEPRI, r3
1a001588:	f3bf 8f6f 	isb	sy
1a00158c:	f3bf 8f4f 	dsb	sy
1a001590:	e7fe      	b.n	1a001590 <xQueueGenericCreateStatic+0x12>
	{
1a001592:	b510      	push	{r4, lr}
1a001594:	b084      	sub	sp, #16
1a001596:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001598:	b153      	cbz	r3, 1a0015b0 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00159a:	b192      	cbz	r2, 1a0015c2 <xQueueGenericCreateStatic+0x44>
1a00159c:	b989      	cbnz	r1, 1a0015c2 <xQueueGenericCreateStatic+0x44>
1a00159e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015a2:	f383 8811 	msr	BASEPRI, r3
1a0015a6:	f3bf 8f6f 	isb	sy
1a0015aa:	f3bf 8f4f 	dsb	sy
1a0015ae:	e7fe      	b.n	1a0015ae <xQueueGenericCreateStatic+0x30>
1a0015b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015b4:	f383 8811 	msr	BASEPRI, r3
1a0015b8:	f3bf 8f6f 	isb	sy
1a0015bc:	f3bf 8f4f 	dsb	sy
1a0015c0:	e7fe      	b.n	1a0015c0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0015c2:	b94a      	cbnz	r2, 1a0015d8 <xQueueGenericCreateStatic+0x5a>
1a0015c4:	b141      	cbz	r1, 1a0015d8 <xQueueGenericCreateStatic+0x5a>
1a0015c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ca:	f383 8811 	msr	BASEPRI, r3
1a0015ce:	f3bf 8f6f 	isb	sy
1a0015d2:	f3bf 8f4f 	dsb	sy
1a0015d6:	e7fe      	b.n	1a0015d6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0015d8:	2050      	movs	r0, #80	; 0x50
1a0015da:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0015dc:	9803      	ldr	r0, [sp, #12]
1a0015de:	2850      	cmp	r0, #80	; 0x50
1a0015e0:	d008      	beq.n	1a0015f4 <xQueueGenericCreateStatic+0x76>
1a0015e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015e6:	f383 8811 	msr	BASEPRI, r3
1a0015ea:	f3bf 8f6f 	isb	sy
1a0015ee:	f3bf 8f4f 	dsb	sy
1a0015f2:	e7fe      	b.n	1a0015f2 <xQueueGenericCreateStatic+0x74>
1a0015f4:	4620      	mov	r0, r4
1a0015f6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0015f8:	2301      	movs	r3, #1
1a0015fa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0015fe:	9400      	str	r4, [sp, #0]
1a001600:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001604:	f7ff ffaa 	bl	1a00155c <prvInitialiseNewQueue>
	}
1a001608:	4620      	mov	r0, r4
1a00160a:	b004      	add	sp, #16
1a00160c:	bd10      	pop	{r4, pc}

1a00160e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00160e:	b940      	cbnz	r0, 1a001622 <xQueueGenericCreate+0x14>
1a001610:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001614:	f383 8811 	msr	BASEPRI, r3
1a001618:	f3bf 8f6f 	isb	sy
1a00161c:	f3bf 8f4f 	dsb	sy
1a001620:	e7fe      	b.n	1a001620 <xQueueGenericCreate+0x12>
	{
1a001622:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001624:	b083      	sub	sp, #12
1a001626:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001628:	b111      	cbz	r1, 1a001630 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00162a:	fb01 f000 	mul.w	r0, r1, r0
1a00162e:	e000      	b.n	1a001632 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001630:	2000      	movs	r0, #0
1a001632:	4617      	mov	r7, r2
1a001634:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001636:	3050      	adds	r0, #80	; 0x50
1a001638:	f7ff fe62 	bl	1a001300 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a00163c:	4605      	mov	r5, r0
1a00163e:	b150      	cbz	r0, 1a001656 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001640:	2300      	movs	r3, #0
1a001642:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001646:	9000      	str	r0, [sp, #0]
1a001648:	463b      	mov	r3, r7
1a00164a:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00164e:	4621      	mov	r1, r4
1a001650:	4630      	mov	r0, r6
1a001652:	f7ff ff83 	bl	1a00155c <prvInitialiseNewQueue>
	}
1a001656:	4628      	mov	r0, r5
1a001658:	b003      	add	sp, #12
1a00165a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a00165c <xQueueGenericSend>:
{
1a00165c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00165e:	b085      	sub	sp, #20
1a001660:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a001662:	b160      	cbz	r0, 1a00167e <xQueueGenericSend+0x22>
1a001664:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001666:	b999      	cbnz	r1, 1a001690 <xQueueGenericSend+0x34>
1a001668:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00166a:	b18a      	cbz	r2, 1a001690 <xQueueGenericSend+0x34>
1a00166c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001670:	f383 8811 	msr	BASEPRI, r3
1a001674:	f3bf 8f6f 	isb	sy
1a001678:	f3bf 8f4f 	dsb	sy
1a00167c:	e7fe      	b.n	1a00167c <xQueueGenericSend+0x20>
1a00167e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001682:	f383 8811 	msr	BASEPRI, r3
1a001686:	f3bf 8f6f 	isb	sy
1a00168a:	f3bf 8f4f 	dsb	sy
1a00168e:	e7fe      	b.n	1a00168e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001690:	2b02      	cmp	r3, #2
1a001692:	d10b      	bne.n	1a0016ac <xQueueGenericSend+0x50>
1a001694:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001696:	2a01      	cmp	r2, #1
1a001698:	d008      	beq.n	1a0016ac <xQueueGenericSend+0x50>
1a00169a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00169e:	f383 8811 	msr	BASEPRI, r3
1a0016a2:	f3bf 8f6f 	isb	sy
1a0016a6:	f3bf 8f4f 	dsb	sy
1a0016aa:	e7fe      	b.n	1a0016aa <xQueueGenericSend+0x4e>
1a0016ac:	461e      	mov	r6, r3
1a0016ae:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0016b0:	f001 f810 	bl	1a0026d4 <xTaskGetSchedulerState>
1a0016b4:	b950      	cbnz	r0, 1a0016cc <xQueueGenericSend+0x70>
1a0016b6:	9b01      	ldr	r3, [sp, #4]
1a0016b8:	b153      	cbz	r3, 1a0016d0 <xQueueGenericSend+0x74>
1a0016ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016be:	f383 8811 	msr	BASEPRI, r3
1a0016c2:	f3bf 8f6f 	isb	sy
1a0016c6:	f3bf 8f4f 	dsb	sy
1a0016ca:	e7fe      	b.n	1a0016ca <xQueueGenericSend+0x6e>
1a0016cc:	2500      	movs	r5, #0
1a0016ce:	e03a      	b.n	1a001746 <xQueueGenericSend+0xea>
1a0016d0:	2500      	movs	r5, #0
1a0016d2:	e038      	b.n	1a001746 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0016d4:	4632      	mov	r2, r6
1a0016d6:	4639      	mov	r1, r7
1a0016d8:	4620      	mov	r0, r4
1a0016da:	f7ff fe79 	bl	1a0013d0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0016de:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0016e0:	b94b      	cbnz	r3, 1a0016f6 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0016e2:	b1a8      	cbz	r0, 1a001710 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0016e4:	4b3b      	ldr	r3, [pc, #236]	; (1a0017d4 <xQueueGenericSend+0x178>)
1a0016e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016ea:	601a      	str	r2, [r3, #0]
1a0016ec:	f3bf 8f4f 	dsb	sy
1a0016f0:	f3bf 8f6f 	isb	sy
1a0016f4:	e00c      	b.n	1a001710 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0016f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0016fa:	f000 ff53 	bl	1a0025a4 <xTaskRemoveFromEventList>
1a0016fe:	b138      	cbz	r0, 1a001710 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a001700:	4b34      	ldr	r3, [pc, #208]	; (1a0017d4 <xQueueGenericSend+0x178>)
1a001702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001706:	601a      	str	r2, [r3, #0]
1a001708:	f3bf 8f4f 	dsb	sy
1a00170c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001710:	f001 fbfa 	bl	1a002f08 <vPortExitCritical>
				return pdPASS;
1a001714:	2001      	movs	r0, #1
}
1a001716:	b005      	add	sp, #20
1a001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a00171a:	f001 fbf5 	bl	1a002f08 <vPortExitCritical>
					return errQUEUE_FULL;
1a00171e:	2000      	movs	r0, #0
1a001720:	e7f9      	b.n	1a001716 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001722:	a802      	add	r0, sp, #8
1a001724:	f000 ff84 	bl	1a002630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001728:	2501      	movs	r5, #1
1a00172a:	e019      	b.n	1a001760 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a00172c:	2300      	movs	r3, #0
1a00172e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001732:	e021      	b.n	1a001778 <xQueueGenericSend+0x11c>
1a001734:	2300      	movs	r3, #0
1a001736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00173a:	e023      	b.n	1a001784 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a00173c:	4620      	mov	r0, r4
1a00173e:	f7ff fe94 	bl	1a00146a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001742:	f000 fda5 	bl	1a002290 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001746:	f001 fbbd 	bl	1a002ec4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00174a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00174c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00174e:	429a      	cmp	r2, r3
1a001750:	d3c0      	bcc.n	1a0016d4 <xQueueGenericSend+0x78>
1a001752:	2e02      	cmp	r6, #2
1a001754:	d0be      	beq.n	1a0016d4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001756:	9b01      	ldr	r3, [sp, #4]
1a001758:	2b00      	cmp	r3, #0
1a00175a:	d0de      	beq.n	1a00171a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a00175c:	2d00      	cmp	r5, #0
1a00175e:	d0e0      	beq.n	1a001722 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001760:	f001 fbd2 	bl	1a002f08 <vPortExitCritical>
		vTaskSuspendAll();
1a001764:	f000 fcfa 	bl	1a00215c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001768:	f001 fbac 	bl	1a002ec4 <vPortEnterCritical>
1a00176c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001770:	b25b      	sxtb	r3, r3
1a001772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001776:	d0d9      	beq.n	1a00172c <xQueueGenericSend+0xd0>
1a001778:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00177c:	b25b      	sxtb	r3, r3
1a00177e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001782:	d0d7      	beq.n	1a001734 <xQueueGenericSend+0xd8>
1a001784:	f001 fbc0 	bl	1a002f08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001788:	a901      	add	r1, sp, #4
1a00178a:	a802      	add	r0, sp, #8
1a00178c:	f000 ff5c 	bl	1a002648 <xTaskCheckForTimeOut>
1a001790:	b9c8      	cbnz	r0, 1a0017c6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001792:	4620      	mov	r0, r4
1a001794:	f7ff fe00 	bl	1a001398 <prvIsQueueFull>
1a001798:	2800      	cmp	r0, #0
1a00179a:	d0cf      	beq.n	1a00173c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a00179c:	9901      	ldr	r1, [sp, #4]
1a00179e:	f104 0010 	add.w	r0, r4, #16
1a0017a2:	f000 fecb 	bl	1a00253c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0017a6:	4620      	mov	r0, r4
1a0017a8:	f7ff fe5f 	bl	1a00146a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0017ac:	f000 fd70 	bl	1a002290 <xTaskResumeAll>
1a0017b0:	2800      	cmp	r0, #0
1a0017b2:	d1c8      	bne.n	1a001746 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a0017b4:	4b07      	ldr	r3, [pc, #28]	; (1a0017d4 <xQueueGenericSend+0x178>)
1a0017b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017ba:	601a      	str	r2, [r3, #0]
1a0017bc:	f3bf 8f4f 	dsb	sy
1a0017c0:	f3bf 8f6f 	isb	sy
1a0017c4:	e7bf      	b.n	1a001746 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a0017c6:	4620      	mov	r0, r4
1a0017c8:	f7ff fe4f 	bl	1a00146a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0017cc:	f000 fd60 	bl	1a002290 <xTaskResumeAll>
			return errQUEUE_FULL;
1a0017d0:	2000      	movs	r0, #0
1a0017d2:	e7a0      	b.n	1a001716 <xQueueGenericSend+0xba>
1a0017d4:	e000ed04 	.word	0xe000ed04

1a0017d8 <xQueueGenericSendFromISR>:
{
1a0017d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0017dc:	b160      	cbz	r0, 1a0017f8 <xQueueGenericSendFromISR+0x20>
1a0017de:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0017e0:	b999      	cbnz	r1, 1a00180a <xQueueGenericSendFromISR+0x32>
1a0017e2:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0017e4:	b188      	cbz	r0, 1a00180a <xQueueGenericSendFromISR+0x32>
1a0017e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017ea:	f383 8811 	msr	BASEPRI, r3
1a0017ee:	f3bf 8f6f 	isb	sy
1a0017f2:	f3bf 8f4f 	dsb	sy
1a0017f6:	e7fe      	b.n	1a0017f6 <xQueueGenericSendFromISR+0x1e>
1a0017f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017fc:	f383 8811 	msr	BASEPRI, r3
1a001800:	f3bf 8f6f 	isb	sy
1a001804:	f3bf 8f4f 	dsb	sy
1a001808:	e7fe      	b.n	1a001808 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00180a:	2b02      	cmp	r3, #2
1a00180c:	d10b      	bne.n	1a001826 <xQueueGenericSendFromISR+0x4e>
1a00180e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001810:	2801      	cmp	r0, #1
1a001812:	d008      	beq.n	1a001826 <xQueueGenericSendFromISR+0x4e>
1a001814:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001818:	f383 8811 	msr	BASEPRI, r3
1a00181c:	f3bf 8f6f 	isb	sy
1a001820:	f3bf 8f4f 	dsb	sy
1a001824:	e7fe      	b.n	1a001824 <xQueueGenericSendFromISR+0x4c>
1a001826:	461f      	mov	r7, r3
1a001828:	4690      	mov	r8, r2
1a00182a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00182c:	f001 fc74 	bl	1a003118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001830:	f3ef 8611 	mrs	r6, BASEPRI
1a001834:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001838:	f383 8811 	msr	BASEPRI, r3
1a00183c:	f3bf 8f6f 	isb	sy
1a001840:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001844:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001846:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001848:	429a      	cmp	r2, r3
1a00184a:	d303      	bcc.n	1a001854 <xQueueGenericSendFromISR+0x7c>
1a00184c:	2f02      	cmp	r7, #2
1a00184e:	d001      	beq.n	1a001854 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001850:	2000      	movs	r0, #0
1a001852:	e00f      	b.n	1a001874 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001854:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001858:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00185a:	463a      	mov	r2, r7
1a00185c:	4649      	mov	r1, r9
1a00185e:	4620      	mov	r0, r4
1a001860:	f7ff fdb6 	bl	1a0013d0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001864:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001868:	d008      	beq.n	1a00187c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00186a:	1c6b      	adds	r3, r5, #1
1a00186c:	b25b      	sxtb	r3, r3
1a00186e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001872:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001874:	f386 8811 	msr	BASEPRI, r6
}
1a001878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00187c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00187e:	b15b      	cbz	r3, 1a001898 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001880:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001884:	f000 fe8e 	bl	1a0025a4 <xTaskRemoveFromEventList>
1a001888:	b140      	cbz	r0, 1a00189c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a00188a:	f1b8 0f00 	cmp.w	r8, #0
1a00188e:	d007      	beq.n	1a0018a0 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001890:	2001      	movs	r0, #1
1a001892:	f8c8 0000 	str.w	r0, [r8]
1a001896:	e7ed      	b.n	1a001874 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001898:	2001      	movs	r0, #1
1a00189a:	e7eb      	b.n	1a001874 <xQueueGenericSendFromISR+0x9c>
1a00189c:	2001      	movs	r0, #1
1a00189e:	e7e9      	b.n	1a001874 <xQueueGenericSendFromISR+0x9c>
1a0018a0:	2001      	movs	r0, #1
1a0018a2:	e7e7      	b.n	1a001874 <xQueueGenericSendFromISR+0x9c>

1a0018a4 <xQueueReceive>:
{
1a0018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0018a6:	b085      	sub	sp, #20
1a0018a8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0018aa:	b160      	cbz	r0, 1a0018c6 <xQueueReceive+0x22>
1a0018ac:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0018ae:	b999      	cbnz	r1, 1a0018d8 <xQueueReceive+0x34>
1a0018b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0018b2:	b18b      	cbz	r3, 1a0018d8 <xQueueReceive+0x34>
	__asm volatile
1a0018b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018b8:	f383 8811 	msr	BASEPRI, r3
1a0018bc:	f3bf 8f6f 	isb	sy
1a0018c0:	f3bf 8f4f 	dsb	sy
1a0018c4:	e7fe      	b.n	1a0018c4 <xQueueReceive+0x20>
1a0018c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ca:	f383 8811 	msr	BASEPRI, r3
1a0018ce:	f3bf 8f6f 	isb	sy
1a0018d2:	f3bf 8f4f 	dsb	sy
1a0018d6:	e7fe      	b.n	1a0018d6 <xQueueReceive+0x32>
1a0018d8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0018da:	f000 fefb 	bl	1a0026d4 <xTaskGetSchedulerState>
1a0018de:	b950      	cbnz	r0, 1a0018f6 <xQueueReceive+0x52>
1a0018e0:	9b01      	ldr	r3, [sp, #4]
1a0018e2:	b153      	cbz	r3, 1a0018fa <xQueueReceive+0x56>
1a0018e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018e8:	f383 8811 	msr	BASEPRI, r3
1a0018ec:	f3bf 8f6f 	isb	sy
1a0018f0:	f3bf 8f4f 	dsb	sy
1a0018f4:	e7fe      	b.n	1a0018f4 <xQueueReceive+0x50>
1a0018f6:	2600      	movs	r6, #0
1a0018f8:	e03e      	b.n	1a001978 <xQueueReceive+0xd4>
1a0018fa:	2600      	movs	r6, #0
1a0018fc:	e03c      	b.n	1a001978 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0018fe:	4639      	mov	r1, r7
1a001900:	4620      	mov	r0, r4
1a001902:	f7ff fda0 	bl	1a001446 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001906:	3d01      	subs	r5, #1
1a001908:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00190a:	6923      	ldr	r3, [r4, #16]
1a00190c:	b923      	cbnz	r3, 1a001918 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a00190e:	f001 fafb 	bl	1a002f08 <vPortExitCritical>
				return pdPASS;
1a001912:	2001      	movs	r0, #1
}
1a001914:	b005      	add	sp, #20
1a001916:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001918:	f104 0010 	add.w	r0, r4, #16
1a00191c:	f000 fe42 	bl	1a0025a4 <xTaskRemoveFromEventList>
1a001920:	2800      	cmp	r0, #0
1a001922:	d0f4      	beq.n	1a00190e <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001924:	4b34      	ldr	r3, [pc, #208]	; (1a0019f8 <xQueueReceive+0x154>)
1a001926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00192a:	601a      	str	r2, [r3, #0]
1a00192c:	f3bf 8f4f 	dsb	sy
1a001930:	f3bf 8f6f 	isb	sy
1a001934:	e7eb      	b.n	1a00190e <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001936:	f001 fae7 	bl	1a002f08 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00193a:	2000      	movs	r0, #0
1a00193c:	e7ea      	b.n	1a001914 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00193e:	a802      	add	r0, sp, #8
1a001940:	f000 fe76 	bl	1a002630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001944:	2601      	movs	r6, #1
1a001946:	e021      	b.n	1a00198c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001948:	2300      	movs	r3, #0
1a00194a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00194e:	e029      	b.n	1a0019a4 <xQueueReceive+0x100>
1a001950:	2300      	movs	r3, #0
1a001952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001956:	e02b      	b.n	1a0019b0 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001958:	4620      	mov	r0, r4
1a00195a:	f7ff fd86 	bl	1a00146a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00195e:	f000 fc97 	bl	1a002290 <xTaskResumeAll>
1a001962:	e009      	b.n	1a001978 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001964:	4620      	mov	r0, r4
1a001966:	f7ff fd80 	bl	1a00146a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00196a:	f000 fc91 	bl	1a002290 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00196e:	4620      	mov	r0, r4
1a001970:	f7ff fd21 	bl	1a0013b6 <prvIsQueueEmpty>
1a001974:	2800      	cmp	r0, #0
1a001976:	d13d      	bne.n	1a0019f4 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001978:	f001 faa4 	bl	1a002ec4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00197c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00197e:	2d00      	cmp	r5, #0
1a001980:	d1bd      	bne.n	1a0018fe <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001982:	9b01      	ldr	r3, [sp, #4]
1a001984:	2b00      	cmp	r3, #0
1a001986:	d0d6      	beq.n	1a001936 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001988:	2e00      	cmp	r6, #0
1a00198a:	d0d8      	beq.n	1a00193e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a00198c:	f001 fabc 	bl	1a002f08 <vPortExitCritical>
		vTaskSuspendAll();
1a001990:	f000 fbe4 	bl	1a00215c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001994:	f001 fa96 	bl	1a002ec4 <vPortEnterCritical>
1a001998:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00199c:	b25b      	sxtb	r3, r3
1a00199e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0019a2:	d0d1      	beq.n	1a001948 <xQueueReceive+0xa4>
1a0019a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0019a8:	b25b      	sxtb	r3, r3
1a0019aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0019ae:	d0cf      	beq.n	1a001950 <xQueueReceive+0xac>
1a0019b0:	f001 faaa 	bl	1a002f08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0019b4:	a901      	add	r1, sp, #4
1a0019b6:	a802      	add	r0, sp, #8
1a0019b8:	f000 fe46 	bl	1a002648 <xTaskCheckForTimeOut>
1a0019bc:	2800      	cmp	r0, #0
1a0019be:	d1d1      	bne.n	1a001964 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0019c0:	4620      	mov	r0, r4
1a0019c2:	f7ff fcf8 	bl	1a0013b6 <prvIsQueueEmpty>
1a0019c6:	2800      	cmp	r0, #0
1a0019c8:	d0c6      	beq.n	1a001958 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0019ca:	9901      	ldr	r1, [sp, #4]
1a0019cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0019d0:	f000 fdb4 	bl	1a00253c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0019d4:	4620      	mov	r0, r4
1a0019d6:	f7ff fd48 	bl	1a00146a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0019da:	f000 fc59 	bl	1a002290 <xTaskResumeAll>
1a0019de:	2800      	cmp	r0, #0
1a0019e0:	d1ca      	bne.n	1a001978 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a0019e2:	4b05      	ldr	r3, [pc, #20]	; (1a0019f8 <xQueueReceive+0x154>)
1a0019e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019e8:	601a      	str	r2, [r3, #0]
1a0019ea:	f3bf 8f4f 	dsb	sy
1a0019ee:	f3bf 8f6f 	isb	sy
1a0019f2:	e7c1      	b.n	1a001978 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a0019f4:	2000      	movs	r0, #0
1a0019f6:	e78d      	b.n	1a001914 <xQueueReceive+0x70>
1a0019f8:	e000ed04 	.word	0xe000ed04

1a0019fc <xQueueSemaphoreTake>:
{
1a0019fc:	b570      	push	{r4, r5, r6, lr}
1a0019fe:	b084      	sub	sp, #16
1a001a00:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001a02:	b940      	cbnz	r0, 1a001a16 <xQueueSemaphoreTake+0x1a>
1a001a04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a08:	f383 8811 	msr	BASEPRI, r3
1a001a0c:	f3bf 8f6f 	isb	sy
1a001a10:	f3bf 8f4f 	dsb	sy
1a001a14:	e7fe      	b.n	1a001a14 <xQueueSemaphoreTake+0x18>
1a001a16:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001a18:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001a1a:	b143      	cbz	r3, 1a001a2e <xQueueSemaphoreTake+0x32>
1a001a1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a20:	f383 8811 	msr	BASEPRI, r3
1a001a24:	f3bf 8f6f 	isb	sy
1a001a28:	f3bf 8f4f 	dsb	sy
1a001a2c:	e7fe      	b.n	1a001a2c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001a2e:	f000 fe51 	bl	1a0026d4 <xTaskGetSchedulerState>
1a001a32:	b950      	cbnz	r0, 1a001a4a <xQueueSemaphoreTake+0x4e>
1a001a34:	9b01      	ldr	r3, [sp, #4]
1a001a36:	b15b      	cbz	r3, 1a001a50 <xQueueSemaphoreTake+0x54>
1a001a38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a3c:	f383 8811 	msr	BASEPRI, r3
1a001a40:	f3bf 8f6f 	isb	sy
1a001a44:	f3bf 8f4f 	dsb	sy
1a001a48:	e7fe      	b.n	1a001a48 <xQueueSemaphoreTake+0x4c>
1a001a4a:	2500      	movs	r5, #0
1a001a4c:	462e      	mov	r6, r5
1a001a4e:	e051      	b.n	1a001af4 <xQueueSemaphoreTake+0xf8>
1a001a50:	2500      	movs	r5, #0
1a001a52:	462e      	mov	r6, r5
1a001a54:	e04e      	b.n	1a001af4 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001a56:	3b01      	subs	r3, #1
1a001a58:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001a5a:	6823      	ldr	r3, [r4, #0]
1a001a5c:	b913      	cbnz	r3, 1a001a64 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001a5e:	f000 ff5d 	bl	1a00291c <pvTaskIncrementMutexHeldCount>
1a001a62:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001a64:	6923      	ldr	r3, [r4, #16]
1a001a66:	b163      	cbz	r3, 1a001a82 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001a68:	f104 0010 	add.w	r0, r4, #16
1a001a6c:	f000 fd9a 	bl	1a0025a4 <xTaskRemoveFromEventList>
1a001a70:	b138      	cbz	r0, 1a001a82 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a001a72:	4b48      	ldr	r3, [pc, #288]	; (1a001b94 <xQueueSemaphoreTake+0x198>)
1a001a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a78:	601a      	str	r2, [r3, #0]
1a001a7a:	f3bf 8f4f 	dsb	sy
1a001a7e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001a82:	f001 fa41 	bl	1a002f08 <vPortExitCritical>
				return pdPASS;
1a001a86:	2501      	movs	r5, #1
}
1a001a88:	4628      	mov	r0, r5
1a001a8a:	b004      	add	sp, #16
1a001a8c:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001a8e:	b145      	cbz	r5, 1a001aa2 <xQueueSemaphoreTake+0xa6>
1a001a90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a94:	f383 8811 	msr	BASEPRI, r3
1a001a98:	f3bf 8f6f 	isb	sy
1a001a9c:	f3bf 8f4f 	dsb	sy
1a001aa0:	e7fe      	b.n	1a001aa0 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a001aa2:	f001 fa31 	bl	1a002f08 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001aa6:	e7ef      	b.n	1a001a88 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001aa8:	a802      	add	r0, sp, #8
1a001aaa:	f000 fdc1 	bl	1a002630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001aae:	2601      	movs	r6, #1
1a001ab0:	e02a      	b.n	1a001b08 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a001ab2:	2300      	movs	r3, #0
1a001ab4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001ab8:	e032      	b.n	1a001b20 <xQueueSemaphoreTake+0x124>
1a001aba:	2300      	movs	r3, #0
1a001abc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001ac0:	e034      	b.n	1a001b2c <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a001ac2:	f001 f9ff 	bl	1a002ec4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001ac6:	6860      	ldr	r0, [r4, #4]
1a001ac8:	f000 fe14 	bl	1a0026f4 <xTaskPriorityInherit>
1a001acc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001ace:	f001 fa1b 	bl	1a002f08 <vPortExitCritical>
1a001ad2:	e03b      	b.n	1a001b4c <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a001ad4:	4620      	mov	r0, r4
1a001ad6:	f7ff fcc8 	bl	1a00146a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001ada:	f000 fbd9 	bl	1a002290 <xTaskResumeAll>
1a001ade:	e009      	b.n	1a001af4 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001ae0:	4620      	mov	r0, r4
1a001ae2:	f7ff fcc2 	bl	1a00146a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001ae6:	f000 fbd3 	bl	1a002290 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001aea:	4620      	mov	r0, r4
1a001aec:	f7ff fc63 	bl	1a0013b6 <prvIsQueueEmpty>
1a001af0:	2800      	cmp	r0, #0
1a001af2:	d140      	bne.n	1a001b76 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a001af4:	f001 f9e6 	bl	1a002ec4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001afa:	2b00      	cmp	r3, #0
1a001afc:	d1ab      	bne.n	1a001a56 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001afe:	9b01      	ldr	r3, [sp, #4]
1a001b00:	2b00      	cmp	r3, #0
1a001b02:	d0c4      	beq.n	1a001a8e <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001b04:	2e00      	cmp	r6, #0
1a001b06:	d0cf      	beq.n	1a001aa8 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001b08:	f001 f9fe 	bl	1a002f08 <vPortExitCritical>
		vTaskSuspendAll();
1a001b0c:	f000 fb26 	bl	1a00215c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001b10:	f001 f9d8 	bl	1a002ec4 <vPortEnterCritical>
1a001b14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001b18:	b25b      	sxtb	r3, r3
1a001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b1e:	d0c8      	beq.n	1a001ab2 <xQueueSemaphoreTake+0xb6>
1a001b20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001b24:	b25b      	sxtb	r3, r3
1a001b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b2a:	d0c6      	beq.n	1a001aba <xQueueSemaphoreTake+0xbe>
1a001b2c:	f001 f9ec 	bl	1a002f08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001b30:	a901      	add	r1, sp, #4
1a001b32:	a802      	add	r0, sp, #8
1a001b34:	f000 fd88 	bl	1a002648 <xTaskCheckForTimeOut>
1a001b38:	2800      	cmp	r0, #0
1a001b3a:	d1d1      	bne.n	1a001ae0 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b3c:	4620      	mov	r0, r4
1a001b3e:	f7ff fc3a 	bl	1a0013b6 <prvIsQueueEmpty>
1a001b42:	2800      	cmp	r0, #0
1a001b44:	d0c6      	beq.n	1a001ad4 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001b46:	6823      	ldr	r3, [r4, #0]
1a001b48:	2b00      	cmp	r3, #0
1a001b4a:	d0ba      	beq.n	1a001ac2 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001b4c:	9901      	ldr	r1, [sp, #4]
1a001b4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b52:	f000 fcf3 	bl	1a00253c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001b56:	4620      	mov	r0, r4
1a001b58:	f7ff fc87 	bl	1a00146a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001b5c:	f000 fb98 	bl	1a002290 <xTaskResumeAll>
1a001b60:	2800      	cmp	r0, #0
1a001b62:	d1c7      	bne.n	1a001af4 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a001b64:	4b0b      	ldr	r3, [pc, #44]	; (1a001b94 <xQueueSemaphoreTake+0x198>)
1a001b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b6a:	601a      	str	r2, [r3, #0]
1a001b6c:	f3bf 8f4f 	dsb	sy
1a001b70:	f3bf 8f6f 	isb	sy
1a001b74:	e7be      	b.n	1a001af4 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a001b76:	2d00      	cmp	r5, #0
1a001b78:	d086      	beq.n	1a001a88 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a001b7a:	f001 f9a3 	bl	1a002ec4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001b7e:	4620      	mov	r0, r4
1a001b80:	f7ff fc01 	bl	1a001386 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001b84:	4601      	mov	r1, r0
1a001b86:	6860      	ldr	r0, [r4, #4]
1a001b88:	f000 fe68 	bl	1a00285c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001b8c:	f001 f9bc 	bl	1a002f08 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001b90:	2500      	movs	r5, #0
1a001b92:	e779      	b.n	1a001a88 <xQueueSemaphoreTake+0x8c>
1a001b94:	e000ed04 	.word	0xe000ed04

1a001b98 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001b98:	2300      	movs	r3, #0
1a001b9a:	2b07      	cmp	r3, #7
1a001b9c:	d80c      	bhi.n	1a001bb8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001b9e:	4a07      	ldr	r2, [pc, #28]	; (1a001bbc <vQueueAddToRegistry+0x24>)
1a001ba0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001ba4:	b10a      	cbz	r2, 1a001baa <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001ba6:	3301      	adds	r3, #1
1a001ba8:	e7f7      	b.n	1a001b9a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001baa:	4a04      	ldr	r2, [pc, #16]	; (1a001bbc <vQueueAddToRegistry+0x24>)
1a001bac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001bb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001bb4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001bb6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001bb8:	4770      	bx	lr
1a001bba:	bf00      	nop
1a001bbc:	10002d48 	.word	0x10002d48

1a001bc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001bc0:	b570      	push	{r4, r5, r6, lr}
1a001bc2:	4604      	mov	r4, r0
1a001bc4:	460d      	mov	r5, r1
1a001bc6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001bc8:	f001 f97c 	bl	1a002ec4 <vPortEnterCritical>
1a001bcc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001bd0:	b25b      	sxtb	r3, r3
1a001bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bd6:	d00d      	beq.n	1a001bf4 <vQueueWaitForMessageRestricted+0x34>
1a001bd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001bdc:	b25b      	sxtb	r3, r3
1a001bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001be2:	d00b      	beq.n	1a001bfc <vQueueWaitForMessageRestricted+0x3c>
1a001be4:	f001 f990 	bl	1a002f08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001be8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001bea:	b15b      	cbz	r3, 1a001c04 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001bec:	4620      	mov	r0, r4
1a001bee:	f7ff fc3c 	bl	1a00146a <prvUnlockQueue>
	}
1a001bf2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001bf4:	2300      	movs	r3, #0
1a001bf6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001bfa:	e7ed      	b.n	1a001bd8 <vQueueWaitForMessageRestricted+0x18>
1a001bfc:	2300      	movs	r3, #0
1a001bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001c02:	e7ef      	b.n	1a001be4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001c04:	4632      	mov	r2, r6
1a001c06:	4629      	mov	r1, r5
1a001c08:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001c0c:	f000 fcae 	bl	1a00256c <vTaskPlaceOnEventListRestricted>
1a001c10:	e7ec      	b.n	1a001bec <vQueueWaitForMessageRestricted+0x2c>

1a001c12 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c12:	f100 0308 	add.w	r3, r0, #8
1a001c16:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c1c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c1e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c20:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001c22:	2300      	movs	r3, #0
1a001c24:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001c26:	4770      	bx	lr

1a001c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001c28:	2300      	movs	r3, #0
1a001c2a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001c2c:	4770      	bx	lr

1a001c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001c2e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001c30:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001c32:	689a      	ldr	r2, [r3, #8]
1a001c34:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001c36:	689a      	ldr	r2, [r3, #8]
1a001c38:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001c3a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001c3c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001c3e:	6803      	ldr	r3, [r0, #0]
1a001c40:	3301      	adds	r3, #1
1a001c42:	6003      	str	r3, [r0, #0]
}
1a001c44:	4770      	bx	lr

1a001c46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001c46:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001c48:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001c4a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001c4e:	d002      	beq.n	1a001c56 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c50:	f100 0208 	add.w	r2, r0, #8
1a001c54:	e002      	b.n	1a001c5c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001c56:	6902      	ldr	r2, [r0, #16]
1a001c58:	e004      	b.n	1a001c64 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c5a:	461a      	mov	r2, r3
1a001c5c:	6853      	ldr	r3, [r2, #4]
1a001c5e:	681c      	ldr	r4, [r3, #0]
1a001c60:	42ac      	cmp	r4, r5
1a001c62:	d9fa      	bls.n	1a001c5a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001c64:	6853      	ldr	r3, [r2, #4]
1a001c66:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001c68:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001c6a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001c6c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001c6e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001c70:	6803      	ldr	r3, [r0, #0]
1a001c72:	3301      	adds	r3, #1
1a001c74:	6003      	str	r3, [r0, #0]
}
1a001c76:	bc30      	pop	{r4, r5}
1a001c78:	4770      	bx	lr

1a001c7a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001c7a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001c7c:	6842      	ldr	r2, [r0, #4]
1a001c7e:	6881      	ldr	r1, [r0, #8]
1a001c80:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001c82:	6882      	ldr	r2, [r0, #8]
1a001c84:	6841      	ldr	r1, [r0, #4]
1a001c86:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001c88:	685a      	ldr	r2, [r3, #4]
1a001c8a:	4282      	cmp	r2, r0
1a001c8c:	d006      	beq.n	1a001c9c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001c8e:	2200      	movs	r2, #0
1a001c90:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001c92:	681a      	ldr	r2, [r3, #0]
1a001c94:	3a01      	subs	r2, #1
1a001c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001c98:	6818      	ldr	r0, [r3, #0]
}
1a001c9a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001c9c:	6882      	ldr	r2, [r0, #8]
1a001c9e:	605a      	str	r2, [r3, #4]
1a001ca0:	e7f5      	b.n	1a001c8e <uxListRemove+0x14>
1a001ca2:	Address 0x000000001a001ca2 is out of bounds.


1a001ca4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001ca4:	4b03      	ldr	r3, [pc, #12]	; (1a001cb4 <vApplicationGetIdleTaskMemory+0x10>)
1a001ca6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001ca8:	4b03      	ldr	r3, [pc, #12]	; (1a001cb8 <vApplicationGetIdleTaskMemory+0x14>)
1a001caa:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001cac:	235a      	movs	r3, #90	; 0x5a
1a001cae:	6013      	str	r3, [r2, #0]
}
1a001cb0:	4770      	bx	lr
1a001cb2:	bf00      	nop
1a001cb4:	1000293c 	.word	0x1000293c
1a001cb8:	10002234 	.word	0x10002234

1a001cbc <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001cbc:	4b03      	ldr	r3, [pc, #12]	; (1a001ccc <vApplicationGetTimerTaskMemory+0x10>)
1a001cbe:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001cc0:	4b03      	ldr	r3, [pc, #12]	; (1a001cd0 <vApplicationGetTimerTaskMemory+0x14>)
1a001cc2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001cc4:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001cc8:	6013      	str	r3, [r2, #0]
1a001cca:	4770      	bx	lr
1a001ccc:	1000299c 	.word	0x1000299c
1a001cd0:	1000239c 	.word	0x1000239c

1a001cd4 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a001cd4:	e7fe      	b.n	1a001cd4 <vApplicationStackOverflowHook>

1a001cd6 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a001cd6:	e7fe      	b.n	1a001cd6 <vApplicationMallocFailedHook>

1a001cd8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001cd8:	4b08      	ldr	r3, [pc, #32]	; (1a001cfc <prvResetNextTaskUnblockTime+0x24>)
1a001cda:	681b      	ldr	r3, [r3, #0]
1a001cdc:	681b      	ldr	r3, [r3, #0]
1a001cde:	b13b      	cbz	r3, 1a001cf0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001ce0:	4b06      	ldr	r3, [pc, #24]	; (1a001cfc <prvResetNextTaskUnblockTime+0x24>)
1a001ce2:	681b      	ldr	r3, [r3, #0]
1a001ce4:	68db      	ldr	r3, [r3, #12]
1a001ce6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001ce8:	685a      	ldr	r2, [r3, #4]
1a001cea:	4b05      	ldr	r3, [pc, #20]	; (1a001d00 <prvResetNextTaskUnblockTime+0x28>)
1a001cec:	601a      	str	r2, [r3, #0]
	}
}
1a001cee:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001cf0:	4b03      	ldr	r3, [pc, #12]	; (1a001d00 <prvResetNextTaskUnblockTime+0x28>)
1a001cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001cf6:	601a      	str	r2, [r3, #0]
1a001cf8:	4770      	bx	lr
1a001cfa:	bf00      	nop
1a001cfc:	10002a00 	.word	0x10002a00
1a001d00:	10002ad4 	.word	0x10002ad4

1a001d04 <prvInitialiseNewTask>:
{
1a001d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001d08:	4681      	mov	r9, r0
1a001d0a:	460d      	mov	r5, r1
1a001d0c:	4617      	mov	r7, r2
1a001d0e:	469a      	mov	sl, r3
1a001d10:	9e08      	ldr	r6, [sp, #32]
1a001d12:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001d16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001d18:	0092      	lsls	r2, r2, #2
1a001d1a:	21a5      	movs	r1, #165	; 0xa5
1a001d1c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001d1e:	f003 fd1a 	bl	1a005756 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001d24:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001d28:	3a01      	subs	r2, #1
1a001d2a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001d2e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001d32:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001d34:	2300      	movs	r3, #0
1a001d36:	2b0f      	cmp	r3, #15
1a001d38:	d807      	bhi.n	1a001d4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001d3a:	5ce9      	ldrb	r1, [r5, r3]
1a001d3c:	18e2      	adds	r2, r4, r3
1a001d3e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001d42:	5cea      	ldrb	r2, [r5, r3]
1a001d44:	b10a      	cbz	r2, 1a001d4a <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001d46:	3301      	adds	r3, #1
1a001d48:	e7f5      	b.n	1a001d36 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001d4a:	2300      	movs	r3, #0
1a001d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001d50:	2e06      	cmp	r6, #6
1a001d52:	d900      	bls.n	1a001d56 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001d54:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001d56:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001d58:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001d5a:	2500      	movs	r5, #0
1a001d5c:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001d5e:	1d20      	adds	r0, r4, #4
1a001d60:	f7ff ff62 	bl	1a001c28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001d64:	f104 0018 	add.w	r0, r4, #24
1a001d68:	f7ff ff5e 	bl	1a001c28 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001d6c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d6e:	f1c6 0607 	rsb	r6, r6, #7
1a001d72:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001d74:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001d76:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001d78:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001d7c:	4652      	mov	r2, sl
1a001d7e:	4649      	mov	r1, r9
1a001d80:	4638      	mov	r0, r7
1a001d82:	f001 f877 	bl	1a002e74 <pxPortInitialiseStack>
1a001d86:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001d88:	f1b8 0f00 	cmp.w	r8, #0
1a001d8c:	d001      	beq.n	1a001d92 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001d8e:	f8c8 4000 	str.w	r4, [r8]
}
1a001d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d96:	Address 0x000000001a001d96 is out of bounds.


1a001d98 <prvInitialiseTaskLists>:
{
1a001d98:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001d9a:	2400      	movs	r4, #0
1a001d9c:	e007      	b.n	1a001dae <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001d9e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001da2:	0093      	lsls	r3, r2, #2
1a001da4:	480e      	ldr	r0, [pc, #56]	; (1a001de0 <prvInitialiseTaskLists+0x48>)
1a001da6:	4418      	add	r0, r3
1a001da8:	f7ff ff33 	bl	1a001c12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001dac:	3401      	adds	r4, #1
1a001dae:	2c06      	cmp	r4, #6
1a001db0:	d9f5      	bls.n	1a001d9e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001db2:	4d0c      	ldr	r5, [pc, #48]	; (1a001de4 <prvInitialiseTaskLists+0x4c>)
1a001db4:	4628      	mov	r0, r5
1a001db6:	f7ff ff2c 	bl	1a001c12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001dba:	4c0b      	ldr	r4, [pc, #44]	; (1a001de8 <prvInitialiseTaskLists+0x50>)
1a001dbc:	4620      	mov	r0, r4
1a001dbe:	f7ff ff28 	bl	1a001c12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001dc2:	480a      	ldr	r0, [pc, #40]	; (1a001dec <prvInitialiseTaskLists+0x54>)
1a001dc4:	f7ff ff25 	bl	1a001c12 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001dc8:	4809      	ldr	r0, [pc, #36]	; (1a001df0 <prvInitialiseTaskLists+0x58>)
1a001dca:	f7ff ff22 	bl	1a001c12 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001dce:	4809      	ldr	r0, [pc, #36]	; (1a001df4 <prvInitialiseTaskLists+0x5c>)
1a001dd0:	f7ff ff1f 	bl	1a001c12 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001dd4:	4b08      	ldr	r3, [pc, #32]	; (1a001df8 <prvInitialiseTaskLists+0x60>)
1a001dd6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001dd8:	4b08      	ldr	r3, [pc, #32]	; (1a001dfc <prvInitialiseTaskLists+0x64>)
1a001dda:	601c      	str	r4, [r3, #0]
}
1a001ddc:	bd38      	pop	{r3, r4, r5, pc}
1a001dde:	bf00      	nop
1a001de0:	10002a08 	.word	0x10002a08
1a001de4:	10002aac 	.word	0x10002aac
1a001de8:	10002ac0 	.word	0x10002ac0
1a001dec:	10002adc 	.word	0x10002adc
1a001df0:	10002b08 	.word	0x10002b08
1a001df4:	10002af4 	.word	0x10002af4
1a001df8:	10002a00 	.word	0x10002a00
1a001dfc:	10002a04 	.word	0x10002a04

1a001e00 <prvAddNewTaskToReadyList>:
{
1a001e00:	b510      	push	{r4, lr}
1a001e02:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001e04:	f001 f85e 	bl	1a002ec4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001e08:	4a21      	ldr	r2, [pc, #132]	; (1a001e90 <prvAddNewTaskToReadyList+0x90>)
1a001e0a:	6813      	ldr	r3, [r2, #0]
1a001e0c:	3301      	adds	r3, #1
1a001e0e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001e10:	4b20      	ldr	r3, [pc, #128]	; (1a001e94 <prvAddNewTaskToReadyList+0x94>)
1a001e12:	681b      	ldr	r3, [r3, #0]
1a001e14:	b15b      	cbz	r3, 1a001e2e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001e16:	4b20      	ldr	r3, [pc, #128]	; (1a001e98 <prvAddNewTaskToReadyList+0x98>)
1a001e18:	681b      	ldr	r3, [r3, #0]
1a001e1a:	b96b      	cbnz	r3, 1a001e38 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001e1c:	4b1d      	ldr	r3, [pc, #116]	; (1a001e94 <prvAddNewTaskToReadyList+0x94>)
1a001e1e:	681b      	ldr	r3, [r3, #0]
1a001e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e24:	429a      	cmp	r2, r3
1a001e26:	d807      	bhi.n	1a001e38 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001e28:	4b1a      	ldr	r3, [pc, #104]	; (1a001e94 <prvAddNewTaskToReadyList+0x94>)
1a001e2a:	601c      	str	r4, [r3, #0]
1a001e2c:	e004      	b.n	1a001e38 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001e2e:	4b19      	ldr	r3, [pc, #100]	; (1a001e94 <prvAddNewTaskToReadyList+0x94>)
1a001e30:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001e32:	6813      	ldr	r3, [r2, #0]
1a001e34:	2b01      	cmp	r3, #1
1a001e36:	d027      	beq.n	1a001e88 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001e38:	4a18      	ldr	r2, [pc, #96]	; (1a001e9c <prvAddNewTaskToReadyList+0x9c>)
1a001e3a:	6813      	ldr	r3, [r2, #0]
1a001e3c:	3301      	adds	r3, #1
1a001e3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001e40:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e44:	2201      	movs	r2, #1
1a001e46:	409a      	lsls	r2, r3
1a001e48:	4915      	ldr	r1, [pc, #84]	; (1a001ea0 <prvAddNewTaskToReadyList+0xa0>)
1a001e4a:	6808      	ldr	r0, [r1, #0]
1a001e4c:	4302      	orrs	r2, r0
1a001e4e:	600a      	str	r2, [r1, #0]
1a001e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e54:	009a      	lsls	r2, r3, #2
1a001e56:	1d21      	adds	r1, r4, #4
1a001e58:	4812      	ldr	r0, [pc, #72]	; (1a001ea4 <prvAddNewTaskToReadyList+0xa4>)
1a001e5a:	4410      	add	r0, r2
1a001e5c:	f7ff fee7 	bl	1a001c2e <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001e60:	f001 f852 	bl	1a002f08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001e64:	4b0c      	ldr	r3, [pc, #48]	; (1a001e98 <prvAddNewTaskToReadyList+0x98>)
1a001e66:	681b      	ldr	r3, [r3, #0]
1a001e68:	b16b      	cbz	r3, 1a001e86 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001e6a:	4b0a      	ldr	r3, [pc, #40]	; (1a001e94 <prvAddNewTaskToReadyList+0x94>)
1a001e6c:	681b      	ldr	r3, [r3, #0]
1a001e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e72:	429a      	cmp	r2, r3
1a001e74:	d207      	bcs.n	1a001e86 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001e76:	4b0c      	ldr	r3, [pc, #48]	; (1a001ea8 <prvAddNewTaskToReadyList+0xa8>)
1a001e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e7c:	601a      	str	r2, [r3, #0]
1a001e7e:	f3bf 8f4f 	dsb	sy
1a001e82:	f3bf 8f6f 	isb	sy
}
1a001e86:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001e88:	f7ff ff86 	bl	1a001d98 <prvInitialiseTaskLists>
1a001e8c:	e7d4      	b.n	1a001e38 <prvAddNewTaskToReadyList+0x38>
1a001e8e:	bf00      	nop
1a001e90:	10002a94 	.word	0x10002a94
1a001e94:	100029fc 	.word	0x100029fc
1a001e98:	10002af0 	.word	0x10002af0
1a001e9c:	10002aa4 	.word	0x10002aa4
1a001ea0:	10002aa8 	.word	0x10002aa8
1a001ea4:	10002a08 	.word	0x10002a08
1a001ea8:	e000ed04 	.word	0xe000ed04

1a001eac <prvDeleteTCB>:
	{
1a001eac:	b510      	push	{r4, lr}
1a001eae:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001eb0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001eb4:	b933      	cbnz	r3, 1a001ec4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001eb6:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001eb8:	f7ff fa5a 	bl	1a001370 <vPortFree>
				vPortFree( pxTCB );
1a001ebc:	4620      	mov	r0, r4
1a001ebe:	f7ff fa57 	bl	1a001370 <vPortFree>
	}
1a001ec2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001ec4:	2b01      	cmp	r3, #1
1a001ec6:	d00a      	beq.n	1a001ede <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001ec8:	2b02      	cmp	r3, #2
1a001eca:	d0fa      	beq.n	1a001ec2 <prvDeleteTCB+0x16>
1a001ecc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ed0:	f383 8811 	msr	BASEPRI, r3
1a001ed4:	f3bf 8f6f 	isb	sy
1a001ed8:	f3bf 8f4f 	dsb	sy
1a001edc:	e7fe      	b.n	1a001edc <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001ede:	f7ff fa47 	bl	1a001370 <vPortFree>
1a001ee2:	e7ee      	b.n	1a001ec2 <prvDeleteTCB+0x16>

1a001ee4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001ee4:	4b0f      	ldr	r3, [pc, #60]	; (1a001f24 <prvCheckTasksWaitingTermination+0x40>)
1a001ee6:	681b      	ldr	r3, [r3, #0]
1a001ee8:	b1d3      	cbz	r3, 1a001f20 <prvCheckTasksWaitingTermination+0x3c>
{
1a001eea:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001eec:	f000 ffea 	bl	1a002ec4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001ef0:	4b0d      	ldr	r3, [pc, #52]	; (1a001f28 <prvCheckTasksWaitingTermination+0x44>)
1a001ef2:	68db      	ldr	r3, [r3, #12]
1a001ef4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001ef6:	1d20      	adds	r0, r4, #4
1a001ef8:	f7ff febf 	bl	1a001c7a <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001efc:	4a0b      	ldr	r2, [pc, #44]	; (1a001f2c <prvCheckTasksWaitingTermination+0x48>)
1a001efe:	6813      	ldr	r3, [r2, #0]
1a001f00:	3b01      	subs	r3, #1
1a001f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001f04:	4a07      	ldr	r2, [pc, #28]	; (1a001f24 <prvCheckTasksWaitingTermination+0x40>)
1a001f06:	6813      	ldr	r3, [r2, #0]
1a001f08:	3b01      	subs	r3, #1
1a001f0a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001f0c:	f000 fffc 	bl	1a002f08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001f10:	4620      	mov	r0, r4
1a001f12:	f7ff ffcb 	bl	1a001eac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001f16:	4b03      	ldr	r3, [pc, #12]	; (1a001f24 <prvCheckTasksWaitingTermination+0x40>)
1a001f18:	681b      	ldr	r3, [r3, #0]
1a001f1a:	2b00      	cmp	r3, #0
1a001f1c:	d1e6      	bne.n	1a001eec <prvCheckTasksWaitingTermination+0x8>
}
1a001f1e:	bd10      	pop	{r4, pc}
1a001f20:	4770      	bx	lr
1a001f22:	bf00      	nop
1a001f24:	10002a98 	.word	0x10002a98
1a001f28:	10002b08 	.word	0x10002b08
1a001f2c:	10002a94 	.word	0x10002a94

1a001f30 <prvIdleTask>:
{
1a001f30:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001f32:	f7ff ffd7 	bl	1a001ee4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001f36:	4b06      	ldr	r3, [pc, #24]	; (1a001f50 <prvIdleTask+0x20>)
1a001f38:	681b      	ldr	r3, [r3, #0]
1a001f3a:	2b01      	cmp	r3, #1
1a001f3c:	d9f9      	bls.n	1a001f32 <prvIdleTask+0x2>
				taskYIELD();
1a001f3e:	4b05      	ldr	r3, [pc, #20]	; (1a001f54 <prvIdleTask+0x24>)
1a001f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001f44:	601a      	str	r2, [r3, #0]
1a001f46:	f3bf 8f4f 	dsb	sy
1a001f4a:	f3bf 8f6f 	isb	sy
1a001f4e:	e7f0      	b.n	1a001f32 <prvIdleTask+0x2>
1a001f50:	10002a08 	.word	0x10002a08
1a001f54:	e000ed04 	.word	0xe000ed04

1a001f58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001f58:	b570      	push	{r4, r5, r6, lr}
1a001f5a:	4604      	mov	r4, r0
1a001f5c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001f5e:	4b1d      	ldr	r3, [pc, #116]	; (1a001fd4 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001f60:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001f62:	4b1d      	ldr	r3, [pc, #116]	; (1a001fd8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001f64:	6818      	ldr	r0, [r3, #0]
1a001f66:	3004      	adds	r0, #4
1a001f68:	f7ff fe87 	bl	1a001c7a <uxListRemove>
1a001f6c:	b950      	cbnz	r0, 1a001f84 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001f6e:	4b1a      	ldr	r3, [pc, #104]	; (1a001fd8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001f70:	681b      	ldr	r3, [r3, #0]
1a001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001f74:	2301      	movs	r3, #1
1a001f76:	fa03 f202 	lsl.w	r2, r3, r2
1a001f7a:	4918      	ldr	r1, [pc, #96]	; (1a001fdc <prvAddCurrentTaskToDelayedList+0x84>)
1a001f7c:	680b      	ldr	r3, [r1, #0]
1a001f7e:	ea23 0302 	bic.w	r3, r3, r2
1a001f82:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001f84:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001f88:	d013      	beq.n	1a001fb2 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001f8a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001f8c:	4b12      	ldr	r3, [pc, #72]	; (1a001fd8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001f8e:	681b      	ldr	r3, [r3, #0]
1a001f90:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001f92:	42a5      	cmp	r5, r4
1a001f94:	d816      	bhi.n	1a001fc4 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001f96:	4b12      	ldr	r3, [pc, #72]	; (1a001fe0 <prvAddCurrentTaskToDelayedList+0x88>)
1a001f98:	6818      	ldr	r0, [r3, #0]
1a001f9a:	4b0f      	ldr	r3, [pc, #60]	; (1a001fd8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001f9c:	6819      	ldr	r1, [r3, #0]
1a001f9e:	3104      	adds	r1, #4
1a001fa0:	f7ff fe51 	bl	1a001c46 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001fa4:	4b0f      	ldr	r3, [pc, #60]	; (1a001fe4 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001fa6:	681b      	ldr	r3, [r3, #0]
1a001fa8:	42a3      	cmp	r3, r4
1a001faa:	d912      	bls.n	1a001fd2 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001fac:	4b0d      	ldr	r3, [pc, #52]	; (1a001fe4 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001fae:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001fb0:	e00f      	b.n	1a001fd2 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001fb2:	2e00      	cmp	r6, #0
1a001fb4:	d0e9      	beq.n	1a001f8a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001fb6:	4b08      	ldr	r3, [pc, #32]	; (1a001fd8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001fb8:	6819      	ldr	r1, [r3, #0]
1a001fba:	3104      	adds	r1, #4
1a001fbc:	480a      	ldr	r0, [pc, #40]	; (1a001fe8 <prvAddCurrentTaskToDelayedList+0x90>)
1a001fbe:	f7ff fe36 	bl	1a001c2e <vListInsertEnd>
1a001fc2:	e006      	b.n	1a001fd2 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001fc4:	4b09      	ldr	r3, [pc, #36]	; (1a001fec <prvAddCurrentTaskToDelayedList+0x94>)
1a001fc6:	6818      	ldr	r0, [r3, #0]
1a001fc8:	4b03      	ldr	r3, [pc, #12]	; (1a001fd8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001fca:	6819      	ldr	r1, [r3, #0]
1a001fcc:	3104      	adds	r1, #4
1a001fce:	f7ff fe3a 	bl	1a001c46 <vListInsert>
}
1a001fd2:	bd70      	pop	{r4, r5, r6, pc}
1a001fd4:	10002b1c 	.word	0x10002b1c
1a001fd8:	100029fc 	.word	0x100029fc
1a001fdc:	10002aa8 	.word	0x10002aa8
1a001fe0:	10002a00 	.word	0x10002a00
1a001fe4:	10002ad4 	.word	0x10002ad4
1a001fe8:	10002af4 	.word	0x10002af4
1a001fec:	10002a04 	.word	0x10002a04

1a001ff0 <xTaskCreateStatic>:
	{
1a001ff0:	b570      	push	{r4, r5, r6, lr}
1a001ff2:	b086      	sub	sp, #24
1a001ff4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001ff6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001ff8:	b945      	cbnz	r5, 1a00200c <xTaskCreateStatic+0x1c>
1a001ffa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ffe:	f383 8811 	msr	BASEPRI, r3
1a002002:	f3bf 8f6f 	isb	sy
1a002006:	f3bf 8f4f 	dsb	sy
1a00200a:	e7fe      	b.n	1a00200a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a00200c:	b944      	cbnz	r4, 1a002020 <xTaskCreateStatic+0x30>
1a00200e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002012:	f383 8811 	msr	BASEPRI, r3
1a002016:	f3bf 8f6f 	isb	sy
1a00201a:	f3bf 8f4f 	dsb	sy
1a00201e:	e7fe      	b.n	1a00201e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a002020:	2660      	movs	r6, #96	; 0x60
1a002022:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a002024:	9e04      	ldr	r6, [sp, #16]
1a002026:	2e60      	cmp	r6, #96	; 0x60
1a002028:	d008      	beq.n	1a00203c <xTaskCreateStatic+0x4c>
1a00202a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00202e:	f383 8811 	msr	BASEPRI, r3
1a002032:	f3bf 8f6f 	isb	sy
1a002036:	f3bf 8f4f 	dsb	sy
1a00203a:	e7fe      	b.n	1a00203a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a00203c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00203e:	2502      	movs	r5, #2
1a002040:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a002044:	2500      	movs	r5, #0
1a002046:	9503      	str	r5, [sp, #12]
1a002048:	9402      	str	r4, [sp, #8]
1a00204a:	ad05      	add	r5, sp, #20
1a00204c:	9501      	str	r5, [sp, #4]
1a00204e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a002050:	9500      	str	r5, [sp, #0]
1a002052:	f7ff fe57 	bl	1a001d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002056:	4620      	mov	r0, r4
1a002058:	f7ff fed2 	bl	1a001e00 <prvAddNewTaskToReadyList>
	}
1a00205c:	9805      	ldr	r0, [sp, #20]
1a00205e:	b006      	add	sp, #24
1a002060:	bd70      	pop	{r4, r5, r6, pc}

1a002062 <xTaskCreate>:
	{
1a002062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002066:	b085      	sub	sp, #20
1a002068:	4607      	mov	r7, r0
1a00206a:	4688      	mov	r8, r1
1a00206c:	4615      	mov	r5, r2
1a00206e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002070:	0090      	lsls	r0, r2, #2
1a002072:	f7ff f945 	bl	1a001300 <pvPortMalloc>
			if( pxStack != NULL )
1a002076:	b308      	cbz	r0, 1a0020bc <xTaskCreate+0x5a>
1a002078:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00207a:	2060      	movs	r0, #96	; 0x60
1a00207c:	f7ff f940 	bl	1a001300 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a002080:	4604      	mov	r4, r0
1a002082:	b1b8      	cbz	r0, 1a0020b4 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a002084:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a002086:	b1e4      	cbz	r4, 1a0020c2 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a002088:	2300      	movs	r3, #0
1a00208a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00208e:	9303      	str	r3, [sp, #12]
1a002090:	9402      	str	r4, [sp, #8]
1a002092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a002094:	9301      	str	r3, [sp, #4]
1a002096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002098:	9300      	str	r3, [sp, #0]
1a00209a:	464b      	mov	r3, r9
1a00209c:	462a      	mov	r2, r5
1a00209e:	4641      	mov	r1, r8
1a0020a0:	4638      	mov	r0, r7
1a0020a2:	f7ff fe2f 	bl	1a001d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0020a6:	4620      	mov	r0, r4
1a0020a8:	f7ff feaa 	bl	1a001e00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0020ac:	2001      	movs	r0, #1
	}
1a0020ae:	b005      	add	sp, #20
1a0020b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0020b4:	4630      	mov	r0, r6
1a0020b6:	f7ff f95b 	bl	1a001370 <vPortFree>
1a0020ba:	e7e4      	b.n	1a002086 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0020bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0020c0:	e7f5      	b.n	1a0020ae <xTaskCreate+0x4c>
1a0020c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0020c6:	e7f2      	b.n	1a0020ae <xTaskCreate+0x4c>

1a0020c8 <vTaskStartScheduler>:
{
1a0020c8:	b510      	push	{r4, lr}
1a0020ca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0020cc:	2400      	movs	r4, #0
1a0020ce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0020d0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0020d2:	aa07      	add	r2, sp, #28
1a0020d4:	a906      	add	r1, sp, #24
1a0020d6:	a805      	add	r0, sp, #20
1a0020d8:	f7ff fde4 	bl	1a001ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0020dc:	9b05      	ldr	r3, [sp, #20]
1a0020de:	9302      	str	r3, [sp, #8]
1a0020e0:	9b06      	ldr	r3, [sp, #24]
1a0020e2:	9301      	str	r3, [sp, #4]
1a0020e4:	9400      	str	r4, [sp, #0]
1a0020e6:	4623      	mov	r3, r4
1a0020e8:	9a07      	ldr	r2, [sp, #28]
1a0020ea:	4917      	ldr	r1, [pc, #92]	; (1a002148 <vTaskStartScheduler+0x80>)
1a0020ec:	4817      	ldr	r0, [pc, #92]	; (1a00214c <vTaskStartScheduler+0x84>)
1a0020ee:	f7ff ff7f 	bl	1a001ff0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0020f2:	b140      	cbz	r0, 1a002106 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0020f4:	f000 fcac 	bl	1a002a50 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0020f8:	2801      	cmp	r0, #1
1a0020fa:	d006      	beq.n	1a00210a <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0020fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002100:	d018      	beq.n	1a002134 <vTaskStartScheduler+0x6c>
}
1a002102:	b008      	add	sp, #32
1a002104:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a002106:	2000      	movs	r0, #0
1a002108:	e7f6      	b.n	1a0020f8 <vTaskStartScheduler+0x30>
1a00210a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00210e:	f383 8811 	msr	BASEPRI, r3
1a002112:	f3bf 8f6f 	isb	sy
1a002116:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a00211a:	4b0d      	ldr	r3, [pc, #52]	; (1a002150 <vTaskStartScheduler+0x88>)
1a00211c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a002122:	4b0c      	ldr	r3, [pc, #48]	; (1a002154 <vTaskStartScheduler+0x8c>)
1a002124:	2201      	movs	r2, #1
1a002126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a002128:	4b0b      	ldr	r3, [pc, #44]	; (1a002158 <vTaskStartScheduler+0x90>)
1a00212a:	2200      	movs	r2, #0
1a00212c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00212e:	f000 ff6b 	bl	1a003008 <xPortStartScheduler>
1a002132:	e7e6      	b.n	1a002102 <vTaskStartScheduler+0x3a>
1a002134:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002138:	f383 8811 	msr	BASEPRI, r3
1a00213c:	f3bf 8f6f 	isb	sy
1a002140:	f3bf 8f4f 	dsb	sy
1a002144:	e7fe      	b.n	1a002144 <vTaskStartScheduler+0x7c>
1a002146:	bf00      	nop
1a002148:	1a005898 	.word	0x1a005898
1a00214c:	1a001f31 	.word	0x1a001f31
1a002150:	10002ad4 	.word	0x10002ad4
1a002154:	10002af0 	.word	0x10002af0
1a002158:	10002b1c 	.word	0x10002b1c

1a00215c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a00215c:	4a02      	ldr	r2, [pc, #8]	; (1a002168 <vTaskSuspendAll+0xc>)
1a00215e:	6813      	ldr	r3, [r2, #0]
1a002160:	3301      	adds	r3, #1
1a002162:	6013      	str	r3, [r2, #0]
}
1a002164:	4770      	bx	lr
1a002166:	bf00      	nop
1a002168:	10002aa0 	.word	0x10002aa0

1a00216c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a00216c:	4b01      	ldr	r3, [pc, #4]	; (1a002174 <xTaskGetTickCount+0x8>)
1a00216e:	6818      	ldr	r0, [r3, #0]
}
1a002170:	4770      	bx	lr
1a002172:	bf00      	nop
1a002174:	10002b1c 	.word	0x10002b1c

1a002178 <xTaskIncrementTick>:
{
1a002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00217a:	4b3a      	ldr	r3, [pc, #232]	; (1a002264 <xTaskIncrementTick+0xec>)
1a00217c:	681b      	ldr	r3, [r3, #0]
1a00217e:	2b00      	cmp	r3, #0
1a002180:	d164      	bne.n	1a00224c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a002182:	4b39      	ldr	r3, [pc, #228]	; (1a002268 <xTaskIncrementTick+0xf0>)
1a002184:	681d      	ldr	r5, [r3, #0]
1a002186:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a002188:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00218a:	b9c5      	cbnz	r5, 1a0021be <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00218c:	4b37      	ldr	r3, [pc, #220]	; (1a00226c <xTaskIncrementTick+0xf4>)
1a00218e:	681b      	ldr	r3, [r3, #0]
1a002190:	681b      	ldr	r3, [r3, #0]
1a002192:	b143      	cbz	r3, 1a0021a6 <xTaskIncrementTick+0x2e>
1a002194:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002198:	f383 8811 	msr	BASEPRI, r3
1a00219c:	f3bf 8f6f 	isb	sy
1a0021a0:	f3bf 8f4f 	dsb	sy
1a0021a4:	e7fe      	b.n	1a0021a4 <xTaskIncrementTick+0x2c>
1a0021a6:	4a31      	ldr	r2, [pc, #196]	; (1a00226c <xTaskIncrementTick+0xf4>)
1a0021a8:	6811      	ldr	r1, [r2, #0]
1a0021aa:	4b31      	ldr	r3, [pc, #196]	; (1a002270 <xTaskIncrementTick+0xf8>)
1a0021ac:	6818      	ldr	r0, [r3, #0]
1a0021ae:	6010      	str	r0, [r2, #0]
1a0021b0:	6019      	str	r1, [r3, #0]
1a0021b2:	4a30      	ldr	r2, [pc, #192]	; (1a002274 <xTaskIncrementTick+0xfc>)
1a0021b4:	6813      	ldr	r3, [r2, #0]
1a0021b6:	3301      	adds	r3, #1
1a0021b8:	6013      	str	r3, [r2, #0]
1a0021ba:	f7ff fd8d 	bl	1a001cd8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0021be:	4b2e      	ldr	r3, [pc, #184]	; (1a002278 <xTaskIncrementTick+0x100>)
1a0021c0:	681b      	ldr	r3, [r3, #0]
1a0021c2:	42ab      	cmp	r3, r5
1a0021c4:	d938      	bls.n	1a002238 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0021c6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0021c8:	4b2c      	ldr	r3, [pc, #176]	; (1a00227c <xTaskIncrementTick+0x104>)
1a0021ca:	681b      	ldr	r3, [r3, #0]
1a0021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0021ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0021d2:	009a      	lsls	r2, r3, #2
1a0021d4:	4b2a      	ldr	r3, [pc, #168]	; (1a002280 <xTaskIncrementTick+0x108>)
1a0021d6:	589b      	ldr	r3, [r3, r2]
1a0021d8:	2b01      	cmp	r3, #1
1a0021da:	d93c      	bls.n	1a002256 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0021dc:	2401      	movs	r4, #1
1a0021de:	e03a      	b.n	1a002256 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0021e0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0021e2:	4b22      	ldr	r3, [pc, #136]	; (1a00226c <xTaskIncrementTick+0xf4>)
1a0021e4:	681b      	ldr	r3, [r3, #0]
1a0021e6:	681b      	ldr	r3, [r3, #0]
1a0021e8:	b343      	cbz	r3, 1a00223c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0021ea:	4b20      	ldr	r3, [pc, #128]	; (1a00226c <xTaskIncrementTick+0xf4>)
1a0021ec:	681b      	ldr	r3, [r3, #0]
1a0021ee:	68db      	ldr	r3, [r3, #12]
1a0021f0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0021f2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0021f4:	429d      	cmp	r5, r3
1a0021f6:	d326      	bcc.n	1a002246 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0021f8:	1d37      	adds	r7, r6, #4
1a0021fa:	4638      	mov	r0, r7
1a0021fc:	f7ff fd3d 	bl	1a001c7a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002200:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a002202:	b11b      	cbz	r3, 1a00220c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002204:	f106 0018 	add.w	r0, r6, #24
1a002208:	f7ff fd37 	bl	1a001c7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00220c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00220e:	2201      	movs	r2, #1
1a002210:	409a      	lsls	r2, r3
1a002212:	491c      	ldr	r1, [pc, #112]	; (1a002284 <xTaskIncrementTick+0x10c>)
1a002214:	6808      	ldr	r0, [r1, #0]
1a002216:	4302      	orrs	r2, r0
1a002218:	600a      	str	r2, [r1, #0]
1a00221a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00221e:	009a      	lsls	r2, r3, #2
1a002220:	4639      	mov	r1, r7
1a002222:	4817      	ldr	r0, [pc, #92]	; (1a002280 <xTaskIncrementTick+0x108>)
1a002224:	4410      	add	r0, r2
1a002226:	f7ff fd02 	bl	1a001c2e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00222a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a00222c:	4b13      	ldr	r3, [pc, #76]	; (1a00227c <xTaskIncrementTick+0x104>)
1a00222e:	681b      	ldr	r3, [r3, #0]
1a002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002232:	429a      	cmp	r2, r3
1a002234:	d2d4      	bcs.n	1a0021e0 <xTaskIncrementTick+0x68>
1a002236:	e7d4      	b.n	1a0021e2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a002238:	2400      	movs	r4, #0
1a00223a:	e7d2      	b.n	1a0021e2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00223c:	4b0e      	ldr	r3, [pc, #56]	; (1a002278 <xTaskIncrementTick+0x100>)
1a00223e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002242:	601a      	str	r2, [r3, #0]
					break;
1a002244:	e7c0      	b.n	1a0021c8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a002246:	4a0c      	ldr	r2, [pc, #48]	; (1a002278 <xTaskIncrementTick+0x100>)
1a002248:	6013      	str	r3, [r2, #0]
						break;
1a00224a:	e7bd      	b.n	1a0021c8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a00224c:	4a0e      	ldr	r2, [pc, #56]	; (1a002288 <xTaskIncrementTick+0x110>)
1a00224e:	6813      	ldr	r3, [r2, #0]
1a002250:	3301      	adds	r3, #1
1a002252:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a002254:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a002256:	4b0d      	ldr	r3, [pc, #52]	; (1a00228c <xTaskIncrementTick+0x114>)
1a002258:	681b      	ldr	r3, [r3, #0]
1a00225a:	b103      	cbz	r3, 1a00225e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a00225c:	2401      	movs	r4, #1
}
1a00225e:	4620      	mov	r0, r4
1a002260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002262:	bf00      	nop
1a002264:	10002aa0 	.word	0x10002aa0
1a002268:	10002b1c 	.word	0x10002b1c
1a00226c:	10002a00 	.word	0x10002a00
1a002270:	10002a04 	.word	0x10002a04
1a002274:	10002ad8 	.word	0x10002ad8
1a002278:	10002ad4 	.word	0x10002ad4
1a00227c:	100029fc 	.word	0x100029fc
1a002280:	10002a08 	.word	0x10002a08
1a002284:	10002aa8 	.word	0x10002aa8
1a002288:	10002a9c 	.word	0x10002a9c
1a00228c:	10002b20 	.word	0x10002b20

1a002290 <xTaskResumeAll>:
{
1a002290:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002292:	4b33      	ldr	r3, [pc, #204]	; (1a002360 <xTaskResumeAll+0xd0>)
1a002294:	681b      	ldr	r3, [r3, #0]
1a002296:	b943      	cbnz	r3, 1a0022aa <xTaskResumeAll+0x1a>
1a002298:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00229c:	f383 8811 	msr	BASEPRI, r3
1a0022a0:	f3bf 8f6f 	isb	sy
1a0022a4:	f3bf 8f4f 	dsb	sy
1a0022a8:	e7fe      	b.n	1a0022a8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0022aa:	f000 fe0b 	bl	1a002ec4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0022ae:	4b2c      	ldr	r3, [pc, #176]	; (1a002360 <xTaskResumeAll+0xd0>)
1a0022b0:	681a      	ldr	r2, [r3, #0]
1a0022b2:	3a01      	subs	r2, #1
1a0022b4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0022b6:	681b      	ldr	r3, [r3, #0]
1a0022b8:	2b00      	cmp	r3, #0
1a0022ba:	d14d      	bne.n	1a002358 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0022bc:	4b29      	ldr	r3, [pc, #164]	; (1a002364 <xTaskResumeAll+0xd4>)
1a0022be:	681b      	ldr	r3, [r3, #0]
1a0022c0:	b923      	cbnz	r3, 1a0022cc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0022c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0022c4:	f000 fe20 	bl	1a002f08 <vPortExitCritical>
}
1a0022c8:	4620      	mov	r0, r4
1a0022ca:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0022cc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0022ce:	4b26      	ldr	r3, [pc, #152]	; (1a002368 <xTaskResumeAll+0xd8>)
1a0022d0:	681b      	ldr	r3, [r3, #0]
1a0022d2:	b31b      	cbz	r3, 1a00231c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0022d4:	4b24      	ldr	r3, [pc, #144]	; (1a002368 <xTaskResumeAll+0xd8>)
1a0022d6:	68db      	ldr	r3, [r3, #12]
1a0022d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0022da:	f104 0018 	add.w	r0, r4, #24
1a0022de:	f7ff fccc 	bl	1a001c7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0022e2:	1d25      	adds	r5, r4, #4
1a0022e4:	4628      	mov	r0, r5
1a0022e6:	f7ff fcc8 	bl	1a001c7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0022ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0022ec:	2201      	movs	r2, #1
1a0022ee:	409a      	lsls	r2, r3
1a0022f0:	491e      	ldr	r1, [pc, #120]	; (1a00236c <xTaskResumeAll+0xdc>)
1a0022f2:	6808      	ldr	r0, [r1, #0]
1a0022f4:	4302      	orrs	r2, r0
1a0022f6:	600a      	str	r2, [r1, #0]
1a0022f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0022fc:	009a      	lsls	r2, r3, #2
1a0022fe:	4629      	mov	r1, r5
1a002300:	481b      	ldr	r0, [pc, #108]	; (1a002370 <xTaskResumeAll+0xe0>)
1a002302:	4410      	add	r0, r2
1a002304:	f7ff fc93 	bl	1a001c2e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002308:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00230a:	4b1a      	ldr	r3, [pc, #104]	; (1a002374 <xTaskResumeAll+0xe4>)
1a00230c:	681b      	ldr	r3, [r3, #0]
1a00230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002310:	429a      	cmp	r2, r3
1a002312:	d3dc      	bcc.n	1a0022ce <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a002314:	4b18      	ldr	r3, [pc, #96]	; (1a002378 <xTaskResumeAll+0xe8>)
1a002316:	2201      	movs	r2, #1
1a002318:	601a      	str	r2, [r3, #0]
1a00231a:	e7d8      	b.n	1a0022ce <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a00231c:	b10c      	cbz	r4, 1a002322 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00231e:	f7ff fcdb 	bl	1a001cd8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a002322:	4b16      	ldr	r3, [pc, #88]	; (1a00237c <xTaskResumeAll+0xec>)
1a002324:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a002326:	b154      	cbz	r4, 1a00233e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a002328:	f7ff ff26 	bl	1a002178 <xTaskIncrementTick>
1a00232c:	b110      	cbz	r0, 1a002334 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a00232e:	4b12      	ldr	r3, [pc, #72]	; (1a002378 <xTaskResumeAll+0xe8>)
1a002330:	2201      	movs	r2, #1
1a002332:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a002334:	3c01      	subs	r4, #1
1a002336:	d1f7      	bne.n	1a002328 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a002338:	4b10      	ldr	r3, [pc, #64]	; (1a00237c <xTaskResumeAll+0xec>)
1a00233a:	2200      	movs	r2, #0
1a00233c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a00233e:	4b0e      	ldr	r3, [pc, #56]	; (1a002378 <xTaskResumeAll+0xe8>)
1a002340:	681b      	ldr	r3, [r3, #0]
1a002342:	b15b      	cbz	r3, 1a00235c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a002344:	4b0e      	ldr	r3, [pc, #56]	; (1a002380 <xTaskResumeAll+0xf0>)
1a002346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00234a:	601a      	str	r2, [r3, #0]
1a00234c:	f3bf 8f4f 	dsb	sy
1a002350:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a002354:	2401      	movs	r4, #1
1a002356:	e7b5      	b.n	1a0022c4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a002358:	2400      	movs	r4, #0
1a00235a:	e7b3      	b.n	1a0022c4 <xTaskResumeAll+0x34>
1a00235c:	2400      	movs	r4, #0
1a00235e:	e7b1      	b.n	1a0022c4 <xTaskResumeAll+0x34>
1a002360:	10002aa0 	.word	0x10002aa0
1a002364:	10002a94 	.word	0x10002a94
1a002368:	10002adc 	.word	0x10002adc
1a00236c:	10002aa8 	.word	0x10002aa8
1a002370:	10002a08 	.word	0x10002a08
1a002374:	100029fc 	.word	0x100029fc
1a002378:	10002b20 	.word	0x10002b20
1a00237c:	10002a9c 	.word	0x10002a9c
1a002380:	e000ed04 	.word	0xe000ed04

1a002384 <vTaskDelayUntil>:
	{
1a002384:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a002386:	b150      	cbz	r0, 1a00239e <vTaskDelayUntil+0x1a>
1a002388:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00238a:	b989      	cbnz	r1, 1a0023b0 <vTaskDelayUntil+0x2c>
1a00238c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002390:	f383 8811 	msr	BASEPRI, r3
1a002394:	f3bf 8f6f 	isb	sy
1a002398:	f3bf 8f4f 	dsb	sy
1a00239c:	e7fe      	b.n	1a00239c <vTaskDelayUntil+0x18>
1a00239e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023a2:	f383 8811 	msr	BASEPRI, r3
1a0023a6:	f3bf 8f6f 	isb	sy
1a0023aa:	f3bf 8f4f 	dsb	sy
1a0023ae:	e7fe      	b.n	1a0023ae <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a0023b0:	4b1a      	ldr	r3, [pc, #104]	; (1a00241c <vTaskDelayUntil+0x98>)
1a0023b2:	681b      	ldr	r3, [r3, #0]
1a0023b4:	b143      	cbz	r3, 1a0023c8 <vTaskDelayUntil+0x44>
1a0023b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023ba:	f383 8811 	msr	BASEPRI, r3
1a0023be:	f3bf 8f6f 	isb	sy
1a0023c2:	f3bf 8f4f 	dsb	sy
1a0023c6:	e7fe      	b.n	1a0023c6 <vTaskDelayUntil+0x42>
1a0023c8:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a0023ca:	f7ff fec7 	bl	1a00215c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a0023ce:	4b14      	ldr	r3, [pc, #80]	; (1a002420 <vTaskDelayUntil+0x9c>)
1a0023d0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a0023d2:	682a      	ldr	r2, [r5, #0]
1a0023d4:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a0023d6:	4282      	cmp	r2, r0
1a0023d8:	d918      	bls.n	1a00240c <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0023da:	42a2      	cmp	r2, r4
1a0023dc:	d80c      	bhi.n	1a0023f8 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a0023de:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a0023e0:	f7ff ff56 	bl	1a002290 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0023e4:	b938      	cbnz	r0, 1a0023f6 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a0023e6:	4b0f      	ldr	r3, [pc, #60]	; (1a002424 <vTaskDelayUntil+0xa0>)
1a0023e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0023ec:	601a      	str	r2, [r3, #0]
1a0023ee:	f3bf 8f4f 	dsb	sy
1a0023f2:	f3bf 8f6f 	isb	sy
	}
1a0023f6:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0023f8:	42a0      	cmp	r0, r4
1a0023fa:	d301      	bcc.n	1a002400 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0023fc:	602c      	str	r4, [r5, #0]
1a0023fe:	e7ef      	b.n	1a0023e0 <vTaskDelayUntil+0x5c>
1a002400:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a002402:	2100      	movs	r1, #0
1a002404:	1a20      	subs	r0, r4, r0
1a002406:	f7ff fda7 	bl	1a001f58 <prvAddCurrentTaskToDelayedList>
1a00240a:	e7e9      	b.n	1a0023e0 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a00240c:	42a2      	cmp	r2, r4
1a00240e:	d801      	bhi.n	1a002414 <vTaskDelayUntil+0x90>
1a002410:	42a0      	cmp	r0, r4
1a002412:	d201      	bcs.n	1a002418 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a002414:	602c      	str	r4, [r5, #0]
1a002416:	e7f4      	b.n	1a002402 <vTaskDelayUntil+0x7e>
1a002418:	602c      	str	r4, [r5, #0]
1a00241a:	e7e1      	b.n	1a0023e0 <vTaskDelayUntil+0x5c>
1a00241c:	10002aa0 	.word	0x10002aa0
1a002420:	10002b1c 	.word	0x10002b1c
1a002424:	e000ed04 	.word	0xe000ed04

1a002428 <vTaskDelay>:
	{
1a002428:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00242a:	b1a8      	cbz	r0, 1a002458 <vTaskDelay+0x30>
1a00242c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a00242e:	4b0f      	ldr	r3, [pc, #60]	; (1a00246c <vTaskDelay+0x44>)
1a002430:	681b      	ldr	r3, [r3, #0]
1a002432:	b143      	cbz	r3, 1a002446 <vTaskDelay+0x1e>
1a002434:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002438:	f383 8811 	msr	BASEPRI, r3
1a00243c:	f3bf 8f6f 	isb	sy
1a002440:	f3bf 8f4f 	dsb	sy
1a002444:	e7fe      	b.n	1a002444 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a002446:	f7ff fe89 	bl	1a00215c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00244a:	2100      	movs	r1, #0
1a00244c:	4620      	mov	r0, r4
1a00244e:	f7ff fd83 	bl	1a001f58 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a002452:	f7ff ff1d 	bl	1a002290 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a002456:	b938      	cbnz	r0, 1a002468 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a002458:	4b05      	ldr	r3, [pc, #20]	; (1a002470 <vTaskDelay+0x48>)
1a00245a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00245e:	601a      	str	r2, [r3, #0]
1a002460:	f3bf 8f4f 	dsb	sy
1a002464:	f3bf 8f6f 	isb	sy
	}
1a002468:	bd10      	pop	{r4, pc}
1a00246a:	bf00      	nop
1a00246c:	10002aa0 	.word	0x10002aa0
1a002470:	e000ed04 	.word	0xe000ed04

1a002474 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a002474:	4b2c      	ldr	r3, [pc, #176]	; (1a002528 <vTaskSwitchContext+0xb4>)
1a002476:	681b      	ldr	r3, [r3, #0]
1a002478:	b11b      	cbz	r3, 1a002482 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00247a:	4b2c      	ldr	r3, [pc, #176]	; (1a00252c <vTaskSwitchContext+0xb8>)
1a00247c:	2201      	movs	r2, #1
1a00247e:	601a      	str	r2, [r3, #0]
1a002480:	4770      	bx	lr
{
1a002482:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a002484:	4b29      	ldr	r3, [pc, #164]	; (1a00252c <vTaskSwitchContext+0xb8>)
1a002486:	2200      	movs	r2, #0
1a002488:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00248a:	4b29      	ldr	r3, [pc, #164]	; (1a002530 <vTaskSwitchContext+0xbc>)
1a00248c:	681b      	ldr	r3, [r3, #0]
1a00248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a002490:	681a      	ldr	r2, [r3, #0]
1a002492:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002496:	d103      	bne.n	1a0024a0 <vTaskSwitchContext+0x2c>
1a002498:	685a      	ldr	r2, [r3, #4]
1a00249a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00249e:	d01b      	beq.n	1a0024d8 <vTaskSwitchContext+0x64>
1a0024a0:	4b23      	ldr	r3, [pc, #140]	; (1a002530 <vTaskSwitchContext+0xbc>)
1a0024a2:	6818      	ldr	r0, [r3, #0]
1a0024a4:	6819      	ldr	r1, [r3, #0]
1a0024a6:	3134      	adds	r1, #52	; 0x34
1a0024a8:	f7ff fc14 	bl	1a001cd4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0024ac:	4b21      	ldr	r3, [pc, #132]	; (1a002534 <vTaskSwitchContext+0xc0>)
1a0024ae:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0024b0:	fab3 f383 	clz	r3, r3
1a0024b4:	b2db      	uxtb	r3, r3
1a0024b6:	f1c3 031f 	rsb	r3, r3, #31
1a0024ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0024be:	008a      	lsls	r2, r1, #2
1a0024c0:	491d      	ldr	r1, [pc, #116]	; (1a002538 <vTaskSwitchContext+0xc4>)
1a0024c2:	588a      	ldr	r2, [r1, r2]
1a0024c4:	b98a      	cbnz	r2, 1a0024ea <vTaskSwitchContext+0x76>
	__asm volatile
1a0024c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024ca:	f383 8811 	msr	BASEPRI, r3
1a0024ce:	f3bf 8f6f 	isb	sy
1a0024d2:	f3bf 8f4f 	dsb	sy
1a0024d6:	e7fe      	b.n	1a0024d6 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0024d8:	689a      	ldr	r2, [r3, #8]
1a0024da:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0024de:	d1df      	bne.n	1a0024a0 <vTaskSwitchContext+0x2c>
1a0024e0:	68db      	ldr	r3, [r3, #12]
1a0024e2:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0024e6:	d1db      	bne.n	1a0024a0 <vTaskSwitchContext+0x2c>
1a0024e8:	e7e0      	b.n	1a0024ac <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0024ea:	4813      	ldr	r0, [pc, #76]	; (1a002538 <vTaskSwitchContext+0xc4>)
1a0024ec:	009a      	lsls	r2, r3, #2
1a0024ee:	18d4      	adds	r4, r2, r3
1a0024f0:	00a1      	lsls	r1, r4, #2
1a0024f2:	4401      	add	r1, r0
1a0024f4:	684c      	ldr	r4, [r1, #4]
1a0024f6:	6864      	ldr	r4, [r4, #4]
1a0024f8:	604c      	str	r4, [r1, #4]
1a0024fa:	441a      	add	r2, r3
1a0024fc:	0091      	lsls	r1, r2, #2
1a0024fe:	3108      	adds	r1, #8
1a002500:	4408      	add	r0, r1
1a002502:	4284      	cmp	r4, r0
1a002504:	d009      	beq.n	1a00251a <vTaskSwitchContext+0xa6>
1a002506:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00250a:	009a      	lsls	r2, r3, #2
1a00250c:	4b0a      	ldr	r3, [pc, #40]	; (1a002538 <vTaskSwitchContext+0xc4>)
1a00250e:	4413      	add	r3, r2
1a002510:	685b      	ldr	r3, [r3, #4]
1a002512:	68da      	ldr	r2, [r3, #12]
1a002514:	4b06      	ldr	r3, [pc, #24]	; (1a002530 <vTaskSwitchContext+0xbc>)
1a002516:	601a      	str	r2, [r3, #0]
}
1a002518:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00251a:	6861      	ldr	r1, [r4, #4]
1a00251c:	4806      	ldr	r0, [pc, #24]	; (1a002538 <vTaskSwitchContext+0xc4>)
1a00251e:	2214      	movs	r2, #20
1a002520:	fb02 0203 	mla	r2, r2, r3, r0
1a002524:	6051      	str	r1, [r2, #4]
1a002526:	e7ee      	b.n	1a002506 <vTaskSwitchContext+0x92>
1a002528:	10002aa0 	.word	0x10002aa0
1a00252c:	10002b20 	.word	0x10002b20
1a002530:	100029fc 	.word	0x100029fc
1a002534:	10002aa8 	.word	0x10002aa8
1a002538:	10002a08 	.word	0x10002a08

1a00253c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a00253c:	b940      	cbnz	r0, 1a002550 <vTaskPlaceOnEventList+0x14>
1a00253e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002542:	f383 8811 	msr	BASEPRI, r3
1a002546:	f3bf 8f6f 	isb	sy
1a00254a:	f3bf 8f4f 	dsb	sy
1a00254e:	e7fe      	b.n	1a00254e <vTaskPlaceOnEventList+0x12>
{
1a002550:	b510      	push	{r4, lr}
1a002552:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002554:	4b04      	ldr	r3, [pc, #16]	; (1a002568 <vTaskPlaceOnEventList+0x2c>)
1a002556:	6819      	ldr	r1, [r3, #0]
1a002558:	3118      	adds	r1, #24
1a00255a:	f7ff fb74 	bl	1a001c46 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00255e:	2101      	movs	r1, #1
1a002560:	4620      	mov	r0, r4
1a002562:	f7ff fcf9 	bl	1a001f58 <prvAddCurrentTaskToDelayedList>
}
1a002566:	bd10      	pop	{r4, pc}
1a002568:	100029fc 	.word	0x100029fc

1a00256c <vTaskPlaceOnEventListRestricted>:
	{
1a00256c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00256e:	b940      	cbnz	r0, 1a002582 <vTaskPlaceOnEventListRestricted+0x16>
1a002570:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002574:	f383 8811 	msr	BASEPRI, r3
1a002578:	f3bf 8f6f 	isb	sy
1a00257c:	f3bf 8f4f 	dsb	sy
1a002580:	e7fe      	b.n	1a002580 <vTaskPlaceOnEventListRestricted+0x14>
1a002582:	460c      	mov	r4, r1
1a002584:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002586:	4a06      	ldr	r2, [pc, #24]	; (1a0025a0 <vTaskPlaceOnEventListRestricted+0x34>)
1a002588:	6811      	ldr	r1, [r2, #0]
1a00258a:	3118      	adds	r1, #24
1a00258c:	f7ff fb4f 	bl	1a001c2e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002590:	b10d      	cbz	r5, 1a002596 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a002592:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a002596:	4629      	mov	r1, r5
1a002598:	4620      	mov	r0, r4
1a00259a:	f7ff fcdd 	bl	1a001f58 <prvAddCurrentTaskToDelayedList>
	}
1a00259e:	bd38      	pop	{r3, r4, r5, pc}
1a0025a0:	100029fc 	.word	0x100029fc

1a0025a4 <xTaskRemoveFromEventList>:
{
1a0025a4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0025a6:	68c3      	ldr	r3, [r0, #12]
1a0025a8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0025aa:	b944      	cbnz	r4, 1a0025be <xTaskRemoveFromEventList+0x1a>
1a0025ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025b0:	f383 8811 	msr	BASEPRI, r3
1a0025b4:	f3bf 8f6f 	isb	sy
1a0025b8:	f3bf 8f4f 	dsb	sy
1a0025bc:	e7fe      	b.n	1a0025bc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0025be:	f104 0518 	add.w	r5, r4, #24
1a0025c2:	4628      	mov	r0, r5
1a0025c4:	f7ff fb59 	bl	1a001c7a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0025c8:	4b13      	ldr	r3, [pc, #76]	; (1a002618 <xTaskRemoveFromEventList+0x74>)
1a0025ca:	681b      	ldr	r3, [r3, #0]
1a0025cc:	b9e3      	cbnz	r3, 1a002608 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0025ce:	1d25      	adds	r5, r4, #4
1a0025d0:	4628      	mov	r0, r5
1a0025d2:	f7ff fb52 	bl	1a001c7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0025d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0025d8:	2201      	movs	r2, #1
1a0025da:	409a      	lsls	r2, r3
1a0025dc:	490f      	ldr	r1, [pc, #60]	; (1a00261c <xTaskRemoveFromEventList+0x78>)
1a0025de:	6808      	ldr	r0, [r1, #0]
1a0025e0:	4302      	orrs	r2, r0
1a0025e2:	600a      	str	r2, [r1, #0]
1a0025e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0025e8:	009a      	lsls	r2, r3, #2
1a0025ea:	4629      	mov	r1, r5
1a0025ec:	480c      	ldr	r0, [pc, #48]	; (1a002620 <xTaskRemoveFromEventList+0x7c>)
1a0025ee:	4410      	add	r0, r2
1a0025f0:	f7ff fb1d 	bl	1a001c2e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0025f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0025f6:	4b0b      	ldr	r3, [pc, #44]	; (1a002624 <xTaskRemoveFromEventList+0x80>)
1a0025f8:	681b      	ldr	r3, [r3, #0]
1a0025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0025fc:	429a      	cmp	r2, r3
1a0025fe:	d908      	bls.n	1a002612 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002600:	2001      	movs	r0, #1
1a002602:	4b09      	ldr	r3, [pc, #36]	; (1a002628 <xTaskRemoveFromEventList+0x84>)
1a002604:	6018      	str	r0, [r3, #0]
}
1a002606:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002608:	4629      	mov	r1, r5
1a00260a:	4808      	ldr	r0, [pc, #32]	; (1a00262c <xTaskRemoveFromEventList+0x88>)
1a00260c:	f7ff fb0f 	bl	1a001c2e <vListInsertEnd>
1a002610:	e7f0      	b.n	1a0025f4 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a002612:	2000      	movs	r0, #0
	return xReturn;
1a002614:	e7f7      	b.n	1a002606 <xTaskRemoveFromEventList+0x62>
1a002616:	bf00      	nop
1a002618:	10002aa0 	.word	0x10002aa0
1a00261c:	10002aa8 	.word	0x10002aa8
1a002620:	10002a08 	.word	0x10002a08
1a002624:	100029fc 	.word	0x100029fc
1a002628:	10002b20 	.word	0x10002b20
1a00262c:	10002adc 	.word	0x10002adc

1a002630 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002630:	4b03      	ldr	r3, [pc, #12]	; (1a002640 <vTaskInternalSetTimeOutState+0x10>)
1a002632:	681b      	ldr	r3, [r3, #0]
1a002634:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a002636:	4b03      	ldr	r3, [pc, #12]	; (1a002644 <vTaskInternalSetTimeOutState+0x14>)
1a002638:	681b      	ldr	r3, [r3, #0]
1a00263a:	6043      	str	r3, [r0, #4]
}
1a00263c:	4770      	bx	lr
1a00263e:	bf00      	nop
1a002640:	10002ad8 	.word	0x10002ad8
1a002644:	10002b1c 	.word	0x10002b1c

1a002648 <xTaskCheckForTimeOut>:
{
1a002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a00264a:	b150      	cbz	r0, 1a002662 <xTaskCheckForTimeOut+0x1a>
1a00264c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00264e:	b989      	cbnz	r1, 1a002674 <xTaskCheckForTimeOut+0x2c>
1a002650:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002654:	f383 8811 	msr	BASEPRI, r3
1a002658:	f3bf 8f6f 	isb	sy
1a00265c:	f3bf 8f4f 	dsb	sy
1a002660:	e7fe      	b.n	1a002660 <xTaskCheckForTimeOut+0x18>
1a002662:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002666:	f383 8811 	msr	BASEPRI, r3
1a00266a:	f3bf 8f6f 	isb	sy
1a00266e:	f3bf 8f4f 	dsb	sy
1a002672:	e7fe      	b.n	1a002672 <xTaskCheckForTimeOut+0x2a>
1a002674:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a002676:	f000 fc25 	bl	1a002ec4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00267a:	4b11      	ldr	r3, [pc, #68]	; (1a0026c0 <xTaskCheckForTimeOut+0x78>)
1a00267c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00267e:	6868      	ldr	r0, [r5, #4]
1a002680:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a002682:	6823      	ldr	r3, [r4, #0]
1a002684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002688:	d016      	beq.n	1a0026b8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a00268a:	682f      	ldr	r7, [r5, #0]
1a00268c:	4e0d      	ldr	r6, [pc, #52]	; (1a0026c4 <xTaskCheckForTimeOut+0x7c>)
1a00268e:	6836      	ldr	r6, [r6, #0]
1a002690:	42b7      	cmp	r7, r6
1a002692:	d001      	beq.n	1a002698 <xTaskCheckForTimeOut+0x50>
1a002694:	4288      	cmp	r0, r1
1a002696:	d911      	bls.n	1a0026bc <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002698:	4293      	cmp	r3, r2
1a00269a:	d803      	bhi.n	1a0026a4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a00269c:	2300      	movs	r3, #0
1a00269e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0026a0:	2401      	movs	r4, #1
1a0026a2:	e005      	b.n	1a0026b0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0026a4:	1a9b      	subs	r3, r3, r2
1a0026a6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0026a8:	4628      	mov	r0, r5
1a0026aa:	f7ff ffc1 	bl	1a002630 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0026ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0026b0:	f000 fc2a 	bl	1a002f08 <vPortExitCritical>
}
1a0026b4:	4620      	mov	r0, r4
1a0026b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0026b8:	2400      	movs	r4, #0
1a0026ba:	e7f9      	b.n	1a0026b0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0026bc:	2401      	movs	r4, #1
1a0026be:	e7f7      	b.n	1a0026b0 <xTaskCheckForTimeOut+0x68>
1a0026c0:	10002b1c 	.word	0x10002b1c
1a0026c4:	10002ad8 	.word	0x10002ad8

1a0026c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0026c8:	4b01      	ldr	r3, [pc, #4]	; (1a0026d0 <vTaskMissedYield+0x8>)
1a0026ca:	2201      	movs	r2, #1
1a0026cc:	601a      	str	r2, [r3, #0]
}
1a0026ce:	4770      	bx	lr
1a0026d0:	10002b20 	.word	0x10002b20

1a0026d4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0026d4:	4b05      	ldr	r3, [pc, #20]	; (1a0026ec <xTaskGetSchedulerState+0x18>)
1a0026d6:	681b      	ldr	r3, [r3, #0]
1a0026d8:	b133      	cbz	r3, 1a0026e8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0026da:	4b05      	ldr	r3, [pc, #20]	; (1a0026f0 <xTaskGetSchedulerState+0x1c>)
1a0026dc:	681b      	ldr	r3, [r3, #0]
1a0026de:	b10b      	cbz	r3, 1a0026e4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0026e0:	2000      	movs	r0, #0
	}
1a0026e2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0026e4:	2002      	movs	r0, #2
1a0026e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0026e8:	2001      	movs	r0, #1
1a0026ea:	4770      	bx	lr
1a0026ec:	10002af0 	.word	0x10002af0
1a0026f0:	10002aa0 	.word	0x10002aa0

1a0026f4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0026f4:	2800      	cmp	r0, #0
1a0026f6:	d050      	beq.n	1a00279a <xTaskPriorityInherit+0xa6>
	{
1a0026f8:	b538      	push	{r3, r4, r5, lr}
1a0026fa:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0026fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0026fe:	4928      	ldr	r1, [pc, #160]	; (1a0027a0 <xTaskPriorityInherit+0xac>)
1a002700:	6809      	ldr	r1, [r1, #0]
1a002702:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002704:	428a      	cmp	r2, r1
1a002706:	d23e      	bcs.n	1a002786 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002708:	6981      	ldr	r1, [r0, #24]
1a00270a:	2900      	cmp	r1, #0
1a00270c:	db05      	blt.n	1a00271a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00270e:	4924      	ldr	r1, [pc, #144]	; (1a0027a0 <xTaskPriorityInherit+0xac>)
1a002710:	6809      	ldr	r1, [r1, #0]
1a002712:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002714:	f1c1 0107 	rsb	r1, r1, #7
1a002718:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a00271a:	6960      	ldr	r0, [r4, #20]
1a00271c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002720:	0091      	lsls	r1, r2, #2
1a002722:	4a20      	ldr	r2, [pc, #128]	; (1a0027a4 <xTaskPriorityInherit+0xb0>)
1a002724:	440a      	add	r2, r1
1a002726:	4290      	cmp	r0, r2
1a002728:	d005      	beq.n	1a002736 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a00272a:	4a1d      	ldr	r2, [pc, #116]	; (1a0027a0 <xTaskPriorityInherit+0xac>)
1a00272c:	6812      	ldr	r2, [r2, #0]
1a00272e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002730:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a002732:	2001      	movs	r0, #1
	}
1a002734:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002736:	1d25      	adds	r5, r4, #4
1a002738:	4628      	mov	r0, r5
1a00273a:	f7ff fa9e 	bl	1a001c7a <uxListRemove>
1a00273e:	b968      	cbnz	r0, 1a00275c <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a002740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002742:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002746:	008a      	lsls	r2, r1, #2
1a002748:	4916      	ldr	r1, [pc, #88]	; (1a0027a4 <xTaskPriorityInherit+0xb0>)
1a00274a:	588a      	ldr	r2, [r1, r2]
1a00274c:	b932      	cbnz	r2, 1a00275c <xTaskPriorityInherit+0x68>
1a00274e:	2201      	movs	r2, #1
1a002750:	409a      	lsls	r2, r3
1a002752:	4915      	ldr	r1, [pc, #84]	; (1a0027a8 <xTaskPriorityInherit+0xb4>)
1a002754:	680b      	ldr	r3, [r1, #0]
1a002756:	ea23 0302 	bic.w	r3, r3, r2
1a00275a:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a00275c:	4b10      	ldr	r3, [pc, #64]	; (1a0027a0 <xTaskPriorityInherit+0xac>)
1a00275e:	681b      	ldr	r3, [r3, #0]
1a002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002762:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002764:	2401      	movs	r4, #1
1a002766:	fa04 f203 	lsl.w	r2, r4, r3
1a00276a:	490f      	ldr	r1, [pc, #60]	; (1a0027a8 <xTaskPriorityInherit+0xb4>)
1a00276c:	6808      	ldr	r0, [r1, #0]
1a00276e:	4302      	orrs	r2, r0
1a002770:	600a      	str	r2, [r1, #0]
1a002772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002776:	009a      	lsls	r2, r3, #2
1a002778:	4629      	mov	r1, r5
1a00277a:	480a      	ldr	r0, [pc, #40]	; (1a0027a4 <xTaskPriorityInherit+0xb0>)
1a00277c:	4410      	add	r0, r2
1a00277e:	f7ff fa56 	bl	1a001c2e <vListInsertEnd>
				xReturn = pdTRUE;
1a002782:	4620      	mov	r0, r4
1a002784:	e7d6      	b.n	1a002734 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a002786:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002788:	4b05      	ldr	r3, [pc, #20]	; (1a0027a0 <xTaskPriorityInherit+0xac>)
1a00278a:	681b      	ldr	r3, [r3, #0]
1a00278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00278e:	429a      	cmp	r2, r3
1a002790:	d201      	bcs.n	1a002796 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a002792:	2001      	movs	r0, #1
		return xReturn;
1a002794:	e7ce      	b.n	1a002734 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a002796:	2000      	movs	r0, #0
1a002798:	e7cc      	b.n	1a002734 <xTaskPriorityInherit+0x40>
1a00279a:	2000      	movs	r0, #0
	}
1a00279c:	4770      	bx	lr
1a00279e:	bf00      	nop
1a0027a0:	100029fc 	.word	0x100029fc
1a0027a4:	10002a08 	.word	0x10002a08
1a0027a8:	10002aa8 	.word	0x10002aa8

1a0027ac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0027ac:	2800      	cmp	r0, #0
1a0027ae:	d049      	beq.n	1a002844 <xTaskPriorityDisinherit+0x98>
	{
1a0027b0:	b538      	push	{r3, r4, r5, lr}
1a0027b2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0027b4:	4a26      	ldr	r2, [pc, #152]	; (1a002850 <xTaskPriorityDisinherit+0xa4>)
1a0027b6:	6812      	ldr	r2, [r2, #0]
1a0027b8:	4282      	cmp	r2, r0
1a0027ba:	d008      	beq.n	1a0027ce <xTaskPriorityDisinherit+0x22>
1a0027bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027c0:	f383 8811 	msr	BASEPRI, r3
1a0027c4:	f3bf 8f6f 	isb	sy
1a0027c8:	f3bf 8f4f 	dsb	sy
1a0027cc:	e7fe      	b.n	1a0027cc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0027ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0027d0:	b942      	cbnz	r2, 1a0027e4 <xTaskPriorityDisinherit+0x38>
1a0027d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027d6:	f383 8811 	msr	BASEPRI, r3
1a0027da:	f3bf 8f6f 	isb	sy
1a0027de:	f3bf 8f4f 	dsb	sy
1a0027e2:	e7fe      	b.n	1a0027e2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0027e4:	3a01      	subs	r2, #1
1a0027e6:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0027e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0027ea:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0027ec:	4288      	cmp	r0, r1
1a0027ee:	d02b      	beq.n	1a002848 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0027f0:	bb62      	cbnz	r2, 1a00284c <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0027f2:	1d25      	adds	r5, r4, #4
1a0027f4:	4628      	mov	r0, r5
1a0027f6:	f7ff fa40 	bl	1a001c7a <uxListRemove>
1a0027fa:	b970      	cbnz	r0, 1a00281a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0027fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0027fe:	2314      	movs	r3, #20
1a002800:	fb03 f302 	mul.w	r3, r3, r2
1a002804:	4913      	ldr	r1, [pc, #76]	; (1a002854 <xTaskPriorityDisinherit+0xa8>)
1a002806:	58cb      	ldr	r3, [r1, r3]
1a002808:	b93b      	cbnz	r3, 1a00281a <xTaskPriorityDisinherit+0x6e>
1a00280a:	2301      	movs	r3, #1
1a00280c:	fa03 f202 	lsl.w	r2, r3, r2
1a002810:	4911      	ldr	r1, [pc, #68]	; (1a002858 <xTaskPriorityDisinherit+0xac>)
1a002812:	680b      	ldr	r3, [r1, #0]
1a002814:	ea23 0302 	bic.w	r3, r3, r2
1a002818:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00281a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00281c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00281e:	f1c3 0207 	rsb	r2, r3, #7
1a002822:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002824:	2401      	movs	r4, #1
1a002826:	fa04 f203 	lsl.w	r2, r4, r3
1a00282a:	490b      	ldr	r1, [pc, #44]	; (1a002858 <xTaskPriorityDisinherit+0xac>)
1a00282c:	6808      	ldr	r0, [r1, #0]
1a00282e:	4302      	orrs	r2, r0
1a002830:	600a      	str	r2, [r1, #0]
1a002832:	4629      	mov	r1, r5
1a002834:	4a07      	ldr	r2, [pc, #28]	; (1a002854 <xTaskPriorityDisinherit+0xa8>)
1a002836:	2014      	movs	r0, #20
1a002838:	fb00 2003 	mla	r0, r0, r3, r2
1a00283c:	f7ff f9f7 	bl	1a001c2e <vListInsertEnd>
					xReturn = pdTRUE;
1a002840:	4620      	mov	r0, r4
	}
1a002842:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a002844:	2000      	movs	r0, #0
	}
1a002846:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002848:	2000      	movs	r0, #0
1a00284a:	e7fa      	b.n	1a002842 <xTaskPriorityDisinherit+0x96>
1a00284c:	2000      	movs	r0, #0
		return xReturn;
1a00284e:	e7f8      	b.n	1a002842 <xTaskPriorityDisinherit+0x96>
1a002850:	100029fc 	.word	0x100029fc
1a002854:	10002a08 	.word	0x10002a08
1a002858:	10002aa8 	.word	0x10002aa8

1a00285c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a00285c:	2800      	cmp	r0, #0
1a00285e:	d055      	beq.n	1a00290c <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a002860:	b538      	push	{r3, r4, r5, lr}
1a002862:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a002864:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a002866:	b940      	cbnz	r0, 1a00287a <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002868:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00286c:	f383 8811 	msr	BASEPRI, r3
1a002870:	f3bf 8f6f 	isb	sy
1a002874:	f3bf 8f4f 	dsb	sy
1a002878:	e7fe      	b.n	1a002878 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a00287a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a00287c:	428a      	cmp	r2, r1
1a00287e:	d200      	bcs.n	1a002882 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002880:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a002882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a002884:	4291      	cmp	r1, r2
1a002886:	d001      	beq.n	1a00288c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002888:	2801      	cmp	r0, #1
1a00288a:	d000      	beq.n	1a00288e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a00288c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a00288e:	4820      	ldr	r0, [pc, #128]	; (1a002910 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a002890:	6800      	ldr	r0, [r0, #0]
1a002892:	4298      	cmp	r0, r3
1a002894:	d108      	bne.n	1a0028a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a002896:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00289a:	f383 8811 	msr	BASEPRI, r3
1a00289e:	f3bf 8f6f 	isb	sy
1a0028a2:	f3bf 8f4f 	dsb	sy
1a0028a6:	e7fe      	b.n	1a0028a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a0028a8:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0028aa:	6998      	ldr	r0, [r3, #24]
1a0028ac:	2800      	cmp	r0, #0
1a0028ae:	db02      	blt.n	1a0028b6 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0028b0:	f1c2 0207 	rsb	r2, r2, #7
1a0028b4:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0028b6:	695a      	ldr	r2, [r3, #20]
1a0028b8:	4816      	ldr	r0, [pc, #88]	; (1a002914 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0028ba:	2414      	movs	r4, #20
1a0028bc:	fb04 0101 	mla	r1, r4, r1, r0
1a0028c0:	428a      	cmp	r2, r1
1a0028c2:	d1e3      	bne.n	1a00288c <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0028c4:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0028c6:	1d1d      	adds	r5, r3, #4
1a0028c8:	4628      	mov	r0, r5
1a0028ca:	f7ff f9d6 	bl	1a001c7a <uxListRemove>
1a0028ce:	b970      	cbnz	r0, 1a0028ee <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0028d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0028d2:	2314      	movs	r3, #20
1a0028d4:	fb03 f302 	mul.w	r3, r3, r2
1a0028d8:	490e      	ldr	r1, [pc, #56]	; (1a002914 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0028da:	58cb      	ldr	r3, [r1, r3]
1a0028dc:	b93b      	cbnz	r3, 1a0028ee <vTaskPriorityDisinheritAfterTimeout+0x92>
1a0028de:	2301      	movs	r3, #1
1a0028e0:	fa03 f202 	lsl.w	r2, r3, r2
1a0028e4:	490c      	ldr	r1, [pc, #48]	; (1a002918 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0028e6:	680b      	ldr	r3, [r1, #0]
1a0028e8:	ea23 0302 	bic.w	r3, r3, r2
1a0028ec:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a0028ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0028f0:	2301      	movs	r3, #1
1a0028f2:	4093      	lsls	r3, r2
1a0028f4:	4908      	ldr	r1, [pc, #32]	; (1a002918 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0028f6:	6808      	ldr	r0, [r1, #0]
1a0028f8:	4303      	orrs	r3, r0
1a0028fa:	600b      	str	r3, [r1, #0]
1a0028fc:	4629      	mov	r1, r5
1a0028fe:	4b05      	ldr	r3, [pc, #20]	; (1a002914 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002900:	2014      	movs	r0, #20
1a002902:	fb00 3002 	mla	r0, r0, r2, r3
1a002906:	f7ff f992 	bl	1a001c2e <vListInsertEnd>
	}
1a00290a:	e7bf      	b.n	1a00288c <vTaskPriorityDisinheritAfterTimeout+0x30>
1a00290c:	4770      	bx	lr
1a00290e:	bf00      	nop
1a002910:	100029fc 	.word	0x100029fc
1a002914:	10002a08 	.word	0x10002a08
1a002918:	10002aa8 	.word	0x10002aa8

1a00291c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a00291c:	4b05      	ldr	r3, [pc, #20]	; (1a002934 <pvTaskIncrementMutexHeldCount+0x18>)
1a00291e:	681b      	ldr	r3, [r3, #0]
1a002920:	b123      	cbz	r3, 1a00292c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a002922:	4b04      	ldr	r3, [pc, #16]	; (1a002934 <pvTaskIncrementMutexHeldCount+0x18>)
1a002924:	681a      	ldr	r2, [r3, #0]
1a002926:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002928:	3301      	adds	r3, #1
1a00292a:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a00292c:	4b01      	ldr	r3, [pc, #4]	; (1a002934 <pvTaskIncrementMutexHeldCount+0x18>)
1a00292e:	6818      	ldr	r0, [r3, #0]
	}
1a002930:	4770      	bx	lr
1a002932:	bf00      	nop
1a002934:	100029fc 	.word	0x100029fc

1a002938 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002938:	4b06      	ldr	r3, [pc, #24]	; (1a002954 <prvGetNextExpireTime+0x1c>)
1a00293a:	681a      	ldr	r2, [r3, #0]
1a00293c:	6813      	ldr	r3, [r2, #0]
1a00293e:	fab3 f383 	clz	r3, r3
1a002942:	095b      	lsrs	r3, r3, #5
1a002944:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002946:	b913      	cbnz	r3, 1a00294e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002948:	68d3      	ldr	r3, [r2, #12]
1a00294a:	6818      	ldr	r0, [r3, #0]
1a00294c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00294e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002950:	4770      	bx	lr
1a002952:	bf00      	nop
1a002954:	10002b24 	.word	0x10002b24

1a002958 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002958:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00295a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00295c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00295e:	4291      	cmp	r1, r2
1a002960:	d80c      	bhi.n	1a00297c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002962:	1ad2      	subs	r2, r2, r3
1a002964:	6983      	ldr	r3, [r0, #24]
1a002966:	429a      	cmp	r2, r3
1a002968:	d301      	bcc.n	1a00296e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00296a:	2001      	movs	r0, #1
1a00296c:	e010      	b.n	1a002990 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00296e:	1d01      	adds	r1, r0, #4
1a002970:	4b09      	ldr	r3, [pc, #36]	; (1a002998 <prvInsertTimerInActiveList+0x40>)
1a002972:	6818      	ldr	r0, [r3, #0]
1a002974:	f7ff f967 	bl	1a001c46 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002978:	2000      	movs	r0, #0
1a00297a:	e009      	b.n	1a002990 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00297c:	429a      	cmp	r2, r3
1a00297e:	d201      	bcs.n	1a002984 <prvInsertTimerInActiveList+0x2c>
1a002980:	4299      	cmp	r1, r3
1a002982:	d206      	bcs.n	1a002992 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002984:	1d01      	adds	r1, r0, #4
1a002986:	4b05      	ldr	r3, [pc, #20]	; (1a00299c <prvInsertTimerInActiveList+0x44>)
1a002988:	6818      	ldr	r0, [r3, #0]
1a00298a:	f7ff f95c 	bl	1a001c46 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00298e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002990:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002992:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002994:	e7fc      	b.n	1a002990 <prvInsertTimerInActiveList+0x38>
1a002996:	bf00      	nop
1a002998:	10002b28 	.word	0x10002b28
1a00299c:	10002b24 	.word	0x10002b24

1a0029a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0029a0:	b530      	push	{r4, r5, lr}
1a0029a2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0029a4:	f000 fa8e 	bl	1a002ec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0029a8:	4b11      	ldr	r3, [pc, #68]	; (1a0029f0 <prvCheckForValidListAndQueue+0x50>)
1a0029aa:	681b      	ldr	r3, [r3, #0]
1a0029ac:	b11b      	cbz	r3, 1a0029b6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0029ae:	f000 faab 	bl	1a002f08 <vPortExitCritical>
}
1a0029b2:	b003      	add	sp, #12
1a0029b4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0029b6:	4d0f      	ldr	r5, [pc, #60]	; (1a0029f4 <prvCheckForValidListAndQueue+0x54>)
1a0029b8:	4628      	mov	r0, r5
1a0029ba:	f7ff f92a 	bl	1a001c12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0029be:	4c0e      	ldr	r4, [pc, #56]	; (1a0029f8 <prvCheckForValidListAndQueue+0x58>)
1a0029c0:	4620      	mov	r0, r4
1a0029c2:	f7ff f926 	bl	1a001c12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0029c6:	4b0d      	ldr	r3, [pc, #52]	; (1a0029fc <prvCheckForValidListAndQueue+0x5c>)
1a0029c8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0029ca:	4b0d      	ldr	r3, [pc, #52]	; (1a002a00 <prvCheckForValidListAndQueue+0x60>)
1a0029cc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0029ce:	2300      	movs	r3, #0
1a0029d0:	9300      	str	r3, [sp, #0]
1a0029d2:	4b0c      	ldr	r3, [pc, #48]	; (1a002a04 <prvCheckForValidListAndQueue+0x64>)
1a0029d4:	4a0c      	ldr	r2, [pc, #48]	; (1a002a08 <prvCheckForValidListAndQueue+0x68>)
1a0029d6:	2110      	movs	r1, #16
1a0029d8:	200a      	movs	r0, #10
1a0029da:	f7fe fdd0 	bl	1a00157e <xQueueGenericCreateStatic>
1a0029de:	4b04      	ldr	r3, [pc, #16]	; (1a0029f0 <prvCheckForValidListAndQueue+0x50>)
1a0029e0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0029e2:	2800      	cmp	r0, #0
1a0029e4:	d0e3      	beq.n	1a0029ae <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0029e6:	4909      	ldr	r1, [pc, #36]	; (1a002a0c <prvCheckForValidListAndQueue+0x6c>)
1a0029e8:	f7ff f8d6 	bl	1a001b98 <vQueueAddToRegistry>
1a0029ec:	e7df      	b.n	1a0029ae <prvCheckForValidListAndQueue+0xe>
1a0029ee:	bf00      	nop
1a0029f0:	10002c48 	.word	0x10002c48
1a0029f4:	10002bcc 	.word	0x10002bcc
1a0029f8:	10002be0 	.word	0x10002be0
1a0029fc:	10002b24 	.word	0x10002b24
1a002a00:	10002b28 	.word	0x10002b28
1a002a04:	10002bf8 	.word	0x10002bf8
1a002a08:	10002b2c 	.word	0x10002b2c
1a002a0c:	1a0058a0 	.word	0x1a0058a0

1a002a10 <prvInitialiseNewTimer>:
{
1a002a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002a14:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a002a16:	b941      	cbnz	r1, 1a002a2a <prvInitialiseNewTimer+0x1a>
1a002a18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a1c:	f383 8811 	msr	BASEPRI, r3
1a002a20:	f3bf 8f6f 	isb	sy
1a002a24:	f3bf 8f4f 	dsb	sy
1a002a28:	e7fe      	b.n	1a002a28 <prvInitialiseNewTimer+0x18>
1a002a2a:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a002a2c:	b174      	cbz	r4, 1a002a4c <prvInitialiseNewTimer+0x3c>
1a002a2e:	461d      	mov	r5, r3
1a002a30:	4616      	mov	r6, r2
1a002a32:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a002a34:	f7ff ffb4 	bl	1a0029a0 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a002a38:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002a3c:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a002a3e:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002a40:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a002a42:	9b06      	ldr	r3, [sp, #24]
1a002a44:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a002a46:	1d20      	adds	r0, r4, #4
1a002a48:	f7ff f8ee 	bl	1a001c28 <vListInitialiseItem>
}
1a002a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002a50 <xTimerCreateTimerTask>:
{
1a002a50:	b510      	push	{r4, lr}
1a002a52:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002a54:	f7ff ffa4 	bl	1a0029a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002a58:	4b12      	ldr	r3, [pc, #72]	; (1a002aa4 <xTimerCreateTimerTask+0x54>)
1a002a5a:	681b      	ldr	r3, [r3, #0]
1a002a5c:	b1cb      	cbz	r3, 1a002a92 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002a5e:	2400      	movs	r4, #0
1a002a60:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002a62:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002a64:	aa07      	add	r2, sp, #28
1a002a66:	a906      	add	r1, sp, #24
1a002a68:	a805      	add	r0, sp, #20
1a002a6a:	f7ff f927 	bl	1a001cbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002a6e:	9b05      	ldr	r3, [sp, #20]
1a002a70:	9302      	str	r3, [sp, #8]
1a002a72:	9b06      	ldr	r3, [sp, #24]
1a002a74:	9301      	str	r3, [sp, #4]
1a002a76:	2304      	movs	r3, #4
1a002a78:	9300      	str	r3, [sp, #0]
1a002a7a:	4623      	mov	r3, r4
1a002a7c:	9a07      	ldr	r2, [sp, #28]
1a002a7e:	490a      	ldr	r1, [pc, #40]	; (1a002aa8 <xTimerCreateTimerTask+0x58>)
1a002a80:	480a      	ldr	r0, [pc, #40]	; (1a002aac <xTimerCreateTimerTask+0x5c>)
1a002a82:	f7ff fab5 	bl	1a001ff0 <xTaskCreateStatic>
1a002a86:	4b0a      	ldr	r3, [pc, #40]	; (1a002ab0 <xTimerCreateTimerTask+0x60>)
1a002a88:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002a8a:	b110      	cbz	r0, 1a002a92 <xTimerCreateTimerTask+0x42>
}
1a002a8c:	2001      	movs	r0, #1
1a002a8e:	b008      	add	sp, #32
1a002a90:	bd10      	pop	{r4, pc}
1a002a92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a96:	f383 8811 	msr	BASEPRI, r3
1a002a9a:	f3bf 8f6f 	isb	sy
1a002a9e:	f3bf 8f4f 	dsb	sy
1a002aa2:	e7fe      	b.n	1a002aa2 <xTimerCreateTimerTask+0x52>
1a002aa4:	10002c48 	.word	0x10002c48
1a002aa8:	1a0058a8 	.word	0x1a0058a8
1a002aac:	1a002de1 	.word	0x1a002de1
1a002ab0:	10002c4c 	.word	0x10002c4c

1a002ab4 <xTimerCreateStatic>:
	{
1a002ab4:	b530      	push	{r4, r5, lr}
1a002ab6:	b085      	sub	sp, #20
1a002ab8:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002aba:	2530      	movs	r5, #48	; 0x30
1a002abc:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002abe:	9d03      	ldr	r5, [sp, #12]
1a002ac0:	2d30      	cmp	r5, #48	; 0x30
1a002ac2:	d008      	beq.n	1a002ad6 <xTimerCreateStatic+0x22>
1a002ac4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ac8:	f383 8811 	msr	BASEPRI, r3
1a002acc:	f3bf 8f6f 	isb	sy
1a002ad0:	f3bf 8f4f 	dsb	sy
1a002ad4:	e7fe      	b.n	1a002ad4 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a002ad6:	b944      	cbnz	r4, 1a002aea <xTimerCreateStatic+0x36>
1a002ad8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002adc:	f383 8811 	msr	BASEPRI, r3
1a002ae0:	f3bf 8f6f 	isb	sy
1a002ae4:	f3bf 8f4f 	dsb	sy
1a002ae8:	e7fe      	b.n	1a002ae8 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002aea:	9401      	str	r4, [sp, #4]
1a002aec:	9d08      	ldr	r5, [sp, #32]
1a002aee:	9500      	str	r5, [sp, #0]
1a002af0:	f7ff ff8e 	bl	1a002a10 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a002af4:	2301      	movs	r3, #1
1a002af6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002afa:	4620      	mov	r0, r4
1a002afc:	b005      	add	sp, #20
1a002afe:	bd30      	pop	{r4, r5, pc}

1a002b00 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002b00:	b1c8      	cbz	r0, 1a002b36 <xTimerGenericCommand+0x36>
{
1a002b02:	b530      	push	{r4, r5, lr}
1a002b04:	b085      	sub	sp, #20
1a002b06:	4615      	mov	r5, r2
1a002b08:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002b0a:	4a17      	ldr	r2, [pc, #92]	; (1a002b68 <xTimerGenericCommand+0x68>)
1a002b0c:	6810      	ldr	r0, [r2, #0]
1a002b0e:	b340      	cbz	r0, 1a002b62 <xTimerGenericCommand+0x62>
1a002b10:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002b12:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002b14:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002b16:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002b18:	2905      	cmp	r1, #5
1a002b1a:	dc1d      	bgt.n	1a002b58 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002b1c:	f7ff fdda 	bl	1a0026d4 <xTaskGetSchedulerState>
1a002b20:	2802      	cmp	r0, #2
1a002b22:	d011      	beq.n	1a002b48 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002b24:	2300      	movs	r3, #0
1a002b26:	461a      	mov	r2, r3
1a002b28:	4669      	mov	r1, sp
1a002b2a:	480f      	ldr	r0, [pc, #60]	; (1a002b68 <xTimerGenericCommand+0x68>)
1a002b2c:	6800      	ldr	r0, [r0, #0]
1a002b2e:	f7fe fd95 	bl	1a00165c <xQueueGenericSend>
}
1a002b32:	b005      	add	sp, #20
1a002b34:	bd30      	pop	{r4, r5, pc}
1a002b36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b3a:	f383 8811 	msr	BASEPRI, r3
1a002b3e:	f3bf 8f6f 	isb	sy
1a002b42:	f3bf 8f4f 	dsb	sy
1a002b46:	e7fe      	b.n	1a002b46 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002b48:	2300      	movs	r3, #0
1a002b4a:	9a08      	ldr	r2, [sp, #32]
1a002b4c:	4669      	mov	r1, sp
1a002b4e:	4806      	ldr	r0, [pc, #24]	; (1a002b68 <xTimerGenericCommand+0x68>)
1a002b50:	6800      	ldr	r0, [r0, #0]
1a002b52:	f7fe fd83 	bl	1a00165c <xQueueGenericSend>
1a002b56:	e7ec      	b.n	1a002b32 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002b58:	2300      	movs	r3, #0
1a002b5a:	4669      	mov	r1, sp
1a002b5c:	f7fe fe3c 	bl	1a0017d8 <xQueueGenericSendFromISR>
1a002b60:	e7e7      	b.n	1a002b32 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a002b62:	2000      	movs	r0, #0
	return xReturn;
1a002b64:	e7e5      	b.n	1a002b32 <xTimerGenericCommand+0x32>
1a002b66:	bf00      	nop
1a002b68:	10002c48 	.word	0x10002c48

1a002b6c <prvSwitchTimerLists>:
{
1a002b6c:	b570      	push	{r4, r5, r6, lr}
1a002b6e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002b70:	4b1a      	ldr	r3, [pc, #104]	; (1a002bdc <prvSwitchTimerLists+0x70>)
1a002b72:	681b      	ldr	r3, [r3, #0]
1a002b74:	681a      	ldr	r2, [r3, #0]
1a002b76:	b352      	cbz	r2, 1a002bce <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002b78:	68db      	ldr	r3, [r3, #12]
1a002b7a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002b7c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002b7e:	1d25      	adds	r5, r4, #4
1a002b80:	4628      	mov	r0, r5
1a002b82:	f7ff f87a 	bl	1a001c7a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002b88:	4620      	mov	r0, r4
1a002b8a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002b8c:	69e3      	ldr	r3, [r4, #28]
1a002b8e:	2b01      	cmp	r3, #1
1a002b90:	d1ee      	bne.n	1a002b70 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002b92:	69a3      	ldr	r3, [r4, #24]
1a002b94:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002b96:	429e      	cmp	r6, r3
1a002b98:	d207      	bcs.n	1a002baa <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002b9a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002b9c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002b9e:	4629      	mov	r1, r5
1a002ba0:	4b0e      	ldr	r3, [pc, #56]	; (1a002bdc <prvSwitchTimerLists+0x70>)
1a002ba2:	6818      	ldr	r0, [r3, #0]
1a002ba4:	f7ff f84f 	bl	1a001c46 <vListInsert>
1a002ba8:	e7e2      	b.n	1a002b70 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002baa:	2100      	movs	r1, #0
1a002bac:	9100      	str	r1, [sp, #0]
1a002bae:	460b      	mov	r3, r1
1a002bb0:	4632      	mov	r2, r6
1a002bb2:	4620      	mov	r0, r4
1a002bb4:	f7ff ffa4 	bl	1a002b00 <xTimerGenericCommand>
				configASSERT( xResult );
1a002bb8:	2800      	cmp	r0, #0
1a002bba:	d1d9      	bne.n	1a002b70 <prvSwitchTimerLists+0x4>
1a002bbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bc0:	f383 8811 	msr	BASEPRI, r3
1a002bc4:	f3bf 8f6f 	isb	sy
1a002bc8:	f3bf 8f4f 	dsb	sy
1a002bcc:	e7fe      	b.n	1a002bcc <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002bce:	4a04      	ldr	r2, [pc, #16]	; (1a002be0 <prvSwitchTimerLists+0x74>)
1a002bd0:	6810      	ldr	r0, [r2, #0]
1a002bd2:	4902      	ldr	r1, [pc, #8]	; (1a002bdc <prvSwitchTimerLists+0x70>)
1a002bd4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002bd6:	6013      	str	r3, [r2, #0]
}
1a002bd8:	b002      	add	sp, #8
1a002bda:	bd70      	pop	{r4, r5, r6, pc}
1a002bdc:	10002b24 	.word	0x10002b24
1a002be0:	10002b28 	.word	0x10002b28

1a002be4 <prvSampleTimeNow>:
{
1a002be4:	b538      	push	{r3, r4, r5, lr}
1a002be6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002be8:	f7ff fac0 	bl	1a00216c <xTaskGetTickCount>
1a002bec:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002bee:	4b07      	ldr	r3, [pc, #28]	; (1a002c0c <prvSampleTimeNow+0x28>)
1a002bf0:	681b      	ldr	r3, [r3, #0]
1a002bf2:	4283      	cmp	r3, r0
1a002bf4:	d805      	bhi.n	1a002c02 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002bf6:	2300      	movs	r3, #0
1a002bf8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002bfa:	4b04      	ldr	r3, [pc, #16]	; (1a002c0c <prvSampleTimeNow+0x28>)
1a002bfc:	601c      	str	r4, [r3, #0]
}
1a002bfe:	4620      	mov	r0, r4
1a002c00:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002c02:	f7ff ffb3 	bl	1a002b6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002c06:	2301      	movs	r3, #1
1a002c08:	602b      	str	r3, [r5, #0]
1a002c0a:	e7f6      	b.n	1a002bfa <prvSampleTimeNow+0x16>
1a002c0c:	10002bf4 	.word	0x10002bf4

1a002c10 <prvProcessExpiredTimer>:
{
1a002c10:	b570      	push	{r4, r5, r6, lr}
1a002c12:	b082      	sub	sp, #8
1a002c14:	4605      	mov	r5, r0
1a002c16:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002c18:	4b14      	ldr	r3, [pc, #80]	; (1a002c6c <prvProcessExpiredTimer+0x5c>)
1a002c1a:	681b      	ldr	r3, [r3, #0]
1a002c1c:	68db      	ldr	r3, [r3, #12]
1a002c1e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002c20:	1d20      	adds	r0, r4, #4
1a002c22:	f7ff f82a 	bl	1a001c7a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002c26:	69e3      	ldr	r3, [r4, #28]
1a002c28:	2b01      	cmp	r3, #1
1a002c2a:	d004      	beq.n	1a002c36 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002c2e:	4620      	mov	r0, r4
1a002c30:	4798      	blx	r3
}
1a002c32:	b002      	add	sp, #8
1a002c34:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002c36:	69a1      	ldr	r1, [r4, #24]
1a002c38:	462b      	mov	r3, r5
1a002c3a:	4632      	mov	r2, r6
1a002c3c:	4429      	add	r1, r5
1a002c3e:	4620      	mov	r0, r4
1a002c40:	f7ff fe8a 	bl	1a002958 <prvInsertTimerInActiveList>
1a002c44:	2800      	cmp	r0, #0
1a002c46:	d0f1      	beq.n	1a002c2c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002c48:	2100      	movs	r1, #0
1a002c4a:	9100      	str	r1, [sp, #0]
1a002c4c:	460b      	mov	r3, r1
1a002c4e:	462a      	mov	r2, r5
1a002c50:	4620      	mov	r0, r4
1a002c52:	f7ff ff55 	bl	1a002b00 <xTimerGenericCommand>
			configASSERT( xResult );
1a002c56:	2800      	cmp	r0, #0
1a002c58:	d1e8      	bne.n	1a002c2c <prvProcessExpiredTimer+0x1c>
1a002c5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c5e:	f383 8811 	msr	BASEPRI, r3
1a002c62:	f3bf 8f6f 	isb	sy
1a002c66:	f3bf 8f4f 	dsb	sy
1a002c6a:	e7fe      	b.n	1a002c6a <prvProcessExpiredTimer+0x5a>
1a002c6c:	10002b24 	.word	0x10002b24

1a002c70 <prvProcessTimerOrBlockTask>:
{
1a002c70:	b570      	push	{r4, r5, r6, lr}
1a002c72:	b082      	sub	sp, #8
1a002c74:	4606      	mov	r6, r0
1a002c76:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002c78:	f7ff fa70 	bl	1a00215c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002c7c:	a801      	add	r0, sp, #4
1a002c7e:	f7ff ffb1 	bl	1a002be4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002c82:	9b01      	ldr	r3, [sp, #4]
1a002c84:	bb1b      	cbnz	r3, 1a002cce <prvProcessTimerOrBlockTask+0x5e>
1a002c86:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002c88:	b90c      	cbnz	r4, 1a002c8e <prvProcessTimerOrBlockTask+0x1e>
1a002c8a:	42b0      	cmp	r0, r6
1a002c8c:	d218      	bcs.n	1a002cc0 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002c8e:	b12c      	cbz	r4, 1a002c9c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002c90:	4b11      	ldr	r3, [pc, #68]	; (1a002cd8 <prvProcessTimerOrBlockTask+0x68>)
1a002c92:	681b      	ldr	r3, [r3, #0]
1a002c94:	681c      	ldr	r4, [r3, #0]
1a002c96:	fab4 f484 	clz	r4, r4
1a002c9a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002c9c:	4622      	mov	r2, r4
1a002c9e:	1b71      	subs	r1, r6, r5
1a002ca0:	4b0e      	ldr	r3, [pc, #56]	; (1a002cdc <prvProcessTimerOrBlockTask+0x6c>)
1a002ca2:	6818      	ldr	r0, [r3, #0]
1a002ca4:	f7fe ff8c 	bl	1a001bc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002ca8:	f7ff faf2 	bl	1a002290 <xTaskResumeAll>
1a002cac:	b988      	cbnz	r0, 1a002cd2 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002cae:	4b0c      	ldr	r3, [pc, #48]	; (1a002ce0 <prvProcessTimerOrBlockTask+0x70>)
1a002cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002cb4:	601a      	str	r2, [r3, #0]
1a002cb6:	f3bf 8f4f 	dsb	sy
1a002cba:	f3bf 8f6f 	isb	sy
1a002cbe:	e008      	b.n	1a002cd2 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002cc0:	f7ff fae6 	bl	1a002290 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002cc4:	4629      	mov	r1, r5
1a002cc6:	4630      	mov	r0, r6
1a002cc8:	f7ff ffa2 	bl	1a002c10 <prvProcessExpiredTimer>
1a002ccc:	e001      	b.n	1a002cd2 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002cce:	f7ff fadf 	bl	1a002290 <xTaskResumeAll>
}
1a002cd2:	b002      	add	sp, #8
1a002cd4:	bd70      	pop	{r4, r5, r6, pc}
1a002cd6:	bf00      	nop
1a002cd8:	10002b28 	.word	0x10002b28
1a002cdc:	10002c48 	.word	0x10002c48
1a002ce0:	e000ed04 	.word	0xe000ed04

1a002ce4 <prvProcessReceivedCommands>:
{
1a002ce4:	b530      	push	{r4, r5, lr}
1a002ce6:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002ce8:	e002      	b.n	1a002cf0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002cea:	9b04      	ldr	r3, [sp, #16]
1a002cec:	2b00      	cmp	r3, #0
1a002cee:	da0f      	bge.n	1a002d10 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002cf0:	2200      	movs	r2, #0
1a002cf2:	a904      	add	r1, sp, #16
1a002cf4:	4b39      	ldr	r3, [pc, #228]	; (1a002ddc <prvProcessReceivedCommands+0xf8>)
1a002cf6:	6818      	ldr	r0, [r3, #0]
1a002cf8:	f7fe fdd4 	bl	1a0018a4 <xQueueReceive>
1a002cfc:	2800      	cmp	r0, #0
1a002cfe:	d06a      	beq.n	1a002dd6 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002d00:	9b04      	ldr	r3, [sp, #16]
1a002d02:	2b00      	cmp	r3, #0
1a002d04:	daf1      	bge.n	1a002cea <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002d06:	9907      	ldr	r1, [sp, #28]
1a002d08:	9806      	ldr	r0, [sp, #24]
1a002d0a:	9b05      	ldr	r3, [sp, #20]
1a002d0c:	4798      	blx	r3
1a002d0e:	e7ec      	b.n	1a002cea <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002d10:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002d12:	6963      	ldr	r3, [r4, #20]
1a002d14:	b113      	cbz	r3, 1a002d1c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002d16:	1d20      	adds	r0, r4, #4
1a002d18:	f7fe ffaf 	bl	1a001c7a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002d1c:	a803      	add	r0, sp, #12
1a002d1e:	f7ff ff61 	bl	1a002be4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002d22:	9b04      	ldr	r3, [sp, #16]
1a002d24:	2b09      	cmp	r3, #9
1a002d26:	d8e3      	bhi.n	1a002cf0 <prvProcessReceivedCommands+0xc>
1a002d28:	a201      	add	r2, pc, #4	; (adr r2, 1a002d30 <prvProcessReceivedCommands+0x4c>)
1a002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002d2e:	bf00      	nop
1a002d30:	1a002d59 	.word	0x1a002d59
1a002d34:	1a002d59 	.word	0x1a002d59
1a002d38:	1a002d59 	.word	0x1a002d59
1a002d3c:	1a002cf1 	.word	0x1a002cf1
1a002d40:	1a002da1 	.word	0x1a002da1
1a002d44:	1a002dc7 	.word	0x1a002dc7
1a002d48:	1a002d59 	.word	0x1a002d59
1a002d4c:	1a002d59 	.word	0x1a002d59
1a002d50:	1a002cf1 	.word	0x1a002cf1
1a002d54:	1a002da1 	.word	0x1a002da1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002d58:	9905      	ldr	r1, [sp, #20]
1a002d5a:	69a5      	ldr	r5, [r4, #24]
1a002d5c:	460b      	mov	r3, r1
1a002d5e:	4602      	mov	r2, r0
1a002d60:	4429      	add	r1, r5
1a002d62:	4620      	mov	r0, r4
1a002d64:	f7ff fdf8 	bl	1a002958 <prvInsertTimerInActiveList>
1a002d68:	2800      	cmp	r0, #0
1a002d6a:	d0c1      	beq.n	1a002cf0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002d6e:	4620      	mov	r0, r4
1a002d70:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002d72:	69e3      	ldr	r3, [r4, #28]
1a002d74:	2b01      	cmp	r3, #1
1a002d76:	d1bb      	bne.n	1a002cf0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002d78:	69a2      	ldr	r2, [r4, #24]
1a002d7a:	2100      	movs	r1, #0
1a002d7c:	9100      	str	r1, [sp, #0]
1a002d7e:	460b      	mov	r3, r1
1a002d80:	9805      	ldr	r0, [sp, #20]
1a002d82:	4402      	add	r2, r0
1a002d84:	4620      	mov	r0, r4
1a002d86:	f7ff febb 	bl	1a002b00 <xTimerGenericCommand>
							configASSERT( xResult );
1a002d8a:	2800      	cmp	r0, #0
1a002d8c:	d1b0      	bne.n	1a002cf0 <prvProcessReceivedCommands+0xc>
1a002d8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d92:	f383 8811 	msr	BASEPRI, r3
1a002d96:	f3bf 8f6f 	isb	sy
1a002d9a:	f3bf 8f4f 	dsb	sy
1a002d9e:	e7fe      	b.n	1a002d9e <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002da0:	9905      	ldr	r1, [sp, #20]
1a002da2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002da4:	b131      	cbz	r1, 1a002db4 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002da6:	4603      	mov	r3, r0
1a002da8:	4602      	mov	r2, r0
1a002daa:	4401      	add	r1, r0
1a002dac:	4620      	mov	r0, r4
1a002dae:	f7ff fdd3 	bl	1a002958 <prvInsertTimerInActiveList>
					break;
1a002db2:	e79d      	b.n	1a002cf0 <prvProcessReceivedCommands+0xc>
1a002db4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002db8:	f383 8811 	msr	BASEPRI, r3
1a002dbc:	f3bf 8f6f 	isb	sy
1a002dc0:	f3bf 8f4f 	dsb	sy
1a002dc4:	e7fe      	b.n	1a002dc4 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002dc6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002dca:	2b00      	cmp	r3, #0
1a002dcc:	d190      	bne.n	1a002cf0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002dce:	4620      	mov	r0, r4
1a002dd0:	f7fe face 	bl	1a001370 <vPortFree>
1a002dd4:	e78c      	b.n	1a002cf0 <prvProcessReceivedCommands+0xc>
}
1a002dd6:	b009      	add	sp, #36	; 0x24
1a002dd8:	bd30      	pop	{r4, r5, pc}
1a002dda:	bf00      	nop
1a002ddc:	10002c48 	.word	0x10002c48

1a002de0 <prvTimerTask>:
{
1a002de0:	b500      	push	{lr}
1a002de2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002de4:	a801      	add	r0, sp, #4
1a002de6:	f7ff fda7 	bl	1a002938 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002dea:	9901      	ldr	r1, [sp, #4]
1a002dec:	f7ff ff40 	bl	1a002c70 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002df0:	f7ff ff78 	bl	1a002ce4 <prvProcessReceivedCommands>
1a002df4:	e7f6      	b.n	1a002de4 <prvTimerTask+0x4>
1a002df6:	Address 0x000000001a002df6 is out of bounds.


1a002df8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002df8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002dfa:	2300      	movs	r3, #0
1a002dfc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002dfe:	4b0d      	ldr	r3, [pc, #52]	; (1a002e34 <prvTaskExitError+0x3c>)
1a002e00:	681b      	ldr	r3, [r3, #0]
1a002e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002e06:	d008      	beq.n	1a002e1a <prvTaskExitError+0x22>
1a002e08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e0c:	f383 8811 	msr	BASEPRI, r3
1a002e10:	f3bf 8f6f 	isb	sy
1a002e14:	f3bf 8f4f 	dsb	sy
1a002e18:	e7fe      	b.n	1a002e18 <prvTaskExitError+0x20>
1a002e1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e1e:	f383 8811 	msr	BASEPRI, r3
1a002e22:	f3bf 8f6f 	isb	sy
1a002e26:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002e2a:	9b01      	ldr	r3, [sp, #4]
1a002e2c:	2b00      	cmp	r3, #0
1a002e2e:	d0fc      	beq.n	1a002e2a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002e30:	b002      	add	sp, #8
1a002e32:	4770      	bx	lr
1a002e34:	10000000 	.word	0x10000000

1a002e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002e38:	4808      	ldr	r0, [pc, #32]	; (1a002e5c <prvPortStartFirstTask+0x24>)
1a002e3a:	6800      	ldr	r0, [r0, #0]
1a002e3c:	6800      	ldr	r0, [r0, #0]
1a002e3e:	f380 8808 	msr	MSP, r0
1a002e42:	f04f 0000 	mov.w	r0, #0
1a002e46:	f380 8814 	msr	CONTROL, r0
1a002e4a:	b662      	cpsie	i
1a002e4c:	b661      	cpsie	f
1a002e4e:	f3bf 8f4f 	dsb	sy
1a002e52:	f3bf 8f6f 	isb	sy
1a002e56:	df00      	svc	0
1a002e58:	bf00      	nop
1a002e5a:	0000      	.short	0x0000
1a002e5c:	e000ed08 	.word	0xe000ed08

1a002e60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002e60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002e70 <vPortEnableVFP+0x10>
1a002e64:	6801      	ldr	r1, [r0, #0]
1a002e66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002e6a:	6001      	str	r1, [r0, #0]
1a002e6c:	4770      	bx	lr
1a002e6e:	0000      	.short	0x0000
1a002e70:	e000ed88 	.word	0xe000ed88

1a002e74 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002e78:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002e7c:	f021 0101 	bic.w	r1, r1, #1
1a002e80:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002e84:	4b05      	ldr	r3, [pc, #20]	; (1a002e9c <pxPortInitialiseStack+0x28>)
1a002e86:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002e8a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002e8e:	f06f 0302 	mvn.w	r3, #2
1a002e92:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002e96:	3844      	subs	r0, #68	; 0x44
1a002e98:	4770      	bx	lr
1a002e9a:	bf00      	nop
1a002e9c:	1a002df9 	.word	0x1a002df9

1a002ea0 <SVC_Handler>:
	__asm volatile (
1a002ea0:	4b07      	ldr	r3, [pc, #28]	; (1a002ec0 <pxCurrentTCBConst2>)
1a002ea2:	6819      	ldr	r1, [r3, #0]
1a002ea4:	6808      	ldr	r0, [r1, #0]
1a002ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002eaa:	f380 8809 	msr	PSP, r0
1a002eae:	f3bf 8f6f 	isb	sy
1a002eb2:	f04f 0000 	mov.w	r0, #0
1a002eb6:	f380 8811 	msr	BASEPRI, r0
1a002eba:	4770      	bx	lr
1a002ebc:	f3af 8000 	nop.w

1a002ec0 <pxCurrentTCBConst2>:
1a002ec0:	100029fc 	.word	0x100029fc

1a002ec4 <vPortEnterCritical>:
1a002ec4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ec8:	f383 8811 	msr	BASEPRI, r3
1a002ecc:	f3bf 8f6f 	isb	sy
1a002ed0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002ed4:	4a0a      	ldr	r2, [pc, #40]	; (1a002f00 <vPortEnterCritical+0x3c>)
1a002ed6:	6813      	ldr	r3, [r2, #0]
1a002ed8:	3301      	adds	r3, #1
1a002eda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002edc:	2b01      	cmp	r3, #1
1a002ede:	d000      	beq.n	1a002ee2 <vPortEnterCritical+0x1e>
}
1a002ee0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002ee2:	4b08      	ldr	r3, [pc, #32]	; (1a002f04 <vPortEnterCritical+0x40>)
1a002ee4:	681b      	ldr	r3, [r3, #0]
1a002ee6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002eea:	d0f9      	beq.n	1a002ee0 <vPortEnterCritical+0x1c>
1a002eec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ef0:	f383 8811 	msr	BASEPRI, r3
1a002ef4:	f3bf 8f6f 	isb	sy
1a002ef8:	f3bf 8f4f 	dsb	sy
1a002efc:	e7fe      	b.n	1a002efc <vPortEnterCritical+0x38>
1a002efe:	bf00      	nop
1a002f00:	10000000 	.word	0x10000000
1a002f04:	e000ed04 	.word	0xe000ed04

1a002f08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002f08:	4b09      	ldr	r3, [pc, #36]	; (1a002f30 <vPortExitCritical+0x28>)
1a002f0a:	681b      	ldr	r3, [r3, #0]
1a002f0c:	b943      	cbnz	r3, 1a002f20 <vPortExitCritical+0x18>
1a002f0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f12:	f383 8811 	msr	BASEPRI, r3
1a002f16:	f3bf 8f6f 	isb	sy
1a002f1a:	f3bf 8f4f 	dsb	sy
1a002f1e:	e7fe      	b.n	1a002f1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002f20:	3b01      	subs	r3, #1
1a002f22:	4a03      	ldr	r2, [pc, #12]	; (1a002f30 <vPortExitCritical+0x28>)
1a002f24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002f26:	b90b      	cbnz	r3, 1a002f2c <vPortExitCritical+0x24>
	__asm volatile
1a002f28:	f383 8811 	msr	BASEPRI, r3
}
1a002f2c:	4770      	bx	lr
1a002f2e:	bf00      	nop
1a002f30:	10000000 	.word	0x10000000
1a002f34:	ffffffff 	.word	0xffffffff
1a002f38:	ffffffff 	.word	0xffffffff
1a002f3c:	ffffffff 	.word	0xffffffff

1a002f40 <PendSV_Handler>:
	__asm volatile
1a002f40:	f3ef 8009 	mrs	r0, PSP
1a002f44:	f3bf 8f6f 	isb	sy
1a002f48:	4b15      	ldr	r3, [pc, #84]	; (1a002fa0 <pxCurrentTCBConst>)
1a002f4a:	681a      	ldr	r2, [r3, #0]
1a002f4c:	f01e 0f10 	tst.w	lr, #16
1a002f50:	bf08      	it	eq
1a002f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002f5a:	6010      	str	r0, [r2, #0]
1a002f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002f60:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002f64:	f380 8811 	msr	BASEPRI, r0
1a002f68:	f3bf 8f4f 	dsb	sy
1a002f6c:	f3bf 8f6f 	isb	sy
1a002f70:	f7ff fa80 	bl	1a002474 <vTaskSwitchContext>
1a002f74:	f04f 0000 	mov.w	r0, #0
1a002f78:	f380 8811 	msr	BASEPRI, r0
1a002f7c:	bc09      	pop	{r0, r3}
1a002f7e:	6819      	ldr	r1, [r3, #0]
1a002f80:	6808      	ldr	r0, [r1, #0]
1a002f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002f86:	f01e 0f10 	tst.w	lr, #16
1a002f8a:	bf08      	it	eq
1a002f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002f90:	f380 8809 	msr	PSP, r0
1a002f94:	f3bf 8f6f 	isb	sy
1a002f98:	4770      	bx	lr
1a002f9a:	bf00      	nop
1a002f9c:	f3af 8000 	nop.w

1a002fa0 <pxCurrentTCBConst>:
1a002fa0:	100029fc 	.word	0x100029fc

1a002fa4 <SysTick_Handler>:
{
1a002fa4:	b508      	push	{r3, lr}
	__asm volatile
1a002fa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002faa:	f383 8811 	msr	BASEPRI, r3
1a002fae:	f3bf 8f6f 	isb	sy
1a002fb2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002fb6:	f7ff f8df 	bl	1a002178 <xTaskIncrementTick>
1a002fba:	b118      	cbz	r0, 1a002fc4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002fbc:	4b03      	ldr	r3, [pc, #12]	; (1a002fcc <SysTick_Handler+0x28>)
1a002fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002fc2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002fc4:	2300      	movs	r3, #0
1a002fc6:	f383 8811 	msr	BASEPRI, r3
}
1a002fca:	bd08      	pop	{r3, pc}
1a002fcc:	e000ed04 	.word	0xe000ed04

1a002fd0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002fd0:	4a08      	ldr	r2, [pc, #32]	; (1a002ff4 <vPortSetupTimerInterrupt+0x24>)
1a002fd2:	2300      	movs	r3, #0
1a002fd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002fd6:	4908      	ldr	r1, [pc, #32]	; (1a002ff8 <vPortSetupTimerInterrupt+0x28>)
1a002fd8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002fda:	4b08      	ldr	r3, [pc, #32]	; (1a002ffc <vPortSetupTimerInterrupt+0x2c>)
1a002fdc:	681b      	ldr	r3, [r3, #0]
1a002fde:	4908      	ldr	r1, [pc, #32]	; (1a003000 <vPortSetupTimerInterrupt+0x30>)
1a002fe0:	fba1 1303 	umull	r1, r3, r1, r3
1a002fe4:	099b      	lsrs	r3, r3, #6
1a002fe6:	3b01      	subs	r3, #1
1a002fe8:	4906      	ldr	r1, [pc, #24]	; (1a003004 <vPortSetupTimerInterrupt+0x34>)
1a002fea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002fec:	2307      	movs	r3, #7
1a002fee:	6013      	str	r3, [r2, #0]
}
1a002ff0:	4770      	bx	lr
1a002ff2:	bf00      	nop
1a002ff4:	e000e010 	.word	0xe000e010
1a002ff8:	e000e018 	.word	0xe000e018
1a002ffc:	10002d8c 	.word	0x10002d8c
1a003000:	10624dd3 	.word	0x10624dd3
1a003004:	e000e014 	.word	0xe000e014

1a003008 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a003008:	4b3a      	ldr	r3, [pc, #232]	; (1a0030f4 <xPortStartScheduler+0xec>)
1a00300a:	681a      	ldr	r2, [r3, #0]
1a00300c:	4b3a      	ldr	r3, [pc, #232]	; (1a0030f8 <xPortStartScheduler+0xf0>)
1a00300e:	429a      	cmp	r2, r3
1a003010:	d00d      	beq.n	1a00302e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a003012:	4b38      	ldr	r3, [pc, #224]	; (1a0030f4 <xPortStartScheduler+0xec>)
1a003014:	681a      	ldr	r2, [r3, #0]
1a003016:	4b39      	ldr	r3, [pc, #228]	; (1a0030fc <xPortStartScheduler+0xf4>)
1a003018:	429a      	cmp	r2, r3
1a00301a:	d111      	bne.n	1a003040 <xPortStartScheduler+0x38>
	__asm volatile
1a00301c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003020:	f383 8811 	msr	BASEPRI, r3
1a003024:	f3bf 8f6f 	isb	sy
1a003028:	f3bf 8f4f 	dsb	sy
1a00302c:	e7fe      	b.n	1a00302c <xPortStartScheduler+0x24>
1a00302e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003032:	f383 8811 	msr	BASEPRI, r3
1a003036:	f3bf 8f6f 	isb	sy
1a00303a:	f3bf 8f4f 	dsb	sy
1a00303e:	e7fe      	b.n	1a00303e <xPortStartScheduler+0x36>
{
1a003040:	b510      	push	{r4, lr}
1a003042:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a003044:	4b2e      	ldr	r3, [pc, #184]	; (1a003100 <xPortStartScheduler+0xf8>)
1a003046:	781a      	ldrb	r2, [r3, #0]
1a003048:	b2d2      	uxtb	r2, r2
1a00304a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00304c:	22ff      	movs	r2, #255	; 0xff
1a00304e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a003050:	781b      	ldrb	r3, [r3, #0]
1a003052:	b2db      	uxtb	r3, r3
1a003054:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a003058:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00305c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a003060:	4a28      	ldr	r2, [pc, #160]	; (1a003104 <xPortStartScheduler+0xfc>)
1a003062:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a003064:	4b28      	ldr	r3, [pc, #160]	; (1a003108 <xPortStartScheduler+0x100>)
1a003066:	2207      	movs	r2, #7
1a003068:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00306a:	e009      	b.n	1a003080 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00306c:	4a26      	ldr	r2, [pc, #152]	; (1a003108 <xPortStartScheduler+0x100>)
1a00306e:	6813      	ldr	r3, [r2, #0]
1a003070:	3b01      	subs	r3, #1
1a003072:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a003074:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003078:	005b      	lsls	r3, r3, #1
1a00307a:	b2db      	uxtb	r3, r3
1a00307c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a003080:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003084:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003088:	d1f0      	bne.n	1a00306c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00308a:	4b1f      	ldr	r3, [pc, #124]	; (1a003108 <xPortStartScheduler+0x100>)
1a00308c:	681b      	ldr	r3, [r3, #0]
1a00308e:	2b04      	cmp	r3, #4
1a003090:	d008      	beq.n	1a0030a4 <xPortStartScheduler+0x9c>
1a003092:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003096:	f383 8811 	msr	BASEPRI, r3
1a00309a:	f3bf 8f6f 	isb	sy
1a00309e:	f3bf 8f4f 	dsb	sy
1a0030a2:	e7fe      	b.n	1a0030a2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0030a4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0030a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0030aa:	4a17      	ldr	r2, [pc, #92]	; (1a003108 <xPortStartScheduler+0x100>)
1a0030ac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0030ae:	9b01      	ldr	r3, [sp, #4]
1a0030b0:	b2db      	uxtb	r3, r3
1a0030b2:	4a13      	ldr	r2, [pc, #76]	; (1a003100 <xPortStartScheduler+0xf8>)
1a0030b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0030b6:	4b15      	ldr	r3, [pc, #84]	; (1a00310c <xPortStartScheduler+0x104>)
1a0030b8:	681a      	ldr	r2, [r3, #0]
1a0030ba:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0030be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0030c0:	681a      	ldr	r2, [r3, #0]
1a0030c2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0030c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0030c8:	f7ff ff82 	bl	1a002fd0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0030cc:	2400      	movs	r4, #0
1a0030ce:	4b10      	ldr	r3, [pc, #64]	; (1a003110 <xPortStartScheduler+0x108>)
1a0030d0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0030d2:	f7ff fec5 	bl	1a002e60 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0030d6:	4a0f      	ldr	r2, [pc, #60]	; (1a003114 <xPortStartScheduler+0x10c>)
1a0030d8:	6813      	ldr	r3, [r2, #0]
1a0030da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0030de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0030e0:	f7ff feaa 	bl	1a002e38 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0030e4:	f7ff f9c6 	bl	1a002474 <vTaskSwitchContext>
	prvTaskExitError();
1a0030e8:	f7ff fe86 	bl	1a002df8 <prvTaskExitError>
}
1a0030ec:	4620      	mov	r0, r4
1a0030ee:	b002      	add	sp, #8
1a0030f0:	bd10      	pop	{r4, pc}
1a0030f2:	bf00      	nop
1a0030f4:	e000ed00 	.word	0xe000ed00
1a0030f8:	410fc271 	.word	0x410fc271
1a0030fc:	410fc270 	.word	0x410fc270
1a003100:	e000e400 	.word	0xe000e400
1a003104:	10002c50 	.word	0x10002c50
1a003108:	10002c54 	.word	0x10002c54
1a00310c:	e000ed20 	.word	0xe000ed20
1a003110:	10000000 	.word	0x10000000
1a003114:	e000ef34 	.word	0xe000ef34

1a003118 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a003118:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00311c:	2b0f      	cmp	r3, #15
1a00311e:	d90f      	bls.n	1a003140 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a003120:	4a10      	ldr	r2, [pc, #64]	; (1a003164 <vPortValidateInterruptPriority+0x4c>)
1a003122:	5c9b      	ldrb	r3, [r3, r2]
1a003124:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a003126:	4a10      	ldr	r2, [pc, #64]	; (1a003168 <vPortValidateInterruptPriority+0x50>)
1a003128:	7812      	ldrb	r2, [r2, #0]
1a00312a:	429a      	cmp	r2, r3
1a00312c:	d908      	bls.n	1a003140 <vPortValidateInterruptPriority+0x28>
1a00312e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003132:	f383 8811 	msr	BASEPRI, r3
1a003136:	f3bf 8f6f 	isb	sy
1a00313a:	f3bf 8f4f 	dsb	sy
1a00313e:	e7fe      	b.n	1a00313e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a003140:	4b0a      	ldr	r3, [pc, #40]	; (1a00316c <vPortValidateInterruptPriority+0x54>)
1a003142:	681b      	ldr	r3, [r3, #0]
1a003144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a003148:	4a09      	ldr	r2, [pc, #36]	; (1a003170 <vPortValidateInterruptPriority+0x58>)
1a00314a:	6812      	ldr	r2, [r2, #0]
1a00314c:	4293      	cmp	r3, r2
1a00314e:	d908      	bls.n	1a003162 <vPortValidateInterruptPriority+0x4a>
1a003150:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003154:	f383 8811 	msr	BASEPRI, r3
1a003158:	f3bf 8f6f 	isb	sy
1a00315c:	f3bf 8f4f 	dsb	sy
1a003160:	e7fe      	b.n	1a003160 <vPortValidateInterruptPriority+0x48>
	}
1a003162:	4770      	bx	lr
1a003164:	e000e3f0 	.word	0xe000e3f0
1a003168:	10002c50 	.word	0x10002c50
1a00316c:	e000ed0c 	.word	0xe000ed0c
1a003170:	10002c54 	.word	0x10002c54

1a003174 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003174:	4b04      	ldr	r3, [pc, #16]	; (1a003188 <cyclesCounterInit+0x14>)
1a003176:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a003178:	4b04      	ldr	r3, [pc, #16]	; (1a00318c <cyclesCounterInit+0x18>)
1a00317a:	681a      	ldr	r2, [r3, #0]
1a00317c:	6813      	ldr	r3, [r2, #0]
1a00317e:	f043 0301 	orr.w	r3, r3, #1
1a003182:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003184:	2001      	movs	r0, #1
1a003186:	4770      	bx	lr
1a003188:	10000004 	.word	0x10000004
1a00318c:	10000008 	.word	0x10000008

1a003190 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003190:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003194:	0083      	lsls	r3, r0, #2
1a003196:	4a03      	ldr	r2, [pc, #12]	; (1a0031a4 <uartTxReady+0x14>)
1a003198:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00319a:	6958      	ldr	r0, [r3, #20]
}
1a00319c:	f000 0020 	and.w	r0, r0, #32
1a0031a0:	4770      	bx	lr
1a0031a2:	bf00      	nop
1a0031a4:	1a0058b0 	.word	0x1a0058b0

1a0031a8 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0031a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0031ac:	0083      	lsls	r3, r0, #2
1a0031ae:	4a02      	ldr	r2, [pc, #8]	; (1a0031b8 <uartTxWrite+0x10>)
1a0031b0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0031b2:	6019      	str	r1, [r3, #0]
}
1a0031b4:	4770      	bx	lr
1a0031b6:	bf00      	nop
1a0031b8:	1a0058b0 	.word	0x1a0058b0

1a0031bc <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0031bc:	b538      	push	{r3, r4, r5, lr}
1a0031be:	4604      	mov	r4, r0
1a0031c0:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0031c2:	4620      	mov	r0, r4
1a0031c4:	f7ff ffe4 	bl	1a003190 <uartTxReady>
1a0031c8:	2800      	cmp	r0, #0
1a0031ca:	d0fa      	beq.n	1a0031c2 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0031cc:	4629      	mov	r1, r5
1a0031ce:	4620      	mov	r0, r4
1a0031d0:	f7ff ffea 	bl	1a0031a8 <uartTxWrite>
}
1a0031d4:	bd38      	pop	{r3, r4, r5, pc}

1a0031d6 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0031d6:	b538      	push	{r3, r4, r5, lr}
1a0031d8:	4605      	mov	r5, r0
1a0031da:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0031dc:	e003      	b.n	1a0031e6 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0031de:	4628      	mov	r0, r5
1a0031e0:	f7ff ffec 	bl	1a0031bc <uartWriteByte>
      str++;
1a0031e4:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a0031e6:	7821      	ldrb	r1, [r4, #0]
1a0031e8:	2900      	cmp	r1, #0
1a0031ea:	d1f8      	bne.n	1a0031de <uartWriteString+0x8>
   }
}
1a0031ec:	bd38      	pop	{r3, r4, r5, pc}
1a0031ee:	Address 0x000000001a0031ee is out of bounds.


1a0031f0 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0031f0:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a0031f4:	4908      	ldr	r1, [pc, #32]	; (1a003218 <tickerCallback+0x28>)
1a0031f6:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0031fa:	f112 0b01 	adds.w	fp, r2, #1
1a0031fe:	f143 0c00 	adc.w	ip, r3, #0
1a003202:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003206:	4b05      	ldr	r3, [pc, #20]	; (1a00321c <tickerCallback+0x2c>)
1a003208:	681b      	ldr	r3, [r3, #0]
1a00320a:	b113      	cbz	r3, 1a003212 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00320c:	4a04      	ldr	r2, [pc, #16]	; (1a003220 <tickerCallback+0x30>)
1a00320e:	6810      	ldr	r0, [r2, #0]
1a003210:	4798      	blx	r3
   }
}
1a003212:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003216:	bf00      	nop
1a003218:	10002c60 	.word	0x10002c60
1a00321c:	10002c68 	.word	0x10002c68
1a003220:	10002c58 	.word	0x10002c58

1a003224 <tickInit>:
{
1a003224:	b510      	push	{r4, lr}
1a003226:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003228:	4b0e      	ldr	r3, [pc, #56]	; (1a003264 <tickInit+0x40>)
1a00322a:	9301      	str	r3, [sp, #4]
1a00322c:	4b0e      	ldr	r3, [pc, #56]	; (1a003268 <tickInit+0x44>)
1a00322e:	9300      	str	r3, [sp, #0]
1a003230:	2300      	movs	r3, #0
1a003232:	2201      	movs	r2, #1
1a003234:	4601      	mov	r1, r0
1a003236:	480d      	ldr	r0, [pc, #52]	; (1a00326c <tickInit+0x48>)
1a003238:	f7ff fc3c 	bl	1a002ab4 <xTimerCreateStatic>
         if (h == NULL)
1a00323c:	b178      	cbz	r0, 1a00325e <tickInit+0x3a>
1a00323e:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a003240:	f7fe ff94 	bl	1a00216c <xTaskGetTickCount>
1a003244:	2300      	movs	r3, #0
1a003246:	9300      	str	r3, [sp, #0]
1a003248:	4602      	mov	r2, r0
1a00324a:	2101      	movs	r1, #1
1a00324c:	4620      	mov	r0, r4
1a00324e:	f7ff fc57 	bl	1a002b00 <xTimerGenericCommand>
1a003252:	2801      	cmp	r0, #1
1a003254:	bf14      	ite	ne
1a003256:	2000      	movne	r0, #0
1a003258:	2001      	moveq	r0, #1
}
1a00325a:	b002      	add	sp, #8
1a00325c:	bd10      	pop	{r4, pc}
            return 0;
1a00325e:	2000      	movs	r0, #0
1a003260:	e7fb      	b.n	1a00325a <tickInit+0x36>
1a003262:	bf00      	nop
1a003264:	10002c6c 	.word	0x10002c6c
1a003268:	1a0031f1 	.word	0x1a0031f1
1a00326c:	1a0058f8 	.word	0x1a0058f8

1a003270 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a003270:	b538      	push	{r3, r4, r5, lr}
1a003272:	4604      	mov	r4, r0
1a003274:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003276:	4b08      	ldr	r3, [pc, #32]	; (1a003298 <i2cHardwareInit+0x28>)
1a003278:	f640 0208 	movw	r2, #2056	; 0x808
1a00327c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a003280:	f001 fb78 	bl	1a004974 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a003284:	4629      	mov	r1, r5
1a003286:	4620      	mov	r0, r4
1a003288:	f001 fb86 	bl	1a004998 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a00328c:	4903      	ldr	r1, [pc, #12]	; (1a00329c <i2cHardwareInit+0x2c>)
1a00328e:	4620      	mov	r0, r4
1a003290:	f001 fb9e 	bl	1a0049d0 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a003294:	2001      	movs	r0, #1
1a003296:	bd38      	pop	{r3, r4, r5, pc}
1a003298:	40086000 	.word	0x40086000
1a00329c:	1a004a49 	.word	0x1a004a49

1a0032a0 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a0032a0:	b500      	push	{lr}
1a0032a2:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a0032a4:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0032a8:	2100      	movs	r1, #0
1a0032aa:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0032ae:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a0032b2:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a0032b4:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a0032b8:	9b07      	ldr	r3, [sp, #28]
1a0032ba:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a0032bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a0032c0:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0032c4:	4669      	mov	r1, sp
1a0032c6:	4804      	ldr	r0, [pc, #16]	; (1a0032d8 <i2cHardwareRead+0x38>)
1a0032c8:	f001 f9cb 	bl	1a004662 <Chip_I2CM_XferBlocking>
1a0032cc:	b100      	cbz	r0, 1a0032d0 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a0032ce:	2001      	movs	r0, #1
}
1a0032d0:	b005      	add	sp, #20
1a0032d2:	f85d fb04 	ldr.w	pc, [sp], #4
1a0032d6:	bf00      	nop
1a0032d8:	400a1000 	.word	0x400a1000

1a0032dc <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0032dc:	b108      	cbz	r0, 1a0032e2 <i2cHardwareWrite+0x6>
      return FALSE;
1a0032de:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0032e0:	4770      	bx	lr
{
1a0032e2:	b500      	push	{lr}
1a0032e4:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0032e6:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0032ea:	2100      	movs	r1, #0
1a0032ec:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0032f0:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0032f4:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0032f6:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0032fa:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0032fc:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003300:	4669      	mov	r1, sp
1a003302:	4804      	ldr	r0, [pc, #16]	; (1a003314 <i2cHardwareWrite+0x38>)
1a003304:	f001 f9ad 	bl	1a004662 <Chip_I2CM_XferBlocking>
1a003308:	b100      	cbz	r0, 1a00330c <i2cHardwareWrite+0x30>
   return TRUE;
1a00330a:	2001      	movs	r0, #1
}
1a00330c:	b005      	add	sp, #20
1a00330e:	f85d fb04 	ldr.w	pc, [sp], #4
1a003312:	bf00      	nop
1a003314:	400a1000 	.word	0x400a1000

1a003318 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003318:	b108      	cbz	r0, 1a00331e <i2cInit+0x6>
      return FALSE;
1a00331a:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a00331c:	4770      	bx	lr
{
1a00331e:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a003320:	f7ff ffa6 	bl	1a003270 <i2cHardwareInit>
}
1a003324:	bd08      	pop	{r3, pc}

1a003326 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003326:	b108      	cbz	r0, 1a00332c <i2cRead+0x6>
      return FALSE;
1a003328:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a00332a:	4770      	bx	lr
{
1a00332c:	b510      	push	{r4, lr}
1a00332e:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a003330:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a003334:	9403      	str	r4, [sp, #12]
1a003336:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a00333a:	9402      	str	r4, [sp, #8]
1a00333c:	9c07      	ldr	r4, [sp, #28]
1a00333e:	9401      	str	r4, [sp, #4]
1a003340:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a003344:	9400      	str	r4, [sp, #0]
1a003346:	f7ff ffab 	bl	1a0032a0 <i2cHardwareRead>
}
1a00334a:	b004      	add	sp, #16
1a00334c:	bd10      	pop	{r4, pc}

1a00334e <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a00334e:	b108      	cbz	r0, 1a003354 <i2cWrite+0x6>
      return FALSE;
1a003350:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a003352:	4770      	bx	lr
{
1a003354:	b510      	push	{r4, lr}
1a003356:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a003358:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a00335c:	9400      	str	r4, [sp, #0]
1a00335e:	f7ff ffbd 	bl	1a0032dc <i2cHardwareWrite>
}
1a003362:	b002      	add	sp, #8
1a003364:	bd10      	pop	{r4, pc}

1a003366 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a003366:	e7fe      	b.n	1a003366 <errorOcurred>

1a003368 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a003368:	4770      	bx	lr
1a00336a:	Address 0x000000001a00336a is out of bounds.


1a00336c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a00336c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00336e:	2400      	movs	r4, #0
1a003370:	e001      	b.n	1a003376 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003372:	3401      	adds	r4, #1
1a003374:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003376:	2c03      	cmp	r4, #3
1a003378:	d812      	bhi.n	1a0033a0 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00337a:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00337c:	4b09      	ldr	r3, [pc, #36]	; (1a0033a4 <TIMER0_IRQHandler+0x38>)
1a00337e:	681a      	ldr	r2, [r3, #0]
1a003380:	f004 010f 	and.w	r1, r4, #15
1a003384:	2301      	movs	r3, #1
1a003386:	408b      	lsls	r3, r1
1a003388:	421a      	tst	r2, r3
1a00338a:	d0f2      	beq.n	1a003372 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00338c:	4b06      	ldr	r3, [pc, #24]	; (1a0033a8 <TIMER0_IRQHandler+0x3c>)
1a00338e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a003392:	2000      	movs	r0, #0
1a003394:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003396:	2301      	movs	r3, #1
1a003398:	40ab      	lsls	r3, r5
1a00339a:	4a02      	ldr	r2, [pc, #8]	; (1a0033a4 <TIMER0_IRQHandler+0x38>)
1a00339c:	6013      	str	r3, [r2, #0]
1a00339e:	e7e8      	b.n	1a003372 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0033a0:	bd38      	pop	{r3, r4, r5, pc}
1a0033a2:	bf00      	nop
1a0033a4:	40084000 	.word	0x40084000
1a0033a8:	1000000c 	.word	0x1000000c

1a0033ac <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0033ac:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0033ae:	2400      	movs	r4, #0
1a0033b0:	e001      	b.n	1a0033b6 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0033b2:	3401      	adds	r4, #1
1a0033b4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0033b6:	2c03      	cmp	r4, #3
1a0033b8:	d813      	bhi.n	1a0033e2 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0033ba:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0033bc:	4b09      	ldr	r3, [pc, #36]	; (1a0033e4 <TIMER1_IRQHandler+0x38>)
1a0033be:	681a      	ldr	r2, [r3, #0]
1a0033c0:	f004 010f 	and.w	r1, r4, #15
1a0033c4:	2301      	movs	r3, #1
1a0033c6:	408b      	lsls	r3, r1
1a0033c8:	421a      	tst	r2, r3
1a0033ca:	d0f2      	beq.n	1a0033b2 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0033cc:	1d23      	adds	r3, r4, #4
1a0033ce:	4a06      	ldr	r2, [pc, #24]	; (1a0033e8 <TIMER1_IRQHandler+0x3c>)
1a0033d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0033d4:	2000      	movs	r0, #0
1a0033d6:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0033d8:	2301      	movs	r3, #1
1a0033da:	40ab      	lsls	r3, r5
1a0033dc:	4a01      	ldr	r2, [pc, #4]	; (1a0033e4 <TIMER1_IRQHandler+0x38>)
1a0033de:	6013      	str	r3, [r2, #0]
1a0033e0:	e7e7      	b.n	1a0033b2 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0033e2:	bd38      	pop	{r3, r4, r5, pc}
1a0033e4:	40085000 	.word	0x40085000
1a0033e8:	1000000c 	.word	0x1000000c

1a0033ec <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0033ec:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0033ee:	2400      	movs	r4, #0
1a0033f0:	e001      	b.n	1a0033f6 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0033f2:	3401      	adds	r4, #1
1a0033f4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0033f6:	2c03      	cmp	r4, #3
1a0033f8:	d814      	bhi.n	1a003424 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0033fa:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0033fc:	4b0a      	ldr	r3, [pc, #40]	; (1a003428 <TIMER2_IRQHandler+0x3c>)
1a0033fe:	681a      	ldr	r2, [r3, #0]
1a003400:	f004 010f 	and.w	r1, r4, #15
1a003404:	2301      	movs	r3, #1
1a003406:	408b      	lsls	r3, r1
1a003408:	421a      	tst	r2, r3
1a00340a:	d0f2      	beq.n	1a0033f2 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00340c:	f104 0308 	add.w	r3, r4, #8
1a003410:	4a06      	ldr	r2, [pc, #24]	; (1a00342c <TIMER2_IRQHandler+0x40>)
1a003412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003416:	2000      	movs	r0, #0
1a003418:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00341a:	2301      	movs	r3, #1
1a00341c:	40ab      	lsls	r3, r5
1a00341e:	4a02      	ldr	r2, [pc, #8]	; (1a003428 <TIMER2_IRQHandler+0x3c>)
1a003420:	6013      	str	r3, [r2, #0]
1a003422:	e7e6      	b.n	1a0033f2 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003424:	bd38      	pop	{r3, r4, r5, pc}
1a003426:	bf00      	nop
1a003428:	400c3000 	.word	0x400c3000
1a00342c:	1000000c 	.word	0x1000000c

1a003430 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003430:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003432:	2400      	movs	r4, #0
1a003434:	e001      	b.n	1a00343a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003436:	3401      	adds	r4, #1
1a003438:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00343a:	2c03      	cmp	r4, #3
1a00343c:	d814      	bhi.n	1a003468 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00343e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003440:	4b0a      	ldr	r3, [pc, #40]	; (1a00346c <TIMER3_IRQHandler+0x3c>)
1a003442:	681a      	ldr	r2, [r3, #0]
1a003444:	f004 010f 	and.w	r1, r4, #15
1a003448:	2301      	movs	r3, #1
1a00344a:	408b      	lsls	r3, r1
1a00344c:	421a      	tst	r2, r3
1a00344e:	d0f2      	beq.n	1a003436 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003450:	f104 030c 	add.w	r3, r4, #12
1a003454:	4a06      	ldr	r2, [pc, #24]	; (1a003470 <TIMER3_IRQHandler+0x40>)
1a003456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00345a:	2000      	movs	r0, #0
1a00345c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00345e:	2301      	movs	r3, #1
1a003460:	40ab      	lsls	r3, r5
1a003462:	4a02      	ldr	r2, [pc, #8]	; (1a00346c <TIMER3_IRQHandler+0x3c>)
1a003464:	6013      	str	r3, [r2, #0]
1a003466:	e7e6      	b.n	1a003436 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003468:	bd38      	pop	{r3, r4, r5, pc}
1a00346a:	bf00      	nop
1a00346c:	400c4000 	.word	0x400c4000
1a003470:	1000000c 	.word	0x1000000c

1a003474 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a003474:	b510      	push	{r4, lr}
1a003476:	b082      	sub	sp, #8

   switch(config) {
1a003478:	b118      	cbz	r0, 1a003482 <adcInit+0xe>
1a00347a:	2801      	cmp	r0, #1
1a00347c:	d038      	beq.n	1a0034f0 <adcInit+0x7c>
      /* Disable ADC peripheral */
      Chip_ADC_DeInit( LPC_ADC0 );
      break;
   }

}
1a00347e:	b002      	add	sp, #8
1a003480:	bd10      	pop	{r4, pc}
      Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a003482:	4c1d      	ldr	r4, [pc, #116]	; (1a0034f8 <adcInit+0x84>)
1a003484:	4669      	mov	r1, sp
1a003486:	4620      	mov	r0, r4
1a003488:	f000 fccc 	bl	1a003e24 <Chip_ADC_Init>
      Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a00348c:	2100      	movs	r1, #0
1a00348e:	4620      	mov	r0, r4
1a003490:	f000 fd65 	bl	1a003f5e <Chip_ADC_SetBurstCmd>
      Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a003494:	4a19      	ldr	r2, [pc, #100]	; (1a0034fc <adcInit+0x88>)
1a003496:	4669      	mov	r1, sp
1a003498:	4620      	mov	r0, r4
1a00349a:	f000 fd2d 	bl	1a003ef8 <Chip_ADC_SetSampleRate>
      Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a00349e:	2200      	movs	r2, #0
1a0034a0:	2101      	movs	r1, #1
1a0034a2:	4620      	mov	r0, r4
1a0034a4:	f000 fd47 	bl	1a003f36 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a0034a8:	2200      	movs	r2, #0
1a0034aa:	2101      	movs	r1, #1
1a0034ac:	4620      	mov	r0, r4
1a0034ae:	f000 fd03 	bl	1a003eb8 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a0034b2:	2200      	movs	r2, #0
1a0034b4:	2102      	movs	r1, #2
1a0034b6:	4620      	mov	r0, r4
1a0034b8:	f000 fd3d 	bl	1a003f36 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a0034bc:	2200      	movs	r2, #0
1a0034be:	2102      	movs	r1, #2
1a0034c0:	4620      	mov	r0, r4
1a0034c2:	f000 fcf9 	bl	1a003eb8 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a0034c6:	2200      	movs	r2, #0
1a0034c8:	2103      	movs	r1, #3
1a0034ca:	4620      	mov	r0, r4
1a0034cc:	f000 fd33 	bl	1a003f36 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a0034d0:	2200      	movs	r2, #0
1a0034d2:	2103      	movs	r1, #3
1a0034d4:	4620      	mov	r0, r4
1a0034d6:	f000 fcef 	bl	1a003eb8 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a0034da:	2200      	movs	r2, #0
1a0034dc:	2104      	movs	r1, #4
1a0034de:	4620      	mov	r0, r4
1a0034e0:	f000 fd29 	bl	1a003f36 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a0034e4:	2200      	movs	r2, #0
1a0034e6:	2104      	movs	r1, #4
1a0034e8:	4620      	mov	r0, r4
1a0034ea:	f000 fce5 	bl	1a003eb8 <Chip_ADC_Int_SetChannelCmd>
   break;
1a0034ee:	e7c6      	b.n	1a00347e <adcInit+0xa>
      Chip_ADC_DeInit( LPC_ADC0 );
1a0034f0:	4801      	ldr	r0, [pc, #4]	; (1a0034f8 <adcInit+0x84>)
1a0034f2:	f000 fcb7 	bl	1a003e64 <Chip_ADC_DeInit>
}
1a0034f6:	e7c2      	b.n	1a00347e <adcInit+0xa>
1a0034f8:	400e3000 	.word	0x400e3000
1a0034fc:	00030d40 	.word	0x00030d40

1a003500 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a003500:	b570      	push	{r4, r5, r6, lr}
1a003502:	b082      	sub	sp, #8

   uint8_t lpcAdcChannel = 66 - analogInput;
1a003504:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a003508:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a00350a:	2600      	movs	r6, #0
1a00350c:	f8ad 6006 	strh.w	r6, [sp, #6]

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a003510:	4d10      	ldr	r5, [pc, #64]	; (1a003554 <adcRead+0x54>)
1a003512:	2201      	movs	r2, #1
1a003514:	4621      	mov	r1, r4
1a003516:	4628      	mov	r0, r5
1a003518:	f000 fd0d 	bl	1a003f36 <Chip_ADC_EnableChannel>
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a00351c:	4632      	mov	r2, r6
1a00351e:	2101      	movs	r1, #1
1a003520:	4628      	mov	r0, r5
1a003522:	f000 fcd9 	bl	1a003ed8 <Chip_ADC_SetStartMode>

   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a003526:	2200      	movs	r2, #0
1a003528:	4621      	mov	r1, r4
1a00352a:	480a      	ldr	r0, [pc, #40]	; (1a003554 <adcRead+0x54>)
1a00352c:	f000 fca9 	bl	1a003e82 <Chip_ADC_ReadStatus>
   while(
1a003530:	2801      	cmp	r0, #1
1a003532:	d1f8      	bne.n	1a003526 <adcRead+0x26>
   );
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a003534:	4d07      	ldr	r5, [pc, #28]	; (1a003554 <adcRead+0x54>)
1a003536:	f10d 0206 	add.w	r2, sp, #6
1a00353a:	4621      	mov	r1, r4
1a00353c:	4628      	mov	r0, r5
1a00353e:	f000 fc9c 	bl	1a003e7a <Chip_ADC_ReadValue>

   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a003542:	2200      	movs	r2, #0
1a003544:	4621      	mov	r1, r4
1a003546:	4628      	mov	r0, r5
1a003548:	f000 fcf5 	bl	1a003f36 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a00354c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a003550:	b002      	add	sp, #8
1a003552:	bd70      	pop	{r4, r5, r6, pc}
1a003554:	400e3000 	.word	0x400e3000

1a003558 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003558:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00355a:	4d0b      	ldr	r5, [pc, #44]	; (1a003588 <gpioObtainPinInit+0x30>)
1a00355c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003560:	182c      	adds	r4, r5, r0
1a003562:	5628      	ldrsb	r0, [r5, r0]
1a003564:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003566:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00356a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00356c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003570:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003572:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003576:	9b02      	ldr	r3, [sp, #8]
1a003578:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00357a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00357e:	9b03      	ldr	r3, [sp, #12]
1a003580:	701a      	strb	r2, [r3, #0]
}
1a003582:	bc30      	pop	{r4, r5}
1a003584:	4770      	bx	lr
1a003586:	bf00      	nop
1a003588:	1a005904 	.word	0x1a005904

1a00358c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00358c:	b570      	push	{r4, r5, r6, lr}
1a00358e:	b084      	sub	sp, #16
1a003590:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003592:	2300      	movs	r3, #0
1a003594:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003598:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00359c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0035a0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0035a4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0035a8:	f10d 030b 	add.w	r3, sp, #11
1a0035ac:	9301      	str	r3, [sp, #4]
1a0035ae:	ab03      	add	r3, sp, #12
1a0035b0:	9300      	str	r3, [sp, #0]
1a0035b2:	f10d 030d 	add.w	r3, sp, #13
1a0035b6:	f10d 020e 	add.w	r2, sp, #14
1a0035ba:	f10d 010f 	add.w	r1, sp, #15
1a0035be:	f7ff ffcb 	bl	1a003558 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0035c2:	2c05      	cmp	r4, #5
1a0035c4:	f200 80a5 	bhi.w	1a003712 <gpioInit+0x186>
1a0035c8:	e8df f004 	tbb	[pc, r4]
1a0035cc:	45278109 	.word	0x45278109
1a0035d0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0035d2:	4851      	ldr	r0, [pc, #324]	; (1a003718 <gpioInit+0x18c>)
1a0035d4:	f001 f882 	bl	1a0046dc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0035d8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0035da:	b004      	add	sp, #16
1a0035dc:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0035de:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0035e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0035e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0035ea:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0035ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0035f2:	494a      	ldr	r1, [pc, #296]	; (1a00371c <gpioInit+0x190>)
1a0035f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0035f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003600:	2001      	movs	r0, #1
1a003602:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003606:	4c44      	ldr	r4, [pc, #272]	; (1a003718 <gpioInit+0x18c>)
1a003608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00360c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003610:	ea22 0201 	bic.w	r2, r2, r1
1a003614:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003618:	e7df      	b.n	1a0035da <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00361a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00361e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003622:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003626:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00362a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00362e:	493b      	ldr	r1, [pc, #236]	; (1a00371c <gpioInit+0x190>)
1a003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003634:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003638:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00363c:	2001      	movs	r0, #1
1a00363e:	fa00 f102 	lsl.w	r1, r0, r2
1a003642:	4c35      	ldr	r4, [pc, #212]	; (1a003718 <gpioInit+0x18c>)
1a003644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003648:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00364c:	ea22 0201 	bic.w	r2, r2, r1
1a003650:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003654:	e7c1      	b.n	1a0035da <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003656:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00365a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00365e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003662:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003666:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00366a:	492c      	ldr	r1, [pc, #176]	; (1a00371c <gpioInit+0x190>)
1a00366c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003670:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003674:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003678:	2001      	movs	r0, #1
1a00367a:	fa00 f102 	lsl.w	r1, r0, r2
1a00367e:	4c26      	ldr	r4, [pc, #152]	; (1a003718 <gpioInit+0x18c>)
1a003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003684:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003688:	ea22 0201 	bic.w	r2, r2, r1
1a00368c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003690:	e7a3      	b.n	1a0035da <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003692:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003696:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00369a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00369e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0036a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0036a6:	491d      	ldr	r1, [pc, #116]	; (1a00371c <gpioInit+0x190>)
1a0036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0036ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0036b0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0036b4:	2001      	movs	r0, #1
1a0036b6:	fa00 f102 	lsl.w	r1, r0, r2
1a0036ba:	4c17      	ldr	r4, [pc, #92]	; (1a003718 <gpioInit+0x18c>)
1a0036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0036c0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0036c4:	ea22 0201 	bic.w	r2, r2, r1
1a0036c8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0036cc:	e785      	b.n	1a0035da <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0036ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0036d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0036d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0036da:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0036de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0036e2:	490e      	ldr	r1, [pc, #56]	; (1a00371c <gpioInit+0x190>)
1a0036e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0036e8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0036ec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0036f0:	2001      	movs	r0, #1
1a0036f2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0036f6:	4b08      	ldr	r3, [pc, #32]	; (1a003718 <gpioInit+0x18c>)
1a0036f8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0036fc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003700:	4331      	orrs	r1, r6
1a003702:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003706:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003708:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00370c:	2100      	movs	r1, #0
1a00370e:	5499      	strb	r1, [r3, r2]
1a003710:	e763      	b.n	1a0035da <gpioInit+0x4e>
      ret_val = 0;
1a003712:	2000      	movs	r0, #0
1a003714:	e761      	b.n	1a0035da <gpioInit+0x4e>
1a003716:	bf00      	nop
1a003718:	400f4000 	.word	0x400f4000
1a00371c:	40086000 	.word	0x40086000

1a003720 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003720:	b510      	push	{r4, lr}
1a003722:	b084      	sub	sp, #16
1a003724:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003726:	2300      	movs	r3, #0
1a003728:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00372c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003730:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003734:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003738:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00373c:	f10d 030b 	add.w	r3, sp, #11
1a003740:	9301      	str	r3, [sp, #4]
1a003742:	ab03      	add	r3, sp, #12
1a003744:	9300      	str	r3, [sp, #0]
1a003746:	f10d 030d 	add.w	r3, sp, #13
1a00374a:	f10d 020e 	add.w	r2, sp, #14
1a00374e:	f10d 010f 	add.w	r1, sp, #15
1a003752:	f7ff ff01 	bl	1a003558 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003756:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00375a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00375e:	3400      	adds	r4, #0
1a003760:	bf18      	it	ne
1a003762:	2401      	movne	r4, #1
1a003764:	015b      	lsls	r3, r3, #5
1a003766:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00376a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00376e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003770:	2001      	movs	r0, #1
1a003772:	b004      	add	sp, #16
1a003774:	bd10      	pop	{r4, pc}

1a003776 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a003776:	b500      	push	{lr}
1a003778:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00377a:	2300      	movs	r3, #0
1a00377c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003780:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003784:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003788:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00378c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003790:	f10d 030b 	add.w	r3, sp, #11
1a003794:	9301      	str	r3, [sp, #4]
1a003796:	ab03      	add	r3, sp, #12
1a003798:	9300      	str	r3, [sp, #0]
1a00379a:	f10d 030d 	add.w	r3, sp, #13
1a00379e:	f10d 020e 	add.w	r2, sp, #14
1a0037a2:	f10d 010f 	add.w	r1, sp, #15
1a0037a6:	f7ff fed7 	bl	1a003558 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0037aa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0037ae:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0037b2:	015b      	lsls	r3, r3, #5
1a0037b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0037b8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0037bc:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0037be:	3000      	adds	r0, #0
1a0037c0:	bf18      	it	ne
1a0037c2:	2001      	movne	r0, #1
1a0037c4:	b005      	add	sp, #20
1a0037c6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0037ca:	Address 0x000000001a0037ca is out of bounds.


1a0037cc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0037cc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0037ce:	4b04      	ldr	r3, [pc, #16]	; (1a0037e0 <USB0_IRQHandler+0x14>)
1a0037d0:	681b      	ldr	r3, [r3, #0]
1a0037d2:	681b      	ldr	r3, [r3, #0]
1a0037d4:	68db      	ldr	r3, [r3, #12]
1a0037d6:	4a03      	ldr	r2, [pc, #12]	; (1a0037e4 <USB0_IRQHandler+0x18>)
1a0037d8:	6810      	ldr	r0, [r2, #0]
1a0037da:	4798      	blx	r3
}
1a0037dc:	bd08      	pop	{r3, pc}
1a0037de:	bf00      	nop
1a0037e0:	10002d88 	.word	0x10002d88
1a0037e4:	10002c9c 	.word	0x10002c9c

1a0037e8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0037e8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0037ea:	f000 fbc9 	bl	1a003f80 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0037ee:	4b3a      	ldr	r3, [pc, #232]	; (1a0038d8 <boardInit+0xf0>)
1a0037f0:	6818      	ldr	r0, [r3, #0]
1a0037f2:	f7ff fcbf 	bl	1a003174 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0037f6:	2001      	movs	r0, #1
1a0037f8:	2100      	movs	r1, #0
1a0037fa:	f7ff fd13 	bl	1a003224 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0037fe:	2105      	movs	r1, #5
1a003800:	2000      	movs	r0, #0
1a003802:	f7ff fec3 	bl	1a00358c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a003806:	2100      	movs	r1, #0
1a003808:	2024      	movs	r0, #36	; 0x24
1a00380a:	f7ff febf 	bl	1a00358c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00380e:	2100      	movs	r1, #0
1a003810:	2025      	movs	r0, #37	; 0x25
1a003812:	f7ff febb 	bl	1a00358c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a003816:	2100      	movs	r1, #0
1a003818:	2026      	movs	r0, #38	; 0x26
1a00381a:	f7ff feb7 	bl	1a00358c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a00381e:	2100      	movs	r1, #0
1a003820:	2027      	movs	r0, #39	; 0x27
1a003822:	f7ff feb3 	bl	1a00358c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a003826:	2101      	movs	r1, #1
1a003828:	2028      	movs	r0, #40	; 0x28
1a00382a:	f7ff feaf 	bl	1a00358c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00382e:	2101      	movs	r1, #1
1a003830:	2029      	movs	r0, #41	; 0x29
1a003832:	f7ff feab 	bl	1a00358c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a003836:	2101      	movs	r1, #1
1a003838:	202a      	movs	r0, #42	; 0x2a
1a00383a:	f7ff fea7 	bl	1a00358c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a00383e:	2101      	movs	r1, #1
1a003840:	202b      	movs	r0, #43	; 0x2b
1a003842:	f7ff fea3 	bl	1a00358c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a003846:	2101      	movs	r1, #1
1a003848:	202c      	movs	r0, #44	; 0x2c
1a00384a:	f7ff fe9f 	bl	1a00358c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a00384e:	2101      	movs	r1, #1
1a003850:	202d      	movs	r0, #45	; 0x2d
1a003852:	f7ff fe9b 	bl	1a00358c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a003856:	2100      	movs	r1, #0
1a003858:	202e      	movs	r0, #46	; 0x2e
1a00385a:	f7ff fe97 	bl	1a00358c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a00385e:	2100      	movs	r1, #0
1a003860:	202f      	movs	r0, #47	; 0x2f
1a003862:	f7ff fe93 	bl	1a00358c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a003866:	2100      	movs	r1, #0
1a003868:	2030      	movs	r0, #48	; 0x30
1a00386a:	f7ff fe8f 	bl	1a00358c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a00386e:	2100      	movs	r1, #0
1a003870:	2031      	movs	r0, #49	; 0x31
1a003872:	f7ff fe8b 	bl	1a00358c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a003876:	2100      	movs	r1, #0
1a003878:	2032      	movs	r0, #50	; 0x32
1a00387a:	f7ff fe87 	bl	1a00358c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a00387e:	2100      	movs	r1, #0
1a003880:	2033      	movs	r0, #51	; 0x33
1a003882:	f7ff fe83 	bl	1a00358c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a003886:	2100      	movs	r1, #0
1a003888:	2034      	movs	r0, #52	; 0x34
1a00388a:	f7ff fe7f 	bl	1a00358c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a00388e:	2100      	movs	r1, #0
1a003890:	2035      	movs	r0, #53	; 0x35
1a003892:	f7ff fe7b 	bl	1a00358c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a003896:	2101      	movs	r1, #1
1a003898:	2036      	movs	r0, #54	; 0x36
1a00389a:	f7ff fe77 	bl	1a00358c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a00389e:	2101      	movs	r1, #1
1a0038a0:	2037      	movs	r0, #55	; 0x37
1a0038a2:	f7ff fe73 	bl	1a00358c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0038a6:	2101      	movs	r1, #1
1a0038a8:	2038      	movs	r0, #56	; 0x38
1a0038aa:	f7ff fe6f 	bl	1a00358c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0038ae:	2101      	movs	r1, #1
1a0038b0:	2039      	movs	r0, #57	; 0x39
1a0038b2:	f7ff fe6b 	bl	1a00358c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0038b6:	2101      	movs	r1, #1
1a0038b8:	203a      	movs	r0, #58	; 0x3a
1a0038ba:	f7ff fe67 	bl	1a00358c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0038be:	2101      	movs	r1, #1
1a0038c0:	203b      	movs	r0, #59	; 0x3b
1a0038c2:	f7ff fe63 	bl	1a00358c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0038c6:	2101      	movs	r1, #1
1a0038c8:	203c      	movs	r0, #60	; 0x3c
1a0038ca:	f7ff fe5f 	bl	1a00358c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0038ce:	2101      	movs	r1, #1
1a0038d0:	203d      	movs	r0, #61	; 0x3d
1a0038d2:	f7ff fe5b 	bl	1a00358c <gpioInit>

}
1a0038d6:	bd08      	pop	{r3, pc}
1a0038d8:	10002d8c 	.word	0x10002d8c

1a0038dc <delayInaccurate>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurate(tick_t delay_ms)
{
1a0038dc:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
1a0038e0:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;

   delay = INACCURATE_TO_MS * delay_ms;
1a0038e2:	008c      	lsls	r4, r1, #2
1a0038e4:	0082      	lsls	r2, r0, #2
1a0038e6:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
1a0038ea:	eb12 0b00 	adds.w	fp, r2, r0
1a0038ee:	eb43 0c01 	adc.w	ip, r3, r1
1a0038f2:	ea4f 210c 	mov.w	r1, ip, lsl #8
1a0038f6:	ea41 611b 	orr.w	r1, r1, fp, lsr #24
1a0038fa:	ea4f 200b 	mov.w	r0, fp, lsl #8
1a0038fe:	ebb0 000b 	subs.w	r0, r0, fp
1a003902:	eb61 010c 	sbc.w	r1, r1, ip
1a003906:	010b      	lsls	r3, r1, #4
1a003908:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a00390c:	0102      	lsls	r2, r0, #4
1a00390e:	4614      	mov	r4, r2
1a003910:	461d      	mov	r5, r3
1a003912:	e9cd 4500 	strd	r4, r5, [sp]

   for( i=delay; i>0; i-- );
1a003916:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00391a:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00391e:	e007      	b.n	1a003930 <delayInaccurate+0x54>
1a003920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a003924:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a003928:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00392c:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a003930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003934:	4313      	orrs	r3, r2
1a003936:	d1f3      	bne.n	1a003920 <delayInaccurate+0x44>
}
1a003938:	b005      	add	sp, #20
1a00393a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
1a00393e:	4770      	bx	lr

1a003940 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a003940:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a003942:	f7ff fc48 	bl	1a0031d6 <uartWriteString>
}
1a003946:	bd08      	pop	{r3, pc}

1a003948 <printEnter>:

void printEnter( print_t printer )
{
1a003948:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a00394a:	4902      	ldr	r1, [pc, #8]	; (1a003954 <printEnter+0xc>)
1a00394c:	f7ff fc43 	bl	1a0031d6 <uartWriteString>
}
1a003950:	bd08      	pop	{r3, pc}
1a003952:	bf00      	nop
1a003954:	1a005a3c 	.word	0x1a005a3c

1a003958 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003958:	2301      	movs	r3, #1
1a00395a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00395e:	4b01      	ldr	r3, [pc, #4]	; (1a003964 <clearInterrupt+0xc>)
1a003960:	6258      	str	r0, [r3, #36]	; 0x24
}
1a003962:	4770      	bx	lr
1a003964:	40087000 	.word	0x40087000

1a003968 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00396a:	4b12      	ldr	r3, [pc, #72]	; (1a0039b4 <serveInterrupt+0x4c>)
1a00396c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00396e:	4b12      	ldr	r3, [pc, #72]	; (1a0039b8 <serveInterrupt+0x50>)
1a003970:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a003972:	2301      	movs	r3, #1
1a003974:	4083      	lsls	r3, r0
1a003976:	420b      	tst	r3, r1
1a003978:	d111      	bne.n	1a00399e <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00397a:	4910      	ldr	r1, [pc, #64]	; (1a0039bc <serveInterrupt+0x54>)
1a00397c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00397e:	4d10      	ldr	r5, [pc, #64]	; (1a0039c0 <serveInterrupt+0x58>)
1a003980:	0051      	lsls	r1, r2, #1
1a003982:	188f      	adds	r7, r1, r2
1a003984:	00fc      	lsls	r4, r7, #3
1a003986:	4627      	mov	r7, r4
1a003988:	442c      	add	r4, r5
1a00398a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a00398c:	6864      	ldr	r4, [r4, #4]
1a00398e:	1b36      	subs	r6, r6, r4
1a003990:	443d      	add	r5, r7
1a003992:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a003994:	4a08      	ldr	r2, [pc, #32]	; (1a0039b8 <serveInterrupt+0x50>)
1a003996:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a003998:	f7ff ffde 	bl	1a003958 <clearInterrupt>
}
1a00399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00399e:	4907      	ldr	r1, [pc, #28]	; (1a0039bc <serveInterrupt+0x54>)
1a0039a0:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0039a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0039a6:	00d1      	lsls	r1, r2, #3
1a0039a8:	4a05      	ldr	r2, [pc, #20]	; (1a0039c0 <serveInterrupt+0x58>)
1a0039aa:	440a      	add	r2, r1
1a0039ac:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0039ae:	4a02      	ldr	r2, [pc, #8]	; (1a0039b8 <serveInterrupt+0x50>)
1a0039b0:	61d3      	str	r3, [r2, #28]
1a0039b2:	e7f1      	b.n	1a003998 <serveInterrupt+0x30>
1a0039b4:	1a005a40 	.word	0x1a005a40
1a0039b8:	40087000 	.word	0x40087000
1a0039bc:	40084000 	.word	0x40084000
1a0039c0:	1000004c 	.word	0x1000004c

1a0039c4 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0039c4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0039c6:	2000      	movs	r0, #0
1a0039c8:	f7ff ffce 	bl	1a003968 <serveInterrupt>
}
1a0039cc:	bd08      	pop	{r3, pc}

1a0039ce <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0039ce:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0039d0:	2001      	movs	r0, #1
1a0039d2:	f7ff ffc9 	bl	1a003968 <serveInterrupt>
}
1a0039d6:	bd08      	pop	{r3, pc}

1a0039d8 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0039d8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0039da:	2002      	movs	r0, #2
1a0039dc:	f7ff ffc4 	bl	1a003968 <serveInterrupt>
}
1a0039e0:	bd08      	pop	{r3, pc}
1a0039e2:	Address 0x000000001a0039e2 is out of bounds.


1a0039e4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0039e4:	2200      	movs	r2, #0
1a0039e6:	2a05      	cmp	r2, #5
1a0039e8:	d819      	bhi.n	1a003a1e <Board_LED_Init+0x3a>
{
1a0039ea:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0039ec:	490c      	ldr	r1, [pc, #48]	; (1a003a20 <Board_LED_Init+0x3c>)
1a0039ee:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0039f2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0039f6:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a0039f8:	4b0a      	ldr	r3, [pc, #40]	; (1a003a24 <Board_LED_Init+0x40>)
1a0039fa:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0039fe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003a02:	2001      	movs	r0, #1
1a003a04:	40a0      	lsls	r0, r4
1a003a06:	4301      	orrs	r1, r0
1a003a08:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a003a0c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003a10:	2100      	movs	r1, #0
1a003a12:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003a14:	3201      	adds	r2, #1
1a003a16:	2a05      	cmp	r2, #5
1a003a18:	d9e8      	bls.n	1a0039ec <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a003a1a:	bc70      	pop	{r4, r5, r6}
1a003a1c:	4770      	bx	lr
1a003a1e:	4770      	bx	lr
1a003a20:	1a005a50 	.word	0x1a005a50
1a003a24:	400f4000 	.word	0x400f4000

1a003a28 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003a28:	2300      	movs	r3, #0
1a003a2a:	2b03      	cmp	r3, #3
1a003a2c:	d816      	bhi.n	1a003a5c <Board_TEC_Init+0x34>
{
1a003a2e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003a30:	490b      	ldr	r1, [pc, #44]	; (1a003a60 <Board_TEC_Init+0x38>)
1a003a32:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003a36:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003a3a:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003a3c:	4c09      	ldr	r4, [pc, #36]	; (1a003a64 <Board_TEC_Init+0x3c>)
1a003a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003a42:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003a46:	2001      	movs	r0, #1
1a003a48:	40a8      	lsls	r0, r5
1a003a4a:	ea21 0100 	bic.w	r1, r1, r0
1a003a4e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003a52:	3301      	adds	r3, #1
1a003a54:	2b03      	cmp	r3, #3
1a003a56:	d9eb      	bls.n	1a003a30 <Board_TEC_Init+0x8>
    }
}
1a003a58:	bc30      	pop	{r4, r5}
1a003a5a:	4770      	bx	lr
1a003a5c:	4770      	bx	lr
1a003a5e:	bf00      	nop
1a003a60:	1a005a48 	.word	0x1a005a48
1a003a64:	400f4000 	.word	0x400f4000

1a003a68 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003a68:	2300      	movs	r3, #0
1a003a6a:	2b08      	cmp	r3, #8
1a003a6c:	d816      	bhi.n	1a003a9c <Board_GPIO_Init+0x34>
{
1a003a6e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003a70:	490b      	ldr	r1, [pc, #44]	; (1a003aa0 <Board_GPIO_Init+0x38>)
1a003a72:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003a76:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003a7a:	784d      	ldrb	r5, [r1, #1]
1a003a7c:	4c09      	ldr	r4, [pc, #36]	; (1a003aa4 <Board_GPIO_Init+0x3c>)
1a003a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003a82:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003a86:	2001      	movs	r0, #1
1a003a88:	40a8      	lsls	r0, r5
1a003a8a:	ea21 0100 	bic.w	r1, r1, r0
1a003a8e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003a92:	3301      	adds	r3, #1
1a003a94:	2b08      	cmp	r3, #8
1a003a96:	d9eb      	bls.n	1a003a70 <Board_GPIO_Init+0x8>
    }
}
1a003a98:	bc30      	pop	{r4, r5}
1a003a9a:	4770      	bx	lr
1a003a9c:	4770      	bx	lr
1a003a9e:	bf00      	nop
1a003aa0:	1a005a5c 	.word	0x1a005a5c
1a003aa4:	400f4000 	.word	0x400f4000

1a003aa8 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a003aa8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a003aaa:	4c0b      	ldr	r4, [pc, #44]	; (1a003ad8 <Board_SPI_Init+0x30>)
1a003aac:	4620      	mov	r0, r4
1a003aae:	f001 f825 	bl	1a004afc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003ab2:	6863      	ldr	r3, [r4, #4]
1a003ab4:	f023 0304 	bic.w	r3, r3, #4
1a003ab8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003aba:	6823      	ldr	r3, [r4, #0]
1a003abc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003ac0:	f043 0307 	orr.w	r3, r3, #7
1a003ac4:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003ac6:	4905      	ldr	r1, [pc, #20]	; (1a003adc <Board_SPI_Init+0x34>)
1a003ac8:	4620      	mov	r0, r4
1a003aca:	f000 fff8 	bl	1a004abe <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003ace:	6863      	ldr	r3, [r4, #4]
1a003ad0:	f043 0302 	orr.w	r3, r3, #2
1a003ad4:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a003ad6:	bd10      	pop	{r4, pc}
1a003ad8:	400c5000 	.word	0x400c5000
1a003adc:	000186a0 	.word	0x000186a0

1a003ae0 <Board_I2C_Init>:
{
1a003ae0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003ae2:	2000      	movs	r0, #0
1a003ae4:	f000 ff46 	bl	1a004974 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003ae8:	4b04      	ldr	r3, [pc, #16]	; (1a003afc <Board_I2C_Init+0x1c>)
1a003aea:	f640 0208 	movw	r2, #2056	; 0x808
1a003aee:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003af2:	4903      	ldr	r1, [pc, #12]	; (1a003b00 <Board_I2C_Init+0x20>)
1a003af4:	2000      	movs	r0, #0
1a003af6:	f000 ff4f 	bl	1a004998 <Chip_I2C_SetClockRate>
}
1a003afa:	bd08      	pop	{r3, pc}
1a003afc:	40086000 	.word	0x40086000
1a003b00:	000f4240 	.word	0x000f4240

1a003b04 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a003b04:	b510      	push	{r4, lr}
1a003b06:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a003b08:	4c08      	ldr	r4, [pc, #32]	; (1a003b2c <Board_ADC_Init+0x28>)
1a003b0a:	4669      	mov	r1, sp
1a003b0c:	4620      	mov	r0, r4
1a003b0e:	f000 f989 	bl	1a003e24 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003b12:	4a07      	ldr	r2, [pc, #28]	; (1a003b30 <Board_ADC_Init+0x2c>)
1a003b14:	4669      	mov	r1, sp
1a003b16:	4620      	mov	r0, r4
1a003b18:	f000 f9ee 	bl	1a003ef8 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003b1c:	2200      	movs	r2, #0
1a003b1e:	4669      	mov	r1, sp
1a003b20:	4620      	mov	r0, r4
1a003b22:	f000 fa02 	bl	1a003f2a <Chip_ADC_SetResolution>
}
1a003b26:	b002      	add	sp, #8
1a003b28:	bd10      	pop	{r4, pc}
1a003b2a:	bf00      	nop
1a003b2c:	400e3000 	.word	0x400e3000
1a003b30:	00061a80 	.word	0x00061a80

1a003b34 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003b34:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a003b36:	4c07      	ldr	r4, [pc, #28]	; (1a003b54 <Board_Debug_Init+0x20>)
1a003b38:	4620      	mov	r0, r4
1a003b3a:	f000 f89f 	bl	1a003c7c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a003b3e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003b42:	4620      	mov	r0, r4
1a003b44:	f000 f8c4 	bl	1a003cd0 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a003b48:	2303      	movs	r3, #3
1a003b4a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a003b4c:	2301      	movs	r3, #1
1a003b4e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a003b50:	bd10      	pop	{r4, pc}
1a003b52:	bf00      	nop
1a003b54:	400c1000 	.word	0x400c1000

1a003b58 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003b58:	b508      	push	{r3, lr}
   DEBUGINIT();
1a003b5a:	f7ff ffeb 	bl	1a003b34 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a003b5e:	4808      	ldr	r0, [pc, #32]	; (1a003b80 <Board_Init+0x28>)
1a003b60:	f000 fdbc 	bl	1a0046dc <Chip_GPIO_Init>

   Board_LED_Init();
1a003b64:	f7ff ff3e 	bl	1a0039e4 <Board_LED_Init>
   Board_TEC_Init();
1a003b68:	f7ff ff5e 	bl	1a003a28 <Board_TEC_Init>
   Board_SPI_Init();
1a003b6c:	f7ff ff9c 	bl	1a003aa8 <Board_SPI_Init>
   Board_GPIO_Init();
1a003b70:	f7ff ff7a 	bl	1a003a68 <Board_GPIO_Init>
   Board_I2C_Init();
1a003b74:	f7ff ffb4 	bl	1a003ae0 <Board_I2C_Init>
   Board_ADC_Init();
1a003b78:	f7ff ffc4 	bl	1a003b04 <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a003b7c:	bd08      	pop	{r3, pc}
1a003b7e:	bf00      	nop
1a003b80:	400f4000 	.word	0x400f4000

1a003b84 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a003b84:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a003b86:	4a04      	ldr	r2, [pc, #16]	; (1a003b98 <SystemInit+0x14>)
1a003b88:	4b04      	ldr	r3, [pc, #16]	; (1a003b9c <SystemInit+0x18>)
1a003b8a:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a003b8c:	f000 fd7c 	bl	1a004688 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a003b90:	f000 f858 	bl	1a003c44 <Board_SystemInit>
}
1a003b94:	bd08      	pop	{r3, pc}
1a003b96:	bf00      	nop
1a003b98:	1a000000 	.word	0x1a000000
1a003b9c:	e000ed08 	.word	0xe000ed08

1a003ba0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003ba0:	2300      	movs	r3, #0
1a003ba2:	2b1c      	cmp	r3, #28
1a003ba4:	d812      	bhi.n	1a003bcc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a003ba6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003ba8:	4a09      	ldr	r2, [pc, #36]	; (1a003bd0 <Board_SetupMuxing+0x30>)
1a003baa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003bae:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003bb2:	784a      	ldrb	r2, [r1, #1]
1a003bb4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003bb6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a003bba:	4906      	ldr	r1, [pc, #24]	; (1a003bd4 <Board_SetupMuxing+0x34>)
1a003bbc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003bc0:	3301      	adds	r3, #1
1a003bc2:	2b1c      	cmp	r3, #28
1a003bc4:	d9f0      	bls.n	1a003ba8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003bca:	4770      	bx	lr
1a003bcc:	4770      	bx	lr
1a003bce:	bf00      	nop
1a003bd0:	1a005a78 	.word	0x1a005a78
1a003bd4:	40086000 	.word	0x40086000

1a003bd8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003bd8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a003bda:	4a17      	ldr	r2, [pc, #92]	; (1a003c38 <Board_SetupClocking+0x60>)
1a003bdc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003be4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003be8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003bec:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003bf4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003bf8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003bfc:	2201      	movs	r2, #1
1a003bfe:	490f      	ldr	r1, [pc, #60]	; (1a003c3c <Board_SetupClocking+0x64>)
1a003c00:	2006      	movs	r0, #6
1a003c02:	f000 fd6d 	bl	1a0046e0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003c06:	2400      	movs	r4, #0
1a003c08:	b14c      	cbz	r4, 1a003c1e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a003c0a:	4b0b      	ldr	r3, [pc, #44]	; (1a003c38 <Board_SetupClocking+0x60>)
1a003c0c:	685a      	ldr	r2, [r3, #4]
1a003c0e:	f022 020c 	bic.w	r2, r2, #12
1a003c12:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003c14:	685a      	ldr	r2, [r3, #4]
1a003c16:	f042 0203 	orr.w	r2, r2, #3
1a003c1a:	605a      	str	r2, [r3, #4]
}
1a003c1c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003c1e:	4808      	ldr	r0, [pc, #32]	; (1a003c40 <Board_SetupClocking+0x68>)
1a003c20:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003c24:	2301      	movs	r3, #1
1a003c26:	788a      	ldrb	r2, [r1, #2]
1a003c28:	7849      	ldrb	r1, [r1, #1]
1a003c2a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003c2e:	f000 fbd5 	bl	1a0043dc <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003c32:	3401      	adds	r4, #1
1a003c34:	e7e8      	b.n	1a003c08 <Board_SetupClocking+0x30>
1a003c36:	bf00      	nop
1a003c38:	40043000 	.word	0x40043000
1a003c3c:	0c28cb00 	.word	0x0c28cb00
1a003c40:	1a005a74 	.word	0x1a005a74

1a003c44 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003c44:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003c46:	f7ff ffab 	bl	1a003ba0 <Board_SetupMuxing>
    Board_SetupClocking();
1a003c4a:	f7ff ffc5 	bl	1a003bd8 <Board_SetupClocking>
}
1a003c4e:	bd08      	pop	{r3, pc}

1a003c50 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003c50:	4b09      	ldr	r3, [pc, #36]	; (1a003c78 <Chip_UART_GetIndex+0x28>)
1a003c52:	4298      	cmp	r0, r3
1a003c54:	d009      	beq.n	1a003c6a <Chip_UART_GetIndex+0x1a>
1a003c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003c5a:	4298      	cmp	r0, r3
1a003c5c:	d007      	beq.n	1a003c6e <Chip_UART_GetIndex+0x1e>
1a003c5e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003c62:	4298      	cmp	r0, r3
1a003c64:	d005      	beq.n	1a003c72 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003c66:	2000      	movs	r0, #0
1a003c68:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003c6a:	2002      	movs	r0, #2
1a003c6c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a003c6e:	2003      	movs	r0, #3
1a003c70:	4770      	bx	lr
			return 1;
1a003c72:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003c74:	4770      	bx	lr
1a003c76:	bf00      	nop
1a003c78:	400c1000 	.word	0x400c1000

1a003c7c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003c7c:	b530      	push	{r4, r5, lr}
1a003c7e:	b083      	sub	sp, #12
1a003c80:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003c82:	f7ff ffe5 	bl	1a003c50 <Chip_UART_GetIndex>
1a003c86:	2301      	movs	r3, #1
1a003c88:	461a      	mov	r2, r3
1a003c8a:	4619      	mov	r1, r3
1a003c8c:	4d0e      	ldr	r5, [pc, #56]	; (1a003cc8 <Chip_UART_Init+0x4c>)
1a003c8e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003c92:	f000 fbe9 	bl	1a004468 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003c96:	2307      	movs	r3, #7
1a003c98:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a003c9a:	2300      	movs	r3, #0
1a003c9c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003c9e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003ca0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003ca2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003ca4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003ca6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003ca8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003caa:	4b08      	ldr	r3, [pc, #32]	; (1a003ccc <Chip_UART_Init+0x50>)
1a003cac:	429c      	cmp	r4, r3
1a003cae:	d006      	beq.n	1a003cbe <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003cb0:	2303      	movs	r3, #3
1a003cb2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003cb4:	2310      	movs	r3, #16
1a003cb6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003cb8:	9b01      	ldr	r3, [sp, #4]
}
1a003cba:	b003      	add	sp, #12
1a003cbc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003cbe:	2300      	movs	r3, #0
1a003cc0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003cc2:	69a3      	ldr	r3, [r4, #24]
1a003cc4:	9301      	str	r3, [sp, #4]
1a003cc6:	e7f3      	b.n	1a003cb0 <Chip_UART_Init+0x34>
1a003cc8:	1a005af4 	.word	0x1a005af4
1a003ccc:	40082000 	.word	0x40082000

1a003cd0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003cd4:	b083      	sub	sp, #12
1a003cd6:	4683      	mov	fp, r0
1a003cd8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003cda:	f7ff ffb9 	bl	1a003c50 <Chip_UART_GetIndex>
1a003cde:	4b35      	ldr	r3, [pc, #212]	; (1a003db4 <Chip_UART_SetBaudFDR+0xe4>)
1a003ce0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003ce4:	f000 fc12 	bl	1a00450c <Chip_Clock_GetRate>
1a003ce8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a003cea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003cee:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003cf0:	2300      	movs	r3, #0
1a003cf2:	9301      	str	r3, [sp, #4]
1a003cf4:	46a2      	mov	sl, r4
1a003cf6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003cf8:	e02a      	b.n	1a003d50 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a003cfa:	4242      	negs	r2, r0
				div ++;
1a003cfc:	1c4b      	adds	r3, r1, #1
1a003cfe:	e017      	b.n	1a003d30 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003d00:	b30a      	cbz	r2, 1a003d46 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003d02:	4617      	mov	r7, r2
			sd = d;
1a003d04:	9501      	str	r5, [sp, #4]
			sm = m;
1a003d06:	46a2      	mov	sl, r4
			sdiv = div;
1a003d08:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a003d0a:	3501      	adds	r5, #1
1a003d0c:	42ac      	cmp	r4, r5
1a003d0e:	d91e      	bls.n	1a003d4e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003d10:	0933      	lsrs	r3, r6, #4
1a003d12:	0730      	lsls	r0, r6, #28
1a003d14:	fba4 0100 	umull	r0, r1, r4, r0
1a003d18:	fb04 1103 	mla	r1, r4, r3, r1
1a003d1c:	1962      	adds	r2, r4, r5
1a003d1e:	fb08 f202 	mul.w	r2, r8, r2
1a003d22:	2300      	movs	r3, #0
1a003d24:	f001 fb68 	bl	1a0053f8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003d28:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a003d2a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003d2c:	2800      	cmp	r0, #0
1a003d2e:	dbe4      	blt.n	1a003cfa <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003d30:	4297      	cmp	r7, r2
1a003d32:	d3ea      	bcc.n	1a003d0a <Chip_UART_SetBaudFDR+0x3a>
1a003d34:	2b00      	cmp	r3, #0
1a003d36:	d0e8      	beq.n	1a003d0a <Chip_UART_SetBaudFDR+0x3a>
1a003d38:	0c19      	lsrs	r1, r3, #16
1a003d3a:	d1e6      	bne.n	1a003d0a <Chip_UART_SetBaudFDR+0x3a>
1a003d3c:	2b02      	cmp	r3, #2
1a003d3e:	d8df      	bhi.n	1a003d00 <Chip_UART_SetBaudFDR+0x30>
1a003d40:	2d00      	cmp	r5, #0
1a003d42:	d0dd      	beq.n	1a003d00 <Chip_UART_SetBaudFDR+0x30>
1a003d44:	e7e1      	b.n	1a003d0a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003d46:	4617      	mov	r7, r2
			sd = d;
1a003d48:	9501      	str	r5, [sp, #4]
			sm = m;
1a003d4a:	46a2      	mov	sl, r4
			sdiv = div;
1a003d4c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003d4e:	3401      	adds	r4, #1
1a003d50:	b11f      	cbz	r7, 1a003d5a <Chip_UART_SetBaudFDR+0x8a>
1a003d52:	2c0f      	cmp	r4, #15
1a003d54:	d801      	bhi.n	1a003d5a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003d56:	2500      	movs	r5, #0
1a003d58:	e7d8      	b.n	1a003d0c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003d5a:	f1b9 0f00 	cmp.w	r9, #0
1a003d5e:	d024      	beq.n	1a003daa <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003d60:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003d68:	f8cb 300c 	str.w	r3, [fp, #12]
1a003d6c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a003d70:	f8cb 3000 	str.w	r3, [fp]
1a003d74:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003d78:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003d7c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003d84:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003d88:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003d8c:	b2db      	uxtb	r3, r3
1a003d8e:	9901      	ldr	r1, [sp, #4]
1a003d90:	f001 020f 	and.w	r2, r1, #15
1a003d94:	4313      	orrs	r3, r2
1a003d96:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003d9a:	0933      	lsrs	r3, r6, #4
1a003d9c:	fb0a f303 	mul.w	r3, sl, r3
1a003da0:	448a      	add	sl, r1
1a003da2:	fb09 f90a 	mul.w	r9, r9, sl
1a003da6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003daa:	4648      	mov	r0, r9
1a003dac:	b003      	add	sp, #12
1a003dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003db2:	bf00      	nop
1a003db4:	1a005aec 	.word	0x1a005aec

1a003db8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003db8:	4b03      	ldr	r3, [pc, #12]	; (1a003dc8 <Chip_ADC_GetClockIndex+0x10>)
1a003dba:	4298      	cmp	r0, r3
1a003dbc:	d001      	beq.n	1a003dc2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003dbe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003dc0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003dc2:	2004      	movs	r0, #4
1a003dc4:	4770      	bx	lr
1a003dc6:	bf00      	nop
1a003dc8:	400e4000 	.word	0x400e4000

1a003dcc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003dcc:	b570      	push	{r4, r5, r6, lr}
1a003dce:	460d      	mov	r5, r1
1a003dd0:	4614      	mov	r4, r2
1a003dd2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003dd4:	f7ff fff0 	bl	1a003db8 <Chip_ADC_GetClockIndex>
1a003dd8:	f000 fb98 	bl	1a00450c <Chip_Clock_GetRate>
	if (burstMode) {
1a003ddc:	b965      	cbnz	r5, 1a003df8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a003dde:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003de2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003de6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a003dea:	0064      	lsls	r4, r4, #1
1a003dec:	fbb0 f0f4 	udiv	r0, r0, r4
1a003df0:	b2c0      	uxtb	r0, r0
1a003df2:	3801      	subs	r0, #1
	return div;
}
1a003df4:	b2c0      	uxtb	r0, r0
1a003df6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003df8:	fb04 f406 	mul.w	r4, r4, r6
1a003dfc:	e7f3      	b.n	1a003de6 <getClkDiv+0x1a>

1a003dfe <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a003dfe:	6803      	ldr	r3, [r0, #0]
1a003e00:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a003e04:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a003e08:	6001      	str	r1, [r0, #0]
}
1a003e0a:	4770      	bx	lr

1a003e0c <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a003e0c:	3104      	adds	r1, #4
1a003e0e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a003e12:	2b00      	cmp	r3, #0
1a003e14:	db01      	blt.n	1a003e1a <readAdcVal+0xe>
		return ERROR;
1a003e16:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a003e18:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a003e1a:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a003e1e:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a003e20:	2001      	movs	r0, #1
1a003e22:	4770      	bx	lr

1a003e24 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003e24:	b538      	push	{r3, r4, r5, lr}
1a003e26:	4605      	mov	r5, r0
1a003e28:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003e2a:	f7ff ffc5 	bl	1a003db8 <Chip_ADC_GetClockIndex>
1a003e2e:	2301      	movs	r3, #1
1a003e30:	461a      	mov	r2, r3
1a003e32:	4619      	mov	r1, r3
1a003e34:	f000 fb18 	bl	1a004468 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003e38:	2100      	movs	r1, #0
1a003e3a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003e3c:	4a08      	ldr	r2, [pc, #32]	; (1a003e60 <Chip_ADC_Init+0x3c>)
1a003e3e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003e40:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003e42:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003e44:	230b      	movs	r3, #11
1a003e46:	4628      	mov	r0, r5
1a003e48:	f7ff ffc0 	bl	1a003dcc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003e4c:	0200      	lsls	r0, r0, #8
1a003e4e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003e52:	7920      	ldrb	r0, [r4, #4]
1a003e54:	0440      	lsls	r0, r0, #17
1a003e56:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003e5a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003e5c:	6028      	str	r0, [r5, #0]
}
1a003e5e:	bd38      	pop	{r3, r4, r5, pc}
1a003e60:	00061a80 	.word	0x00061a80

1a003e64 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a003e64:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a003e66:	f44f 7280 	mov.w	r2, #256	; 0x100
1a003e6a:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a003e6c:	2200      	movs	r2, #0
1a003e6e:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a003e70:	f7ff ffa2 	bl	1a003db8 <Chip_ADC_GetClockIndex>
1a003e74:	f000 fb30 	bl	1a0044d8 <Chip_Clock_Disable>
}
1a003e78:	bd08      	pop	{r3, pc}

1a003e7a <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a003e7a:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a003e7c:	f7ff ffc6 	bl	1a003e0c <readAdcVal>
}
1a003e80:	bd08      	pop	{r3, pc}

1a003e82 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a003e82:	2a01      	cmp	r2, #1
1a003e84:	d00a      	beq.n	1a003e9c <Chip_ADC_ReadStatus+0x1a>
1a003e86:	b11a      	cbz	r2, 1a003e90 <Chip_ADC_ReadStatus+0xe>
1a003e88:	2a02      	cmp	r2, #2
1a003e8a:	d00f      	beq.n	1a003eac <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a003e8c:	2000      	movs	r0, #0
}
1a003e8e:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a003e90:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003e92:	40c8      	lsrs	r0, r1
1a003e94:	f000 0001 	and.w	r0, r0, #1
1a003e98:	b2c0      	uxtb	r0, r0
1a003e9a:	4770      	bx	lr
		channel += 8;
1a003e9c:	3108      	adds	r1, #8
1a003e9e:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a003ea0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003ea2:	40c8      	lsrs	r0, r1
1a003ea4:	f000 0001 	and.w	r0, r0, #1
1a003ea8:	b2c0      	uxtb	r0, r0
1a003eaa:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a003eac:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a003eae:	0c1b      	lsrs	r3, r3, #16
1a003eb0:	bf14      	ite	ne
1a003eb2:	2001      	movne	r0, #1
1a003eb4:	2000      	moveq	r0, #0
1a003eb6:	4770      	bx	lr

1a003eb8 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003eb8:	2a01      	cmp	r2, #1
1a003eba:	d007      	beq.n	1a003ecc <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a003ebc:	68c3      	ldr	r3, [r0, #12]
1a003ebe:	2201      	movs	r2, #1
1a003ec0:	fa02 f101 	lsl.w	r1, r2, r1
1a003ec4:	ea23 0101 	bic.w	r1, r3, r1
1a003ec8:	60c1      	str	r1, [r0, #12]
	}
}
1a003eca:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a003ecc:	68c3      	ldr	r3, [r0, #12]
1a003ece:	fa02 f101 	lsl.w	r1, r2, r1
1a003ed2:	4319      	orrs	r1, r3
1a003ed4:	60c1      	str	r1, [r0, #12]
1a003ed6:	4770      	bx	lr

1a003ed8 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a003ed8:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a003eda:	2901      	cmp	r1, #1
1a003edc:	d904      	bls.n	1a003ee8 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a003ede:	b932      	cbnz	r2, 1a003eee <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a003ee0:	6803      	ldr	r3, [r0, #0]
1a003ee2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a003ee6:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a003ee8:	f7ff ff89 	bl	1a003dfe <setStartMode>
}
1a003eec:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a003eee:	6803      	ldr	r3, [r0, #0]
1a003ef0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a003ef4:	6003      	str	r3, [r0, #0]
1a003ef6:	e7f7      	b.n	1a003ee8 <Chip_ADC_SetStartMode+0x10>

1a003ef8 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003ef8:	b570      	push	{r4, r5, r6, lr}
1a003efa:	4605      	mov	r5, r0
1a003efc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003efe:	6804      	ldr	r4, [r0, #0]
1a003f00:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003f04:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003f08:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003f0a:	790b      	ldrb	r3, [r1, #4]
1a003f0c:	f1c3 030b 	rsb	r3, r3, #11
1a003f10:	b2db      	uxtb	r3, r3
1a003f12:	7949      	ldrb	r1, [r1, #5]
1a003f14:	f7ff ff5a 	bl	1a003dcc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003f18:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003f1c:	7930      	ldrb	r0, [r6, #4]
1a003f1e:	0440      	lsls	r0, r0, #17
1a003f20:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003f24:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a003f26:	6028      	str	r0, [r5, #0]
}
1a003f28:	bd70      	pop	{r4, r5, r6, pc}

1a003f2a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003f2a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003f2c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003f2e:	680a      	ldr	r2, [r1, #0]
1a003f30:	f7ff ffe2 	bl	1a003ef8 <Chip_ADC_SetSampleRate>
}
1a003f34:	bd08      	pop	{r3, pc}

1a003f36 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003f36:	2a01      	cmp	r2, #1
1a003f38:	d00b      	beq.n	1a003f52 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a003f3a:	6803      	ldr	r3, [r0, #0]
1a003f3c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a003f40:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a003f42:	6803      	ldr	r3, [r0, #0]
1a003f44:	2201      	movs	r2, #1
1a003f46:	fa02 f101 	lsl.w	r1, r2, r1
1a003f4a:	ea23 0101 	bic.w	r1, r3, r1
1a003f4e:	6001      	str	r1, [r0, #0]
	}
}
1a003f50:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a003f52:	6803      	ldr	r3, [r0, #0]
1a003f54:	fa02 f101 	lsl.w	r1, r2, r1
1a003f58:	4319      	orrs	r1, r3
1a003f5a:	6001      	str	r1, [r0, #0]
1a003f5c:	4770      	bx	lr

1a003f5e <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a003f5e:	b538      	push	{r3, r4, r5, lr}
1a003f60:	4604      	mov	r4, r0
1a003f62:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a003f64:	2100      	movs	r1, #0
1a003f66:	f7ff ff4a 	bl	1a003dfe <setStartMode>
	
    if (NewState == DISABLE) {
1a003f6a:	b125      	cbz	r5, 1a003f76 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a003f6c:	6823      	ldr	r3, [r4, #0]
1a003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a003f72:	6023      	str	r3, [r4, #0]
	}
}
1a003f74:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR &= ~ADC_CR_BURST;
1a003f76:	6823      	ldr	r3, [r4, #0]
1a003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a003f7c:	6023      	str	r3, [r4, #0]
1a003f7e:	e7f9      	b.n	1a003f74 <Chip_ADC_SetBurstCmd+0x16>

1a003f80 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003f80:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003f82:	2069      	movs	r0, #105	; 0x69
1a003f84:	f000 fac2 	bl	1a00450c <Chip_Clock_GetRate>
1a003f88:	4b01      	ldr	r3, [pc, #4]	; (1a003f90 <SystemCoreClockUpdate+0x10>)
1a003f8a:	6018      	str	r0, [r3, #0]
}
1a003f8c:	bd08      	pop	{r3, pc}
1a003f8e:	bf00      	nop
1a003f90:	10002d8c 	.word	0x10002d8c

1a003f94 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003f94:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003f96:	680b      	ldr	r3, [r1, #0]
1a003f98:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003f9c:	d002      	beq.n	1a003fa4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003fa2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003fa4:	4607      	mov	r7, r0
1a003fa6:	2501      	movs	r5, #1
1a003fa8:	e03b      	b.n	1a004022 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003faa:	694b      	ldr	r3, [r1, #20]
1a003fac:	fb03 f302 	mul.w	r3, r3, r2
1a003fb0:	fbb3 f3f5 	udiv	r3, r3, r5
1a003fb4:	e014      	b.n	1a003fe0 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003fb6:	461c      	mov	r4, r3
1a003fb8:	e020      	b.n	1a003ffc <pll_calc_divs+0x68>
		return -val;
1a003fba:	f1cc 0c00 	rsb	ip, ip, #0
1a003fbe:	e020      	b.n	1a004002 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a003fc0:	3201      	adds	r2, #1
1a003fc2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003fc6:	dc26      	bgt.n	1a004016 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003fc8:	680c      	ldr	r4, [r1, #0]
1a003fca:	f014 0f40 	tst.w	r4, #64	; 0x40
1a003fce:	d0ec      	beq.n	1a003faa <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003fd0:	1c73      	adds	r3, r6, #1
1a003fd2:	fa02 fc03 	lsl.w	ip, r2, r3
1a003fd6:	694b      	ldr	r3, [r1, #20]
1a003fd8:	fb03 f30c 	mul.w	r3, r3, ip
1a003fdc:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003fe0:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a004030 <pll_calc_divs+0x9c>
1a003fe4:	4563      	cmp	r3, ip
1a003fe6:	d9eb      	bls.n	1a003fc0 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003fe8:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a004034 <pll_calc_divs+0xa0>
1a003fec:	4563      	cmp	r3, ip
1a003fee:	d812      	bhi.n	1a004016 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a003ff0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003ff4:	d1df      	bne.n	1a003fb6 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003ff6:	1c74      	adds	r4, r6, #1
1a003ff8:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a003ffc:	ebb0 0c04 	subs.w	ip, r0, r4
1a004000:	d4db      	bmi.n	1a003fba <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a004002:	4567      	cmp	r7, ip
1a004004:	d9dc      	bls.n	1a003fc0 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a004006:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a004008:	1c77      	adds	r7, r6, #1
1a00400a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00400c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00400e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a004010:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a004012:	4667      	mov	r7, ip
1a004014:	e7d4      	b.n	1a003fc0 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a004016:	3601      	adds	r6, #1
1a004018:	2e03      	cmp	r6, #3
1a00401a:	dc01      	bgt.n	1a004020 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a00401c:	2201      	movs	r2, #1
1a00401e:	e7d0      	b.n	1a003fc2 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a004020:	3501      	adds	r5, #1
1a004022:	2d04      	cmp	r5, #4
1a004024:	dc01      	bgt.n	1a00402a <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a004026:	2600      	movs	r6, #0
1a004028:	e7f6      	b.n	1a004018 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00402a:	bcf0      	pop	{r4, r5, r6, r7}
1a00402c:	4770      	bx	lr
1a00402e:	bf00      	nop
1a004030:	094c5eff 	.word	0x094c5eff
1a004034:	1312d000 	.word	0x1312d000

1a004038 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a004038:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00403a:	b099      	sub	sp, #100	; 0x64
1a00403c:	4605      	mov	r5, r0
1a00403e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a004040:	225c      	movs	r2, #92	; 0x5c
1a004042:	2100      	movs	r1, #0
1a004044:	a801      	add	r0, sp, #4
1a004046:	f001 fb86 	bl	1a005756 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00404a:	2380      	movs	r3, #128	; 0x80
1a00404c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00404e:	6963      	ldr	r3, [r4, #20]
1a004050:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a004052:	7923      	ldrb	r3, [r4, #4]
1a004054:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a004058:	4669      	mov	r1, sp
1a00405a:	4628      	mov	r0, r5
1a00405c:	f7ff ff9a 	bl	1a003f94 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a004060:	9b06      	ldr	r3, [sp, #24]
1a004062:	42ab      	cmp	r3, r5
1a004064:	d027      	beq.n	1a0040b6 <pll_get_frac+0x7e>
	if (val < 0)
1a004066:	1aeb      	subs	r3, r5, r3
1a004068:	d42e      	bmi.n	1a0040c8 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00406a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00406c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a004072:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a004074:	6963      	ldr	r3, [r4, #20]
1a004076:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a004078:	7923      	ldrb	r3, [r4, #4]
1a00407a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00407e:	a910      	add	r1, sp, #64	; 0x40
1a004080:	4628      	mov	r0, r5
1a004082:	f7ff ff87 	bl	1a003f94 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a004086:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a004088:	42ab      	cmp	r3, r5
1a00408a:	d01f      	beq.n	1a0040cc <pll_get_frac+0x94>
	if (val < 0)
1a00408c:	1aeb      	subs	r3, r5, r3
1a00408e:	d425      	bmi.n	1a0040dc <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a004090:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a004092:	4b2b      	ldr	r3, [pc, #172]	; (1a004140 <pll_get_frac+0x108>)
1a004094:	429d      	cmp	r5, r3
1a004096:	d923      	bls.n	1a0040e0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a004098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00409a:	1aed      	subs	r5, r5, r3
1a00409c:	d433      	bmi.n	1a004106 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00409e:	42ae      	cmp	r6, r5
1a0040a0:	dc3b      	bgt.n	1a00411a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0040a2:	42be      	cmp	r6, r7
1a0040a4:	dc31      	bgt.n	1a00410a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0040a6:	466d      	mov	r5, sp
1a0040a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0040aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0040ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0040b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0040b4:	e006      	b.n	1a0040c4 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0040b6:	466d      	mov	r5, sp
1a0040b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0040ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0040bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0040c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0040c4:	b019      	add	sp, #100	; 0x64
1a0040c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0040c8:	425b      	negs	r3, r3
1a0040ca:	e7ce      	b.n	1a00406a <pll_get_frac+0x32>
		*ppll = pll[2];
1a0040cc:	ad10      	add	r5, sp, #64	; 0x40
1a0040ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0040d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0040d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0040d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0040da:	e7f3      	b.n	1a0040c4 <pll_get_frac+0x8c>
		return -val;
1a0040dc:	425b      	negs	r3, r3
1a0040de:	e7d7      	b.n	1a004090 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0040e0:	2340      	movs	r3, #64	; 0x40
1a0040e2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0040e4:	6963      	ldr	r3, [r4, #20]
1a0040e6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0040e8:	a908      	add	r1, sp, #32
1a0040ea:	4628      	mov	r0, r5
1a0040ec:	f7ff ff52 	bl	1a003f94 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0040f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0040f2:	42ab      	cmp	r3, r5
1a0040f4:	d1d0      	bne.n	1a004098 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0040f6:	ad08      	add	r5, sp, #32
1a0040f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0040fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0040fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a004104:	e7de      	b.n	1a0040c4 <pll_get_frac+0x8c>
		return -val;
1a004106:	426d      	negs	r5, r5
1a004108:	e7c9      	b.n	1a00409e <pll_get_frac+0x66>
			*ppll = pll[2];
1a00410a:	ad10      	add	r5, sp, #64	; 0x40
1a00410c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00410e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004110:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004118:	e7d4      	b.n	1a0040c4 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00411a:	42af      	cmp	r7, r5
1a00411c:	db07      	blt.n	1a00412e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00411e:	ad08      	add	r5, sp, #32
1a004120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004124:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00412c:	e7ca      	b.n	1a0040c4 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00412e:	ad10      	add	r5, sp, #64	; 0x40
1a004130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004134:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00413c:	e7c2      	b.n	1a0040c4 <pll_get_frac+0x8c>
1a00413e:	bf00      	nop
1a004140:	068e7780 	.word	0x068e7780

1a004144 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a004144:	b430      	push	{r4, r5}
1a004146:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a004148:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00414a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00414c:	e000      	b.n	1a004150 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00414e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a004150:	281c      	cmp	r0, #28
1a004152:	d118      	bne.n	1a004186 <Chip_Clock_FindBaseClock+0x42>
1a004154:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a004158:	0051      	lsls	r1, r2, #1
1a00415a:	4a0c      	ldr	r2, [pc, #48]	; (1a00418c <Chip_Clock_FindBaseClock+0x48>)
1a00415c:	440a      	add	r2, r1
1a00415e:	7914      	ldrb	r4, [r2, #4]
1a004160:	4284      	cmp	r4, r0
1a004162:	d010      	beq.n	1a004186 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a004164:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a004168:	004a      	lsls	r2, r1, #1
1a00416a:	4908      	ldr	r1, [pc, #32]	; (1a00418c <Chip_Clock_FindBaseClock+0x48>)
1a00416c:	5a8a      	ldrh	r2, [r1, r2]
1a00416e:	42aa      	cmp	r2, r5
1a004170:	d8ed      	bhi.n	1a00414e <Chip_Clock_FindBaseClock+0xa>
1a004172:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a004176:	0051      	lsls	r1, r2, #1
1a004178:	4a04      	ldr	r2, [pc, #16]	; (1a00418c <Chip_Clock_FindBaseClock+0x48>)
1a00417a:	440a      	add	r2, r1
1a00417c:	8852      	ldrh	r2, [r2, #2]
1a00417e:	42aa      	cmp	r2, r5
1a004180:	d3e5      	bcc.n	1a00414e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a004182:	4620      	mov	r0, r4
1a004184:	e7e4      	b.n	1a004150 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a004186:	bc30      	pop	{r4, r5}
1a004188:	4770      	bx	lr
1a00418a:	bf00      	nop
1a00418c:	1a005b08 	.word	0x1a005b08

1a004190 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a004190:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a004192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a004196:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a004198:	4a0d      	ldr	r2, [pc, #52]	; (1a0041d0 <Chip_Clock_EnableCrystal+0x40>)
1a00419a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00419c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0041a0:	6992      	ldr	r2, [r2, #24]
1a0041a2:	428a      	cmp	r2, r1
1a0041a4:	d001      	beq.n	1a0041aa <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0041a6:	4a0a      	ldr	r2, [pc, #40]	; (1a0041d0 <Chip_Clock_EnableCrystal+0x40>)
1a0041a8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0041aa:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0041ae:	4a09      	ldr	r2, [pc, #36]	; (1a0041d4 <Chip_Clock_EnableCrystal+0x44>)
1a0041b0:	6811      	ldr	r1, [r2, #0]
1a0041b2:	4a09      	ldr	r2, [pc, #36]	; (1a0041d8 <Chip_Clock_EnableCrystal+0x48>)
1a0041b4:	4291      	cmp	r1, r2
1a0041b6:	d901      	bls.n	1a0041bc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0041b8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0041bc:	4a04      	ldr	r2, [pc, #16]	; (1a0041d0 <Chip_Clock_EnableCrystal+0x40>)
1a0041be:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0041c0:	9b01      	ldr	r3, [sp, #4]
1a0041c2:	1e5a      	subs	r2, r3, #1
1a0041c4:	9201      	str	r2, [sp, #4]
1a0041c6:	2b00      	cmp	r3, #0
1a0041c8:	d1fa      	bne.n	1a0041c0 <Chip_Clock_EnableCrystal+0x30>
}
1a0041ca:	b002      	add	sp, #8
1a0041cc:	4770      	bx	lr
1a0041ce:	bf00      	nop
1a0041d0:	40050000 	.word	0x40050000
1a0041d4:	1a005a70 	.word	0x1a005a70
1a0041d8:	01312cff 	.word	0x01312cff

1a0041dc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0041dc:	3012      	adds	r0, #18
1a0041de:	4b05      	ldr	r3, [pc, #20]	; (1a0041f4 <Chip_Clock_GetDividerSource+0x18>)
1a0041e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0041e4:	f010 0f01 	tst.w	r0, #1
1a0041e8:	d102      	bne.n	1a0041f0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0041ea:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0041ee:	4770      	bx	lr
		return CLKINPUT_PD;
1a0041f0:	2011      	movs	r0, #17
}
1a0041f2:	4770      	bx	lr
1a0041f4:	40050000 	.word	0x40050000

1a0041f8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0041f8:	f100 0212 	add.w	r2, r0, #18
1a0041fc:	4b03      	ldr	r3, [pc, #12]	; (1a00420c <Chip_Clock_GetDividerDivisor+0x14>)
1a0041fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a004202:	4b03      	ldr	r3, [pc, #12]	; (1a004210 <Chip_Clock_GetDividerDivisor+0x18>)
1a004204:	5c18      	ldrb	r0, [r3, r0]
}
1a004206:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00420a:	4770      	bx	lr
1a00420c:	40050000 	.word	0x40050000
1a004210:	1a005b00 	.word	0x1a005b00

1a004214 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a004214:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a004216:	2810      	cmp	r0, #16
1a004218:	d80a      	bhi.n	1a004230 <Chip_Clock_GetClockInputHz+0x1c>
1a00421a:	e8df f000 	tbb	[pc, r0]
1a00421e:	0b42      	.short	0x0b42
1a004220:	091f160d 	.word	0x091f160d
1a004224:	2b282522 	.word	0x2b282522
1a004228:	322e0909 	.word	0x322e0909
1a00422c:	3a36      	.short	0x3a36
1a00422e:	3e          	.byte	0x3e
1a00422f:	00          	.byte	0x00
	uint32_t rate = 0;
1a004230:	2000      	movs	r0, #0
1a004232:	e038      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a004234:	481e      	ldr	r0, [pc, #120]	; (1a0042b0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a004236:	e036      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a004238:	4b1e      	ldr	r3, [pc, #120]	; (1a0042b4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00423a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00423e:	f003 0307 	and.w	r3, r3, #7
1a004242:	2b04      	cmp	r3, #4
1a004244:	d130      	bne.n	1a0042a8 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a004246:	2000      	movs	r0, #0
1a004248:	e02d      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00424a:	4b1a      	ldr	r3, [pc, #104]	; (1a0042b4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00424c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a004250:	f003 0307 	and.w	r3, r3, #7
1a004254:	2b04      	cmp	r3, #4
1a004256:	d029      	beq.n	1a0042ac <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a004258:	4817      	ldr	r0, [pc, #92]	; (1a0042b8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00425a:	e024      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00425c:	4b17      	ldr	r3, [pc, #92]	; (1a0042bc <Chip_Clock_GetClockInputHz+0xa8>)
1a00425e:	6818      	ldr	r0, [r3, #0]
		break;
1a004260:	e021      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a004262:	4b17      	ldr	r3, [pc, #92]	; (1a0042c0 <Chip_Clock_GetClockInputHz+0xac>)
1a004264:	6818      	ldr	r0, [r3, #0]
		break;
1a004266:	e01e      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a004268:	4b16      	ldr	r3, [pc, #88]	; (1a0042c4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00426a:	6818      	ldr	r0, [r3, #0]
		break;
1a00426c:	e01b      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00426e:	4b15      	ldr	r3, [pc, #84]	; (1a0042c4 <Chip_Clock_GetClockInputHz+0xb0>)
1a004270:	6858      	ldr	r0, [r3, #4]
		break;
1a004272:	e018      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a004274:	f000 f86a 	bl	1a00434c <Chip_Clock_GetMainPLLHz>
		break;
1a004278:	e015      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00427a:	2100      	movs	r1, #0
1a00427c:	f000 f89c 	bl	1a0043b8 <Chip_Clock_GetDivRate>
		break;
1a004280:	e011      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a004282:	2101      	movs	r1, #1
1a004284:	f000 f898 	bl	1a0043b8 <Chip_Clock_GetDivRate>
		break;
1a004288:	e00d      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00428a:	2102      	movs	r1, #2
1a00428c:	f000 f894 	bl	1a0043b8 <Chip_Clock_GetDivRate>
		break;
1a004290:	e009      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a004292:	2103      	movs	r1, #3
1a004294:	f000 f890 	bl	1a0043b8 <Chip_Clock_GetDivRate>
		break;
1a004298:	e005      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00429a:	2104      	movs	r1, #4
1a00429c:	f000 f88c 	bl	1a0043b8 <Chip_Clock_GetDivRate>
		break;
1a0042a0:	e001      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0042a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0042a6:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0042a8:	4803      	ldr	r0, [pc, #12]	; (1a0042b8 <Chip_Clock_GetClockInputHz+0xa4>)
1a0042aa:	e7fc      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0042ac:	4806      	ldr	r0, [pc, #24]	; (1a0042c8 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0042ae:	e7fa      	b.n	1a0042a6 <Chip_Clock_GetClockInputHz+0x92>
1a0042b0:	00b71b00 	.word	0x00b71b00
1a0042b4:	40043000 	.word	0x40043000
1a0042b8:	017d7840 	.word	0x017d7840
1a0042bc:	1a005a44 	.word	0x1a005a44
1a0042c0:	1a005a70 	.word	0x1a005a70
1a0042c4:	10002ca0 	.word	0x10002ca0
1a0042c8:	02faf080 	.word	0x02faf080

1a0042cc <Chip_Clock_CalcMainPLLValue>:
{
1a0042cc:	b538      	push	{r3, r4, r5, lr}
1a0042ce:	4605      	mov	r5, r0
1a0042d0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0042d2:	7908      	ldrb	r0, [r1, #4]
1a0042d4:	f7ff ff9e 	bl	1a004214 <Chip_Clock_GetClockInputHz>
1a0042d8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0042da:	4b19      	ldr	r3, [pc, #100]	; (1a004340 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0042dc:	442b      	add	r3, r5
1a0042de:	4a19      	ldr	r2, [pc, #100]	; (1a004344 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0042e0:	4293      	cmp	r3, r2
1a0042e2:	d821      	bhi.n	1a004328 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0042e4:	b318      	cbz	r0, 1a00432e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0042e6:	2380      	movs	r3, #128	; 0x80
1a0042e8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0042ea:	2300      	movs	r3, #0
1a0042ec:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0042ee:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0042f0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0042f4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0042f6:	4a14      	ldr	r2, [pc, #80]	; (1a004348 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0042f8:	4295      	cmp	r5, r2
1a0042fa:	d903      	bls.n	1a004304 <Chip_Clock_CalcMainPLLValue+0x38>
1a0042fc:	fb03 f000 	mul.w	r0, r3, r0
1a004300:	42a8      	cmp	r0, r5
1a004302:	d007      	beq.n	1a004314 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a004304:	4621      	mov	r1, r4
1a004306:	4628      	mov	r0, r5
1a004308:	f7ff fe96 	bl	1a004038 <pll_get_frac>
		if (!ppll->nsel) {
1a00430c:	68a3      	ldr	r3, [r4, #8]
1a00430e:	b18b      	cbz	r3, 1a004334 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a004310:	3b01      	subs	r3, #1
1a004312:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a004314:	6923      	ldr	r3, [r4, #16]
1a004316:	b183      	cbz	r3, 1a00433a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a004318:	68e2      	ldr	r2, [r4, #12]
1a00431a:	b10a      	cbz	r2, 1a004320 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00431c:	3a01      	subs	r2, #1
1a00431e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a004320:	3b01      	subs	r3, #1
1a004322:	6123      	str	r3, [r4, #16]
	return 0;
1a004324:	2000      	movs	r0, #0
}
1a004326:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a004328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00432c:	e7fb      	b.n	1a004326 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00432e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004332:	e7f8      	b.n	1a004326 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a004334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004338:	e7f5      	b.n	1a004326 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00433a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00433e:	e7f2      	b.n	1a004326 <Chip_Clock_CalcMainPLLValue+0x5a>
1a004340:	ff6b3a10 	.word	0xff6b3a10
1a004344:	0b940510 	.word	0x0b940510
1a004348:	094c5eff 	.word	0x094c5eff

1a00434c <Chip_Clock_GetMainPLLHz>:
{
1a00434c:	b530      	push	{r4, r5, lr}
1a00434e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a004350:	4d17      	ldr	r5, [pc, #92]	; (1a0043b0 <Chip_Clock_GetMainPLLHz+0x64>)
1a004352:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a004354:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a004358:	f7ff ff5c 	bl	1a004214 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00435c:	4b15      	ldr	r3, [pc, #84]	; (1a0043b4 <Chip_Clock_GetMainPLLHz+0x68>)
1a00435e:	681b      	ldr	r3, [r3, #0]
1a004360:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a004362:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a004364:	f013 0f01 	tst.w	r3, #1
1a004368:	d01f      	beq.n	1a0043aa <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a00436a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00436e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a004372:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a004376:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00437a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00437c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00437e:	f10d 0c08 	add.w	ip, sp, #8
1a004382:	4461      	add	r1, ip
1a004384:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a004388:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00438c:	d108      	bne.n	1a0043a0 <Chip_Clock_GetMainPLLHz+0x54>
1a00438e:	b93d      	cbnz	r5, 1a0043a0 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a004390:	0049      	lsls	r1, r1, #1
1a004392:	fbb3 f3f1 	udiv	r3, r3, r1
1a004396:	fbb0 f0f2 	udiv	r0, r0, r2
1a00439a:	fb00 f003 	mul.w	r0, r0, r3
1a00439e:	e005      	b.n	1a0043ac <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0043a0:	fbb0 f0f2 	udiv	r0, r0, r2
1a0043a4:	fb03 f000 	mul.w	r0, r3, r0
1a0043a8:	e000      	b.n	1a0043ac <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0043aa:	2000      	movs	r0, #0
}
1a0043ac:	b003      	add	sp, #12
1a0043ae:	bd30      	pop	{r4, r5, pc}
1a0043b0:	40050000 	.word	0x40050000
1a0043b4:	1a005afc 	.word	0x1a005afc

1a0043b8 <Chip_Clock_GetDivRate>:
{
1a0043b8:	b538      	push	{r3, r4, r5, lr}
1a0043ba:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0043bc:	4608      	mov	r0, r1
1a0043be:	f7ff ff0d 	bl	1a0041dc <Chip_Clock_GetDividerSource>
1a0043c2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0043c4:	4620      	mov	r0, r4
1a0043c6:	f7ff ff17 	bl	1a0041f8 <Chip_Clock_GetDividerDivisor>
1a0043ca:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0043cc:	4628      	mov	r0, r5
1a0043ce:	f7ff ff21 	bl	1a004214 <Chip_Clock_GetClockInputHz>
1a0043d2:	3401      	adds	r4, #1
}
1a0043d4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0043d8:	bd38      	pop	{r3, r4, r5, pc}
1a0043da:	Address 0x000000001a0043da is out of bounds.


1a0043dc <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0043dc:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0043de:	f100 0416 	add.w	r4, r0, #22
1a0043e2:	00a4      	lsls	r4, r4, #2
1a0043e4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0043e8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0043ec:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0043ee:	281b      	cmp	r0, #27
1a0043f0:	d813      	bhi.n	1a00441a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0043f2:	2911      	cmp	r1, #17
1a0043f4:	d01a      	beq.n	1a00442c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0043f6:	4d0e      	ldr	r5, [pc, #56]	; (1a004430 <Chip_Clock_SetBaseClock+0x54>)
1a0043f8:	4025      	ands	r5, r4

			if (autoblocken) {
1a0043fa:	b10a      	cbz	r2, 1a004400 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0043fc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a004400:	b10b      	cbz	r3, 1a004406 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a004402:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a004406:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00440a:	3016      	adds	r0, #22
1a00440c:	0080      	lsls	r0, r0, #2
1a00440e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a004412:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004416:	6045      	str	r5, [r0, #4]
1a004418:	e008      	b.n	1a00442c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00441a:	f044 0401 	orr.w	r4, r4, #1
1a00441e:	3016      	adds	r0, #22
1a004420:	0080      	lsls	r0, r0, #2
1a004422:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a004426:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00442a:	6044      	str	r4, [r0, #4]
	}
}
1a00442c:	bc30      	pop	{r4, r5}
1a00442e:	4770      	bx	lr
1a004430:	e0fff7fe 	.word	0xe0fff7fe

1a004434 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a004434:	281b      	cmp	r0, #27
1a004436:	d80c      	bhi.n	1a004452 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a004438:	3016      	adds	r0, #22
1a00443a:	0080      	lsls	r0, r0, #2
1a00443c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a004440:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004444:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a004446:	f010 0f01 	tst.w	r0, #1
1a00444a:	d104      	bne.n	1a004456 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00444c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a004450:	4770      	bx	lr
		return CLKINPUT_PD;
1a004452:	2011      	movs	r0, #17
1a004454:	4770      	bx	lr
		return CLKINPUT_PD;
1a004456:	2011      	movs	r0, #17
}
1a004458:	4770      	bx	lr

1a00445a <Chip_Clock_GetBaseClocktHz>:
{
1a00445a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00445c:	f7ff ffea 	bl	1a004434 <Chip_Clock_GetBaseClock>
1a004460:	f7ff fed8 	bl	1a004214 <Chip_Clock_GetClockInputHz>
}
1a004464:	bd08      	pop	{r3, pc}
1a004466:	Address 0x000000001a004466 is out of bounds.


1a004468 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a004468:	b969      	cbnz	r1, 1a004486 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00446a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00446c:	b10a      	cbz	r2, 1a004472 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00446e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a004472:	2b02      	cmp	r3, #2
1a004474:	d009      	beq.n	1a00448a <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a004476:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00447a:	d209      	bcs.n	1a004490 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00447c:	3020      	adds	r0, #32
1a00447e:	4b07      	ldr	r3, [pc, #28]	; (1a00449c <Chip_Clock_EnableOpts+0x34>)
1a004480:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a004484:	4770      	bx	lr
		reg |= (1 << 1);
1a004486:	2103      	movs	r1, #3
1a004488:	e7f0      	b.n	1a00446c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00448a:	f041 0120 	orr.w	r1, r1, #32
1a00448e:	e7f2      	b.n	1a004476 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a004490:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a004494:	4b02      	ldr	r3, [pc, #8]	; (1a0044a0 <Chip_Clock_EnableOpts+0x38>)
1a004496:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00449a:	4770      	bx	lr
1a00449c:	40051000 	.word	0x40051000
1a0044a0:	40052000 	.word	0x40052000

1a0044a4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0044a4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0044a8:	d208      	bcs.n	1a0044bc <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0044aa:	4a09      	ldr	r2, [pc, #36]	; (1a0044d0 <Chip_Clock_Enable+0x2c>)
1a0044ac:	3020      	adds	r0, #32
1a0044ae:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0044b2:	f043 0301 	orr.w	r3, r3, #1
1a0044b6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0044ba:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0044bc:	4a05      	ldr	r2, [pc, #20]	; (1a0044d4 <Chip_Clock_Enable+0x30>)
1a0044be:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0044c2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0044c6:	f043 0301 	orr.w	r3, r3, #1
1a0044ca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0044ce:	4770      	bx	lr
1a0044d0:	40051000 	.word	0x40051000
1a0044d4:	40052000 	.word	0x40052000

1a0044d8 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a0044d8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0044dc:	d208      	bcs.n	1a0044f0 <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a0044de:	4a09      	ldr	r2, [pc, #36]	; (1a004504 <Chip_Clock_Disable+0x2c>)
1a0044e0:	3020      	adds	r0, #32
1a0044e2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0044e6:	f023 0301 	bic.w	r3, r3, #1
1a0044ea:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0044ee:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a0044f0:	4a05      	ldr	r2, [pc, #20]	; (1a004508 <Chip_Clock_Disable+0x30>)
1a0044f2:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0044f6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0044fa:	f023 0301 	bic.w	r3, r3, #1
1a0044fe:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a004502:	4770      	bx	lr
1a004504:	40051000 	.word	0x40051000
1a004508:	40052000 	.word	0x40052000

1a00450c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00450c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00450e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004512:	d309      	bcc.n	1a004528 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a004514:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a004518:	4a0d      	ldr	r2, [pc, #52]	; (1a004550 <Chip_Clock_GetRate+0x44>)
1a00451a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00451e:	f014 0f01 	tst.w	r4, #1
1a004522:	d107      	bne.n	1a004534 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a004524:	2000      	movs	r0, #0
	}

	return rate;
}
1a004526:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a004528:	f100 0320 	add.w	r3, r0, #32
1a00452c:	4a09      	ldr	r2, [pc, #36]	; (1a004554 <Chip_Clock_GetRate+0x48>)
1a00452e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a004532:	e7f4      	b.n	1a00451e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a004534:	f7ff fe06 	bl	1a004144 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a004538:	f7ff ff8f 	bl	1a00445a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00453c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a004540:	d103      	bne.n	1a00454a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a004542:	2301      	movs	r3, #1
		rate = rate / div;
1a004544:	fbb0 f0f3 	udiv	r0, r0, r3
1a004548:	e7ed      	b.n	1a004526 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00454a:	2302      	movs	r3, #2
1a00454c:	e7fa      	b.n	1a004544 <Chip_Clock_GetRate+0x38>
1a00454e:	bf00      	nop
1a004550:	40052000 	.word	0x40052000
1a004554:	40051000 	.word	0x40051000

1a004558 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a004558:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00455a:	6843      	ldr	r3, [r0, #4]
1a00455c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004560:	2b30      	cmp	r3, #48	; 0x30
1a004562:	d04a      	beq.n	1a0045fa <Chip_I2CM_XferHandler+0xa2>
1a004564:	d90f      	bls.n	1a004586 <Chip_I2CM_XferHandler+0x2e>
1a004566:	2b48      	cmp	r3, #72	; 0x48
1a004568:	d06a      	beq.n	1a004640 <Chip_I2CM_XferHandler+0xe8>
1a00456a:	d83a      	bhi.n	1a0045e2 <Chip_I2CM_XferHandler+0x8a>
1a00456c:	2b38      	cmp	r3, #56	; 0x38
1a00456e:	d06b      	beq.n	1a004648 <Chip_I2CM_XferHandler+0xf0>
1a004570:	2b40      	cmp	r3, #64	; 0x40
1a004572:	d13e      	bne.n	1a0045f2 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004574:	88ca      	ldrh	r2, [r1, #6]
1a004576:	2a01      	cmp	r2, #1
1a004578:	d95a      	bls.n	1a004630 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a00457a:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a00457c:	b9b2      	cbnz	r2, 1a0045ac <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a00457e:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a004580:	f023 0310 	bic.w	r3, r3, #16
1a004584:	e012      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004586:	2b10      	cmp	r3, #16
1a004588:	d007      	beq.n	1a00459a <Chip_I2CM_XferHandler+0x42>
1a00458a:	d81c      	bhi.n	1a0045c6 <Chip_I2CM_XferHandler+0x6e>
1a00458c:	b91b      	cbnz	r3, 1a004596 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a00458e:	2303      	movs	r3, #3
1a004590:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004592:	232c      	movs	r3, #44	; 0x2c
        break;
1a004594:	e00a      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004596:	2b08      	cmp	r3, #8
1a004598:	d12b      	bne.n	1a0045f2 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00459a:	780a      	ldrb	r2, [r1, #0]
1a00459c:	888b      	ldrh	r3, [r1, #4]
1a00459e:	fab3 f383 	clz	r3, r3
1a0045a2:	095b      	lsrs	r3, r3, #5
1a0045a4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0045a8:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0045aa:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0045ac:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0045b0:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a0045b2:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0045b6:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0045b8:	8848      	ldrh	r0, [r1, #2]
1a0045ba:	38ff      	subs	r0, #255	; 0xff
1a0045bc:	bf18      	it	ne
1a0045be:	2001      	movne	r0, #1
}
1a0045c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0045c4:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0045c6:	2b20      	cmp	r3, #32
1a0045c8:	d017      	beq.n	1a0045fa <Chip_I2CM_XferHandler+0xa2>
1a0045ca:	2b28      	cmp	r3, #40	; 0x28
1a0045cc:	d001      	beq.n	1a0045d2 <Chip_I2CM_XferHandler+0x7a>
1a0045ce:	2b18      	cmp	r3, #24
1a0045d0:	d10f      	bne.n	1a0045f2 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a0045d2:	888b      	ldrh	r3, [r1, #4]
1a0045d4:	b9cb      	cbnz	r3, 1a00460a <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a0045d6:	88cb      	ldrh	r3, [r1, #6]
1a0045d8:	2b00      	cmp	r3, #0
1a0045da:	d139      	bne.n	1a004650 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0045dc:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0045de:	232c      	movs	r3, #44	; 0x2c
1a0045e0:	e7e4      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0045e2:	2b58      	cmp	r3, #88	; 0x58
1a0045e4:	d01b      	beq.n	1a00461e <Chip_I2CM_XferHandler+0xc6>
1a0045e6:	2bf8      	cmp	r3, #248	; 0xf8
1a0045e8:	d101      	bne.n	1a0045ee <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0045ea:	2000      	movs	r0, #0
1a0045ec:	e7e8      	b.n	1a0045c0 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0045ee:	2b50      	cmp	r3, #80	; 0x50
1a0045f0:	d015      	beq.n	1a00461e <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0045f2:	2301      	movs	r3, #1
1a0045f4:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0045f6:	232c      	movs	r3, #44	; 0x2c
        break;
1a0045f8:	e7d8      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0045fa:	784b      	ldrb	r3, [r1, #1]
1a0045fc:	f013 0f01 	tst.w	r3, #1
1a004600:	d1e7      	bne.n	1a0045d2 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a004602:	2302      	movs	r3, #2
1a004604:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a004606:	232c      	movs	r3, #44	; 0x2c
			break;
1a004608:	e7d0      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a00460a:	688b      	ldr	r3, [r1, #8]
1a00460c:	1c5a      	adds	r2, r3, #1
1a00460e:	608a      	str	r2, [r1, #8]
1a004610:	781b      	ldrb	r3, [r3, #0]
1a004612:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a004614:	888b      	ldrh	r3, [r1, #4]
1a004616:	3b01      	subs	r3, #1
1a004618:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a00461a:	233c      	movs	r3, #60	; 0x3c
1a00461c:	e7c6      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a00461e:	6882      	ldr	r2, [r0, #8]
1a004620:	68cb      	ldr	r3, [r1, #12]
1a004622:	1c5c      	adds	r4, r3, #1
1a004624:	60cc      	str	r4, [r1, #12]
1a004626:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a004628:	88cb      	ldrh	r3, [r1, #6]
1a00462a:	3b01      	subs	r3, #1
1a00462c:	80cb      	strh	r3, [r1, #6]
1a00462e:	e7a1      	b.n	1a004574 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004630:	784b      	ldrb	r3, [r1, #1]
1a004632:	f013 0f02 	tst.w	r3, #2
1a004636:	d101      	bne.n	1a00463c <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a004638:	233c      	movs	r3, #60	; 0x3c
1a00463a:	e79f      	b.n	1a00457c <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a00463c:	2338      	movs	r3, #56	; 0x38
1a00463e:	e79d      	b.n	1a00457c <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a004640:	2304      	movs	r3, #4
1a004642:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004644:	232c      	movs	r3, #44	; 0x2c
		break;
1a004646:	e7b1      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a004648:	2305      	movs	r3, #5
1a00464a:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a00464c:	233c      	movs	r3, #60	; 0x3c
		break;
1a00464e:	e7ad      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a004650:	231c      	movs	r3, #28
1a004652:	e7ab      	b.n	1a0045ac <Chip_I2CM_XferHandler+0x54>

1a004654 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a004654:	23ff      	movs	r3, #255	; 0xff
1a004656:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a004658:	232c      	movs	r3, #44	; 0x2c
1a00465a:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a00465c:	2360      	movs	r3, #96	; 0x60
1a00465e:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a004660:	4770      	bx	lr

1a004662 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a004662:	b538      	push	{r3, r4, r5, lr}
1a004664:	4604      	mov	r4, r0
1a004666:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a004668:	f7ff fff4 	bl	1a004654 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a00466c:	2000      	movs	r0, #0

	while (ret == 0) {
1a00466e:	e007      	b.n	1a004680 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a004670:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a004672:	f013 0f08 	tst.w	r3, #8
1a004676:	d0fb      	beq.n	1a004670 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a004678:	4629      	mov	r1, r5
1a00467a:	4620      	mov	r0, r4
1a00467c:	f7ff ff6c 	bl	1a004558 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a004680:	2800      	cmp	r0, #0
1a004682:	d0f5      	beq.n	1a004670 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a004684:	bd38      	pop	{r3, r4, r5, pc}
1a004686:	Address 0x000000001a004686 is out of bounds.


1a004688 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a004688:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a00468a:	4b0f      	ldr	r3, [pc, #60]	; (1a0046c8 <fpuInit+0x40>)
1a00468c:	681b      	ldr	r3, [r3, #0]
1a00468e:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a004690:	4b0e      	ldr	r3, [pc, #56]	; (1a0046cc <fpuInit+0x44>)
1a004692:	681b      	ldr	r3, [r3, #0]
1a004694:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a004696:	9a02      	ldr	r2, [sp, #8]
1a004698:	4b0d      	ldr	r3, [pc, #52]	; (1a0046d0 <fpuInit+0x48>)
1a00469a:	429a      	cmp	r2, r3
1a00469c:	d00c      	beq.n	1a0046b8 <fpuInit+0x30>
1a00469e:	2300      	movs	r3, #0

	if (vfpPresent) {
1a0046a0:	b143      	cbz	r3, 1a0046b4 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a0046a2:	4a0c      	ldr	r2, [pc, #48]	; (1a0046d4 <fpuInit+0x4c>)
1a0046a4:	6813      	ldr	r3, [r2, #0]
1a0046a6:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0046a8:	9b03      	ldr	r3, [sp, #12]
1a0046aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0046ae:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0046b0:	9b03      	ldr	r3, [sp, #12]
1a0046b2:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0046b4:	b004      	add	sp, #16
1a0046b6:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0046b8:	9a01      	ldr	r2, [sp, #4]
1a0046ba:	4b07      	ldr	r3, [pc, #28]	; (1a0046d8 <fpuInit+0x50>)
1a0046bc:	429a      	cmp	r2, r3
1a0046be:	d001      	beq.n	1a0046c4 <fpuInit+0x3c>
1a0046c0:	2300      	movs	r3, #0
1a0046c2:	e7ed      	b.n	1a0046a0 <fpuInit+0x18>
1a0046c4:	2301      	movs	r3, #1
1a0046c6:	e7eb      	b.n	1a0046a0 <fpuInit+0x18>
1a0046c8:	e000ef40 	.word	0xe000ef40
1a0046cc:	e000ef44 	.word	0xe000ef44
1a0046d0:	10110021 	.word	0x10110021
1a0046d4:	e000ed88 	.word	0xe000ed88
1a0046d8:	11000011 	.word	0x11000011

1a0046dc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0046dc:	4770      	bx	lr
1a0046de:	Address 0x000000001a0046de is out of bounds.


1a0046e0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0046e0:	b570      	push	{r4, r5, r6, lr}
1a0046e2:	b08a      	sub	sp, #40	; 0x28
1a0046e4:	4605      	mov	r5, r0
1a0046e6:	460e      	mov	r6, r1
1a0046e8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0046ea:	f242 7310 	movw	r3, #10000	; 0x2710
1a0046ee:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0046f0:	2806      	cmp	r0, #6
1a0046f2:	d018      	beq.n	1a004726 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0046f4:	2300      	movs	r3, #0
1a0046f6:	2201      	movs	r2, #1
1a0046f8:	4629      	mov	r1, r5
1a0046fa:	2004      	movs	r0, #4
1a0046fc:	f7ff fe6e 	bl	1a0043dc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a004700:	4a49      	ldr	r2, [pc, #292]	; (1a004828 <Chip_SetupCoreClock+0x148>)
1a004702:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a004704:	f043 0301 	orr.w	r3, r3, #1
1a004708:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00470a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00470e:	a901      	add	r1, sp, #4
1a004710:	4630      	mov	r0, r6
1a004712:	f7ff fddb 	bl	1a0042cc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a004716:	4b45      	ldr	r3, [pc, #276]	; (1a00482c <Chip_SetupCoreClock+0x14c>)
1a004718:	429e      	cmp	r6, r3
1a00471a:	d916      	bls.n	1a00474a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00471c:	9b01      	ldr	r3, [sp, #4]
1a00471e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a004722:	d003      	beq.n	1a00472c <Chip_SetupCoreClock+0x4c>
1a004724:	e7fe      	b.n	1a004724 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a004726:	f7ff fd33 	bl	1a004190 <Chip_Clock_EnableCrystal>
1a00472a:	e7e3      	b.n	1a0046f4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a00472c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004730:	d005      	beq.n	1a00473e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a004732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a004736:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a004738:	2500      	movs	r5, #0
			direct = 1;
1a00473a:	2601      	movs	r6, #1
1a00473c:	e007      	b.n	1a00474e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00473e:	9b04      	ldr	r3, [sp, #16]
1a004740:	3301      	adds	r3, #1
1a004742:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a004744:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a004746:	2600      	movs	r6, #0
1a004748:	e001      	b.n	1a00474e <Chip_SetupCoreClock+0x6e>
1a00474a:	2500      	movs	r5, #0
1a00474c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00474e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a004752:	9b01      	ldr	r3, [sp, #4]
1a004754:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a004758:	9a05      	ldr	r2, [sp, #20]
1a00475a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00475e:	9a03      	ldr	r2, [sp, #12]
1a004760:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a004764:	9a04      	ldr	r2, [sp, #16]
1a004766:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00476a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00476e:	4a2e      	ldr	r2, [pc, #184]	; (1a004828 <Chip_SetupCoreClock+0x148>)
1a004770:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a004772:	4b2d      	ldr	r3, [pc, #180]	; (1a004828 <Chip_SetupCoreClock+0x148>)
1a004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a004776:	f013 0f01 	tst.w	r3, #1
1a00477a:	d0fa      	beq.n	1a004772 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00477c:	2300      	movs	r3, #0
1a00477e:	2201      	movs	r2, #1
1a004780:	2109      	movs	r1, #9
1a004782:	2004      	movs	r0, #4
1a004784:	f7ff fe2a 	bl	1a0043dc <Chip_Clock_SetBaseClock>

	if (direct) {
1a004788:	b1fe      	cbz	r6, 1a0047ca <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00478a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00478e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a004790:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004792:	1e5a      	subs	r2, r3, #1
1a004794:	9209      	str	r2, [sp, #36]	; 0x24
1a004796:	2b00      	cmp	r3, #0
1a004798:	d1fa      	bne.n	1a004790 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00479a:	9b01      	ldr	r3, [sp, #4]
1a00479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0047a0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0047a2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0047a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0047aa:	9a05      	ldr	r2, [sp, #20]
1a0047ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0047b0:	9a03      	ldr	r2, [sp, #12]
1a0047b2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0047b6:	9a04      	ldr	r2, [sp, #16]
1a0047b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0047bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0047c0:	4a19      	ldr	r2, [pc, #100]	; (1a004828 <Chip_SetupCoreClock+0x148>)
1a0047c2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0047c4:	b36c      	cbz	r4, 1a004822 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0047c6:	2400      	movs	r4, #0
1a0047c8:	e029      	b.n	1a00481e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0047ca:	2d00      	cmp	r5, #0
1a0047cc:	d0fa      	beq.n	1a0047c4 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0047ce:	f242 7310 	movw	r3, #10000	; 0x2710
1a0047d2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0047d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0047d6:	1e5a      	subs	r2, r3, #1
1a0047d8:	9209      	str	r2, [sp, #36]	; 0x24
1a0047da:	2b00      	cmp	r3, #0
1a0047dc:	d1fa      	bne.n	1a0047d4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0047de:	9b04      	ldr	r3, [sp, #16]
1a0047e0:	1e5a      	subs	r2, r3, #1
1a0047e2:	9204      	str	r2, [sp, #16]
1a0047e4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0047e8:	9b01      	ldr	r3, [sp, #4]
1a0047ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0047ee:	9905      	ldr	r1, [sp, #20]
1a0047f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0047f4:	9903      	ldr	r1, [sp, #12]
1a0047f6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0047fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0047fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004802:	4a09      	ldr	r2, [pc, #36]	; (1a004828 <Chip_SetupCoreClock+0x148>)
1a004804:	6453      	str	r3, [r2, #68]	; 0x44
1a004806:	e7dd      	b.n	1a0047c4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a004808:	4809      	ldr	r0, [pc, #36]	; (1a004830 <Chip_SetupCoreClock+0x150>)
1a00480a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00480e:	78cb      	ldrb	r3, [r1, #3]
1a004810:	788a      	ldrb	r2, [r1, #2]
1a004812:	7849      	ldrb	r1, [r1, #1]
1a004814:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a004818:	f7ff fde0 	bl	1a0043dc <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00481c:	3401      	adds	r4, #1
1a00481e:	2c11      	cmp	r4, #17
1a004820:	d9f2      	bls.n	1a004808 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a004822:	b00a      	add	sp, #40	; 0x28
1a004824:	bd70      	pop	{r4, r5, r6, pc}
1a004826:	bf00      	nop
1a004828:	40050000 	.word	0x40050000
1a00482c:	068e7780 	.word	0x068e7780
1a004830:	1a005b74 	.word	0x1a005b74

1a004834 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a004834:	2901      	cmp	r1, #1
1a004836:	d000      	beq.n	1a00483a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a004838:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a00483a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00483e:	0082      	lsls	r2, r0, #2
1a004840:	4b03      	ldr	r3, [pc, #12]	; (1a004850 <Chip_I2C_EventHandler+0x1c>)
1a004842:	4413      	add	r3, r2
1a004844:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a004846:	7d13      	ldrb	r3, [r2, #20]
1a004848:	b2db      	uxtb	r3, r3
1a00484a:	2b04      	cmp	r3, #4
1a00484c:	d0fb      	beq.n	1a004846 <Chip_I2C_EventHandler+0x12>
1a00484e:	e7f3      	b.n	1a004838 <Chip_I2C_EventHandler+0x4>
1a004850:	10000094 	.word	0x10000094

1a004854 <handleMasterXferState>:
{
1a004854:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a004856:	6843      	ldr	r3, [r0, #4]
1a004858:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a00485c:	2b58      	cmp	r3, #88	; 0x58
1a00485e:	d87e      	bhi.n	1a00495e <handleMasterXferState+0x10a>
1a004860:	e8df f003 	tbb	[pc, r3]
1a004864:	7d7d7d79 	.word	0x7d7d7d79
1a004868:	7d7d7d7d 	.word	0x7d7d7d7d
1a00486c:	7d7d7d2f 	.word	0x7d7d7d2f
1a004870:	7d7d7d7d 	.word	0x7d7d7d7d
1a004874:	7d7d7d2f 	.word	0x7d7d7d2f
1a004878:	7d7d7d7d 	.word	0x7d7d7d7d
1a00487c:	7d7d7d39 	.word	0x7d7d7d39
1a004880:	7d7d7d7d 	.word	0x7d7d7d7d
1a004884:	7d7d7d6d 	.word	0x7d7d7d6d
1a004888:	7d7d7d7d 	.word	0x7d7d7d7d
1a00488c:	7d7d7d39 	.word	0x7d7d7d39
1a004890:	7d7d7d7d 	.word	0x7d7d7d7d
1a004894:	7d7d7d71 	.word	0x7d7d7d71
1a004898:	7d7d7d7d 	.word	0x7d7d7d7d
1a00489c:	7d7d7d75 	.word	0x7d7d7d75
1a0048a0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0048a4:	7d7d7d6b 	.word	0x7d7d7d6b
1a0048a8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0048ac:	7d7d7d6d 	.word	0x7d7d7d6d
1a0048b0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0048b4:	7d7d7d2d 	.word	0x7d7d7d2d
1a0048b8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0048bc:	4f          	.byte	0x4f
1a0048bd:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a0048be:	233c      	movs	r3, #60	; 0x3c
1a0048c0:	e020      	b.n	1a004904 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0048c2:	780a      	ldrb	r2, [r1, #0]
1a0048c4:	688b      	ldr	r3, [r1, #8]
1a0048c6:	fab3 f383 	clz	r3, r3
1a0048ca:	095b      	lsrs	r3, r3, #5
1a0048cc:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0048d0:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0048d2:	233c      	movs	r3, #60	; 0x3c
		break;
1a0048d4:	e023      	b.n	1a00491e <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a0048d6:	688b      	ldr	r3, [r1, #8]
1a0048d8:	b94b      	cbnz	r3, 1a0048ee <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0048da:	690b      	ldr	r3, [r1, #16]
1a0048dc:	b123      	cbz	r3, 1a0048e8 <handleMasterXferState+0x94>
1a0048de:	f06f 0320 	mvn.w	r3, #32
1a0048e2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0048e6:	e01a      	b.n	1a00491e <handleMasterXferState+0xca>
1a0048e8:	f06f 0310 	mvn.w	r3, #16
1a0048ec:	e7f9      	b.n	1a0048e2 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a0048ee:	684b      	ldr	r3, [r1, #4]
1a0048f0:	1c5a      	adds	r2, r3, #1
1a0048f2:	604a      	str	r2, [r1, #4]
1a0048f4:	781b      	ldrb	r3, [r3, #0]
1a0048f6:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0048f8:	688b      	ldr	r3, [r1, #8]
1a0048fa:	3b01      	subs	r3, #1
1a0048fc:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0048fe:	233c      	movs	r3, #60	; 0x3c
1a004900:	e00d      	b.n	1a00491e <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a004902:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a004904:	6884      	ldr	r4, [r0, #8]
1a004906:	68ca      	ldr	r2, [r1, #12]
1a004908:	1c55      	adds	r5, r2, #1
1a00490a:	60cd      	str	r5, [r1, #12]
1a00490c:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00490e:	690a      	ldr	r2, [r1, #16]
1a004910:	3a01      	subs	r2, #1
1a004912:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a004914:	690a      	ldr	r2, [r1, #16]
1a004916:	2a01      	cmp	r2, #1
1a004918:	dd01      	ble.n	1a00491e <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a00491a:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00491e:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a004922:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a004924:	f023 0210 	bic.w	r2, r3, #16
1a004928:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a00492a:	f013 0f10 	tst.w	r3, #16
1a00492e:	d018      	beq.n	1a004962 <handleMasterXferState+0x10e>
1a004930:	7d0b      	ldrb	r3, [r1, #20]
1a004932:	2b02      	cmp	r3, #2
1a004934:	d015      	beq.n	1a004962 <handleMasterXferState+0x10e>
	return 1;
1a004936:	2001      	movs	r0, #1
1a004938:	e017      	b.n	1a00496a <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a00493a:	233c      	movs	r3, #60	; 0x3c
1a00493c:	e7ea      	b.n	1a004914 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00493e:	2305      	movs	r3, #5
1a004940:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a004942:	232c      	movs	r3, #44	; 0x2c
		break;
1a004944:	e7eb      	b.n	1a00491e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a004946:	2301      	movs	r3, #1
1a004948:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00494a:	232c      	movs	r3, #44	; 0x2c
		break;
1a00494c:	e7e7      	b.n	1a00491e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a00494e:	2302      	movs	r3, #2
1a004950:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a004952:	233c      	movs	r3, #60	; 0x3c
		break;
1a004954:	e7e3      	b.n	1a00491e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a004956:	2303      	movs	r3, #3
1a004958:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00495a:	232c      	movs	r3, #44	; 0x2c
1a00495c:	e7df      	b.n	1a00491e <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00495e:	233c      	movs	r3, #60	; 0x3c
1a004960:	e7dd      	b.n	1a00491e <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a004962:	7d0b      	ldrb	r3, [r1, #20]
1a004964:	2b04      	cmp	r3, #4
1a004966:	d002      	beq.n	1a00496e <handleMasterXferState+0x11a>
		return 0;
1a004968:	2000      	movs	r0, #0
}
1a00496a:	bc30      	pop	{r4, r5}
1a00496c:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a00496e:	2000      	movs	r0, #0
1a004970:	7508      	strb	r0, [r1, #20]
1a004972:	e7fa      	b.n	1a00496a <handleMasterXferState+0x116>

1a004974 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a004974:	b570      	push	{r4, r5, r6, lr}
1a004976:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a004978:	4e06      	ldr	r6, [pc, #24]	; (1a004994 <Chip_I2C_Init+0x20>)
1a00497a:	00c4      	lsls	r4, r0, #3
1a00497c:	1a22      	subs	r2, r4, r0
1a00497e:	0093      	lsls	r3, r2, #2
1a004980:	4433      	add	r3, r6
1a004982:	8898      	ldrh	r0, [r3, #4]
1a004984:	f7ff fd8e 	bl	1a0044a4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a004988:	1b64      	subs	r4, r4, r5
1a00498a:	00a3      	lsls	r3, r4, #2
1a00498c:	58f3      	ldr	r3, [r6, r3]
1a00498e:	226c      	movs	r2, #108	; 0x6c
1a004990:	619a      	str	r2, [r3, #24]
}
1a004992:	bd70      	pop	{r4, r5, r6, pc}
1a004994:	10000094 	.word	0x10000094

1a004998 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00499c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00499e:	4e0b      	ldr	r6, [pc, #44]	; (1a0049cc <Chip_I2C_SetClockRate+0x34>)
1a0049a0:	00c5      	lsls	r5, r0, #3
1a0049a2:	1a2b      	subs	r3, r5, r0
1a0049a4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0049a8:	eb06 0308 	add.w	r3, r6, r8
1a0049ac:	8898      	ldrh	r0, [r3, #4]
1a0049ae:	f7ff fdad 	bl	1a00450c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0049b2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0049b6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0049ba:	0842      	lsrs	r2, r0, #1
1a0049bc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0049be:	f856 3008 	ldr.w	r3, [r6, r8]
1a0049c2:	691a      	ldr	r2, [r3, #16]
1a0049c4:	1a80      	subs	r0, r0, r2
1a0049c6:	6158      	str	r0, [r3, #20]
}
1a0049c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0049cc:	10000094 	.word	0x10000094

1a0049d0 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a0049d0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0049d4:	009a      	lsls	r2, r3, #2
1a0049d6:	4b09      	ldr	r3, [pc, #36]	; (1a0049fc <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0049d8:	4413      	add	r3, r2
1a0049da:	691b      	ldr	r3, [r3, #16]
1a0049dc:	b153      	cbz	r3, 1a0049f4 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a0049de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0049e2:	0082      	lsls	r2, r0, #2
1a0049e4:	4b05      	ldr	r3, [pc, #20]	; (1a0049fc <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0049e6:	4413      	add	r3, r2
1a0049e8:	6898      	ldr	r0, [r3, #8]
}
1a0049ea:	4288      	cmp	r0, r1
1a0049ec:	bf14      	ite	ne
1a0049ee:	2000      	movne	r0, #0
1a0049f0:	2001      	moveq	r0, #1
1a0049f2:	4770      	bx	lr
		iic->mEvent = event;
1a0049f4:	4b01      	ldr	r3, [pc, #4]	; (1a0049fc <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0049f6:	4413      	add	r3, r2
1a0049f8:	6099      	str	r1, [r3, #8]
1a0049fa:	e7f0      	b.n	1a0049de <Chip_I2C_SetMasterEventHandler+0xe>
1a0049fc:	10000094 	.word	0x10000094

1a004a00 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a004a00:	b510      	push	{r4, lr}
1a004a02:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a004a04:	4809      	ldr	r0, [pc, #36]	; (1a004a2c <Chip_I2C_MasterStateHandler+0x2c>)
1a004a06:	00e3      	lsls	r3, r4, #3
1a004a08:	1b1b      	subs	r3, r3, r4
1a004a0a:	009a      	lsls	r2, r3, #2
1a004a0c:	1883      	adds	r3, r0, r2
1a004a0e:	6919      	ldr	r1, [r3, #16]
1a004a10:	5880      	ldr	r0, [r0, r2]
1a004a12:	f7ff ff1f 	bl	1a004854 <handleMasterXferState>
1a004a16:	b940      	cbnz	r0, 1a004a2a <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a004a18:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a004a1c:	009a      	lsls	r2, r3, #2
1a004a1e:	4b03      	ldr	r3, [pc, #12]	; (1a004a2c <Chip_I2C_MasterStateHandler+0x2c>)
1a004a20:	4413      	add	r3, r2
1a004a22:	689b      	ldr	r3, [r3, #8]
1a004a24:	2102      	movs	r1, #2
1a004a26:	4620      	mov	r0, r4
1a004a28:	4798      	blx	r3
	}
}
1a004a2a:	bd10      	pop	{r4, pc}
1a004a2c:	10000094 	.word	0x10000094

1a004a30 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a004a30:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004a34:	0083      	lsls	r3, r0, #2
1a004a36:	4a03      	ldr	r2, [pc, #12]	; (1a004a44 <Chip_I2C_IsStateChanged+0x14>)
1a004a38:	58d3      	ldr	r3, [r2, r3]
1a004a3a:	6818      	ldr	r0, [r3, #0]
}
1a004a3c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a004a40:	4770      	bx	lr
1a004a42:	bf00      	nop
1a004a44:	10000094 	.word	0x10000094

1a004a48 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a004a48:	2901      	cmp	r1, #1
1a004a4a:	d000      	beq.n	1a004a4e <Chip_I2C_EventHandlerPolling+0x6>
1a004a4c:	4770      	bx	lr
{
1a004a4e:	b538      	push	{r3, r4, r5, lr}
1a004a50:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a004a52:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a004a56:	009a      	lsls	r2, r3, #2
1a004a58:	4b08      	ldr	r3, [pc, #32]	; (1a004a7c <Chip_I2C_EventHandlerPolling+0x34>)
1a004a5a:	4413      	add	r3, r2
1a004a5c:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a004a5e:	7d2b      	ldrb	r3, [r5, #20]
1a004a60:	b2db      	uxtb	r3, r3
1a004a62:	2b04      	cmp	r3, #4
1a004a64:	d108      	bne.n	1a004a78 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a004a66:	4620      	mov	r0, r4
1a004a68:	f7ff ffe2 	bl	1a004a30 <Chip_I2C_IsStateChanged>
1a004a6c:	2800      	cmp	r0, #0
1a004a6e:	d0f6      	beq.n	1a004a5e <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a004a70:	4620      	mov	r0, r4
1a004a72:	f7ff ffc5 	bl	1a004a00 <Chip_I2C_MasterStateHandler>
1a004a76:	e7f2      	b.n	1a004a5e <Chip_I2C_EventHandlerPolling+0x16>
}
1a004a78:	bd38      	pop	{r3, r4, r5, pc}
1a004a7a:	bf00      	nop
1a004a7c:	10000094 	.word	0x10000094

1a004a80 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004a80:	4b03      	ldr	r3, [pc, #12]	; (1a004a90 <Chip_SSP_GetClockIndex+0x10>)
1a004a82:	4298      	cmp	r0, r3
1a004a84:	d001      	beq.n	1a004a8a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a004a86:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a004a88:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a004a8a:	20a5      	movs	r0, #165	; 0xa5
1a004a8c:	4770      	bx	lr
1a004a8e:	bf00      	nop
1a004a90:	400c5000 	.word	0x400c5000

1a004a94 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004a94:	4b04      	ldr	r3, [pc, #16]	; (1a004aa8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a004a96:	4298      	cmp	r0, r3
1a004a98:	d002      	beq.n	1a004aa0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a004a9a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a004a9e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a004aa0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004aa4:	4770      	bx	lr
1a004aa6:	bf00      	nop
1a004aa8:	400c5000 	.word	0x400c5000

1a004aac <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004aac:	6803      	ldr	r3, [r0, #0]
1a004aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a004ab2:	0209      	lsls	r1, r1, #8
1a004ab4:	b289      	uxth	r1, r1
1a004ab6:	4319      	orrs	r1, r3
1a004ab8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a004aba:	6102      	str	r2, [r0, #16]
}
1a004abc:	4770      	bx	lr

1a004abe <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004abe:	b570      	push	{r4, r5, r6, lr}
1a004ac0:	4606      	mov	r6, r0
1a004ac2:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004ac4:	f7ff ffe6 	bl	1a004a94 <Chip_SSP_GetPeriphClockIndex>
1a004ac8:	f7ff fd20 	bl	1a00450c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a004acc:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a004ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a004ad2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a004ad4:	e000      	b.n	1a004ad8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a004ad6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a004ad8:	42ab      	cmp	r3, r5
1a004ada:	d90b      	bls.n	1a004af4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004adc:	1c4c      	adds	r4, r1, #1
1a004ade:	fb02 f304 	mul.w	r3, r2, r4
1a004ae2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a004ae6:	429d      	cmp	r5, r3
1a004ae8:	d2f6      	bcs.n	1a004ad8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a004aea:	2cff      	cmp	r4, #255	; 0xff
1a004aec:	d9f3      	bls.n	1a004ad6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a004aee:	3202      	adds	r2, #2
				cr0_div = 0;
1a004af0:	2100      	movs	r1, #0
1a004af2:	e7f1      	b.n	1a004ad8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004af4:	4630      	mov	r0, r6
1a004af6:	f7ff ffd9 	bl	1a004aac <Chip_SSP_SetClockRate>
}
1a004afa:	bd70      	pop	{r4, r5, r6, pc}

1a004afc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004afc:	b510      	push	{r4, lr}
1a004afe:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a004b00:	f7ff ffbe 	bl	1a004a80 <Chip_SSP_GetClockIndex>
1a004b04:	f7ff fcce 	bl	1a0044a4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004b08:	4620      	mov	r0, r4
1a004b0a:	f7ff ffc3 	bl	1a004a94 <Chip_SSP_GetPeriphClockIndex>
1a004b0e:	f7ff fcc9 	bl	1a0044a4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004b12:	6863      	ldr	r3, [r4, #4]
1a004b14:	f023 0304 	bic.w	r3, r3, #4
1a004b18:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004b1a:	6823      	ldr	r3, [r4, #0]
1a004b1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004b20:	f043 0307 	orr.w	r3, r3, #7
1a004b24:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a004b26:	4902      	ldr	r1, [pc, #8]	; (1a004b30 <Chip_SSP_Init+0x34>)
1a004b28:	4620      	mov	r0, r4
1a004b2a:	f7ff ffc8 	bl	1a004abe <Chip_SSP_SetBitRate>
}
1a004b2e:	bd10      	pop	{r4, pc}
1a004b30:	000186a0 	.word	0x000186a0

1a004b34 <ResetISR>:
void ResetISR(void) {
1a004b34:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a004b36:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a004b38:	4b18      	ldr	r3, [pc, #96]	; (1a004b9c <ResetISR+0x68>)
1a004b3a:	4a19      	ldr	r2, [pc, #100]	; (1a004ba0 <ResetISR+0x6c>)
1a004b3c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a004b3e:	3304      	adds	r3, #4
1a004b40:	4a18      	ldr	r2, [pc, #96]	; (1a004ba4 <ResetISR+0x70>)
1a004b42:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a004b44:	2300      	movs	r3, #0
1a004b46:	e005      	b.n	1a004b54 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a004b48:	4a17      	ldr	r2, [pc, #92]	; (1a004ba8 <ResetISR+0x74>)
1a004b4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a004b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a004b52:	3301      	adds	r3, #1
1a004b54:	2b07      	cmp	r3, #7
1a004b56:	d9f7      	bls.n	1a004b48 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a004b58:	b662      	cpsie	i
    SystemInit();
1a004b5a:	f7ff f813 	bl	1a003b84 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a004b5e:	4b13      	ldr	r3, [pc, #76]	; (1a004bac <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a004b60:	e007      	b.n	1a004b72 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a004b62:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a004b66:	689a      	ldr	r2, [r3, #8]
1a004b68:	6859      	ldr	r1, [r3, #4]
1a004b6a:	6818      	ldr	r0, [r3, #0]
1a004b6c:	f7fb fb0e 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a004b70:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a004b72:	4a0f      	ldr	r2, [pc, #60]	; (1a004bb0 <ResetISR+0x7c>)
1a004b74:	4293      	cmp	r3, r2
1a004b76:	d3f4      	bcc.n	1a004b62 <ResetISR+0x2e>
1a004b78:	e006      	b.n	1a004b88 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a004b7a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a004b7c:	6859      	ldr	r1, [r3, #4]
1a004b7e:	f854 0b08 	ldr.w	r0, [r4], #8
1a004b82:	f7fb fb12 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a004b86:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a004b88:	4a0a      	ldr	r2, [pc, #40]	; (1a004bb4 <ResetISR+0x80>)
1a004b8a:	4293      	cmp	r3, r2
1a004b8c:	d3f5      	bcc.n	1a004b7a <ResetISR+0x46>
    __libc_init_array();
1a004b8e:	f000 fdb3 	bl	1a0056f8 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a004b92:	f7fe ffe1 	bl	1a003b58 <Board_Init>
    main();
1a004b96:	f7fc fb6d 	bl	1a001274 <main>
1a004b9a:	e7fe      	b.n	1a004b9a <ResetISR+0x66>
1a004b9c:	40053100 	.word	0x40053100
1a004ba0:	10df1000 	.word	0x10df1000
1a004ba4:	01dff7ff 	.word	0x01dff7ff
1a004ba8:	e000e280 	.word	0xe000e280
1a004bac:	1a000114 	.word	0x1a000114
1a004bb0:	1a000150 	.word	0x1a000150
1a004bb4:	1a000178 	.word	0x1a000178

1a004bb8 <_init>:
void _init(void) {}
1a004bb8:	4770      	bx	lr
1a004bba:	Address 0x000000001a004bba is out of bounds.


1a004bbc <__aeabi_drsub>:
1a004bbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a004bc0:	e002      	b.n	1a004bc8 <__adddf3>
1a004bc2:	bf00      	nop

1a004bc4 <__aeabi_dsub>:
1a004bc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a004bc8 <__adddf3>:
1a004bc8:	b530      	push	{r4, r5, lr}
1a004bca:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a004bce:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a004bd2:	ea94 0f05 	teq	r4, r5
1a004bd6:	bf08      	it	eq
1a004bd8:	ea90 0f02 	teqeq	r0, r2
1a004bdc:	bf1f      	itttt	ne
1a004bde:	ea54 0c00 	orrsne.w	ip, r4, r0
1a004be2:	ea55 0c02 	orrsne.w	ip, r5, r2
1a004be6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a004bea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004bee:	f000 80e2 	beq.w	1a004db6 <__adddf3+0x1ee>
1a004bf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a004bf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a004bfa:	bfb8      	it	lt
1a004bfc:	426d      	neglt	r5, r5
1a004bfe:	dd0c      	ble.n	1a004c1a <__adddf3+0x52>
1a004c00:	442c      	add	r4, r5
1a004c02:	ea80 0202 	eor.w	r2, r0, r2
1a004c06:	ea81 0303 	eor.w	r3, r1, r3
1a004c0a:	ea82 0000 	eor.w	r0, r2, r0
1a004c0e:	ea83 0101 	eor.w	r1, r3, r1
1a004c12:	ea80 0202 	eor.w	r2, r0, r2
1a004c16:	ea81 0303 	eor.w	r3, r1, r3
1a004c1a:	2d36      	cmp	r5, #54	; 0x36
1a004c1c:	bf88      	it	hi
1a004c1e:	bd30      	pophi	{r4, r5, pc}
1a004c20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004c24:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004c28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a004c2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a004c30:	d002      	beq.n	1a004c38 <__adddf3+0x70>
1a004c32:	4240      	negs	r0, r0
1a004c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004c38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a004c3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004c40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a004c44:	d002      	beq.n	1a004c4c <__adddf3+0x84>
1a004c46:	4252      	negs	r2, r2
1a004c48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004c4c:	ea94 0f05 	teq	r4, r5
1a004c50:	f000 80a7 	beq.w	1a004da2 <__adddf3+0x1da>
1a004c54:	f1a4 0401 	sub.w	r4, r4, #1
1a004c58:	f1d5 0e20 	rsbs	lr, r5, #32
1a004c5c:	db0d      	blt.n	1a004c7a <__adddf3+0xb2>
1a004c5e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a004c62:	fa22 f205 	lsr.w	r2, r2, r5
1a004c66:	1880      	adds	r0, r0, r2
1a004c68:	f141 0100 	adc.w	r1, r1, #0
1a004c6c:	fa03 f20e 	lsl.w	r2, r3, lr
1a004c70:	1880      	adds	r0, r0, r2
1a004c72:	fa43 f305 	asr.w	r3, r3, r5
1a004c76:	4159      	adcs	r1, r3
1a004c78:	e00e      	b.n	1a004c98 <__adddf3+0xd0>
1a004c7a:	f1a5 0520 	sub.w	r5, r5, #32
1a004c7e:	f10e 0e20 	add.w	lr, lr, #32
1a004c82:	2a01      	cmp	r2, #1
1a004c84:	fa03 fc0e 	lsl.w	ip, r3, lr
1a004c88:	bf28      	it	cs
1a004c8a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a004c8e:	fa43 f305 	asr.w	r3, r3, r5
1a004c92:	18c0      	adds	r0, r0, r3
1a004c94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a004c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004c9c:	d507      	bpl.n	1a004cae <__adddf3+0xe6>
1a004c9e:	f04f 0e00 	mov.w	lr, #0
1a004ca2:	f1dc 0c00 	rsbs	ip, ip, #0
1a004ca6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a004caa:	eb6e 0101 	sbc.w	r1, lr, r1
1a004cae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a004cb2:	d31b      	bcc.n	1a004cec <__adddf3+0x124>
1a004cb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a004cb8:	d30c      	bcc.n	1a004cd4 <__adddf3+0x10c>
1a004cba:	0849      	lsrs	r1, r1, #1
1a004cbc:	ea5f 0030 	movs.w	r0, r0, rrx
1a004cc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a004cc4:	f104 0401 	add.w	r4, r4, #1
1a004cc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a004ccc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a004cd0:	f080 809a 	bcs.w	1a004e08 <__adddf3+0x240>
1a004cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a004cd8:	bf08      	it	eq
1a004cda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004cde:	f150 0000 	adcs.w	r0, r0, #0
1a004ce2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004ce6:	ea41 0105 	orr.w	r1, r1, r5
1a004cea:	bd30      	pop	{r4, r5, pc}
1a004cec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a004cf0:	4140      	adcs	r0, r0
1a004cf2:	eb41 0101 	adc.w	r1, r1, r1
1a004cf6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004cfa:	f1a4 0401 	sub.w	r4, r4, #1
1a004cfe:	d1e9      	bne.n	1a004cd4 <__adddf3+0x10c>
1a004d00:	f091 0f00 	teq	r1, #0
1a004d04:	bf04      	itt	eq
1a004d06:	4601      	moveq	r1, r0
1a004d08:	2000      	moveq	r0, #0
1a004d0a:	fab1 f381 	clz	r3, r1
1a004d0e:	bf08      	it	eq
1a004d10:	3320      	addeq	r3, #32
1a004d12:	f1a3 030b 	sub.w	r3, r3, #11
1a004d16:	f1b3 0220 	subs.w	r2, r3, #32
1a004d1a:	da0c      	bge.n	1a004d36 <__adddf3+0x16e>
1a004d1c:	320c      	adds	r2, #12
1a004d1e:	dd08      	ble.n	1a004d32 <__adddf3+0x16a>
1a004d20:	f102 0c14 	add.w	ip, r2, #20
1a004d24:	f1c2 020c 	rsb	r2, r2, #12
1a004d28:	fa01 f00c 	lsl.w	r0, r1, ip
1a004d2c:	fa21 f102 	lsr.w	r1, r1, r2
1a004d30:	e00c      	b.n	1a004d4c <__adddf3+0x184>
1a004d32:	f102 0214 	add.w	r2, r2, #20
1a004d36:	bfd8      	it	le
1a004d38:	f1c2 0c20 	rsble	ip, r2, #32
1a004d3c:	fa01 f102 	lsl.w	r1, r1, r2
1a004d40:	fa20 fc0c 	lsr.w	ip, r0, ip
1a004d44:	bfdc      	itt	le
1a004d46:	ea41 010c 	orrle.w	r1, r1, ip
1a004d4a:	4090      	lslle	r0, r2
1a004d4c:	1ae4      	subs	r4, r4, r3
1a004d4e:	bfa2      	ittt	ge
1a004d50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a004d54:	4329      	orrge	r1, r5
1a004d56:	bd30      	popge	{r4, r5, pc}
1a004d58:	ea6f 0404 	mvn.w	r4, r4
1a004d5c:	3c1f      	subs	r4, #31
1a004d5e:	da1c      	bge.n	1a004d9a <__adddf3+0x1d2>
1a004d60:	340c      	adds	r4, #12
1a004d62:	dc0e      	bgt.n	1a004d82 <__adddf3+0x1ba>
1a004d64:	f104 0414 	add.w	r4, r4, #20
1a004d68:	f1c4 0220 	rsb	r2, r4, #32
1a004d6c:	fa20 f004 	lsr.w	r0, r0, r4
1a004d70:	fa01 f302 	lsl.w	r3, r1, r2
1a004d74:	ea40 0003 	orr.w	r0, r0, r3
1a004d78:	fa21 f304 	lsr.w	r3, r1, r4
1a004d7c:	ea45 0103 	orr.w	r1, r5, r3
1a004d80:	bd30      	pop	{r4, r5, pc}
1a004d82:	f1c4 040c 	rsb	r4, r4, #12
1a004d86:	f1c4 0220 	rsb	r2, r4, #32
1a004d8a:	fa20 f002 	lsr.w	r0, r0, r2
1a004d8e:	fa01 f304 	lsl.w	r3, r1, r4
1a004d92:	ea40 0003 	orr.w	r0, r0, r3
1a004d96:	4629      	mov	r1, r5
1a004d98:	bd30      	pop	{r4, r5, pc}
1a004d9a:	fa21 f004 	lsr.w	r0, r1, r4
1a004d9e:	4629      	mov	r1, r5
1a004da0:	bd30      	pop	{r4, r5, pc}
1a004da2:	f094 0f00 	teq	r4, #0
1a004da6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a004daa:	bf06      	itte	eq
1a004dac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a004db0:	3401      	addeq	r4, #1
1a004db2:	3d01      	subne	r5, #1
1a004db4:	e74e      	b.n	1a004c54 <__adddf3+0x8c>
1a004db6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004dba:	bf18      	it	ne
1a004dbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004dc0:	d029      	beq.n	1a004e16 <__adddf3+0x24e>
1a004dc2:	ea94 0f05 	teq	r4, r5
1a004dc6:	bf08      	it	eq
1a004dc8:	ea90 0f02 	teqeq	r0, r2
1a004dcc:	d005      	beq.n	1a004dda <__adddf3+0x212>
1a004dce:	ea54 0c00 	orrs.w	ip, r4, r0
1a004dd2:	bf04      	itt	eq
1a004dd4:	4619      	moveq	r1, r3
1a004dd6:	4610      	moveq	r0, r2
1a004dd8:	bd30      	pop	{r4, r5, pc}
1a004dda:	ea91 0f03 	teq	r1, r3
1a004dde:	bf1e      	ittt	ne
1a004de0:	2100      	movne	r1, #0
1a004de2:	2000      	movne	r0, #0
1a004de4:	bd30      	popne	{r4, r5, pc}
1a004de6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a004dea:	d105      	bne.n	1a004df8 <__adddf3+0x230>
1a004dec:	0040      	lsls	r0, r0, #1
1a004dee:	4149      	adcs	r1, r1
1a004df0:	bf28      	it	cs
1a004df2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a004df6:	bd30      	pop	{r4, r5, pc}
1a004df8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004dfc:	bf3c      	itt	cc
1a004dfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004e02:	bd30      	popcc	{r4, r5, pc}
1a004e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004e08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004e0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004e10:	f04f 0000 	mov.w	r0, #0
1a004e14:	bd30      	pop	{r4, r5, pc}
1a004e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004e1a:	bf1a      	itte	ne
1a004e1c:	4619      	movne	r1, r3
1a004e1e:	4610      	movne	r0, r2
1a004e20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004e24:	bf1c      	itt	ne
1a004e26:	460b      	movne	r3, r1
1a004e28:	4602      	movne	r2, r0
1a004e2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004e2e:	bf06      	itte	eq
1a004e30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004e34:	ea91 0f03 	teqeq	r1, r3
1a004e38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a004e3c:	bd30      	pop	{r4, r5, pc}
1a004e3e:	bf00      	nop

1a004e40 <__aeabi_ui2d>:
1a004e40:	f090 0f00 	teq	r0, #0
1a004e44:	bf04      	itt	eq
1a004e46:	2100      	moveq	r1, #0
1a004e48:	4770      	bxeq	lr
1a004e4a:	b530      	push	{r4, r5, lr}
1a004e4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004e50:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004e54:	f04f 0500 	mov.w	r5, #0
1a004e58:	f04f 0100 	mov.w	r1, #0
1a004e5c:	e750      	b.n	1a004d00 <__adddf3+0x138>
1a004e5e:	bf00      	nop

1a004e60 <__aeabi_i2d>:
1a004e60:	f090 0f00 	teq	r0, #0
1a004e64:	bf04      	itt	eq
1a004e66:	2100      	moveq	r1, #0
1a004e68:	4770      	bxeq	lr
1a004e6a:	b530      	push	{r4, r5, lr}
1a004e6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004e70:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004e74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004e78:	bf48      	it	mi
1a004e7a:	4240      	negmi	r0, r0
1a004e7c:	f04f 0100 	mov.w	r1, #0
1a004e80:	e73e      	b.n	1a004d00 <__adddf3+0x138>
1a004e82:	bf00      	nop

1a004e84 <__aeabi_f2d>:
1a004e84:	0042      	lsls	r2, r0, #1
1a004e86:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a004e8a:	ea4f 0131 	mov.w	r1, r1, rrx
1a004e8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a004e92:	bf1f      	itttt	ne
1a004e94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a004e98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a004e9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004ea0:	4770      	bxne	lr
1a004ea2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a004ea6:	bf08      	it	eq
1a004ea8:	4770      	bxeq	lr
1a004eaa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a004eae:	bf04      	itt	eq
1a004eb0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a004eb4:	4770      	bxeq	lr
1a004eb6:	b530      	push	{r4, r5, lr}
1a004eb8:	f44f 7460 	mov.w	r4, #896	; 0x380
1a004ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004ec4:	e71c      	b.n	1a004d00 <__adddf3+0x138>
1a004ec6:	bf00      	nop

1a004ec8 <__aeabi_ul2d>:
1a004ec8:	ea50 0201 	orrs.w	r2, r0, r1
1a004ecc:	bf08      	it	eq
1a004ece:	4770      	bxeq	lr
1a004ed0:	b530      	push	{r4, r5, lr}
1a004ed2:	f04f 0500 	mov.w	r5, #0
1a004ed6:	e00a      	b.n	1a004eee <__aeabi_l2d+0x16>

1a004ed8 <__aeabi_l2d>:
1a004ed8:	ea50 0201 	orrs.w	r2, r0, r1
1a004edc:	bf08      	it	eq
1a004ede:	4770      	bxeq	lr
1a004ee0:	b530      	push	{r4, r5, lr}
1a004ee2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a004ee6:	d502      	bpl.n	1a004eee <__aeabi_l2d+0x16>
1a004ee8:	4240      	negs	r0, r0
1a004eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004eee:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004ef2:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004ef6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a004efa:	f43f aed8 	beq.w	1a004cae <__adddf3+0xe6>
1a004efe:	f04f 0203 	mov.w	r2, #3
1a004f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004f06:	bf18      	it	ne
1a004f08:	3203      	addne	r2, #3
1a004f0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004f0e:	bf18      	it	ne
1a004f10:	3203      	addne	r2, #3
1a004f12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a004f16:	f1c2 0320 	rsb	r3, r2, #32
1a004f1a:	fa00 fc03 	lsl.w	ip, r0, r3
1a004f1e:	fa20 f002 	lsr.w	r0, r0, r2
1a004f22:	fa01 fe03 	lsl.w	lr, r1, r3
1a004f26:	ea40 000e 	orr.w	r0, r0, lr
1a004f2a:	fa21 f102 	lsr.w	r1, r1, r2
1a004f2e:	4414      	add	r4, r2
1a004f30:	e6bd      	b.n	1a004cae <__adddf3+0xe6>
1a004f32:	bf00      	nop

1a004f34 <__aeabi_dmul>:
1a004f34:	b570      	push	{r4, r5, r6, lr}
1a004f36:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004f3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004f3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004f42:	bf1d      	ittte	ne
1a004f44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004f48:	ea94 0f0c 	teqne	r4, ip
1a004f4c:	ea95 0f0c 	teqne	r5, ip
1a004f50:	f000 f8de 	bleq	1a005110 <__aeabi_dmul+0x1dc>
1a004f54:	442c      	add	r4, r5
1a004f56:	ea81 0603 	eor.w	r6, r1, r3
1a004f5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004f5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004f62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a004f66:	bf18      	it	ne
1a004f68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a004f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a004f74:	d038      	beq.n	1a004fe8 <__aeabi_dmul+0xb4>
1a004f76:	fba0 ce02 	umull	ip, lr, r0, r2
1a004f7a:	f04f 0500 	mov.w	r5, #0
1a004f7e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a004f82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a004f86:	fbe0 e503 	umlal	lr, r5, r0, r3
1a004f8a:	f04f 0600 	mov.w	r6, #0
1a004f8e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a004f92:	f09c 0f00 	teq	ip, #0
1a004f96:	bf18      	it	ne
1a004f98:	f04e 0e01 	orrne.w	lr, lr, #1
1a004f9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004fa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004fa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a004fa8:	d204      	bcs.n	1a004fb4 <__aeabi_dmul+0x80>
1a004faa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a004fae:	416d      	adcs	r5, r5
1a004fb0:	eb46 0606 	adc.w	r6, r6, r6
1a004fb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a004fb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a004fbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004fc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004fc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a004fc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004fcc:	bf88      	it	hi
1a004fce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004fd2:	d81e      	bhi.n	1a005012 <__aeabi_dmul+0xde>
1a004fd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a004fd8:	bf08      	it	eq
1a004fda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004fde:	f150 0000 	adcs.w	r0, r0, #0
1a004fe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004fe6:	bd70      	pop	{r4, r5, r6, pc}
1a004fe8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004fec:	ea46 0101 	orr.w	r1, r6, r1
1a004ff0:	ea40 0002 	orr.w	r0, r0, r2
1a004ff4:	ea81 0103 	eor.w	r1, r1, r3
1a004ff8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004ffc:	bfc2      	ittt	gt
1a004ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
1a005002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a005006:	bd70      	popgt	{r4, r5, r6, pc}
1a005008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00500c:	f04f 0e00 	mov.w	lr, #0
1a005010:	3c01      	subs	r4, #1
1a005012:	f300 80ab 	bgt.w	1a00516c <__aeabi_dmul+0x238>
1a005016:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00501a:	bfde      	ittt	le
1a00501c:	2000      	movle	r0, #0
1a00501e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a005022:	bd70      	pople	{r4, r5, r6, pc}
1a005024:	f1c4 0400 	rsb	r4, r4, #0
1a005028:	3c20      	subs	r4, #32
1a00502a:	da35      	bge.n	1a005098 <__aeabi_dmul+0x164>
1a00502c:	340c      	adds	r4, #12
1a00502e:	dc1b      	bgt.n	1a005068 <__aeabi_dmul+0x134>
1a005030:	f104 0414 	add.w	r4, r4, #20
1a005034:	f1c4 0520 	rsb	r5, r4, #32
1a005038:	fa00 f305 	lsl.w	r3, r0, r5
1a00503c:	fa20 f004 	lsr.w	r0, r0, r4
1a005040:	fa01 f205 	lsl.w	r2, r1, r5
1a005044:	ea40 0002 	orr.w	r0, r0, r2
1a005048:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a00504c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a005050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005054:	fa21 f604 	lsr.w	r6, r1, r4
1a005058:	eb42 0106 	adc.w	r1, r2, r6
1a00505c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005060:	bf08      	it	eq
1a005062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005066:	bd70      	pop	{r4, r5, r6, pc}
1a005068:	f1c4 040c 	rsb	r4, r4, #12
1a00506c:	f1c4 0520 	rsb	r5, r4, #32
1a005070:	fa00 f304 	lsl.w	r3, r0, r4
1a005074:	fa20 f005 	lsr.w	r0, r0, r5
1a005078:	fa01 f204 	lsl.w	r2, r1, r4
1a00507c:	ea40 0002 	orr.w	r0, r0, r2
1a005080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005088:	f141 0100 	adc.w	r1, r1, #0
1a00508c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005090:	bf08      	it	eq
1a005092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005096:	bd70      	pop	{r4, r5, r6, pc}
1a005098:	f1c4 0520 	rsb	r5, r4, #32
1a00509c:	fa00 f205 	lsl.w	r2, r0, r5
1a0050a0:	ea4e 0e02 	orr.w	lr, lr, r2
1a0050a4:	fa20 f304 	lsr.w	r3, r0, r4
1a0050a8:	fa01 f205 	lsl.w	r2, r1, r5
1a0050ac:	ea43 0302 	orr.w	r3, r3, r2
1a0050b0:	fa21 f004 	lsr.w	r0, r1, r4
1a0050b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0050b8:	fa21 f204 	lsr.w	r2, r1, r4
1a0050bc:	ea20 0002 	bic.w	r0, r0, r2
1a0050c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0050c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0050c8:	bf08      	it	eq
1a0050ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0050ce:	bd70      	pop	{r4, r5, r6, pc}
1a0050d0:	f094 0f00 	teq	r4, #0
1a0050d4:	d10f      	bne.n	1a0050f6 <__aeabi_dmul+0x1c2>
1a0050d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0050da:	0040      	lsls	r0, r0, #1
1a0050dc:	eb41 0101 	adc.w	r1, r1, r1
1a0050e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0050e4:	bf08      	it	eq
1a0050e6:	3c01      	subeq	r4, #1
1a0050e8:	d0f7      	beq.n	1a0050da <__aeabi_dmul+0x1a6>
1a0050ea:	ea41 0106 	orr.w	r1, r1, r6
1a0050ee:	f095 0f00 	teq	r5, #0
1a0050f2:	bf18      	it	ne
1a0050f4:	4770      	bxne	lr
1a0050f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0050fa:	0052      	lsls	r2, r2, #1
1a0050fc:	eb43 0303 	adc.w	r3, r3, r3
1a005100:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a005104:	bf08      	it	eq
1a005106:	3d01      	subeq	r5, #1
1a005108:	d0f7      	beq.n	1a0050fa <__aeabi_dmul+0x1c6>
1a00510a:	ea43 0306 	orr.w	r3, r3, r6
1a00510e:	4770      	bx	lr
1a005110:	ea94 0f0c 	teq	r4, ip
1a005114:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a005118:	bf18      	it	ne
1a00511a:	ea95 0f0c 	teqne	r5, ip
1a00511e:	d00c      	beq.n	1a00513a <__aeabi_dmul+0x206>
1a005120:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a005124:	bf18      	it	ne
1a005126:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00512a:	d1d1      	bne.n	1a0050d0 <__aeabi_dmul+0x19c>
1a00512c:	ea81 0103 	eor.w	r1, r1, r3
1a005130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005134:	f04f 0000 	mov.w	r0, #0
1a005138:	bd70      	pop	{r4, r5, r6, pc}
1a00513a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00513e:	bf06      	itte	eq
1a005140:	4610      	moveq	r0, r2
1a005142:	4619      	moveq	r1, r3
1a005144:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a005148:	d019      	beq.n	1a00517e <__aeabi_dmul+0x24a>
1a00514a:	ea94 0f0c 	teq	r4, ip
1a00514e:	d102      	bne.n	1a005156 <__aeabi_dmul+0x222>
1a005150:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a005154:	d113      	bne.n	1a00517e <__aeabi_dmul+0x24a>
1a005156:	ea95 0f0c 	teq	r5, ip
1a00515a:	d105      	bne.n	1a005168 <__aeabi_dmul+0x234>
1a00515c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a005160:	bf1c      	itt	ne
1a005162:	4610      	movne	r0, r2
1a005164:	4619      	movne	r1, r3
1a005166:	d10a      	bne.n	1a00517e <__aeabi_dmul+0x24a>
1a005168:	ea81 0103 	eor.w	r1, r1, r3
1a00516c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005170:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a005174:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a005178:	f04f 0000 	mov.w	r0, #0
1a00517c:	bd70      	pop	{r4, r5, r6, pc}
1a00517e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a005182:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a005186:	bd70      	pop	{r4, r5, r6, pc}

1a005188 <__aeabi_ddiv>:
1a005188:	b570      	push	{r4, r5, r6, lr}
1a00518a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00518e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a005192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a005196:	bf1d      	ittte	ne
1a005198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00519c:	ea94 0f0c 	teqne	r4, ip
1a0051a0:	ea95 0f0c 	teqne	r5, ip
1a0051a4:	f000 f8a7 	bleq	1a0052f6 <__aeabi_ddiv+0x16e>
1a0051a8:	eba4 0405 	sub.w	r4, r4, r5
1a0051ac:	ea81 0e03 	eor.w	lr, r1, r3
1a0051b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0051b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0051b8:	f000 8088 	beq.w	1a0052cc <__aeabi_ddiv+0x144>
1a0051bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0051c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0051c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0051c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0051cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0051d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0051d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0051d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0051dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0051e0:	429d      	cmp	r5, r3
1a0051e2:	bf08      	it	eq
1a0051e4:	4296      	cmpeq	r6, r2
1a0051e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0051ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0051ee:	d202      	bcs.n	1a0051f6 <__aeabi_ddiv+0x6e>
1a0051f0:	085b      	lsrs	r3, r3, #1
1a0051f2:	ea4f 0232 	mov.w	r2, r2, rrx
1a0051f6:	1ab6      	subs	r6, r6, r2
1a0051f8:	eb65 0503 	sbc.w	r5, r5, r3
1a0051fc:	085b      	lsrs	r3, r3, #1
1a0051fe:	ea4f 0232 	mov.w	r2, r2, rrx
1a005202:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a005206:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00520a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00520e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005212:	bf22      	ittt	cs
1a005214:	1ab6      	subcs	r6, r6, r2
1a005216:	4675      	movcs	r5, lr
1a005218:	ea40 000c 	orrcs.w	r0, r0, ip
1a00521c:	085b      	lsrs	r3, r3, #1
1a00521e:	ea4f 0232 	mov.w	r2, r2, rrx
1a005222:	ebb6 0e02 	subs.w	lr, r6, r2
1a005226:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00522a:	bf22      	ittt	cs
1a00522c:	1ab6      	subcs	r6, r6, r2
1a00522e:	4675      	movcs	r5, lr
1a005230:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a005234:	085b      	lsrs	r3, r3, #1
1a005236:	ea4f 0232 	mov.w	r2, r2, rrx
1a00523a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00523e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005242:	bf22      	ittt	cs
1a005244:	1ab6      	subcs	r6, r6, r2
1a005246:	4675      	movcs	r5, lr
1a005248:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a00524c:	085b      	lsrs	r3, r3, #1
1a00524e:	ea4f 0232 	mov.w	r2, r2, rrx
1a005252:	ebb6 0e02 	subs.w	lr, r6, r2
1a005256:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00525a:	bf22      	ittt	cs
1a00525c:	1ab6      	subcs	r6, r6, r2
1a00525e:	4675      	movcs	r5, lr
1a005260:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a005264:	ea55 0e06 	orrs.w	lr, r5, r6
1a005268:	d018      	beq.n	1a00529c <__aeabi_ddiv+0x114>
1a00526a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00526e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a005272:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a005276:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00527a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00527e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a005282:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a005286:	d1c0      	bne.n	1a00520a <__aeabi_ddiv+0x82>
1a005288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00528c:	d10b      	bne.n	1a0052a6 <__aeabi_ddiv+0x11e>
1a00528e:	ea41 0100 	orr.w	r1, r1, r0
1a005292:	f04f 0000 	mov.w	r0, #0
1a005296:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a00529a:	e7b6      	b.n	1a00520a <__aeabi_ddiv+0x82>
1a00529c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0052a0:	bf04      	itt	eq
1a0052a2:	4301      	orreq	r1, r0
1a0052a4:	2000      	moveq	r0, #0
1a0052a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0052aa:	bf88      	it	hi
1a0052ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0052b0:	f63f aeaf 	bhi.w	1a005012 <__aeabi_dmul+0xde>
1a0052b4:	ebb5 0c03 	subs.w	ip, r5, r3
1a0052b8:	bf04      	itt	eq
1a0052ba:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0052be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0052c2:	f150 0000 	adcs.w	r0, r0, #0
1a0052c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0052ca:	bd70      	pop	{r4, r5, r6, pc}
1a0052cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0052d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0052d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0052d8:	bfc2      	ittt	gt
1a0052da:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0052de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0052e2:	bd70      	popgt	{r4, r5, r6, pc}
1a0052e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0052e8:	f04f 0e00 	mov.w	lr, #0
1a0052ec:	3c01      	subs	r4, #1
1a0052ee:	e690      	b.n	1a005012 <__aeabi_dmul+0xde>
1a0052f0:	ea45 0e06 	orr.w	lr, r5, r6
1a0052f4:	e68d      	b.n	1a005012 <__aeabi_dmul+0xde>
1a0052f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0052fa:	ea94 0f0c 	teq	r4, ip
1a0052fe:	bf08      	it	eq
1a005300:	ea95 0f0c 	teqeq	r5, ip
1a005304:	f43f af3b 	beq.w	1a00517e <__aeabi_dmul+0x24a>
1a005308:	ea94 0f0c 	teq	r4, ip
1a00530c:	d10a      	bne.n	1a005324 <__aeabi_ddiv+0x19c>
1a00530e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a005312:	f47f af34 	bne.w	1a00517e <__aeabi_dmul+0x24a>
1a005316:	ea95 0f0c 	teq	r5, ip
1a00531a:	f47f af25 	bne.w	1a005168 <__aeabi_dmul+0x234>
1a00531e:	4610      	mov	r0, r2
1a005320:	4619      	mov	r1, r3
1a005322:	e72c      	b.n	1a00517e <__aeabi_dmul+0x24a>
1a005324:	ea95 0f0c 	teq	r5, ip
1a005328:	d106      	bne.n	1a005338 <__aeabi_ddiv+0x1b0>
1a00532a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00532e:	f43f aefd 	beq.w	1a00512c <__aeabi_dmul+0x1f8>
1a005332:	4610      	mov	r0, r2
1a005334:	4619      	mov	r1, r3
1a005336:	e722      	b.n	1a00517e <__aeabi_dmul+0x24a>
1a005338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00533c:	bf18      	it	ne
1a00533e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a005342:	f47f aec5 	bne.w	1a0050d0 <__aeabi_dmul+0x19c>
1a005346:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00534a:	f47f af0d 	bne.w	1a005168 <__aeabi_dmul+0x234>
1a00534e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a005352:	f47f aeeb 	bne.w	1a00512c <__aeabi_dmul+0x1f8>
1a005356:	e712      	b.n	1a00517e <__aeabi_dmul+0x24a>

1a005358 <__aeabi_d2f>:
1a005358:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a00535c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a005360:	bf24      	itt	cs
1a005362:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a005366:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a00536a:	d90d      	bls.n	1a005388 <__aeabi_d2f+0x30>
1a00536c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a005370:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a005374:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a005378:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a00537c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a005380:	bf08      	it	eq
1a005382:	f020 0001 	biceq.w	r0, r0, #1
1a005386:	4770      	bx	lr
1a005388:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a00538c:	d121      	bne.n	1a0053d2 <__aeabi_d2f+0x7a>
1a00538e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a005392:	bfbc      	itt	lt
1a005394:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a005398:	4770      	bxlt	lr
1a00539a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00539e:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0053a2:	f1c2 0218 	rsb	r2, r2, #24
1a0053a6:	f1c2 0c20 	rsb	ip, r2, #32
1a0053aa:	fa10 f30c 	lsls.w	r3, r0, ip
1a0053ae:	fa20 f002 	lsr.w	r0, r0, r2
1a0053b2:	bf18      	it	ne
1a0053b4:	f040 0001 	orrne.w	r0, r0, #1
1a0053b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0053bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0053c0:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0053c4:	ea40 000c 	orr.w	r0, r0, ip
1a0053c8:	fa23 f302 	lsr.w	r3, r3, r2
1a0053cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a0053d0:	e7cc      	b.n	1a00536c <__aeabi_d2f+0x14>
1a0053d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a0053d6:	d107      	bne.n	1a0053e8 <__aeabi_d2f+0x90>
1a0053d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a0053dc:	bf1e      	ittt	ne
1a0053de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a0053e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a0053e6:	4770      	bxne	lr
1a0053e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a0053ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a0053f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a0053f4:	4770      	bx	lr
1a0053f6:	bf00      	nop

1a0053f8 <__aeabi_uldivmod>:
1a0053f8:	b953      	cbnz	r3, 1a005410 <__aeabi_uldivmod+0x18>
1a0053fa:	b94a      	cbnz	r2, 1a005410 <__aeabi_uldivmod+0x18>
1a0053fc:	2900      	cmp	r1, #0
1a0053fe:	bf08      	it	eq
1a005400:	2800      	cmpeq	r0, #0
1a005402:	bf1c      	itt	ne
1a005404:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005408:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00540c:	f000 b972 	b.w	1a0056f4 <__aeabi_idiv0>
1a005410:	f1ad 0c08 	sub.w	ip, sp, #8
1a005414:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005418:	f000 f806 	bl	1a005428 <__udivmoddi4>
1a00541c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a005420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005424:	b004      	add	sp, #16
1a005426:	4770      	bx	lr

1a005428 <__udivmoddi4>:
1a005428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00542c:	9e08      	ldr	r6, [sp, #32]
1a00542e:	4604      	mov	r4, r0
1a005430:	4688      	mov	r8, r1
1a005432:	2b00      	cmp	r3, #0
1a005434:	d14b      	bne.n	1a0054ce <__udivmoddi4+0xa6>
1a005436:	428a      	cmp	r2, r1
1a005438:	4615      	mov	r5, r2
1a00543a:	d967      	bls.n	1a00550c <__udivmoddi4+0xe4>
1a00543c:	fab2 f282 	clz	r2, r2
1a005440:	b14a      	cbz	r2, 1a005456 <__udivmoddi4+0x2e>
1a005442:	f1c2 0720 	rsb	r7, r2, #32
1a005446:	fa01 f302 	lsl.w	r3, r1, r2
1a00544a:	fa20 f707 	lsr.w	r7, r0, r7
1a00544e:	4095      	lsls	r5, r2
1a005450:	ea47 0803 	orr.w	r8, r7, r3
1a005454:	4094      	lsls	r4, r2
1a005456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00545a:	0c23      	lsrs	r3, r4, #16
1a00545c:	fbb8 f7fe 	udiv	r7, r8, lr
1a005460:	fa1f fc85 	uxth.w	ip, r5
1a005464:	fb0e 8817 	mls	r8, lr, r7, r8
1a005468:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00546c:	fb07 f10c 	mul.w	r1, r7, ip
1a005470:	4299      	cmp	r1, r3
1a005472:	d909      	bls.n	1a005488 <__udivmoddi4+0x60>
1a005474:	18eb      	adds	r3, r5, r3
1a005476:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00547a:	f080 811b 	bcs.w	1a0056b4 <__udivmoddi4+0x28c>
1a00547e:	4299      	cmp	r1, r3
1a005480:	f240 8118 	bls.w	1a0056b4 <__udivmoddi4+0x28c>
1a005484:	3f02      	subs	r7, #2
1a005486:	442b      	add	r3, r5
1a005488:	1a5b      	subs	r3, r3, r1
1a00548a:	b2a4      	uxth	r4, r4
1a00548c:	fbb3 f0fe 	udiv	r0, r3, lr
1a005490:	fb0e 3310 	mls	r3, lr, r0, r3
1a005494:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005498:	fb00 fc0c 	mul.w	ip, r0, ip
1a00549c:	45a4      	cmp	ip, r4
1a00549e:	d909      	bls.n	1a0054b4 <__udivmoddi4+0x8c>
1a0054a0:	192c      	adds	r4, r5, r4
1a0054a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0054a6:	f080 8107 	bcs.w	1a0056b8 <__udivmoddi4+0x290>
1a0054aa:	45a4      	cmp	ip, r4
1a0054ac:	f240 8104 	bls.w	1a0056b8 <__udivmoddi4+0x290>
1a0054b0:	3802      	subs	r0, #2
1a0054b2:	442c      	add	r4, r5
1a0054b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0054b8:	eba4 040c 	sub.w	r4, r4, ip
1a0054bc:	2700      	movs	r7, #0
1a0054be:	b11e      	cbz	r6, 1a0054c8 <__udivmoddi4+0xa0>
1a0054c0:	40d4      	lsrs	r4, r2
1a0054c2:	2300      	movs	r3, #0
1a0054c4:	e9c6 4300 	strd	r4, r3, [r6]
1a0054c8:	4639      	mov	r1, r7
1a0054ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0054ce:	428b      	cmp	r3, r1
1a0054d0:	d909      	bls.n	1a0054e6 <__udivmoddi4+0xbe>
1a0054d2:	2e00      	cmp	r6, #0
1a0054d4:	f000 80eb 	beq.w	1a0056ae <__udivmoddi4+0x286>
1a0054d8:	2700      	movs	r7, #0
1a0054da:	e9c6 0100 	strd	r0, r1, [r6]
1a0054de:	4638      	mov	r0, r7
1a0054e0:	4639      	mov	r1, r7
1a0054e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0054e6:	fab3 f783 	clz	r7, r3
1a0054ea:	2f00      	cmp	r7, #0
1a0054ec:	d147      	bne.n	1a00557e <__udivmoddi4+0x156>
1a0054ee:	428b      	cmp	r3, r1
1a0054f0:	d302      	bcc.n	1a0054f8 <__udivmoddi4+0xd0>
1a0054f2:	4282      	cmp	r2, r0
1a0054f4:	f200 80fa 	bhi.w	1a0056ec <__udivmoddi4+0x2c4>
1a0054f8:	1a84      	subs	r4, r0, r2
1a0054fa:	eb61 0303 	sbc.w	r3, r1, r3
1a0054fe:	2001      	movs	r0, #1
1a005500:	4698      	mov	r8, r3
1a005502:	2e00      	cmp	r6, #0
1a005504:	d0e0      	beq.n	1a0054c8 <__udivmoddi4+0xa0>
1a005506:	e9c6 4800 	strd	r4, r8, [r6]
1a00550a:	e7dd      	b.n	1a0054c8 <__udivmoddi4+0xa0>
1a00550c:	b902      	cbnz	r2, 1a005510 <__udivmoddi4+0xe8>
1a00550e:	deff      	udf	#255	; 0xff
1a005510:	fab2 f282 	clz	r2, r2
1a005514:	2a00      	cmp	r2, #0
1a005516:	f040 808f 	bne.w	1a005638 <__udivmoddi4+0x210>
1a00551a:	1b49      	subs	r1, r1, r5
1a00551c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005520:	fa1f f885 	uxth.w	r8, r5
1a005524:	2701      	movs	r7, #1
1a005526:	fbb1 fcfe 	udiv	ip, r1, lr
1a00552a:	0c23      	lsrs	r3, r4, #16
1a00552c:	fb0e 111c 	mls	r1, lr, ip, r1
1a005530:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a005534:	fb08 f10c 	mul.w	r1, r8, ip
1a005538:	4299      	cmp	r1, r3
1a00553a:	d907      	bls.n	1a00554c <__udivmoddi4+0x124>
1a00553c:	18eb      	adds	r3, r5, r3
1a00553e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a005542:	d202      	bcs.n	1a00554a <__udivmoddi4+0x122>
1a005544:	4299      	cmp	r1, r3
1a005546:	f200 80cd 	bhi.w	1a0056e4 <__udivmoddi4+0x2bc>
1a00554a:	4684      	mov	ip, r0
1a00554c:	1a59      	subs	r1, r3, r1
1a00554e:	b2a3      	uxth	r3, r4
1a005550:	fbb1 f0fe 	udiv	r0, r1, lr
1a005554:	fb0e 1410 	mls	r4, lr, r0, r1
1a005558:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a00555c:	fb08 f800 	mul.w	r8, r8, r0
1a005560:	45a0      	cmp	r8, r4
1a005562:	d907      	bls.n	1a005574 <__udivmoddi4+0x14c>
1a005564:	192c      	adds	r4, r5, r4
1a005566:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00556a:	d202      	bcs.n	1a005572 <__udivmoddi4+0x14a>
1a00556c:	45a0      	cmp	r8, r4
1a00556e:	f200 80b6 	bhi.w	1a0056de <__udivmoddi4+0x2b6>
1a005572:	4618      	mov	r0, r3
1a005574:	eba4 0408 	sub.w	r4, r4, r8
1a005578:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00557c:	e79f      	b.n	1a0054be <__udivmoddi4+0x96>
1a00557e:	f1c7 0c20 	rsb	ip, r7, #32
1a005582:	40bb      	lsls	r3, r7
1a005584:	fa22 fe0c 	lsr.w	lr, r2, ip
1a005588:	ea4e 0e03 	orr.w	lr, lr, r3
1a00558c:	fa01 f407 	lsl.w	r4, r1, r7
1a005590:	fa20 f50c 	lsr.w	r5, r0, ip
1a005594:	fa21 f30c 	lsr.w	r3, r1, ip
1a005598:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a00559c:	4325      	orrs	r5, r4
1a00559e:	fbb3 f9f8 	udiv	r9, r3, r8
1a0055a2:	0c2c      	lsrs	r4, r5, #16
1a0055a4:	fb08 3319 	mls	r3, r8, r9, r3
1a0055a8:	fa1f fa8e 	uxth.w	sl, lr
1a0055ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0055b0:	fb09 f40a 	mul.w	r4, r9, sl
1a0055b4:	429c      	cmp	r4, r3
1a0055b6:	fa02 f207 	lsl.w	r2, r2, r7
1a0055ba:	fa00 f107 	lsl.w	r1, r0, r7
1a0055be:	d90b      	bls.n	1a0055d8 <__udivmoddi4+0x1b0>
1a0055c0:	eb1e 0303 	adds.w	r3, lr, r3
1a0055c4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0055c8:	f080 8087 	bcs.w	1a0056da <__udivmoddi4+0x2b2>
1a0055cc:	429c      	cmp	r4, r3
1a0055ce:	f240 8084 	bls.w	1a0056da <__udivmoddi4+0x2b2>
1a0055d2:	f1a9 0902 	sub.w	r9, r9, #2
1a0055d6:	4473      	add	r3, lr
1a0055d8:	1b1b      	subs	r3, r3, r4
1a0055da:	b2ad      	uxth	r5, r5
1a0055dc:	fbb3 f0f8 	udiv	r0, r3, r8
1a0055e0:	fb08 3310 	mls	r3, r8, r0, r3
1a0055e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0055e8:	fb00 fa0a 	mul.w	sl, r0, sl
1a0055ec:	45a2      	cmp	sl, r4
1a0055ee:	d908      	bls.n	1a005602 <__udivmoddi4+0x1da>
1a0055f0:	eb1e 0404 	adds.w	r4, lr, r4
1a0055f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0055f8:	d26b      	bcs.n	1a0056d2 <__udivmoddi4+0x2aa>
1a0055fa:	45a2      	cmp	sl, r4
1a0055fc:	d969      	bls.n	1a0056d2 <__udivmoddi4+0x2aa>
1a0055fe:	3802      	subs	r0, #2
1a005600:	4474      	add	r4, lr
1a005602:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a005606:	fba0 8902 	umull	r8, r9, r0, r2
1a00560a:	eba4 040a 	sub.w	r4, r4, sl
1a00560e:	454c      	cmp	r4, r9
1a005610:	46c2      	mov	sl, r8
1a005612:	464b      	mov	r3, r9
1a005614:	d354      	bcc.n	1a0056c0 <__udivmoddi4+0x298>
1a005616:	d051      	beq.n	1a0056bc <__udivmoddi4+0x294>
1a005618:	2e00      	cmp	r6, #0
1a00561a:	d069      	beq.n	1a0056f0 <__udivmoddi4+0x2c8>
1a00561c:	ebb1 050a 	subs.w	r5, r1, sl
1a005620:	eb64 0403 	sbc.w	r4, r4, r3
1a005624:	fa04 fc0c 	lsl.w	ip, r4, ip
1a005628:	40fd      	lsrs	r5, r7
1a00562a:	40fc      	lsrs	r4, r7
1a00562c:	ea4c 0505 	orr.w	r5, ip, r5
1a005630:	e9c6 5400 	strd	r5, r4, [r6]
1a005634:	2700      	movs	r7, #0
1a005636:	e747      	b.n	1a0054c8 <__udivmoddi4+0xa0>
1a005638:	f1c2 0320 	rsb	r3, r2, #32
1a00563c:	fa20 f703 	lsr.w	r7, r0, r3
1a005640:	4095      	lsls	r5, r2
1a005642:	fa01 f002 	lsl.w	r0, r1, r2
1a005646:	fa21 f303 	lsr.w	r3, r1, r3
1a00564a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00564e:	4338      	orrs	r0, r7
1a005650:	0c01      	lsrs	r1, r0, #16
1a005652:	fbb3 f7fe 	udiv	r7, r3, lr
1a005656:	fa1f f885 	uxth.w	r8, r5
1a00565a:	fb0e 3317 	mls	r3, lr, r7, r3
1a00565e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005662:	fb07 f308 	mul.w	r3, r7, r8
1a005666:	428b      	cmp	r3, r1
1a005668:	fa04 f402 	lsl.w	r4, r4, r2
1a00566c:	d907      	bls.n	1a00567e <__udivmoddi4+0x256>
1a00566e:	1869      	adds	r1, r5, r1
1a005670:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a005674:	d22f      	bcs.n	1a0056d6 <__udivmoddi4+0x2ae>
1a005676:	428b      	cmp	r3, r1
1a005678:	d92d      	bls.n	1a0056d6 <__udivmoddi4+0x2ae>
1a00567a:	3f02      	subs	r7, #2
1a00567c:	4429      	add	r1, r5
1a00567e:	1acb      	subs	r3, r1, r3
1a005680:	b281      	uxth	r1, r0
1a005682:	fbb3 f0fe 	udiv	r0, r3, lr
1a005686:	fb0e 3310 	mls	r3, lr, r0, r3
1a00568a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00568e:	fb00 f308 	mul.w	r3, r0, r8
1a005692:	428b      	cmp	r3, r1
1a005694:	d907      	bls.n	1a0056a6 <__udivmoddi4+0x27e>
1a005696:	1869      	adds	r1, r5, r1
1a005698:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00569c:	d217      	bcs.n	1a0056ce <__udivmoddi4+0x2a6>
1a00569e:	428b      	cmp	r3, r1
1a0056a0:	d915      	bls.n	1a0056ce <__udivmoddi4+0x2a6>
1a0056a2:	3802      	subs	r0, #2
1a0056a4:	4429      	add	r1, r5
1a0056a6:	1ac9      	subs	r1, r1, r3
1a0056a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0056ac:	e73b      	b.n	1a005526 <__udivmoddi4+0xfe>
1a0056ae:	4637      	mov	r7, r6
1a0056b0:	4630      	mov	r0, r6
1a0056b2:	e709      	b.n	1a0054c8 <__udivmoddi4+0xa0>
1a0056b4:	4607      	mov	r7, r0
1a0056b6:	e6e7      	b.n	1a005488 <__udivmoddi4+0x60>
1a0056b8:	4618      	mov	r0, r3
1a0056ba:	e6fb      	b.n	1a0054b4 <__udivmoddi4+0x8c>
1a0056bc:	4541      	cmp	r1, r8
1a0056be:	d2ab      	bcs.n	1a005618 <__udivmoddi4+0x1f0>
1a0056c0:	ebb8 0a02 	subs.w	sl, r8, r2
1a0056c4:	eb69 020e 	sbc.w	r2, r9, lr
1a0056c8:	3801      	subs	r0, #1
1a0056ca:	4613      	mov	r3, r2
1a0056cc:	e7a4      	b.n	1a005618 <__udivmoddi4+0x1f0>
1a0056ce:	4660      	mov	r0, ip
1a0056d0:	e7e9      	b.n	1a0056a6 <__udivmoddi4+0x27e>
1a0056d2:	4618      	mov	r0, r3
1a0056d4:	e795      	b.n	1a005602 <__udivmoddi4+0x1da>
1a0056d6:	4667      	mov	r7, ip
1a0056d8:	e7d1      	b.n	1a00567e <__udivmoddi4+0x256>
1a0056da:	4681      	mov	r9, r0
1a0056dc:	e77c      	b.n	1a0055d8 <__udivmoddi4+0x1b0>
1a0056de:	3802      	subs	r0, #2
1a0056e0:	442c      	add	r4, r5
1a0056e2:	e747      	b.n	1a005574 <__udivmoddi4+0x14c>
1a0056e4:	f1ac 0c02 	sub.w	ip, ip, #2
1a0056e8:	442b      	add	r3, r5
1a0056ea:	e72f      	b.n	1a00554c <__udivmoddi4+0x124>
1a0056ec:	4638      	mov	r0, r7
1a0056ee:	e708      	b.n	1a005502 <__udivmoddi4+0xda>
1a0056f0:	4637      	mov	r7, r6
1a0056f2:	e6e9      	b.n	1a0054c8 <__udivmoddi4+0xa0>

1a0056f4 <__aeabi_idiv0>:
1a0056f4:	4770      	bx	lr
1a0056f6:	bf00      	nop

1a0056f8 <__libc_init_array>:
1a0056f8:	b570      	push	{r4, r5, r6, lr}
1a0056fa:	4e0d      	ldr	r6, [pc, #52]	; (1a005730 <__libc_init_array+0x38>)
1a0056fc:	4c0d      	ldr	r4, [pc, #52]	; (1a005734 <__libc_init_array+0x3c>)
1a0056fe:	1ba4      	subs	r4, r4, r6
1a005700:	10a4      	asrs	r4, r4, #2
1a005702:	2500      	movs	r5, #0
1a005704:	42a5      	cmp	r5, r4
1a005706:	d109      	bne.n	1a00571c <__libc_init_array+0x24>
1a005708:	4e0b      	ldr	r6, [pc, #44]	; (1a005738 <__libc_init_array+0x40>)
1a00570a:	4c0c      	ldr	r4, [pc, #48]	; (1a00573c <__libc_init_array+0x44>)
1a00570c:	f7ff fa54 	bl	1a004bb8 <_init>
1a005710:	1ba4      	subs	r4, r4, r6
1a005712:	10a4      	asrs	r4, r4, #2
1a005714:	2500      	movs	r5, #0
1a005716:	42a5      	cmp	r5, r4
1a005718:	d105      	bne.n	1a005726 <__libc_init_array+0x2e>
1a00571a:	bd70      	pop	{r4, r5, r6, pc}
1a00571c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a005720:	4798      	blx	r3
1a005722:	3501      	adds	r5, #1
1a005724:	e7ee      	b.n	1a005704 <__libc_init_array+0xc>
1a005726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00572a:	4798      	blx	r3
1a00572c:	3501      	adds	r5, #1
1a00572e:	e7f2      	b.n	1a005716 <__libc_init_array+0x1e>
1a005730:	1a005bbc 	.word	0x1a005bbc
1a005734:	1a005bbc 	.word	0x1a005bbc
1a005738:	1a005bbc 	.word	0x1a005bbc
1a00573c:	1a005bbc 	.word	0x1a005bbc

1a005740 <memcpy>:
1a005740:	b510      	push	{r4, lr}
1a005742:	1e43      	subs	r3, r0, #1
1a005744:	440a      	add	r2, r1
1a005746:	4291      	cmp	r1, r2
1a005748:	d100      	bne.n	1a00574c <memcpy+0xc>
1a00574a:	bd10      	pop	{r4, pc}
1a00574c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005750:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005754:	e7f7      	b.n	1a005746 <memcpy+0x6>

1a005756 <memset>:
1a005756:	4402      	add	r2, r0
1a005758:	4603      	mov	r3, r0
1a00575a:	4293      	cmp	r3, r2
1a00575c:	d100      	bne.n	1a005760 <memset+0xa>
1a00575e:	4770      	bx	lr
1a005760:	f803 1b01 	strb.w	r1, [r3], #1
1a005764:	e7f9      	b.n	1a00575a <memset+0x4>
1a005766:	ffff 6174 	vsra.u32	q11, q10, #1
1a00576a:	6b73      	.short	0x6b73
1a00576c:	5664654c 	.word	0x5664654c
1a005770:	61697261 	.word	0x61697261
1a005774:	00656c62 	.word	0x00656c62
1a005778:	6b736174 	.word	0x6b736174
1a00577c:	4166654d 	.word	0x4166654d
1a005780:	7269746e 	.word	0x7269746e
1a005784:	6f626572 	.word	0x6f626572
1a005788:	00006574 	.word	0x00006574
1a00578c:	6b736174 	.word	0x6b736174
1a005790:	636f7250 	.word	0x636f7250
1a005794:	6f737365 	.word	0x6f737365
1a005798:	00000072 	.word	0x00000072
1a00579c:	6b736174 	.word	0x6b736174
1a0057a0:	6c656341 	.word	0x6c656341
1a0057a4:	64617265 	.word	0x64617265
1a0057a8:	7246726f 	.word	0x7246726f
1a0057ac:	006f6e65 	.word	0x006f6e65
1a0057b0:	6b736174 	.word	0x6b736174
1a0057b4:	6f726947 	.word	0x6f726947
1a0057b8:	706f6373 	.word	0x706f6373
1a0057bc:	ffff006f 	.word	0xffff006f
1a0057c0:	2046454d 	.word	0x2046454d
1a0057c4:	61666544 	.word	0x61666544
1a0057c8:	0d746c75 	.word	0x0d746c75
1a0057cc:	ffff000a 	.word	0xffff000a
1a0057d0:	202d2d2d 	.word	0x202d2d2d
1a0057d4:	52414c41 	.word	0x52414c41
1a0057d8:	2d20414d 	.word	0x2d20414d
1a0057dc:	45202d2d 	.word	0x45202d2d
1a0057e0:	6170206c 	.word	0x6170206c
1a0057e4:	64206b63 	.word	0x64206b63
1a0057e8:	61622065 	.word	0x61622065
1a0057ec:	69726574 	.word	0x69726574
1a0057f0:	73207361 	.word	0x73207361
1a0057f4:	6572626f 	.word	0x6572626f
1a0057f8:	6f736170 	.word	0x6f736170
1a0057fc:	20616c20 	.word	0x20616c20
1a005800:	706d6574 	.word	0x706d6574
1a005804:	74617265 	.word	0x74617265
1a005808:	20617275 	.word	0x20617275
1a00580c:	696d696c 	.word	0x696d696c
1a005810:	00006574 	.word	0x00006574
1a005814:	202d2d2d 	.word	0x202d2d2d
1a005818:	52414c41 	.word	0x52414c41
1a00581c:	2d20414d 	.word	0x2d20414d
1a005820:	45202d2d 	.word	0x45202d2d
1a005824:	6f6d206c 	.word	0x6f6d206c
1a005828:	20726f74 	.word	0x20726f74
1a00582c:	75717a69 	.word	0x75717a69
1a005830:	64726569 	.word	0x64726569
1a005834:	6f73206f 	.word	0x6f73206f
1a005838:	70657262 	.word	0x70657262
1a00583c:	206f7361 	.word	0x206f7361
1a005840:	7420616c 	.word	0x7420616c
1a005844:	65706d65 	.word	0x65706d65
1a005848:	75746172 	.word	0x75746172
1a00584c:	6c206172 	.word	0x6c206172
1a005850:	74696d69 	.word	0x74696d69
1a005854:	00000065 	.word	0x00000065
1a005858:	202d2d2d 	.word	0x202d2d2d
1a00585c:	52414c41 	.word	0x52414c41
1a005860:	2d20414d 	.word	0x2d20414d
1a005864:	45202d2d 	.word	0x45202d2d
1a005868:	6f6d206c 	.word	0x6f6d206c
1a00586c:	20726f74 	.word	0x20726f74
1a005870:	65726564 	.word	0x65726564
1a005874:	206f6863 	.word	0x206f6863
1a005878:	72626f73 	.word	0x72626f73
1a00587c:	73617065 	.word	0x73617065
1a005880:	616c206f 	.word	0x616c206f
1a005884:	6d657420 	.word	0x6d657420
1a005888:	61726570 	.word	0x61726570
1a00588c:	61727574 	.word	0x61727574
1a005890:	6d696c20 	.word	0x6d696c20
1a005894:	00657469 	.word	0x00657469
1a005898:	454c4449 	.word	0x454c4449
1a00589c:	ffffff00 	.word	0xffffff00
1a0058a0:	51726d54 	.word	0x51726d54
1a0058a4:	ffffff00 	.word	0xffffff00
1a0058a8:	20726d54 	.word	0x20726d54
1a0058ac:	00637653 	.word	0x00637653

1a0058b0 <lpcUarts>:
1a0058b0:	40081000 06020406 00180205 40081000     ...@...........@
1a0058c0:	09070509 00180706 40082000 00000000     ......... .@....
1a0058d0:	00190000 400c1000 07060107 001a0602     .......@........
1a0058e0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0058f0:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a005900:	0072656d                                mer.

1a005904 <gpioPinsInit>:
1a005904:	02000104 00050701 05010d03 04080100     ................
1a005914:	02020002 02000304 00000403 04070002     ................
1a005924:	030c0300 09050402 05040103 04030208     ................
1a005934:	04020305 06040504 0802000c 03000b06     ................
1a005944:	00090607 07060503 060f0504 03030004     ................
1a005954:	02000404 00050404 06040502 04060200     ................
1a005964:	0c050408 05040a04 0003010e 14010a00     ................
1a005974:	010f0000 0d000012 00001101 0010010c     ................
1a005984:	07070300 000f0300 01000001 00000000     ................
1a005994:	000a0600 08060603 06100504 04030005     ................
1a0059a4:	03000106 04090400 04010d05 010b0000     ................
1a0059b4:	0200000f 00000001 00010104 02010800     ................
1a0059c4:	01090000 09010006 05040002 04010200     ................
1a0059d4:	02020105 02020504 0e00000a 01000b02     ................
1a0059e4:	000c020b 00040c01 04000200 01020001     ................
1a0059f4:	02000204 00030402 03070302 070b0300     ................
1a005a04:	0c030004 03000507 0006070d 01020e03     ................
1a005a14:	04010504 06020006 02000504 00040405     ................
1a005a24:	08040402 040c0504 0d050409 05040a04     ................
1a005a34:	0005010e ffff0801 ff000a0d              ............

1a005a40 <ultrasonicSensorsIrqMap>:
1a005a40:	ff020100                                ....

1a005a44 <ExtRateIn>:
1a005a44:	00000000                                ....

1a005a48 <GpioButtons>:
1a005a48:	08000400 09010900                       ........

1a005a50 <GpioLeds>:
1a005a50:	01050005 0e000205 0c010b01              ............

1a005a5c <GpioPorts>:
1a005a5c:	03030003 0f050403 05031005 07030603     ................
1a005a6c:	ffff0802                                ....

1a005a70 <OscRateIn>:
1a005a70:	00b71b00                                ....

1a005a74 <InitClkStates>:
1a005a74:	01010f01                                ....

1a005a78 <pinmuxing>:
1a005a78:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005a88:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005a98:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005aa8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005ab8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005ac8:	00d50301 00d50401 00160107 00560207     ..............V.
1a005ad8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005ae8:	00570206                                ..W.

1a005aec <UART_BClock>:
1a005aec:	01a201c2 01620182                       ......b.

1a005af4 <UART_PClock>:
1a005af4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005b04:	000000ff                                ....

1a005b08 <periph_to_base>:
1a005b08:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005b18:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005b28:	000100e0 01000100 01200003 00060120     .......... . ...
1a005b38:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005b48:	01820013 00120182 01a201a2 01c20011     ................
1a005b58:	001001c2 01e201e2 0202000f 000e0202     ................
1a005b68:	02220222 0223000d 001c0223              "."...#.#...

1a005b74 <InitClkStates>:
1a005b74:	00010100 00010909 0001090a 01010701     ................
1a005b84:	00010902 00010906 0101090c 0001090d     ................
1a005b94:	0001090e 0001090f 00010910 00010911     ................
1a005ba4:	00010912 00010913 00011114 00011119     ................
1a005bb4:	0001111a 0001111b                       ........
