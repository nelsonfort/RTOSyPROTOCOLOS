
mis_proyectos/FinalRtosProtocolos/out/FinalRtosProtocolos.elf:     file format elf32-littlearm
mis_proyectos/FinalRtosProtocolos/out/FinalRtosProtocolos.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0048ed

Program Header:
0x70000001 off    0x00015c24 vaddr 0x1a005c24 paddr 0x1a005c24 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010088 vaddr 0x10000088 paddr 0x10000088 align 2**16
         filesz 0x00000000 memsz 0x00002b30 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005c2c memsz 0x00005c2c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005c2c align 2**16
         filesz 0x00000084 memsz 0x00000084 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c24  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  10000000  1a005c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020084  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
  6 .bss          00002b30  10000088  10000088  00010088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a005c24  1a005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020084  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020084  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020084  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 17 .noinit       00000000  10002bb8  10002bb8  00020084  2**2
                  CONTENTS
 18 .debug_info   0002adea  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000057bb  00000000  00000000  0004ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000b112  00000000  00000000  00050629  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000f00  00000000  00000000  0005b73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00001018  00000000  00000000  0005c63b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000b61b  00000000  00000000  0005d653  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000124c1  00000000  00000000  00068c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002ddf3  00000000  00000000  0007b12f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000a8f22  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000a8fa1  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000028f8  00000000  00000000  000a8fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005c24 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002bb8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 stringManipulation.c
00000000 l    df *ABS*	00000000 FinalRtosProtocolos.c
100000a8 l     O .bss	00000001 debugPrint
100000b0 l     O .bss	00000004 xHigherPriorityTaskWoken.13941
100000b4 l     O .bss	00000004 xHigherPriorityTaskWoken.13945
100000b8 l     O .bss	00000004 xHigherPriorityTaskWoken.13949
100000bc l     O .bss	00000004 xHigherPriorityTaskWoken.13953
00000000 l    df *ABS*	00000000 heap_1.c
100000c4 l     O .bss	00002000 ucHeap
100000c0 l     O .bss	00000004 pucAlignedHeap.11323
100020c4 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a001462 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a001474 l     F .text	0000001e prvIsQueueFull
1a001492 l     F .text	0000001a prvIsQueueEmpty
1a0014ac l     F .text	00000076 prvCopyDataToQueue
1a001522 l     F .text	00000024 prvCopyDataFromQueue
1a001546 l     F .text	0000006e prvUnlockQueue
1a001638 l     F .text	00000022 prvInitialiseNewQueue
1a0018b4 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c8 l     O .bss	00000168 uxIdleTaskStack.10613
10002230 l     O .bss	000005a0 uxTimerTaskStack.10620
100027d0 l     O .bss	00000060 xIdleTaskTCB.10612
10002830 l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001e94 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001ec0 l     F .text	00000092 prvInitialiseNewTask
1a001f54 l     F .text	00000068 prvInitialiseTaskLists
1a001fbc l     F .text	000000ac prvAddNewTaskToReadyList
1a002068 l     F .text	00000038 prvDeleteTCB
1a0020a0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0020ec l     F .text	00000028 prvIdleTask
1a002114 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002894 l     O .bss	00000004 pxDelayedTaskList
10002898 l     O .bss	00000004 pxOverflowDelayedTaskList
1000289c l     O .bss	0000008c pxReadyTasksLists
10002928 l     O .bss	00000004 uxCurrentNumberOfTasks
1000292c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002930 l     O .bss	00000004 uxPendedTicks
10002934 l     O .bss	00000004 uxSchedulerSuspended
10002938 l     O .bss	00000004 uxTaskNumber
1000293c l     O .bss	00000004 uxTopReadyPriority
10002940 l     O .bss	00000014 xDelayedTaskList1
10002954 l     O .bss	00000014 xDelayedTaskList2
10002968 l     O .bss	00000004 xNextTaskUnblockTime
1000296c l     O .bss	00000004 xNumOfOverflows
10002970 l     O .bss	00000014 xPendingReadyList
10002984 l     O .bss	00000004 xSchedulerRunning
10002988 l     O .bss	00000014 xSuspendedTaskList
1000299c l     O .bss	00000014 xTasksWaitingTermination
100029b0 l     O .bss	00000004 xTickCount
100029b4 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002af4 l     F .text	00000020 prvGetNextExpireTime
1a002b14 l     F .text	00000048 prvInsertTimerInActiveList
1a002b5c l     F .text	00000070 prvCheckForValidListAndQueue
1a002bcc l     F .text	00000040 prvInitialiseNewTimer
1a002f9c l     F .text	00000016 prvTimerTask
1a002d28 l     F .text	00000078 prvSwitchTimerLists
1a002da0 l     F .text	0000002c prvSampleTimeNow
1a002dcc l     F .text	00000060 prvProcessExpiredTimer
1a002e2c l     F .text	00000074 prvProcessTimerOrBlockTask
1a002ea0 l     F .text	000000fc prvProcessReceivedCommands
100029b8 l     O .bss	00000004 pxCurrentTimerList
100029bc l     O .bss	00000004 pxOverflowTimerList
100029c0 l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002a60 l     O .bss	00000014 xActiveTimerList1
10002a74 l     O .bss	00000014 xActiveTimerList2
10002a88 l     O .bss	00000004 xLastTime.11662
10002a8c l     O .bss	00000050 xStaticTimerQueue.11712
10002adc l     O .bss	00000004 xTimerQueue
10002ae0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002fb4 l     F .text	00000040 prvTaskExitError
1a002ff4 l     F .text	00000022 prvPortStartFirstTask
1a00301c l     F .text	0000000e vPortEnableVFP
1a003080 l       .text	00000000 pxCurrentTCBConst2
1a003160 l       .text	00000000 pxCurrentTCBConst
10002ae4 l     O .bss	00000001 ucMaxSysCallPriority
10002ae8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a005920 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002aec l     O .bss	00000004 callBackFuncParams
10002af0 l     O .bss	00000008 tickCounter
10002af8 l     O .bss	00000004 tickHookFunction
10002afc l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0034ac l     F .text	00000002 errorOcurred
1a0034ae l     F .text	00000002 doNothing
1000000c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00369c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b2c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 board.c
1a003a5c l     F .text	00000044 Board_LED_Init
1a003aa0 l     F .text	00000040 Board_TEC_Init
1a003ae0 l     F .text	00000040 Board_GPIO_Init
1a003b20 l     F .text	00000038 Board_SPI_Init
1a003b58 l     F .text	00000024 Board_I2C_Init
1a003b7c l     F .text	00000030 Board_ADC_Init
1a005ab0 l     O .text	00000008 GpioButtons
1a005ab8 l     O .text	0000000c GpioLeds
1a005ac4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005adc l     O .text	00000004 InitClkStates
1a005ae0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003cc8 l     F .text	0000002c Chip_UART_GetIndex
1a005b54 l     O .text	00000008 UART_BClock
1a005b5c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003e70 l     F .text	00000014 Chip_ADC_GetClockIndex
1a003e84 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00404c l     F .text	000000a4 pll_calc_divs
1a0040f0 l     F .text	0000010c pll_get_frac
1a0041fc l     F .text	0000004c Chip_Clock_FindBaseClock
1a004470 l     F .text	00000022 Chip_Clock_GetDivRate
10002b30 l     O .bss	00000008 audio_usb_pll_freq
1a005b70 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005bdc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000004c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004838 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00484c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 s_modf.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 
1a005c24 l       .bss_RAM5	00000000 __init_array_end
1a005c24 l       .bss_RAM5	00000000 __preinit_array_end
1a005c24 l       .bss_RAM5	00000000 __init_array_start
1a005c24 l       .bss_RAM5	00000000 __preinit_array_start
1a004294 g     F .text	0000001c Chip_Clock_GetDividerSource
10002b38 g     O .bss	00000034 vehiculo
1a00563c g     F .text	00000010 strcpy
1a003530 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a003f1c g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0030c8 g     F .text	0000002c vPortExitCritical
1a004d40 g     F .text	0000005a .hidden __floatdidf
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a001d7c g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a003fe2 g     F .text	0000000c Chip_ADC_SetResolution
1a000fec g     F .text	00000138 configInterrupts
1a003164 g     F .text	0000002c SysTick_Handler
1a003d48 g     F .text	00000040 Chip_UART_SetBaud
1a003a44 g     F .text	00000008 printString
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a003100 g     F .text	00000064 PendSV_Handler
1a0018e2 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005c2c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
10002890 g     O .bss	00000004 pxCurrentTCB
53ff2fa2 g       *ABS*	00000000 __valid_user_code_checksum
1a005c2c g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a0027ec g     F .text	00000018 vTaskInternalSetTimeOutState
1000008c g     O .bss	00000004 SemBinTec1RiseEdge
1a0007c0 g     F .text	00000254 taskProcessor
1a003574 g     F .text	00000044 TIMER3_IRQHandler
1a004512 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a0031c8 g     F .text	00000110 xPortStartScheduler
1a0055f8 g     F .text	00000016 memcpy
1a0026f8 g     F .text	00000030 vTaskPlaceOnEventList
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a004cc8 g     F .text	00000022 .hidden __floatsidf
1a003190  w    F .text	00000038 vPortSetupTimerInterrupt
1a000790 g     F .text	0000002a taskLedVariable
1a0052b0 g     F .text	00000000 .hidden __aeabi_uldivmod
10002bb8 g       .noinit	00000000 _noinit
1a00144c g     F .text	00000016 vPortFree
1a003412 g     F .text	00000018 uartWriteString
10002bb4 g     O .bss	00000004 SystemCoreClock
1a003cf4 g     F .text	00000054 Chip_UART_Init
1a001bb8 g     F .text	0000019c xQueueSemaphoreTake
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a00342c g     F .text	00000034 tickerCallback
1a0032d8 g     F .text	0000005c vPortValidateInterruptPriority
1a003ec4 g     F .text	00000018 readAdcVal
10000098 g     O .bss	00000004 SemBinTec3FallEdge
1a000180  w    F .text	00000002 UsageFault_Handler
1a0045c4 g     F .text	0000004c Chip_Clock_GetRate
1a001dea g     F .text	00000018 vListInsertEnd
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a003a34 g     F .text	00000010 printInitUart
1a000a70 g     F .text	0000051c taskEnvioDatos
1a003c50 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004ca8 g     F .text	0000001e .hidden __aeabi_ui2d
1a0052e0 g     F .text	000002cc .hidden __udivmoddi4
1a004a24 g     F .text	00000000 .hidden __aeabi_drsub
1a005aac g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001de4 g     F .text	00000006 vListInitialiseItem
1a001298 g     F .text	0000006c GPIO1_IRQHandler
1a001a60 g     F .text	00000158 xQueueReceive
10002b70 g     O .bss	00000040 xQueueRegistry
10000094 g     O .bss	00000004 SemBinTec2RiseEdge
1a004cec g     F .text	00000042 .hidden __extendsfdf2
1a004ff0 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001e78 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a004a30 g     F .text	00000276 .hidden __adddf3
1a005c24 g       .ARM.exidx	00000000 __exidx_start
10002b6c g     O .bss	00000004 colaMsg
1a004d9c g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a003eb6 g     F .text	0000000e setStartMode
1a0055b0 g     F .text	00000048 __libc_init_array
1a0035b8 g     F .text	0000008c adcInit
1a004ca8 g     F .text	0000001e .hidden __floatunsidf
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a0013dc g     F .text	00000070 pvPortMalloc
1a003bd0 g     F .text	0000002c Board_Init
1a004970 g     F .text	00000002 _init
1a001dce g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a005210 g     F .text	0000009e .hidden __aeabi_d2f
1a002328 g     F .text	0000000c xTaskGetTickCount
1a001738 g     F .text	0000017c xQueueGenericSend
1a000300 g     F .text	00000068 integerToString
1a00018a  w    F .text	00000002 RTC_IRQHandler
10002bb8 g       .bss	00000000 _ebss
1a003fee g     F .text	00000028 Chip_ADC_EnableChannel
1a0034b0 g     F .text	00000040 TIMER0_IRQHandler
1a0005c0 g     F .text	000000e8 taskAntirreboteTec3
1a003460 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a000368 g     F .text	00000088 floatToString
1a004800 g     F .text	00000038 Chip_I2C_SetClockRate
1a0051c0 g     F .text	0000004e .hidden __fixdfsi
1a002968 g     F .text	000000b0 xTaskPriorityDisinherit
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a004248 g     F .text	0000004c Chip_Clock_EnableCrystal
1a003f32 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002760 g     F .text	0000008c xTaskRemoveFromEventList
1a001e92 g     F .text	00000002 vApplicationMallocFailedHook
1a004a30 g     F .text	00000276 .hidden __aeabi_dadd
1a00018c g     F .text	0000001e data_init
1a00561e g     F .text	0000001e strcat
1a003f90 g     F .text	00000020 Chip_ADC_SetStartMode
1a004d30 g     F .text	0000006a .hidden __aeabi_ul2d
1a0034f0 g     F .text	00000040 TIMER1_IRQHandler
1a0047dc g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a003a4c g     F .text	00000010 printEnter
1a004974 g     F .text	000000b0 modf
1a004404 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a005974 g     O .text	00000136 gpioPinsInit
1a0033f8 g     F .text	0000001a uartWriteByte
1a002ad8 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a004864 g     F .text	00000012 Chip_SSP_SetClockRate
1a00390e g     F .text	00000016 gpioToggle
1a001304 g     F .text	0000006c GPIO2_IRQHandler
1a002804 g     F .text	00000080 xTaskCheckForTimeOut
1a003644 g     F .text	00000058 adcRead
1a0044ec g     F .text	00000026 Chip_Clock_GetBaseClock
1a0028b0 g     F .text	000000b8 xTaskPriorityInherit
1a0003f0 g     F .text	000000e8 taskAntirreboteTec1
10000088 g       .bss	00000000 _bss
1a003f3a g     F .text	00000036 Chip_ADC_ReadStatus
1a003fb0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000a14 g     F .text	0000005c taskAceleradorFreno
1a004a2c g     F .text	0000027a .hidden __aeabi_dsub
1a002318 g     F .text	00000010 vTaskSuspendAll
1a004d30 g     F .text	0000006a .hidden __floatundidf
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a004876 g     F .text	0000003e Chip_SSP_SetBitRate
1a001e36 g     F .text	00000028 uxListRemove
1a004664 g     F .text	00000002 Chip_GPIO_Init
1a005ad8 g     O .text	00000004 OscRateIn
1a00337c g     F .text	0000007c uartInit
1a0021ac g     F .text	00000072 xTaskCreateStatic
10002bb8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a002630 g     F .text	000000c8 vTaskSwitchContext
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a00165a g     F .text	00000090 xQueueGenericCreateStatic
1a002728 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a004cc8 g     F .text	00000022 .hidden __aeabi_i2d
1a0036d0 g     F .text	00000194 gpioInit
1a001e60 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0004d8 g     F .text	000000e8 taskAntirreboteTec2
1a002cbc g     F .text	0000006c xTimerGenericCommand
1a001e90 g     F .text	00000002 vApplicationStackOverflowHook
1a0055ac  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004ff0 g     F .text	000001d0 .hidden __divdf3
1a004d9c g     F .text	00000254 .hidden __muldf3
1a003924 g     F .text	0000001c USB0_IRQHandler
1a004590 g     F .text	00000034 Chip_Clock_Disable
1a001370 g     F .text	0000006c GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a0042b0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00560e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a001124 g     F .text	00000108 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
1a001e02 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a003060 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a002c0c g     F .text	00000064 xTimerCreateTimerTask
1a005210 g     F .text	0000009e .hidden __truncdfsf2
1a004d40 g     F .text	0000005a .hidden __aeabi_l2d
1a003350 g     F .text	00000018 uartTxReady
1a002540 g     F .text	000000a4 vTaskDelayUntil
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a004520 g     F .text	0000003c Chip_Clock_EnableOpts
1a0016ea g     F .text	0000004e xQueueGenericCreate
1a0042cc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a004610 g     F .text	00000054 fpuInit
100000ac g     O .bss	00000004 mutexSem
1a004384 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003bfc g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003864 g     F .text	00000056 gpioWrite
1a00244c g     F .text	000000f4 xTaskResumeAll
1a002284 g     F .text	00000094 vTaskStartScheduler
1a003edc g     F .text	00000040 Chip_ADC_Init
1a000f8c g     F .text	00000060 taskUartConnection
10002bb0 g     O .bss	00000004 g_pUsbApi
1a003c18 g     F .text	00000038 Board_SetupMuxing
1a003d88 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a004016 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003368 g     F .text	00000014 uartTxWrite
10000088 g     O .bss	00000004 SemBinTec1FallEdge
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a002884 g     F .text	0000000c vTaskMissedYield
10002bb8 g       .bss	00000000 _pvHeapStart
100000a4 g     O .bss	00000004 SemBinTec4RiseEdge
1a000178 g       .text	00000000 __section_table_end
1a0048b4 g     F .text	00000038 Chip_SSP_Init
100000a0 g     O .bss	00000004 SemBinTec4FallEdge
1a001d54 g     F .text	00000028 vQueueAddToRegistry
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a002334 g     F .text	00000118 xTaskIncrementTick
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a003bac g     F .text	00000024 Board_Debug_Init
1a0015b4 g     F .text	00000084 xQueueGenericReset
1a003f70 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
1a0006a8 g     F .text	000000e8 taskAntirreboteTec4
10000084 g       .data	00000000 _edata
1a0047bc g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a00221e g     F .text	00000066 xTaskCreate
1a004668 g     F .text	00000154 Chip_SetupCoreClock
1a00122c g     F .text	0000006c GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0048ec g     F .text	00000084 ResetISR
1a004038 g     F .text	00000014 SystemCoreClockUpdate
1a0051c0 g     F .text	0000004e .hidden __aeabi_d2iz
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a0025e4 g     F .text	0000004c vTaskDelay
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002890 g     F .text	00000020 xTaskGetSchedulerState
1a002a18 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0055ac  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a00564c g     F .text	00000010 strlen
1a003030 g     F .text	0000002c pxPortInitialiseStack
1a00455c g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a002c70 g     F .text	0000004c xTimerCreateStatic
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a0038ba g     F .text	00000054 gpioRead
1a004cec g     F .text	00000042 .hidden __aeabi_f2d
1a003940 g     F .text	000000f4 boardInit
1a003084 g     F .text	00000044 vPortEnterCritical
1a004a2c g     F .text	0000027a .hidden __subdf3
10000090 g     O .bss	00000004 SemBinTec2FallEdge
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a0018cc g     F .text	00000016 xQueueCreateMutex
1a004494 g     F .text	00000058 Chip_Clock_SetBaseClock
1000009c g     O .bss	00000004 SemBinTec3RiseEdge
1a003334 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a0019ae g     F .text	000000b2 xQueueGiveFromISR
1a003cbc g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 ed 48 00 1a 79 01 00 1a 7b 01 00 1a     .....H..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a a2 2f ff 53     }............/.S
	...
1a00002c:	61 30 00 1a 85 01 00 1a 00 00 00 00 01 31 00 1a     a0...........1..
1a00003c:	65 31 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     e1..............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 25 39 00 1a 8b 01 00 1a 8b 01 00 1a     ....%9..........
1a00006c:	8b 01 00 1a b1 34 00 1a f1 34 00 1a 31 35 00 1a     .....4...4..15..
1a00007c:	75 35 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     u5..............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 2d 12 00 1a 99 12 00 1a 05 13 00 1a     ....-...........
1a0000cc:	71 13 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     q...............
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a005c2c 	.word	0x1a005c2c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000084 	.word	0x00000084
1a000120:	1a005c2c 	.word	0x1a005c2c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005c2c 	.word	0x1a005c2c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005c2c 	.word	0x1a005c2c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005c2c 	.word	0x1a005c2c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	00002b30 	.word	0x00002b30
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <integerToString>:
#include <math.h>
#include <string.h>

char* integerToString(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000300:	1e93      	subs	r3, r2, #2
1a000302:	2b22      	cmp	r3, #34	; 0x22
1a000304:	d802      	bhi.n	1a00030c <integerToString+0xc>
char* integerToString(int value, char* result, int base) {
1a000306:	b4f0      	push	{r4, r5, r6, r7}

   char* ptr = result, *ptr1 = result, tmp_char;
1a000308:	460d      	mov	r5, r1
1a00030a:	e005      	b.n	1a000318 <integerToString+0x18>
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a00030c:	2300      	movs	r3, #0
1a00030e:	700b      	strb	r3, [r1, #0]
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a000310:	4608      	mov	r0, r1
1a000312:	4770      	bx	lr
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000314:	4635      	mov	r5, r6
      value /= base;
1a000316:	4620      	mov	r0, r4
1a000318:	fb90 f4f2 	sdiv	r4, r0, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a00031c:	fb02 0314 	mls	r3, r2, r4, r0
1a000320:	3323      	adds	r3, #35	; 0x23
1a000322:	1c6e      	adds	r6, r5, #1
1a000324:	4f0f      	ldr	r7, [pc, #60]	; (1a000364 <integerToString+0x64>)
1a000326:	5cfb      	ldrb	r3, [r7, r3]
1a000328:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a00032a:	2c00      	cmp	r4, #0
1a00032c:	d1f2      	bne.n	1a000314 <integerToString+0x14>
   if (tmp_value < 0) *ptr++ = '-';
1a00032e:	2800      	cmp	r0, #0
1a000330:	db04      	blt.n	1a00033c <integerToString+0x3c>
   *ptr-- = '\0';
1a000332:	1e72      	subs	r2, r6, #1
1a000334:	2300      	movs	r3, #0
1a000336:	7033      	strb	r3, [r6, #0]
   char* ptr = result, *ptr1 = result, tmp_char;
1a000338:	460b      	mov	r3, r1
   while(ptr1 < ptr) {
1a00033a:	e00d      	b.n	1a000358 <integerToString+0x58>
   if (tmp_value < 0) *ptr++ = '-';
1a00033c:	1cae      	adds	r6, r5, #2
1a00033e:	232d      	movs	r3, #45	; 0x2d
1a000340:	706b      	strb	r3, [r5, #1]
1a000342:	e7f6      	b.n	1a000332 <integerToString+0x32>
      tmp_char = *ptr;
1a000344:	4614      	mov	r4, r2
1a000346:	f814 0901 	ldrb.w	r0, [r4], #-1
      *ptr--= *ptr1;
1a00034a:	461d      	mov	r5, r3
1a00034c:	f815 6b01 	ldrb.w	r6, [r5], #1
1a000350:	7016      	strb	r6, [r2, #0]
      *ptr1++ = tmp_char;
1a000352:	7018      	strb	r0, [r3, #0]
1a000354:	462b      	mov	r3, r5
      *ptr--= *ptr1;
1a000356:	4622      	mov	r2, r4
   while(ptr1 < ptr) {
1a000358:	429a      	cmp	r2, r3
1a00035a:	d8f3      	bhi.n	1a000344 <integerToString+0x44>
}
1a00035c:	4608      	mov	r0, r1
1a00035e:	bcf0      	pop	{r4, r5, r6, r7}
1a000360:	4770      	bx	lr
1a000362:	bf00      	nop
1a000364:	1a005660 	.word	0x1a005660

1a000368 <floatToString>:

char* floatToString(float value, char* result) {
1a000368:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00036a:	b087      	sub	sp, #28
1a00036c:	4605      	mov	r5, r0
    int i;
    int fractionAbs;
    char *strEntero, *strDecimal;
    char strRes[15];

    parteDecimal = modf(value,&parteEntera);
1a00036e:	ee10 0a10 	vmov	r0, s0
1a000372:	f004 fcbb 	bl	1a004cec <__aeabi_f2d>
1a000376:	ec41 0b10 	vmov	d0, r0, r1
1a00037a:	a804      	add	r0, sp, #16
1a00037c:	f004 fafa 	bl	1a004974 <modf>
1a000380:	ec57 6b10 	vmov	r6, r7, d0

    for(i=0;i<4;i++){
1a000384:	2400      	movs	r4, #0
1a000386:	e008      	b.n	1a00039a <floatToString+0x32>
        parteDecimal = parteDecimal * 10;
1a000388:	2200      	movs	r2, #0
1a00038a:	4b17      	ldr	r3, [pc, #92]	; (1a0003e8 <floatToString+0x80>)
1a00038c:	4630      	mov	r0, r6
1a00038e:	4639      	mov	r1, r7
1a000390:	f004 fd04 	bl	1a004d9c <__aeabi_dmul>
1a000394:	4606      	mov	r6, r0
1a000396:	460f      	mov	r7, r1
    for(i=0;i<4;i++){
1a000398:	3401      	adds	r4, #1
1a00039a:	2c03      	cmp	r4, #3
1a00039c:	ddf4      	ble.n	1a000388 <floatToString+0x20>
    }
    result = integerToString((int) parteEntera,result,10);
1a00039e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0003a2:	f004 ff0d 	bl	1a0051c0 <__aeabi_d2iz>
1a0003a6:	220a      	movs	r2, #10
1a0003a8:	4629      	mov	r1, r5
1a0003aa:	f7ff ffa9 	bl	1a000300 <integerToString>
1a0003ae:	4604      	mov	r4, r0
    strcat(result,".");
1a0003b0:	f005 f94c 	bl	1a00564c <strlen>
1a0003b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0003ec <floatToString+0x84>)
1a0003b6:	881b      	ldrh	r3, [r3, #0]
1a0003b8:	5223      	strh	r3, [r4, r0]
    fractionAbs = fabs((int) parteDecimal);
1a0003ba:	4630      	mov	r0, r6
1a0003bc:	4639      	mov	r1, r7
1a0003be:	f004 feff 	bl	1a0051c0 <__aeabi_d2iz>
1a0003c2:	f004 fc81 	bl	1a004cc8 <__aeabi_i2d>
1a0003c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a0003ca:	4619      	mov	r1, r3
1a0003cc:	f004 fef8 	bl	1a0051c0 <__aeabi_d2iz>
    strcat(result,integerToString(fractionAbs,strRes,10));
1a0003d0:	220a      	movs	r2, #10
1a0003d2:	4669      	mov	r1, sp
1a0003d4:	f7ff ff94 	bl	1a000300 <integerToString>
1a0003d8:	4601      	mov	r1, r0
1a0003da:	4620      	mov	r0, r4
1a0003dc:	f005 f91f 	bl	1a00561e <strcat>

    return result;
}
1a0003e0:	4620      	mov	r0, r4
1a0003e2:	b007      	add	sp, #28
1a0003e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0003e6:	bf00      	nop
1a0003e8:	40240000 	.word	0x40240000
1a0003ec:	1a00565c 	.word	0x1a00565c

1a0003f0 <taskAntirreboteTec1>:
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

void taskAntirreboteTec1( void* taskParmPtr ){
1a0003f0:	b500      	push	{lr}
1a0003f2:	b087      	sub	sp, #28
	//-- TEC1 <=> START
	btnStruct 	tecla1;
	vTaskDelay(3000/portTICK_RATE_MS);
1a0003f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0003f8:	f002 f8f4 	bl	1a0025e4 <vTaskDelay>
	tecla1.state = UP;
1a0003fc:	2300      	movs	r3, #0
1a0003fe:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla1.tec = TEC1;
	tecla1.tic = 0;
1a000402:	9303      	str	r3, [sp, #12]
	tecla1.toc = 0;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000404:	f001 ff90 	bl	1a002328 <xTaskGetTickCount>
1a000408:	9001      	str	r0, [sp, #4]
1a00040a:	e009      	b.n	1a000420 <taskAntirreboteTec1+0x30>

	while(1){
		if( tecla1.state == UP ){
			if(xSemaphoreTake(SemBinTec1FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a00040c:	2101      	movs	r1, #1
1a00040e:	4b2e      	ldr	r3, [pc, #184]	; (1a0004c8 <taskAntirreboteTec1+0xd8>)
1a000410:	6818      	ldr	r0, [r3, #0]
1a000412:	f001 fbd1 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000416:	bb40      	cbnz	r0, 1a00046a <taskAntirreboteTec1+0x7a>
					}
					gpioToggle(LEDR);
				}
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a000418:	2105      	movs	r1, #5
1a00041a:	a801      	add	r0, sp, #4
1a00041c:	f002 f890 	bl	1a002540 <vTaskDelayUntil>
		if( tecla1.state == UP ){
1a000420:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a000424:	2b00      	cmp	r3, #0
1a000426:	d0f1      	beq.n	1a00040c <taskAntirreboteTec1+0x1c>
		else if( tecla1.state == FALLING ){
1a000428:	2b02      	cmp	r3, #2
1a00042a:	d025      	beq.n	1a000478 <taskAntirreboteTec1+0x88>
		else if( tecla1.state == DOWN ){
1a00042c:	2b01      	cmp	r3, #1
1a00042e:	d032      	beq.n	1a000496 <taskAntirreboteTec1+0xa6>
		else if( tecla1.state == RAISING ){
1a000430:	2b03      	cmp	r3, #3
1a000432:	d1f1      	bne.n	1a000418 <taskAntirreboteTec1+0x28>
			tecla1.toc = xTaskGetTickCount();
1a000434:	f001 ff78 	bl	1a002328 <xTaskGetTickCount>
			if(tecla1.toc - tecla1.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000438:	9b03      	ldr	r3, [sp, #12]
1a00043a:	1ac0      	subs	r0, r0, r3
1a00043c:	2814      	cmp	r0, #20
1a00043e:	d9eb      	bls.n	1a000418 <taskAntirreboteTec1+0x28>
				if(gpioRead(tecla1.tec) == 1){
1a000440:	2024      	movs	r0, #36	; 0x24
1a000442:	f003 fa3a 	bl	1a0038ba <gpioRead>
1a000446:	2801      	cmp	r0, #1
1a000448:	d1e6      	bne.n	1a000418 <taskAntirreboteTec1+0x28>
					tecla1.state = UP;
1a00044a:	2300      	movs	r3, #0
1a00044c:	f88d 3008 	strb.w	r3, [sp, #8]
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000450:	4b1e      	ldr	r3, [pc, #120]	; (1a0004cc <taskAntirreboteTec1+0xdc>)
1a000452:	6818      	ldr	r0, [r3, #0]
1a000454:	b128      	cbz	r0, 1a000462 <taskAntirreboteTec1+0x72>
						if( xSemaphoreTake( mutexSem, portMAX_DELAY ) == pdTRUE )
1a000456:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00045a:	f001 fbad 	bl	1a001bb8 <xQueueSemaphoreTake>
1a00045e:	2801      	cmp	r0, #1
1a000460:	d027      	beq.n	1a0004b2 <taskAntirreboteTec1+0xc2>
					gpioToggle(LEDR);
1a000462:	2028      	movs	r0, #40	; 0x28
1a000464:	f003 fa53 	bl	1a00390e <gpioToggle>
1a000468:	e7d6      	b.n	1a000418 <taskAntirreboteTec1+0x28>
				tecla1.tic = xTaskGetTickCount();
1a00046a:	f001 ff5d 	bl	1a002328 <xTaskGetTickCount>
1a00046e:	9003      	str	r0, [sp, #12]
				tecla1.state = FALLING;
1a000470:	2302      	movs	r3, #2
1a000472:	f88d 3008 	strb.w	r3, [sp, #8]
1a000476:	e7cf      	b.n	1a000418 <taskAntirreboteTec1+0x28>
			tecla1.toc = xTaskGetTickCount();
1a000478:	f001 ff56 	bl	1a002328 <xTaskGetTickCount>
			if(tecla1.toc - tecla1.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a00047c:	9b03      	ldr	r3, [sp, #12]
1a00047e:	1ac0      	subs	r0, r0, r3
1a000480:	2814      	cmp	r0, #20
1a000482:	d9c9      	bls.n	1a000418 <taskAntirreboteTec1+0x28>
				if(gpioRead(tecla1.tec) == 0){
1a000484:	2024      	movs	r0, #36	; 0x24
1a000486:	f003 fa18 	bl	1a0038ba <gpioRead>
1a00048a:	2800      	cmp	r0, #0
1a00048c:	d1c4      	bne.n	1a000418 <taskAntirreboteTec1+0x28>
					tecla1.state = DOWN;
1a00048e:	2301      	movs	r3, #1
1a000490:	f88d 3008 	strb.w	r3, [sp, #8]
1a000494:	e7c0      	b.n	1a000418 <taskAntirreboteTec1+0x28>
			if(xSemaphoreTake(SemBinTec1RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a000496:	2101      	movs	r1, #1
1a000498:	4b0d      	ldr	r3, [pc, #52]	; (1a0004d0 <taskAntirreboteTec1+0xe0>)
1a00049a:	6818      	ldr	r0, [r3, #0]
1a00049c:	f001 fb8c 	bl	1a001bb8 <xQueueSemaphoreTake>
1a0004a0:	2800      	cmp	r0, #0
1a0004a2:	d0b9      	beq.n	1a000418 <taskAntirreboteTec1+0x28>
				tecla1.tic = xTaskGetTickCount();
1a0004a4:	f001 ff40 	bl	1a002328 <xTaskGetTickCount>
1a0004a8:	9003      	str	r0, [sp, #12]
				tecla1.state = RAISING;
1a0004aa:	2303      	movs	r3, #3
1a0004ac:	f88d 3008 	strb.w	r3, [sp, #8]
1a0004b0:	e7b2      	b.n	1a000418 <taskAntirreboteTec1+0x28>
							vehiculo.start = ON;
1a0004b2:	4b08      	ldr	r3, [pc, #32]	; (1a0004d4 <taskAntirreboteTec1+0xe4>)
1a0004b4:	2201      	movs	r2, #1
1a0004b6:	751a      	strb	r2, [r3, #20]
							xSemaphoreGive( mutexSem );
1a0004b8:	2300      	movs	r3, #0
1a0004ba:	461a      	mov	r2, r3
1a0004bc:	4619      	mov	r1, r3
1a0004be:	4803      	ldr	r0, [pc, #12]	; (1a0004cc <taskAntirreboteTec1+0xdc>)
1a0004c0:	6800      	ldr	r0, [r0, #0]
1a0004c2:	f001 f939 	bl	1a001738 <xQueueGenericSend>
1a0004c6:	e7cc      	b.n	1a000462 <taskAntirreboteTec1+0x72>
1a0004c8:	10000088 	.word	0x10000088
1a0004cc:	100000ac 	.word	0x100000ac
1a0004d0:	1000008c 	.word	0x1000008c
1a0004d4:	10002b38 	.word	0x10002b38

1a0004d8 <taskAntirreboteTec2>:
	}
}

void taskAntirreboteTec2( void* taskParmPtr ){
1a0004d8:	b500      	push	{lr}
1a0004da:	b087      	sub	sp, #28
	//-- TEC2 <=> STOP
	btnStruct 	tecla2;
	vTaskDelay(3000/portTICK_RATE_MS);
1a0004dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0004e0:	f002 f880 	bl	1a0025e4 <vTaskDelay>
	tecla2.state = UP;
1a0004e4:	2300      	movs	r3, #0
1a0004e6:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla2.tec = TEC2;
	tecla2.tic = 0;
1a0004ea:	9303      	str	r3, [sp, #12]
	tecla2.toc = 0;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0004ec:	f001 ff1c 	bl	1a002328 <xTaskGetTickCount>
1a0004f0:	9001      	str	r0, [sp, #4]
1a0004f2:	e009      	b.n	1a000508 <taskAntirreboteTec2+0x30>

	while(1){
		if( tecla2.state == UP ){
			if(xSemaphoreTake(SemBinTec2FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a0004f4:	2101      	movs	r1, #1
1a0004f6:	4b2e      	ldr	r3, [pc, #184]	; (1a0005b0 <taskAntirreboteTec2+0xd8>)
1a0004f8:	6818      	ldr	r0, [r3, #0]
1a0004fa:	f001 fb5d 	bl	1a001bb8 <xQueueSemaphoreTake>
1a0004fe:	bb40      	cbnz	r0, 1a000552 <taskAntirreboteTec2+0x7a>
					}
					gpioToggle(LEDR);
				}
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a000500:	2105      	movs	r1, #5
1a000502:	a801      	add	r0, sp, #4
1a000504:	f002 f81c 	bl	1a002540 <vTaskDelayUntil>
		if( tecla2.state == UP ){
1a000508:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a00050c:	2b00      	cmp	r3, #0
1a00050e:	d0f1      	beq.n	1a0004f4 <taskAntirreboteTec2+0x1c>
		else if( tecla2.state == FALLING ){
1a000510:	2b02      	cmp	r3, #2
1a000512:	d025      	beq.n	1a000560 <taskAntirreboteTec2+0x88>
		else if( tecla2.state == DOWN ){
1a000514:	2b01      	cmp	r3, #1
1a000516:	d032      	beq.n	1a00057e <taskAntirreboteTec2+0xa6>
		else if( tecla2.state == RAISING ){
1a000518:	2b03      	cmp	r3, #3
1a00051a:	d1f1      	bne.n	1a000500 <taskAntirreboteTec2+0x28>
			tecla2.toc = xTaskGetTickCount();
1a00051c:	f001 ff04 	bl	1a002328 <xTaskGetTickCount>
			if(tecla2.toc - tecla2.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000520:	9b03      	ldr	r3, [sp, #12]
1a000522:	1ac0      	subs	r0, r0, r3
1a000524:	2814      	cmp	r0, #20
1a000526:	d9eb      	bls.n	1a000500 <taskAntirreboteTec2+0x28>
				if(gpioRead(tecla2.tec) == 1){
1a000528:	2025      	movs	r0, #37	; 0x25
1a00052a:	f003 f9c6 	bl	1a0038ba <gpioRead>
1a00052e:	2801      	cmp	r0, #1
1a000530:	d1e6      	bne.n	1a000500 <taskAntirreboteTec2+0x28>
					tecla2.state = UP;
1a000532:	2300      	movs	r3, #0
1a000534:	f88d 3008 	strb.w	r3, [sp, #8]
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000538:	4b1e      	ldr	r3, [pc, #120]	; (1a0005b4 <taskAntirreboteTec2+0xdc>)
1a00053a:	6818      	ldr	r0, [r3, #0]
1a00053c:	b128      	cbz	r0, 1a00054a <taskAntirreboteTec2+0x72>
						if( xSemaphoreTake( mutexSem,portMAX_DELAY  ) == pdTRUE )
1a00053e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000542:	f001 fb39 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000546:	2801      	cmp	r0, #1
1a000548:	d027      	beq.n	1a00059a <taskAntirreboteTec2+0xc2>
					gpioToggle(LEDR);
1a00054a:	2028      	movs	r0, #40	; 0x28
1a00054c:	f003 f9df 	bl	1a00390e <gpioToggle>
1a000550:	e7d6      	b.n	1a000500 <taskAntirreboteTec2+0x28>
				tecla2.tic = xTaskGetTickCount();
1a000552:	f001 fee9 	bl	1a002328 <xTaskGetTickCount>
1a000556:	9003      	str	r0, [sp, #12]
				tecla2.state = FALLING;
1a000558:	2302      	movs	r3, #2
1a00055a:	f88d 3008 	strb.w	r3, [sp, #8]
1a00055e:	e7cf      	b.n	1a000500 <taskAntirreboteTec2+0x28>
			tecla2.toc = xTaskGetTickCount();
1a000560:	f001 fee2 	bl	1a002328 <xTaskGetTickCount>
			if(tecla2.toc - tecla2.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000564:	9b03      	ldr	r3, [sp, #12]
1a000566:	1ac0      	subs	r0, r0, r3
1a000568:	2814      	cmp	r0, #20
1a00056a:	d9c9      	bls.n	1a000500 <taskAntirreboteTec2+0x28>
				if(gpioRead(tecla2.tec) == 0){
1a00056c:	2025      	movs	r0, #37	; 0x25
1a00056e:	f003 f9a4 	bl	1a0038ba <gpioRead>
1a000572:	2800      	cmp	r0, #0
1a000574:	d1c4      	bne.n	1a000500 <taskAntirreboteTec2+0x28>
					tecla2.state = DOWN;
1a000576:	2301      	movs	r3, #1
1a000578:	f88d 3008 	strb.w	r3, [sp, #8]
1a00057c:	e7c0      	b.n	1a000500 <taskAntirreboteTec2+0x28>
			if(xSemaphoreTake(SemBinTec2RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a00057e:	2101      	movs	r1, #1
1a000580:	4b0d      	ldr	r3, [pc, #52]	; (1a0005b8 <taskAntirreboteTec2+0xe0>)
1a000582:	6818      	ldr	r0, [r3, #0]
1a000584:	f001 fb18 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000588:	2800      	cmp	r0, #0
1a00058a:	d0b9      	beq.n	1a000500 <taskAntirreboteTec2+0x28>
				tecla2.tic = xTaskGetTickCount();
1a00058c:	f001 fecc 	bl	1a002328 <xTaskGetTickCount>
1a000590:	9003      	str	r0, [sp, #12]
				tecla2.state = RAISING;
1a000592:	2303      	movs	r3, #3
1a000594:	f88d 3008 	strb.w	r3, [sp, #8]
1a000598:	e7b2      	b.n	1a000500 <taskAntirreboteTec2+0x28>
							vehiculo.start = OFF;
1a00059a:	2100      	movs	r1, #0
1a00059c:	4b07      	ldr	r3, [pc, #28]	; (1a0005bc <taskAntirreboteTec2+0xe4>)
1a00059e:	7519      	strb	r1, [r3, #20]
							xSemaphoreGive( mutexSem );
1a0005a0:	460b      	mov	r3, r1
1a0005a2:	460a      	mov	r2, r1
1a0005a4:	4803      	ldr	r0, [pc, #12]	; (1a0005b4 <taskAntirreboteTec2+0xdc>)
1a0005a6:	6800      	ldr	r0, [r0, #0]
1a0005a8:	f001 f8c6 	bl	1a001738 <xQueueGenericSend>
1a0005ac:	e7cd      	b.n	1a00054a <taskAntirreboteTec2+0x72>
1a0005ae:	bf00      	nop
1a0005b0:	10000090 	.word	0x10000090
1a0005b4:	100000ac 	.word	0x100000ac
1a0005b8:	10000094 	.word	0x10000094
1a0005bc:	10002b38 	.word	0x10002b38

1a0005c0 <taskAntirreboteTec3>:
	}
}

void taskAntirreboteTec3( void* taskParmPtr ){
1a0005c0:	b500      	push	{lr}
1a0005c2:	b087      	sub	sp, #28
	//-- TEC3 <=> P.EMERGENCIA
	btnStruct 	tecla3;
	vTaskDelay(3000/portTICK_RATE_MS);
1a0005c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0005c8:	f002 f80c 	bl	1a0025e4 <vTaskDelay>
	tecla3.state = UP;
1a0005cc:	2300      	movs	r3, #0
1a0005ce:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla3.tec = TEC3;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0005d2:	f001 fea9 	bl	1a002328 <xTaskGetTickCount>
1a0005d6:	9001      	str	r0, [sp, #4]
1a0005d8:	e009      	b.n	1a0005ee <taskAntirreboteTec3+0x2e>

	while(1){
		if( tecla3.state == UP ){
			if(xSemaphoreTake(SemBinTec3FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a0005da:	2101      	movs	r1, #1
1a0005dc:	4b2e      	ldr	r3, [pc, #184]	; (1a000698 <taskAntirreboteTec3+0xd8>)
1a0005de:	6818      	ldr	r0, [r3, #0]
1a0005e0:	f001 faea 	bl	1a001bb8 <xQueueSemaphoreTake>
1a0005e4:	bb40      	cbnz	r0, 1a000638 <taskAntirreboteTec3+0x78>
					}
					gpioToggle(LEDR);
				}
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a0005e6:	2105      	movs	r1, #5
1a0005e8:	a801      	add	r0, sp, #4
1a0005ea:	f001 ffa9 	bl	1a002540 <vTaskDelayUntil>
		if( tecla3.state == UP ){
1a0005ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a0005f2:	2b00      	cmp	r3, #0
1a0005f4:	d0f1      	beq.n	1a0005da <taskAntirreboteTec3+0x1a>
		else if( tecla3.state == FALLING ){
1a0005f6:	2b02      	cmp	r3, #2
1a0005f8:	d025      	beq.n	1a000646 <taskAntirreboteTec3+0x86>
		else if( tecla3.state == DOWN ){
1a0005fa:	2b01      	cmp	r3, #1
1a0005fc:	d032      	beq.n	1a000664 <taskAntirreboteTec3+0xa4>
		else if( tecla3.state == RAISING ){
1a0005fe:	2b03      	cmp	r3, #3
1a000600:	d1f1      	bne.n	1a0005e6 <taskAntirreboteTec3+0x26>
			tecla3.toc = xTaskGetTickCount();
1a000602:	f001 fe91 	bl	1a002328 <xTaskGetTickCount>
			if(tecla3.toc - tecla3.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000606:	9b03      	ldr	r3, [sp, #12]
1a000608:	1ac0      	subs	r0, r0, r3
1a00060a:	2814      	cmp	r0, #20
1a00060c:	d9eb      	bls.n	1a0005e6 <taskAntirreboteTec3+0x26>
				if(gpioRead(tecla3.tec) == 1){
1a00060e:	2026      	movs	r0, #38	; 0x26
1a000610:	f003 f953 	bl	1a0038ba <gpioRead>
1a000614:	2801      	cmp	r0, #1
1a000616:	d1e6      	bne.n	1a0005e6 <taskAntirreboteTec3+0x26>
					tecla3.state = UP;
1a000618:	2300      	movs	r3, #0
1a00061a:	f88d 3008 	strb.w	r3, [sp, #8]
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a00061e:	4b1f      	ldr	r3, [pc, #124]	; (1a00069c <taskAntirreboteTec3+0xdc>)
1a000620:	6818      	ldr	r0, [r3, #0]
1a000622:	b128      	cbz	r0, 1a000630 <taskAntirreboteTec3+0x70>
						if( xSemaphoreTake( mutexSem, portMAX_DELAY ) == pdTRUE )
1a000624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000628:	f001 fac6 	bl	1a001bb8 <xQueueSemaphoreTake>
1a00062c:	2801      	cmp	r0, #1
1a00062e:	d027      	beq.n	1a000680 <taskAntirreboteTec3+0xc0>
					gpioToggle(LEDR);
1a000630:	2028      	movs	r0, #40	; 0x28
1a000632:	f003 f96c 	bl	1a00390e <gpioToggle>
1a000636:	e7d6      	b.n	1a0005e6 <taskAntirreboteTec3+0x26>
				tecla3.tic = xTaskGetTickCount();
1a000638:	f001 fe76 	bl	1a002328 <xTaskGetTickCount>
1a00063c:	9003      	str	r0, [sp, #12]
				tecla3.state = FALLING;
1a00063e:	2302      	movs	r3, #2
1a000640:	f88d 3008 	strb.w	r3, [sp, #8]
1a000644:	e7cf      	b.n	1a0005e6 <taskAntirreboteTec3+0x26>
			tecla3.toc = xTaskGetTickCount();
1a000646:	f001 fe6f 	bl	1a002328 <xTaskGetTickCount>
			if(tecla3.toc - tecla3.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a00064a:	9b03      	ldr	r3, [sp, #12]
1a00064c:	1ac0      	subs	r0, r0, r3
1a00064e:	2814      	cmp	r0, #20
1a000650:	d9c9      	bls.n	1a0005e6 <taskAntirreboteTec3+0x26>
				if(gpioRead(tecla3.tec) == 0){
1a000652:	2026      	movs	r0, #38	; 0x26
1a000654:	f003 f931 	bl	1a0038ba <gpioRead>
1a000658:	2800      	cmp	r0, #0
1a00065a:	d1c4      	bne.n	1a0005e6 <taskAntirreboteTec3+0x26>
					tecla3.state = DOWN;
1a00065c:	2301      	movs	r3, #1
1a00065e:	f88d 3008 	strb.w	r3, [sp, #8]
1a000662:	e7c0      	b.n	1a0005e6 <taskAntirreboteTec3+0x26>
			if(xSemaphoreTake(SemBinTec3RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a000664:	2101      	movs	r1, #1
1a000666:	4b0e      	ldr	r3, [pc, #56]	; (1a0006a0 <taskAntirreboteTec3+0xe0>)
1a000668:	6818      	ldr	r0, [r3, #0]
1a00066a:	f001 faa5 	bl	1a001bb8 <xQueueSemaphoreTake>
1a00066e:	2800      	cmp	r0, #0
1a000670:	d0b9      	beq.n	1a0005e6 <taskAntirreboteTec3+0x26>
				tecla3.tic = xTaskGetTickCount();
1a000672:	f001 fe59 	bl	1a002328 <xTaskGetTickCount>
1a000676:	9003      	str	r0, [sp, #12]
				tecla3.state = RAISING;
1a000678:	2303      	movs	r3, #3
1a00067a:	f88d 3008 	strb.w	r3, [sp, #8]
1a00067e:	e7b2      	b.n	1a0005e6 <taskAntirreboteTec3+0x26>
							vehiculo.alarma = ON;
1a000680:	4b08      	ldr	r3, [pc, #32]	; (1a0006a4 <taskAntirreboteTec3+0xe4>)
1a000682:	2201      	movs	r2, #1
1a000684:	755a      	strb	r2, [r3, #21]
							xSemaphoreGive( mutexSem );
1a000686:	2300      	movs	r3, #0
1a000688:	461a      	mov	r2, r3
1a00068a:	4619      	mov	r1, r3
1a00068c:	4803      	ldr	r0, [pc, #12]	; (1a00069c <taskAntirreboteTec3+0xdc>)
1a00068e:	6800      	ldr	r0, [r0, #0]
1a000690:	f001 f852 	bl	1a001738 <xQueueGenericSend>
1a000694:	e7cc      	b.n	1a000630 <taskAntirreboteTec3+0x70>
1a000696:	bf00      	nop
1a000698:	10000098 	.word	0x10000098
1a00069c:	100000ac 	.word	0x100000ac
1a0006a0:	1000009c 	.word	0x1000009c
1a0006a4:	10002b38 	.word	0x10002b38

1a0006a8 <taskAntirreboteTec4>:
	}
}

void taskAntirreboteTec4( void* taskParmPtr ){
1a0006a8:	b500      	push	{lr}
1a0006aa:	b087      	sub	sp, #28
	//-- TEC4 <=> RESETALARMA
	btnStruct 	tecla4;
	vTaskDelay(3000/portTICK_RATE_MS);
1a0006ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0006b0:	f001 ff98 	bl	1a0025e4 <vTaskDelay>
	tecla4.state = UP;
1a0006b4:	2300      	movs	r3, #0
1a0006b6:	f88d 3008 	strb.w	r3, [sp, #8]
	tecla4.tec = TEC4;
	tecla4.tic = 0;
1a0006ba:	9303      	str	r3, [sp, #12]
	tecla4.toc = 0;
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0006bc:	f001 fe34 	bl	1a002328 <xTaskGetTickCount>
1a0006c0:	9001      	str	r0, [sp, #4]
1a0006c2:	e009      	b.n	1a0006d8 <taskAntirreboteTec4+0x30>

	while(1){
		if( tecla4.state == UP ){
			if(xSemaphoreTake(SemBinTec4FallEdge,( TickType_t ) 1) ){ //Sucede un flanco descendente timeout de 1ms
1a0006c4:	2101      	movs	r1, #1
1a0006c6:	4b2e      	ldr	r3, [pc, #184]	; (1a000780 <taskAntirreboteTec4+0xd8>)
1a0006c8:	6818      	ldr	r0, [r3, #0]
1a0006ca:	f001 fa75 	bl	1a001bb8 <xQueueSemaphoreTake>
1a0006ce:	bb40      	cbnz	r0, 1a000722 <taskAntirreboteTec4+0x7a>
					gpioToggle(LEDR);
				}
			}
		}

		vTaskDelayUntil(&tiempo_inicio_ciclo,5/portTICK_RATE_MS);
1a0006d0:	2105      	movs	r1, #5
1a0006d2:	a801      	add	r0, sp, #4
1a0006d4:	f001 ff34 	bl	1a002540 <vTaskDelayUntil>
		if( tecla4.state == UP ){
1a0006d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a0006dc:	2b00      	cmp	r3, #0
1a0006de:	d0f1      	beq.n	1a0006c4 <taskAntirreboteTec4+0x1c>
		else if( tecla4.state == FALLING ){
1a0006e0:	2b02      	cmp	r3, #2
1a0006e2:	d025      	beq.n	1a000730 <taskAntirreboteTec4+0x88>
		else if( tecla4.state == DOWN ){
1a0006e4:	2b01      	cmp	r3, #1
1a0006e6:	d032      	beq.n	1a00074e <taskAntirreboteTec4+0xa6>
		else if( tecla4.state == RAISING ){
1a0006e8:	2b03      	cmp	r3, #3
1a0006ea:	d1f1      	bne.n	1a0006d0 <taskAntirreboteTec4+0x28>
			tecla4.toc = xTaskGetTickCount();
1a0006ec:	f001 fe1c 	bl	1a002328 <xTaskGetTickCount>
			if(tecla4.toc - tecla4.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a0006f0:	9b03      	ldr	r3, [sp, #12]
1a0006f2:	1ac0      	subs	r0, r0, r3
1a0006f4:	2814      	cmp	r0, #20
1a0006f6:	d9eb      	bls.n	1a0006d0 <taskAntirreboteTec4+0x28>
				if(gpioRead(tecla4.tec) == 1){
1a0006f8:	2027      	movs	r0, #39	; 0x27
1a0006fa:	f003 f8de 	bl	1a0038ba <gpioRead>
1a0006fe:	2801      	cmp	r0, #1
1a000700:	d1e6      	bne.n	1a0006d0 <taskAntirreboteTec4+0x28>
					tecla4.state = UP;
1a000702:	2300      	movs	r3, #0
1a000704:	f88d 3008 	strb.w	r3, [sp, #8]
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000708:	4b1e      	ldr	r3, [pc, #120]	; (1a000784 <taskAntirreboteTec4+0xdc>)
1a00070a:	6818      	ldr	r0, [r3, #0]
1a00070c:	b128      	cbz	r0, 1a00071a <taskAntirreboteTec4+0x72>
						if( xSemaphoreTake( mutexSem, portMAX_DELAY ) == pdTRUE )
1a00070e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000712:	f001 fa51 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000716:	2801      	cmp	r0, #1
1a000718:	d027      	beq.n	1a00076a <taskAntirreboteTec4+0xc2>
					gpioToggle(LEDR);
1a00071a:	2028      	movs	r0, #40	; 0x28
1a00071c:	f003 f8f7 	bl	1a00390e <gpioToggle>
1a000720:	e7d6      	b.n	1a0006d0 <taskAntirreboteTec4+0x28>
				tecla4.tic = xTaskGetTickCount();
1a000722:	f001 fe01 	bl	1a002328 <xTaskGetTickCount>
1a000726:	9003      	str	r0, [sp, #12]
				tecla4.state = FALLING;
1a000728:	2302      	movs	r3, #2
1a00072a:	f88d 3008 	strb.w	r3, [sp, #8]
1a00072e:	e7cf      	b.n	1a0006d0 <taskAntirreboteTec4+0x28>
			tecla4.toc = xTaskGetTickCount();
1a000730:	f001 fdfa 	bl	1a002328 <xTaskGetTickCount>
			if(tecla4.toc - tecla4.tic > ( TickType_t ) 20/portTICK_RATE_MS ){
1a000734:	9b03      	ldr	r3, [sp, #12]
1a000736:	1ac0      	subs	r0, r0, r3
1a000738:	2814      	cmp	r0, #20
1a00073a:	d9c9      	bls.n	1a0006d0 <taskAntirreboteTec4+0x28>
				if(gpioRead(tecla4.tec) == 0){
1a00073c:	2027      	movs	r0, #39	; 0x27
1a00073e:	f003 f8bc 	bl	1a0038ba <gpioRead>
1a000742:	2800      	cmp	r0, #0
1a000744:	d1c4      	bne.n	1a0006d0 <taskAntirreboteTec4+0x28>
					tecla4.state = DOWN;
1a000746:	2301      	movs	r3, #1
1a000748:	f88d 3008 	strb.w	r3, [sp, #8]
1a00074c:	e7c0      	b.n	1a0006d0 <taskAntirreboteTec4+0x28>
			if(xSemaphoreTake(SemBinTec4RiseEdge,( TickType_t ) 1)){ //Sucede un flanco ascendente  timeout de 1ms
1a00074e:	2101      	movs	r1, #1
1a000750:	4b0d      	ldr	r3, [pc, #52]	; (1a000788 <taskAntirreboteTec4+0xe0>)
1a000752:	6818      	ldr	r0, [r3, #0]
1a000754:	f001 fa30 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000758:	2800      	cmp	r0, #0
1a00075a:	d0b9      	beq.n	1a0006d0 <taskAntirreboteTec4+0x28>
				tecla4.tic = xTaskGetTickCount();
1a00075c:	f001 fde4 	bl	1a002328 <xTaskGetTickCount>
1a000760:	9003      	str	r0, [sp, #12]
				tecla4.state = RAISING;
1a000762:	2303      	movs	r3, #3
1a000764:	f88d 3008 	strb.w	r3, [sp, #8]
1a000768:	e7b2      	b.n	1a0006d0 <taskAntirreboteTec4+0x28>
							vehiculo.alarma = OFF;
1a00076a:	2100      	movs	r1, #0
1a00076c:	4b07      	ldr	r3, [pc, #28]	; (1a00078c <taskAntirreboteTec4+0xe4>)
1a00076e:	7559      	strb	r1, [r3, #21]
							xSemaphoreGive( mutexSem );
1a000770:	460b      	mov	r3, r1
1a000772:	460a      	mov	r2, r1
1a000774:	4803      	ldr	r0, [pc, #12]	; (1a000784 <taskAntirreboteTec4+0xdc>)
1a000776:	6800      	ldr	r0, [r0, #0]
1a000778:	f000 ffde 	bl	1a001738 <xQueueGenericSend>
1a00077c:	e7cd      	b.n	1a00071a <taskAntirreboteTec4+0x72>
1a00077e:	bf00      	nop
1a000780:	100000a0 	.word	0x100000a0
1a000784:	100000ac 	.word	0x100000ac
1a000788:	100000a4 	.word	0x100000a4
1a00078c:	10002b38 	.word	0x10002b38

1a000790 <taskLedVariable>:
	}
}

void taskLedVariable( void* taskParmPtr )
{
1a000790:	b500      	push	{lr}
1a000792:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000794:	f001 fdc8 	bl	1a002328 <xTaskGetTickCount>
1a000798:	9001      	str	r0, [sp, #4]
	uint8_t delay_on =100;

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      // Intercambia el estado del LEDB
      gpioWrite( LED1, HIGH );
1a00079a:	2101      	movs	r1, #1
1a00079c:	202b      	movs	r0, #43	; 0x2b
1a00079e:	f003 f861 	bl	1a003864 <gpioWrite>

      // Envia la tarea al estado bloqueado duranta el tiempo delay_on
      vTaskDelay( delay_on / portTICK_RATE_MS );
1a0007a2:	2064      	movs	r0, #100	; 0x64
1a0007a4:	f001 ff1e 	bl	1a0025e4 <vTaskDelay>
      gpioWrite( LED1, LOW);
1a0007a8:	2100      	movs	r1, #0
1a0007aa:	202b      	movs	r0, #43	; 0x2b
1a0007ac:	f003 f85a 	bl	1a003864 <gpioWrite>
      //delay_on += 100;
      //if( delay_on == 1000) delay_on = 0;

      vTaskDelayUntil(&tiempo_inicio_ciclo,(delay_on*2)/ portTICK_RATE_MS);
1a0007b0:	21c8      	movs	r1, #200	; 0xc8
1a0007b2:	a801      	add	r0, sp, #4
1a0007b4:	f001 fec4 	bl	1a002540 <vTaskDelayUntil>
1a0007b8:	e7ef      	b.n	1a00079a <taskLedVariable+0xa>
1a0007ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0007be:	Address 0x000000001a0007be is out of bounds.


1a0007c0 <taskProcessor>:
		// No se pudo ingresar al mutex
	}
}
*/

void taskProcessor(void* taskParmPtr){
1a0007c0:	b500      	push	{lr}
1a0007c2:	b08f      	sub	sp, #60	; 0x3c
	//-- Setup tarea
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0007c4:	f001 fdb0 	bl	1a002328 <xTaskGetTickCount>
1a0007c8:	900d      	str	r0, [sp, #52]	; 0x34
	mutexSem =  xSemaphoreCreateMutex();
1a0007ca:	2001      	movs	r0, #1
1a0007cc:	f001 f87e 	bl	1a0018cc <xQueueCreateMutex>
1a0007d0:	4b85      	ldr	r3, [pc, #532]	; (1a0009e8 <taskProcessor+0x228>)
1a0007d2:	6018      	str	r0, [r3, #0]
	globalCar localVehiculo;

	if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a0007d4:	2800      	cmp	r0, #0
1a0007d6:	d047      	beq.n	1a000868 <taskProcessor+0xa8>
	{
		// --- Mutex lock
		if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a0007d8:	210a      	movs	r1, #10
1a0007da:	f001 f9ed 	bl	1a001bb8 <xQueueSemaphoreTake>
1a0007de:	2801      	cmp	r0, #1
1a0007e0:	d142      	bne.n	1a000868 <taskProcessor+0xa8>
		{
			//--- Lectura o Escritura de variables compartidas

			// --- Inicializacion del estado del vehiculo y variables de salida
			vehiculo.start = 0;
			vehiculo.alarma = 0;
1a0007e2:	4b82      	ldr	r3, [pc, #520]	; (1a0009ec <taskProcessor+0x22c>)
1a0007e4:	2100      	movs	r1, #0
1a0007e6:	7559      	strb	r1, [r3, #21]
			vehiculo.estado = PARADO;
1a0007e8:	7019      	strb	r1, [r3, #0]
			vehiculo.frenoOutMD = 0;
1a0007ea:	2200      	movs	r2, #0
1a0007ec:	631a      	str	r2, [r3, #48]	; 0x30
			vehiculo.frenoOutMI = 0;
1a0007ee:	62da      	str	r2, [r3, #44]	; 0x2c
			vehiculo.aceleradorOutMD = 0;
1a0007f0:	629a      	str	r2, [r3, #40]	; 0x28
			vehiculo.aceleradorOutMI = 0;
1a0007f2:	625a      	str	r2, [r3, #36]	; 0x24

			// --- Inicializacion de variables para debug no implementadas en otras tareas
			vehiculo.start = 1;
1a0007f4:	2201      	movs	r2, #1
1a0007f6:	751a      	strb	r2, [r3, #20]
			vehiculo.tempBMS= 30;
1a0007f8:	4a7d      	ldr	r2, [pc, #500]	; (1a0009f0 <taskProcessor+0x230>)
1a0007fa:	621a      	str	r2, [r3, #32]
			vehiculo.tempMD=45;
1a0007fc:	4a7d      	ldr	r2, [pc, #500]	; (1a0009f4 <taskProcessor+0x234>)
1a0007fe:	61da      	str	r2, [r3, #28]
			vehiculo.tempMI=50;
1a000800:	4a7d      	ldr	r2, [pc, #500]	; (1a0009f8 <taskProcessor+0x238>)
1a000802:	619a      	str	r2, [r3, #24]

			//--- Mutex unlock
			xSemaphoreGive( mutexSem );
1a000804:	460b      	mov	r3, r1
1a000806:	460a      	mov	r2, r1
1a000808:	4877      	ldr	r0, [pc, #476]	; (1a0009e8 <taskProcessor+0x228>)
1a00080a:	6800      	ldr	r0, [r0, #0]
1a00080c:	f000 ff94 	bl	1a001738 <xQueueGenericSend>
1a000810:	e02a      	b.n	1a000868 <taskProcessor+0xa8>
		{
			// --- Mutex lock
			if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
			{
				//--- Lectura o Escritura de variables compartidas
				localVehiculo.aceleradorIn = vehiculo.aceleradorIn;
1a000812:	4b76      	ldr	r3, [pc, #472]	; (1a0009ec <taskProcessor+0x22c>)
1a000814:	885a      	ldrh	r2, [r3, #2]
1a000816:	f8ad 2002 	strh.w	r2, [sp, #2]
				localVehiculo.frenoIn = vehiculo.frenoIn;
1a00081a:	889a      	ldrh	r2, [r3, #4]
1a00081c:	f8ad 2004 	strh.w	r2, [sp, #4]
				localVehiculo.giroscopoX = vehiculo.giroscopoX;
				localVehiculo.giroscopoY = vehiculo.giroscopoY;
				localVehiculo.giroscopoZ = vehiculo.giroscopoZ;
				localVehiculo.start = vehiculo.start;
1a000820:	7d1a      	ldrb	r2, [r3, #20]
1a000822:	f88d 2014 	strb.w	r2, [sp, #20]
				localVehiculo.alarma = vehiculo.alarma;
				localVehiculo.tempMI = vehiculo.tempMI;
1a000826:	699a      	ldr	r2, [r3, #24]
1a000828:	9206      	str	r2, [sp, #24]
				localVehiculo.tempMD = vehiculo.tempMD;
				localVehiculo.tempBMS = vehiculo.tempBMS;
1a00082a:	6a1b      	ldr	r3, [r3, #32]
1a00082c:	9308      	str	r3, [sp, #32]

				//--- Mutex unlock
				xSemaphoreGive( mutexSem );
1a00082e:	2300      	movs	r3, #0
1a000830:	461a      	mov	r2, r3
1a000832:	4619      	mov	r1, r3
1a000834:	486c      	ldr	r0, [pc, #432]	; (1a0009e8 <taskProcessor+0x228>)
1a000836:	6800      	ldr	r0, [r0, #0]
1a000838:	f000 ff7e 	bl	1a001738 <xQueueGenericSend>
1a00083c:	e01c      	b.n	1a000878 <taskProcessor+0xb8>


		if(vehiculo.alarma ==ON){
			//-- Se presiono el boton de parada de emergencia
			//--- debugPrintlnString( "--- ALARMA --- Se presiono el boton de parada de emergencia");
			localVehiculo.estado = ALARMA;
1a00083e:	2304      	movs	r3, #4
1a000840:	f88d 3000 	strb.w	r3, [sp]
			//--- Nos aseguramos que las salidas queden desactivadas

			localVehiculo.aceleradorOutMD = 0;
1a000844:	2300      	movs	r3, #0
1a000846:	930a      	str	r3, [sp, #40]	; 0x28
			localVehiculo.aceleradorOutMI = 0;
1a000848:	9309      	str	r3, [sp, #36]	; 0x24
			localVehiculo.frenoOutMD = 0;
1a00084a:	930c      	str	r3, [sp, #48]	; 0x30
			localVehiculo.frenoOutMI = 0;
1a00084c:	930b      	str	r3, [sp, #44]	; 0x2c
				localVehiculo.frenoOutMI = 0;
			}

		}
		//-- Actualizo las variables globales que modifica el taskProcessor
		if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a00084e:	4b66      	ldr	r3, [pc, #408]	; (1a0009e8 <taskProcessor+0x228>)
1a000850:	6818      	ldr	r0, [r3, #0]
1a000852:	b128      	cbz	r0, 1a000860 <taskProcessor+0xa0>
		{
			// --- Mutex lock
			if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000854:	210a      	movs	r1, #10
1a000856:	f001 f9af 	bl	1a001bb8 <xQueueSemaphoreTake>
1a00085a:	2801      	cmp	r0, #1
1a00085c:	f000 80ab 	beq.w	1a0009b6 <taskProcessor+0x1f6>
			else
			{
				// No se pudo ingresar al mutex
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,10/portTICK_RATE_MS);
1a000860:	210a      	movs	r1, #10
1a000862:	a80d      	add	r0, sp, #52	; 0x34
1a000864:	f001 fe6c 	bl	1a002540 <vTaskDelayUntil>
		if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000868:	4b5f      	ldr	r3, [pc, #380]	; (1a0009e8 <taskProcessor+0x228>)
1a00086a:	6818      	ldr	r0, [r3, #0]
1a00086c:	b120      	cbz	r0, 1a000878 <taskProcessor+0xb8>
			if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a00086e:	210a      	movs	r1, #10
1a000870:	f001 f9a2 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000874:	2801      	cmp	r0, #1
1a000876:	d0cc      	beq.n	1a000812 <taskProcessor+0x52>
		if(vehiculo.alarma ==ON){
1a000878:	4b5c      	ldr	r3, [pc, #368]	; (1a0009ec <taskProcessor+0x22c>)
1a00087a:	7d5b      	ldrb	r3, [r3, #21]
1a00087c:	2b01      	cmp	r3, #1
1a00087e:	d0de      	beq.n	1a00083e <taskProcessor+0x7e>
		else if ((vehiculo.tempBMS > SAFE_TEMP_BMS) || (vehiculo.tempMI > SAFE_TEMP_MI) || (vehiculo.tempMD > SAFE_TEMP_MD)){
1a000880:	4b5a      	ldr	r3, [pc, #360]	; (1a0009ec <taskProcessor+0x22c>)
1a000882:	ed93 7a08 	vldr	s14, [r3, #32]
1a000886:	eddf 7a5d 	vldr	s15, [pc, #372]	; 1a0009fc <taskProcessor+0x23c>
1a00088a:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a00088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000892:	dc0d      	bgt.n	1a0008b0 <taskProcessor+0xf0>
1a000894:	ed93 7a06 	vldr	s14, [r3, #24]
1a000898:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a00089c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0008a0:	dc06      	bgt.n	1a0008b0 <taskProcessor+0xf0>
1a0008a2:	ed93 7a07 	vldr	s14, [r3, #28]
1a0008a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a0008aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0008ae:	dd34      	ble.n	1a00091a <taskProcessor+0x15a>
			localVehiculo.estado = ALARMA;
1a0008b0:	2304      	movs	r3, #4
1a0008b2:	f88d 3000 	strb.w	r3, [sp]
			localVehiculo.aceleradorOutMD = 0;
1a0008b6:	2300      	movs	r3, #0
1a0008b8:	930a      	str	r3, [sp, #40]	; 0x28
			localVehiculo.aceleradorOutMI = 0;
1a0008ba:	9309      	str	r3, [sp, #36]	; 0x24
			localVehiculo.frenoOutMD = 0;
1a0008bc:	930c      	str	r3, [sp, #48]	; 0x30
			localVehiculo.frenoOutMI = 0;
1a0008be:	930b      	str	r3, [sp, #44]	; 0x2c
			if(localVehiculo.tempBMS > SAFE_TEMP_BMS){
1a0008c0:	ed9d 7a08 	vldr	s14, [sp, #32]
1a0008c4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 1a0009fc <taskProcessor+0x23c>
1a0008c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a0008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0008d0:	dc11      	bgt.n	1a0008f6 <taskProcessor+0x136>
			else if(localVehiculo.tempMI > SAFE_TEMP_MI){
1a0008d2:	ed9d 7a06 	vldr	s14, [sp, #24]
1a0008d6:	eddf 7a49 	vldr	s15, [pc, #292]	; 1a0009fc <taskProcessor+0x23c>
1a0008da:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a0008de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0008e2:	dd11      	ble.n	1a000908 <taskProcessor+0x148>
				debugPrintlnString( "--- ALARMA --- El motor izquierdo sobrepaso la temperatura limite");
1a0008e4:	4c46      	ldr	r4, [pc, #280]	; (1a000a00 <taskProcessor+0x240>)
1a0008e6:	4947      	ldr	r1, [pc, #284]	; (1a000a04 <taskProcessor+0x244>)
1a0008e8:	7820      	ldrb	r0, [r4, #0]
1a0008ea:	f003 f8ab 	bl	1a003a44 <printString>
1a0008ee:	7820      	ldrb	r0, [r4, #0]
1a0008f0:	f003 f8ac 	bl	1a003a4c <printEnter>
1a0008f4:	e7ab      	b.n	1a00084e <taskProcessor+0x8e>
				debugPrintlnString( "--- ALARMA --- El pack de baterias sobrepaso la temperatura limite");
1a0008f6:	4c42      	ldr	r4, [pc, #264]	; (1a000a00 <taskProcessor+0x240>)
1a0008f8:	4943      	ldr	r1, [pc, #268]	; (1a000a08 <taskProcessor+0x248>)
1a0008fa:	7820      	ldrb	r0, [r4, #0]
1a0008fc:	f003 f8a2 	bl	1a003a44 <printString>
1a000900:	7820      	ldrb	r0, [r4, #0]
1a000902:	f003 f8a3 	bl	1a003a4c <printEnter>
1a000906:	e7a2      	b.n	1a00084e <taskProcessor+0x8e>
				debugPrintlnString( "--- ALARMA --- El motor derecho sobrepaso la temperatura limite");
1a000908:	4c3d      	ldr	r4, [pc, #244]	; (1a000a00 <taskProcessor+0x240>)
1a00090a:	4940      	ldr	r1, [pc, #256]	; (1a000a0c <taskProcessor+0x24c>)
1a00090c:	7820      	ldrb	r0, [r4, #0]
1a00090e:	f003 f899 	bl	1a003a44 <printString>
1a000912:	7820      	ldrb	r0, [r4, #0]
1a000914:	f003 f89a 	bl	1a003a4c <printEnter>
1a000918:	e799      	b.n	1a00084e <taskProcessor+0x8e>
			if(localVehiculo.start ==ON){
1a00091a:	f89d 3014 	ldrb.w	r3, [sp, #20]
1a00091e:	2b01      	cmp	r3, #1
1a000920:	d008      	beq.n	1a000934 <taskProcessor+0x174>
				localVehiculo.estado = PARADO;
1a000922:	2300      	movs	r3, #0
1a000924:	f88d 3000 	strb.w	r3, [sp]
				localVehiculo.aceleradorOutMD = 0;
1a000928:	2300      	movs	r3, #0
1a00092a:	930a      	str	r3, [sp, #40]	; 0x28
				localVehiculo.aceleradorOutMI = 0;
1a00092c:	9309      	str	r3, [sp, #36]	; 0x24
				localVehiculo.frenoOutMD = 0;
1a00092e:	930c      	str	r3, [sp, #48]	; 0x30
				localVehiculo.frenoOutMI = 0;
1a000930:	930b      	str	r3, [sp, #44]	; 0x2c
1a000932:	e78c      	b.n	1a00084e <taskProcessor+0x8e>
				if( (localVehiculo.frenoIn ==0) && (localVehiculo.aceleradorIn ==0) ){
1a000934:	f8bd 0004 	ldrh.w	r0, [sp, #4]
1a000938:	b958      	cbnz	r0, 1a000952 <taskProcessor+0x192>
1a00093a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
1a00093e:	b943      	cbnz	r3, 1a000952 <taskProcessor+0x192>
					localVehiculo.estado = LISTO;
1a000940:	2303      	movs	r3, #3
1a000942:	f88d 3000 	strb.w	r3, [sp]
					localVehiculo.aceleradorOutMD = 0;
1a000946:	2300      	movs	r3, #0
1a000948:	930a      	str	r3, [sp, #40]	; 0x28
					localVehiculo.aceleradorOutMI = 0;
1a00094a:	9309      	str	r3, [sp, #36]	; 0x24
					localVehiculo.frenoOutMD = 0;
1a00094c:	930c      	str	r3, [sp, #48]	; 0x30
					localVehiculo.frenoOutMI = 0;
1a00094e:	930b      	str	r3, [sp, #44]	; 0x2c
1a000950:	e77d      	b.n	1a00084e <taskProcessor+0x8e>
				else if(localVehiculo.frenoIn >0){
1a000952:	b1a8      	cbz	r0, 1a000980 <taskProcessor+0x1c0>
					localVehiculo.estado = FRENANDO;
1a000954:	2302      	movs	r3, #2
1a000956:	f88d 3000 	strb.w	r3, [sp]
					localVehiculo.aceleradorOutMD = 0;
1a00095a:	2300      	movs	r3, #0
1a00095c:	930a      	str	r3, [sp, #40]	; 0x28
					localVehiculo.aceleradorOutMI = 0;
1a00095e:	9309      	str	r3, [sp, #36]	; 0x24
					localVehiculo.frenoOutMD =  (localVehiculo.frenoIn*3.3)/1024; //localVehiculo.frenoIn;
1a000960:	f004 f9b2 	bl	1a004cc8 <__aeabi_i2d>
1a000964:	a31e      	add	r3, pc, #120	; (adr r3, 1a0009e0 <taskProcessor+0x220>)
1a000966:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00096a:	f004 fa17 	bl	1a004d9c <__aeabi_dmul>
1a00096e:	2200      	movs	r2, #0
1a000970:	4b27      	ldr	r3, [pc, #156]	; (1a000a10 <taskProcessor+0x250>)
1a000972:	f004 fa13 	bl	1a004d9c <__aeabi_dmul>
1a000976:	f004 fc4b 	bl	1a005210 <__aeabi_d2f>
1a00097a:	900c      	str	r0, [sp, #48]	; 0x30
					localVehiculo.frenoOutMI =  (localVehiculo.frenoIn*3.3)/1024; //localVehiculo.frenoIn;
1a00097c:	900b      	str	r0, [sp, #44]	; 0x2c
1a00097e:	e766      	b.n	1a00084e <taskProcessor+0x8e>
				else if(localVehiculo.aceleradorIn > 0){
1a000980:	f8bd 0002 	ldrh.w	r0, [sp, #2]
1a000984:	2800      	cmp	r0, #0
1a000986:	f43f af62 	beq.w	1a00084e <taskProcessor+0x8e>
					localVehiculo.estado = ACELERANDO;
1a00098a:	2301      	movs	r3, #1
1a00098c:	f88d 3000 	strb.w	r3, [sp]
					localVehiculo.aceleradorOutMD = (localVehiculo.aceleradorIn * 3.3)/1024; //localVehiculo.aceleradorIn;
1a000990:	f004 f99a 	bl	1a004cc8 <__aeabi_i2d>
1a000994:	a312      	add	r3, pc, #72	; (adr r3, 1a0009e0 <taskProcessor+0x220>)
1a000996:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00099a:	f004 f9ff 	bl	1a004d9c <__aeabi_dmul>
1a00099e:	2200      	movs	r2, #0
1a0009a0:	4b1b      	ldr	r3, [pc, #108]	; (1a000a10 <taskProcessor+0x250>)
1a0009a2:	f004 f9fb 	bl	1a004d9c <__aeabi_dmul>
1a0009a6:	f004 fc33 	bl	1a005210 <__aeabi_d2f>
1a0009aa:	900a      	str	r0, [sp, #40]	; 0x28
					localVehiculo.aceleradorOutMI = (localVehiculo.aceleradorIn * 3.3)/1024; //localVehiculo.aceleradorIn;
1a0009ac:	9009      	str	r0, [sp, #36]	; 0x24
					localVehiculo.frenoOutMD = 0;
1a0009ae:	2300      	movs	r3, #0
1a0009b0:	930c      	str	r3, [sp, #48]	; 0x30
					localVehiculo.frenoOutMI = 0;
1a0009b2:	930b      	str	r3, [sp, #44]	; 0x2c
1a0009b4:	e74b      	b.n	1a00084e <taskProcessor+0x8e>
				vehiculo.estado = localVehiculo.estado;
1a0009b6:	f89d 2000 	ldrb.w	r2, [sp]
1a0009ba:	4b0c      	ldr	r3, [pc, #48]	; (1a0009ec <taskProcessor+0x22c>)
1a0009bc:	701a      	strb	r2, [r3, #0]
				vehiculo.aceleradorOutMD = localVehiculo.aceleradorOutMD;
1a0009be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0009c0:	629a      	str	r2, [r3, #40]	; 0x28
				vehiculo.aceleradorOutMI = localVehiculo.aceleradorOutMI;
1a0009c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0009c4:	625a      	str	r2, [r3, #36]	; 0x24
				vehiculo.frenoOutMD = localVehiculo.frenoOutMD;
1a0009c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0009c8:	631a      	str	r2, [r3, #48]	; 0x30
				vehiculo.frenoOutMI = localVehiculo.frenoOutMI;
1a0009ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0009cc:	62da      	str	r2, [r3, #44]	; 0x2c
				xSemaphoreGive( mutexSem );
1a0009ce:	2300      	movs	r3, #0
1a0009d0:	461a      	mov	r2, r3
1a0009d2:	4619      	mov	r1, r3
1a0009d4:	4804      	ldr	r0, [pc, #16]	; (1a0009e8 <taskProcessor+0x228>)
1a0009d6:	6800      	ldr	r0, [r0, #0]
1a0009d8:	f000 feae 	bl	1a001738 <xQueueGenericSend>
1a0009dc:	e740      	b.n	1a000860 <taskProcessor+0xa0>
1a0009de:	bf00      	nop
1a0009e0:	66666666 	.word	0x66666666
1a0009e4:	400a6666 	.word	0x400a6666
1a0009e8:	100000ac 	.word	0x100000ac
1a0009ec:	10002b38 	.word	0x10002b38
1a0009f0:	41f00000 	.word	0x41f00000
1a0009f4:	42340000 	.word	0x42340000
1a0009f8:	42480000 	.word	0x42480000
1a0009fc:	42700000 	.word	0x42700000
1a000a00:	100000a8 	.word	0x100000a8
1a000a04:	1a00584c 	.word	0x1a00584c
1a000a08:	1a005808 	.word	0x1a005808
1a000a0c:	1a005890 	.word	0x1a005890
1a000a10:	3f500000 	.word	0x3f500000

1a000a14 <taskAceleradorFreno>:
	}
}

void taskAceleradorFreno(void* taskParmPtr ){
1a000a14:	b530      	push	{r4, r5, lr}
1a000a16:	b083      	sub	sp, #12
	//-- Setup tarea
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000a18:	f001 fc86 	bl	1a002328 <xTaskGetTickCount>
1a000a1c:	9001      	str	r0, [sp, #4]
	adcConfig( ADC_ENABLE ); /* ADC */
1a000a1e:	2000      	movs	r0, #0
1a000a20:	f002 fdca 	bl	1a0035b8 <adcInit>
1a000a24:	e003      	b.n	1a000a2e <taskAceleradorFreno+0x1a>
			else
			{
				// No se pudo ingresar al mutex
			}
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,60/portTICK_RATE_MS);
1a000a26:	213c      	movs	r1, #60	; 0x3c
1a000a28:	a801      	add	r0, sp, #4
1a000a2a:	f001 fd89 	bl	1a002540 <vTaskDelayUntil>
		acelerador= adcRead( CH1 );
1a000a2e:	2041      	movs	r0, #65	; 0x41
1a000a30:	f002 fe08 	bl	1a003644 <adcRead>
1a000a34:	4605      	mov	r5, r0
		freno = adcRead( CH2 );
1a000a36:	2040      	movs	r0, #64	; 0x40
1a000a38:	f002 fe04 	bl	1a003644 <adcRead>
1a000a3c:	4604      	mov	r4, r0
		if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000a3e:	4b0a      	ldr	r3, [pc, #40]	; (1a000a68 <taskAceleradorFreno+0x54>)
1a000a40:	6818      	ldr	r0, [r3, #0]
1a000a42:	2800      	cmp	r0, #0
1a000a44:	d0ef      	beq.n	1a000a26 <taskAceleradorFreno+0x12>
			if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000a46:	210a      	movs	r1, #10
1a000a48:	f001 f8b6 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000a4c:	2801      	cmp	r0, #1
1a000a4e:	d1ea      	bne.n	1a000a26 <taskAceleradorFreno+0x12>
				vehiculo.aceleradorIn = acelerador;
1a000a50:	4b06      	ldr	r3, [pc, #24]	; (1a000a6c <taskAceleradorFreno+0x58>)
1a000a52:	805d      	strh	r5, [r3, #2]
				vehiculo.frenoIn = freno;
1a000a54:	809c      	strh	r4, [r3, #4]
				xSemaphoreGive( mutexSem );
1a000a56:	2300      	movs	r3, #0
1a000a58:	461a      	mov	r2, r3
1a000a5a:	4619      	mov	r1, r3
1a000a5c:	4802      	ldr	r0, [pc, #8]	; (1a000a68 <taskAceleradorFreno+0x54>)
1a000a5e:	6800      	ldr	r0, [r0, #0]
1a000a60:	f000 fe6a 	bl	1a001738 <xQueueGenericSend>
1a000a64:	e7df      	b.n	1a000a26 <taskAceleradorFreno+0x12>
1a000a66:	bf00      	nop
1a000a68:	100000ac 	.word	0x100000ac
1a000a6c:	10002b38 	.word	0x10002b38

1a000a70 <taskEnvioDatos>:
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,80/portTICK_RATE_MS);
	}
}

void taskEnvioDatos(void* taskParmPtr ){
1a000a70:	b570      	push	{r4, r5, r6, lr}
1a000a72:	b09c      	sub	sp, #112	; 0x70
	//-- Setup tarea
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000a74:	f001 fc58 	bl	1a002328 <xTaskGetTickCount>
1a000a78:	901b      	str	r0, [sp, #108]	; 0x6c
	BaseType_t returnValue;
	//-- Se crea una cola de mensajes para enviar un puntero al string generado
	//-- con esto se reduce en gran medida el tamanio de la cola generada
	//-- debe tenerse especial cuidado de que la variable no cambie de valor hasta
	//-- que sea leida por el otro proceso.
	colaMsg = xQueueCreate(1,sizeof(char*));
1a000a7a:	2200      	movs	r2, #0
1a000a7c:	2104      	movs	r1, #4
1a000a7e:	2001      	movs	r0, #1
1a000a80:	f000 fe33 	bl	1a0016ea <xQueueGenericCreate>
1a000a84:	4bab      	ldr	r3, [pc, #684]	; (1a000d34 <taskEnvioDatos+0x2c4>)
1a000a86:	6018      	str	r0, [r3, #0]
	//-- Loop tarea
	while(1){

		// ---- Se envía un dato por vez para que la tarea no se quede con el control del cpu por mucho tiempo
		// ---- Los nombres que se asigna a cada variable es el nombre actual de cada variable
		for (i=1 ; i<=15 ;i++){
1a000a88:	2501      	movs	r5, #1
1a000a8a:	e033      	b.n	1a000af4 <taskEnvioDatos+0x84>
			switch(i){
				case 1:
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000a8c:	4baa      	ldr	r3, [pc, #680]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000a8e:	6818      	ldr	r0, [r3, #0]
1a000a90:	b120      	cbz	r0, 1a000a9c <taskEnvioDatos+0x2c>
					{
						// --- Mutex lock
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000a92:	210a      	movs	r1, #10
1a000a94:	f001 f890 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000a98:	2801      	cmp	r0, #1
1a000a9a:	d051      	beq.n	1a000b40 <taskEnvioDatos+0xd0>
							//--- Mutex unlock
							xSemaphoreGive( mutexSem );
						}
					}
					//-- Envío estado del aceleradorIn (int)
					strcpy(strEnvio, "aceleradorIn:" );
1a000a9c:	4ba7      	ldr	r3, [pc, #668]	; (1a000d3c <taskEnvioDatos+0x2cc>)
1a000a9e:	ac06      	add	r4, sp, #24
1a000aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000aa2:	c407      	stmia	r4!, {r0, r1, r2}
1a000aa4:	8023      	strh	r3, [r4, #0]
					strcpy(strDato, integerToString(localVehiculo.aceleradorIn,strDato,10));
1a000aa6:	220a      	movs	r2, #10
1a000aa8:	a902      	add	r1, sp, #8
1a000aaa:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
1a000aae:	f7ff fc27 	bl	1a000300 <integerToString>
1a000ab2:	4601      	mov	r1, r0
1a000ab4:	a802      	add	r0, sp, #8
1a000ab6:	f004 fdc1 	bl	1a00563c <strcpy>
					break;
				default:
					//-- Do nothing
					break;
			}
			strcat(strEnvio, strDato);
1a000aba:	ac06      	add	r4, sp, #24
1a000abc:	a902      	add	r1, sp, #8
1a000abe:	4620      	mov	r0, r4
1a000ac0:	f004 fdad 	bl	1a00561e <strcat>
			strcat(strEnvio, "\r\n");
1a000ac4:	4620      	mov	r0, r4
1a000ac6:	f004 fdc1 	bl	1a00564c <strlen>
1a000aca:	1822      	adds	r2, r4, r0
1a000acc:	4b9c      	ldr	r3, [pc, #624]	; (1a000d40 <taskEnvioDatos+0x2d0>)
1a000ace:	8819      	ldrh	r1, [r3, #0]
1a000ad0:	789b      	ldrb	r3, [r3, #2]
1a000ad2:	5221      	strh	r1, [r4, r0]
1a000ad4:	7093      	strb	r3, [r2, #2]

			ptrStrEnvio = strEnvio;
1a000ad6:	a91c      	add	r1, sp, #112	; 0x70
1a000ad8:	f841 4d6c 	str.w	r4, [r1, #-108]!
			returnValue = xQueueSend(colaMsg, &ptrStrEnvio,portMAX_DELAY);
1a000adc:	2300      	movs	r3, #0
1a000ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ae2:	4894      	ldr	r0, [pc, #592]	; (1a000d34 <taskEnvioDatos+0x2c4>)
1a000ae4:	6800      	ldr	r0, [r0, #0]
1a000ae6:	f000 fe27 	bl	1a001738 <xQueueGenericSend>
				//gpioWrite(LEDB,ON);
			}
			else{
				//gpioWrite(LED2,ON);
			}
			vTaskDelayUntil(&tiempo_inicio_ciclo,20/portTICK_RATE_MS);
1a000aea:	2114      	movs	r1, #20
1a000aec:	a81b      	add	r0, sp, #108	; 0x6c
1a000aee:	f001 fd27 	bl	1a002540 <vTaskDelayUntil>
		for (i=1 ; i<=15 ;i++){
1a000af2:	3501      	adds	r5, #1
1a000af4:	2d0f      	cmp	r5, #15
1a000af6:	dcc7      	bgt.n	1a000a88 <taskEnvioDatos+0x18>
			switch(i){
1a000af8:	1e6b      	subs	r3, r5, #1
1a000afa:	2b0e      	cmp	r3, #14
1a000afc:	d8dd      	bhi.n	1a000aba <taskEnvioDatos+0x4a>
1a000afe:	a201      	add	r2, pc, #4	; (adr r2, 1a000b04 <taskEnvioDatos+0x94>)
1a000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000b04:	1a000a8d 	.word	0x1a000a8d
1a000b08:	1a000b59 	.word	0x1a000b59
1a000b0c:	1a000b9f 	.word	0x1a000b9f
1a000b10:	1a000be5 	.word	0x1a000be5
1a000b14:	1a000c2f 	.word	0x1a000c2f
1a000b18:	1a000c79 	.word	0x1a000c79
1a000b1c:	1a000cc1 	.word	0x1a000cc1
1a000b20:	1a000d05 	.word	0x1a000d05
1a000b24:	1a000d7b 	.word	0x1a000d7b
1a000b28:	1a000dbf 	.word	0x1a000dbf
1a000b2c:	1a000e03 	.word	0x1a000e03
1a000b30:	1a000e47 	.word	0x1a000e47
1a000b34:	1a000e97 	.word	0x1a000e97
1a000b38:	1a000edb 	.word	0x1a000edb
1a000b3c:	1a000f21 	.word	0x1a000f21
							localVehiculo.aceleradorIn = vehiculo.aceleradorIn;
1a000b40:	4b80      	ldr	r3, [pc, #512]	; (1a000d44 <taskEnvioDatos+0x2d4>)
1a000b42:	885b      	ldrh	r3, [r3, #2]
1a000b44:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
							xSemaphoreGive( mutexSem );
1a000b48:	2300      	movs	r3, #0
1a000b4a:	461a      	mov	r2, r3
1a000b4c:	4619      	mov	r1, r3
1a000b4e:	487a      	ldr	r0, [pc, #488]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000b50:	6800      	ldr	r0, [r0, #0]
1a000b52:	f000 fdf1 	bl	1a001738 <xQueueGenericSend>
1a000b56:	e7a1      	b.n	1a000a9c <taskEnvioDatos+0x2c>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000b58:	4b77      	ldr	r3, [pc, #476]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000b5a:	6818      	ldr	r0, [r3, #0]
1a000b5c:	b120      	cbz	r0, 1a000b68 <taskEnvioDatos+0xf8>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000b5e:	210a      	movs	r1, #10
1a000b60:	f001 f82a 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000b64:	2801      	cmp	r0, #1
1a000b66:	d00f      	beq.n	1a000b88 <taskEnvioDatos+0x118>
					strcpy(strEnvio, "aceleradorOutMD:" );
1a000b68:	ac06      	add	r4, sp, #24
1a000b6a:	4e77      	ldr	r6, [pc, #476]	; (1a000d48 <taskEnvioDatos+0x2d8>)
1a000b6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b70:	6833      	ldr	r3, [r6, #0]
1a000b72:	7023      	strb	r3, [r4, #0]
					strcpy(strDato ,floatToString(localVehiculo.aceleradorOutMD,strDato));
1a000b74:	a802      	add	r0, sp, #8
1a000b76:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
1a000b7a:	f7ff fbf5 	bl	1a000368 <floatToString>
1a000b7e:	4601      	mov	r1, r0
1a000b80:	a802      	add	r0, sp, #8
1a000b82:	f004 fd5b 	bl	1a00563c <strcpy>
					break;
1a000b86:	e798      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.aceleradorOutMD = vehiculo.aceleradorOutMD;
1a000b88:	4b6e      	ldr	r3, [pc, #440]	; (1a000d44 <taskEnvioDatos+0x2d4>)
1a000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a000b8c:	9318      	str	r3, [sp, #96]	; 0x60
							xSemaphoreGive( mutexSem );
1a000b8e:	2300      	movs	r3, #0
1a000b90:	461a      	mov	r2, r3
1a000b92:	4619      	mov	r1, r3
1a000b94:	4868      	ldr	r0, [pc, #416]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000b96:	6800      	ldr	r0, [r0, #0]
1a000b98:	f000 fdce 	bl	1a001738 <xQueueGenericSend>
1a000b9c:	e7e4      	b.n	1a000b68 <taskEnvioDatos+0xf8>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000b9e:	4b66      	ldr	r3, [pc, #408]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000ba0:	6818      	ldr	r0, [r3, #0]
1a000ba2:	b120      	cbz	r0, 1a000bae <taskEnvioDatos+0x13e>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000ba4:	210a      	movs	r1, #10
1a000ba6:	f001 f807 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000baa:	2801      	cmp	r0, #1
1a000bac:	d00f      	beq.n	1a000bce <taskEnvioDatos+0x15e>
					strcpy(strEnvio, "aceleradorOutMI:" );
1a000bae:	ac06      	add	r4, sp, #24
1a000bb0:	4e66      	ldr	r6, [pc, #408]	; (1a000d4c <taskEnvioDatos+0x2dc>)
1a000bb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bb6:	6833      	ldr	r3, [r6, #0]
1a000bb8:	7023      	strb	r3, [r4, #0]
					strcpy(strDato ,floatToString(localVehiculo.aceleradorOutMI,strDato));
1a000bba:	a802      	add	r0, sp, #8
1a000bbc:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
1a000bc0:	f7ff fbd2 	bl	1a000368 <floatToString>
1a000bc4:	4601      	mov	r1, r0
1a000bc6:	a802      	add	r0, sp, #8
1a000bc8:	f004 fd38 	bl	1a00563c <strcpy>
					break;
1a000bcc:	e775      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.aceleradorOutMI = vehiculo.aceleradorOutMI;
1a000bce:	4b5d      	ldr	r3, [pc, #372]	; (1a000d44 <taskEnvioDatos+0x2d4>)
1a000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a000bd2:	9317      	str	r3, [sp, #92]	; 0x5c
							xSemaphoreGive( mutexSem );
1a000bd4:	2300      	movs	r3, #0
1a000bd6:	461a      	mov	r2, r3
1a000bd8:	4619      	mov	r1, r3
1a000bda:	4857      	ldr	r0, [pc, #348]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000bdc:	6800      	ldr	r0, [r0, #0]
1a000bde:	f000 fdab 	bl	1a001738 <xQueueGenericSend>
1a000be2:	e7e4      	b.n	1a000bae <taskEnvioDatos+0x13e>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000be4:	4b54      	ldr	r3, [pc, #336]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000be6:	6818      	ldr	r0, [r3, #0]
1a000be8:	b120      	cbz	r0, 1a000bf4 <taskEnvioDatos+0x184>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000bea:	210a      	movs	r1, #10
1a000bec:	f000 ffe4 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000bf0:	2801      	cmp	r0, #1
1a000bf2:	d010      	beq.n	1a000c16 <taskEnvioDatos+0x1a6>
					strcpy(strEnvio, "alarma:" );
1a000bf4:	ab06      	add	r3, sp, #24
1a000bf6:	4a56      	ldr	r2, [pc, #344]	; (1a000d50 <taskEnvioDatos+0x2e0>)
1a000bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
1a000bfc:	e883 0003 	stmia.w	r3, {r0, r1}
					strcpy(strDato ,integerToString(localVehiculo.alarma,strDato,10));
1a000c00:	220a      	movs	r2, #10
1a000c02:	a902      	add	r1, sp, #8
1a000c04:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
1a000c08:	f7ff fb7a 	bl	1a000300 <integerToString>
1a000c0c:	4601      	mov	r1, r0
1a000c0e:	a802      	add	r0, sp, #8
1a000c10:	f004 fd14 	bl	1a00563c <strcpy>
					break;
1a000c14:	e751      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.alarma = vehiculo.alarma;
1a000c16:	4b4b      	ldr	r3, [pc, #300]	; (1a000d44 <taskEnvioDatos+0x2d4>)
1a000c18:	7d5b      	ldrb	r3, [r3, #21]
1a000c1a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
							xSemaphoreGive( mutexSem );
1a000c1e:	2300      	movs	r3, #0
1a000c20:	461a      	mov	r2, r3
1a000c22:	4619      	mov	r1, r3
1a000c24:	4844      	ldr	r0, [pc, #272]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000c26:	6800      	ldr	r0, [r0, #0]
1a000c28:	f000 fd86 	bl	1a001738 <xQueueGenericSend>
1a000c2c:	e7e2      	b.n	1a000bf4 <taskEnvioDatos+0x184>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000c2e:	4b42      	ldr	r3, [pc, #264]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000c30:	6818      	ldr	r0, [r3, #0]
1a000c32:	b120      	cbz	r0, 1a000c3e <taskEnvioDatos+0x1ce>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000c34:	210a      	movs	r1, #10
1a000c36:	f000 ffbf 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000c3a:	2801      	cmp	r0, #1
1a000c3c:	d010      	beq.n	1a000c60 <taskEnvioDatos+0x1f0>
					strcpy(strEnvio, "estado:" );
1a000c3e:	ab06      	add	r3, sp, #24
1a000c40:	4a44      	ldr	r2, [pc, #272]	; (1a000d54 <taskEnvioDatos+0x2e4>)
1a000c42:	e892 0003 	ldmia.w	r2, {r0, r1}
1a000c46:	e883 0003 	stmia.w	r3, {r0, r1}
					strcpy(strDato ,integerToString(localVehiculo.estado,strDato,10));
1a000c4a:	220a      	movs	r2, #10
1a000c4c:	a902      	add	r1, sp, #8
1a000c4e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
1a000c52:	f7ff fb55 	bl	1a000300 <integerToString>
1a000c56:	4601      	mov	r1, r0
1a000c58:	a802      	add	r0, sp, #8
1a000c5a:	f004 fcef 	bl	1a00563c <strcpy>
					break;
1a000c5e:	e72c      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.estado = vehiculo.estado;
1a000c60:	4b38      	ldr	r3, [pc, #224]	; (1a000d44 <taskEnvioDatos+0x2d4>)
1a000c62:	781b      	ldrb	r3, [r3, #0]
1a000c64:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
							xSemaphoreGive( mutexSem );
1a000c68:	2300      	movs	r3, #0
1a000c6a:	461a      	mov	r2, r3
1a000c6c:	4619      	mov	r1, r3
1a000c6e:	4832      	ldr	r0, [pc, #200]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000c70:	6800      	ldr	r0, [r0, #0]
1a000c72:	f000 fd61 	bl	1a001738 <xQueueGenericSend>
1a000c76:	e7e2      	b.n	1a000c3e <taskEnvioDatos+0x1ce>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000c78:	4b2f      	ldr	r3, [pc, #188]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000c7a:	6818      	ldr	r0, [r3, #0]
1a000c7c:	b120      	cbz	r0, 1a000c88 <taskEnvioDatos+0x218>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000c7e:	210a      	movs	r1, #10
1a000c80:	f000 ff9a 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000c84:	2801      	cmp	r0, #1
1a000c86:	d00f      	beq.n	1a000ca8 <taskEnvioDatos+0x238>
					strcpy(strEnvio, "frenoIn:" );
1a000c88:	4a33      	ldr	r2, [pc, #204]	; (1a000d58 <taskEnvioDatos+0x2e8>)
1a000c8a:	ab06      	add	r3, sp, #24
1a000c8c:	ca07      	ldmia	r2, {r0, r1, r2}
1a000c8e:	c303      	stmia	r3!, {r0, r1}
1a000c90:	701a      	strb	r2, [r3, #0]
					strcpy(strDato ,integerToString(localVehiculo.frenoIn,strDato,10));
1a000c92:	220a      	movs	r2, #10
1a000c94:	a902      	add	r1, sp, #8
1a000c96:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
1a000c9a:	f7ff fb31 	bl	1a000300 <integerToString>
1a000c9e:	4601      	mov	r1, r0
1a000ca0:	a802      	add	r0, sp, #8
1a000ca2:	f004 fccb 	bl	1a00563c <strcpy>
					break;
1a000ca6:	e708      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.frenoIn = vehiculo.frenoIn;
1a000ca8:	4b26      	ldr	r3, [pc, #152]	; (1a000d44 <taskEnvioDatos+0x2d4>)
1a000caa:	889b      	ldrh	r3, [r3, #4]
1a000cac:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
							xSemaphoreGive( mutexSem );
1a000cb0:	2300      	movs	r3, #0
1a000cb2:	461a      	mov	r2, r3
1a000cb4:	4619      	mov	r1, r3
1a000cb6:	4820      	ldr	r0, [pc, #128]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000cb8:	6800      	ldr	r0, [r0, #0]
1a000cba:	f000 fd3d 	bl	1a001738 <xQueueGenericSend>
1a000cbe:	e7e3      	b.n	1a000c88 <taskEnvioDatos+0x218>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000cc0:	4b1d      	ldr	r3, [pc, #116]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000cc2:	6818      	ldr	r0, [r3, #0]
1a000cc4:	b120      	cbz	r0, 1a000cd0 <taskEnvioDatos+0x260>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000cc6:	210a      	movs	r1, #10
1a000cc8:	f000 ff76 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000ccc:	2801      	cmp	r0, #1
1a000cce:	d00e      	beq.n	1a000cee <taskEnvioDatos+0x27e>
					strcpy(strEnvio, "frenoOutMD:" );
1a000cd0:	ab06      	add	r3, sp, #24
1a000cd2:	4a22      	ldr	r2, [pc, #136]	; (1a000d5c <taskEnvioDatos+0x2ec>)
1a000cd4:	ca07      	ldmia	r2, {r0, r1, r2}
1a000cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					strcpy(strDato ,floatToString(localVehiculo.frenoOutMD,strDato));
1a000cda:	a802      	add	r0, sp, #8
1a000cdc:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
1a000ce0:	f7ff fb42 	bl	1a000368 <floatToString>
1a000ce4:	4601      	mov	r1, r0
1a000ce6:	a802      	add	r0, sp, #8
1a000ce8:	f004 fca8 	bl	1a00563c <strcpy>
					break;
1a000cec:	e6e5      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.frenoOutMD = vehiculo.frenoOutMD;
1a000cee:	4b15      	ldr	r3, [pc, #84]	; (1a000d44 <taskEnvioDatos+0x2d4>)
1a000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a000cf2:	931a      	str	r3, [sp, #104]	; 0x68
							xSemaphoreGive( mutexSem );
1a000cf4:	2300      	movs	r3, #0
1a000cf6:	461a      	mov	r2, r3
1a000cf8:	4619      	mov	r1, r3
1a000cfa:	480f      	ldr	r0, [pc, #60]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000cfc:	6800      	ldr	r0, [r0, #0]
1a000cfe:	f000 fd1b 	bl	1a001738 <xQueueGenericSend>
1a000d02:	e7e5      	b.n	1a000cd0 <taskEnvioDatos+0x260>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000d04:	4b0c      	ldr	r3, [pc, #48]	; (1a000d38 <taskEnvioDatos+0x2c8>)
1a000d06:	6818      	ldr	r0, [r3, #0]
1a000d08:	b120      	cbz	r0, 1a000d14 <taskEnvioDatos+0x2a4>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000d0a:	210a      	movs	r1, #10
1a000d0c:	f000 ff54 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000d10:	2801      	cmp	r0, #1
1a000d12:	d027      	beq.n	1a000d64 <taskEnvioDatos+0x2f4>
					strcpy(strEnvio, "frenoOutMI:" );
1a000d14:	ab06      	add	r3, sp, #24
1a000d16:	4a12      	ldr	r2, [pc, #72]	; (1a000d60 <taskEnvioDatos+0x2f0>)
1a000d18:	ca07      	ldmia	r2, {r0, r1, r2}
1a000d1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					strcpy(strDato ,floatToString(localVehiculo.frenoOutMI,strDato));
1a000d1e:	a802      	add	r0, sp, #8
1a000d20:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
1a000d24:	f7ff fb20 	bl	1a000368 <floatToString>
1a000d28:	4601      	mov	r1, r0
1a000d2a:	a802      	add	r0, sp, #8
1a000d2c:	f004 fc86 	bl	1a00563c <strcpy>
					break;
1a000d30:	e6c3      	b.n	1a000aba <taskEnvioDatos+0x4a>
1a000d32:	bf00      	nop
1a000d34:	10002b6c 	.word	0x10002b6c
1a000d38:	100000ac 	.word	0x100000ac
1a000d3c:	1a005750 	.word	0x1a005750
1a000d40:	1a005804 	.word	0x1a005804
1a000d44:	10002b38 	.word	0x10002b38
1a000d48:	1a005760 	.word	0x1a005760
1a000d4c:	1a005774 	.word	0x1a005774
1a000d50:	1a005788 	.word	0x1a005788
1a000d54:	1a005790 	.word	0x1a005790
1a000d58:	1a005798 	.word	0x1a005798
1a000d5c:	1a0057a4 	.word	0x1a0057a4
1a000d60:	1a0057b0 	.word	0x1a0057b0
							localVehiculo.frenoOutMI = vehiculo.frenoOutMI;
1a000d64:	4b80      	ldr	r3, [pc, #512]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a000d68:	9319      	str	r3, [sp, #100]	; 0x64
							xSemaphoreGive( mutexSem );
1a000d6a:	2300      	movs	r3, #0
1a000d6c:	461a      	mov	r2, r3
1a000d6e:	4619      	mov	r1, r3
1a000d70:	487e      	ldr	r0, [pc, #504]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000d72:	6800      	ldr	r0, [r0, #0]
1a000d74:	f000 fce0 	bl	1a001738 <xQueueGenericSend>
1a000d78:	e7cc      	b.n	1a000d14 <taskEnvioDatos+0x2a4>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000d7a:	4b7c      	ldr	r3, [pc, #496]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000d7c:	6818      	ldr	r0, [r3, #0]
1a000d7e:	b120      	cbz	r0, 1a000d8a <taskEnvioDatos+0x31a>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000d80:	210a      	movs	r1, #10
1a000d82:	f000 ff19 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000d86:	2801      	cmp	r0, #1
1a000d88:	d00e      	beq.n	1a000da8 <taskEnvioDatos+0x338>
					strcpy(strEnvio, "giroscopoX:" );
1a000d8a:	ab06      	add	r3, sp, #24
1a000d8c:	4a78      	ldr	r2, [pc, #480]	; (1a000f70 <taskEnvioDatos+0x500>)
1a000d8e:	ca07      	ldmia	r2, {r0, r1, r2}
1a000d90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					strcpy(strDato ,floatToString(localVehiculo.giroscopoX,strDato));
1a000d94:	a802      	add	r0, sp, #8
1a000d96:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
1a000d9a:	f7ff fae5 	bl	1a000368 <floatToString>
1a000d9e:	4601      	mov	r1, r0
1a000da0:	a802      	add	r0, sp, #8
1a000da2:	f004 fc4b 	bl	1a00563c <strcpy>
					break;
1a000da6:	e688      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.giroscopoX = vehiculo.giroscopoX;;
1a000da8:	4b6f      	ldr	r3, [pc, #444]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000daa:	689b      	ldr	r3, [r3, #8]
1a000dac:	9310      	str	r3, [sp, #64]	; 0x40
							xSemaphoreGive( mutexSem );
1a000dae:	2300      	movs	r3, #0
1a000db0:	461a      	mov	r2, r3
1a000db2:	4619      	mov	r1, r3
1a000db4:	486d      	ldr	r0, [pc, #436]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000db6:	6800      	ldr	r0, [r0, #0]
1a000db8:	f000 fcbe 	bl	1a001738 <xQueueGenericSend>
1a000dbc:	e7e5      	b.n	1a000d8a <taskEnvioDatos+0x31a>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000dbe:	4b6b      	ldr	r3, [pc, #428]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000dc0:	6818      	ldr	r0, [r3, #0]
1a000dc2:	b120      	cbz	r0, 1a000dce <taskEnvioDatos+0x35e>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000dc4:	210a      	movs	r1, #10
1a000dc6:	f000 fef7 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000dca:	2801      	cmp	r0, #1
1a000dcc:	d00e      	beq.n	1a000dec <taskEnvioDatos+0x37c>
					strcpy(strEnvio, "giroscopoY:" );
1a000dce:	ab06      	add	r3, sp, #24
1a000dd0:	4a68      	ldr	r2, [pc, #416]	; (1a000f74 <taskEnvioDatos+0x504>)
1a000dd2:	ca07      	ldmia	r2, {r0, r1, r2}
1a000dd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					strcpy(strDato ,floatToString(localVehiculo.giroscopoY,strDato));
1a000dd8:	a802      	add	r0, sp, #8
1a000dda:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
1a000dde:	f7ff fac3 	bl	1a000368 <floatToString>
1a000de2:	4601      	mov	r1, r0
1a000de4:	a802      	add	r0, sp, #8
1a000de6:	f004 fc29 	bl	1a00563c <strcpy>
					break;
1a000dea:	e666      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.giroscopoY = vehiculo.giroscopoY;
1a000dec:	4b5e      	ldr	r3, [pc, #376]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000dee:	68db      	ldr	r3, [r3, #12]
1a000df0:	9311      	str	r3, [sp, #68]	; 0x44
							xSemaphoreGive( mutexSem );
1a000df2:	2300      	movs	r3, #0
1a000df4:	461a      	mov	r2, r3
1a000df6:	4619      	mov	r1, r3
1a000df8:	485c      	ldr	r0, [pc, #368]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000dfa:	6800      	ldr	r0, [r0, #0]
1a000dfc:	f000 fc9c 	bl	1a001738 <xQueueGenericSend>
1a000e00:	e7e5      	b.n	1a000dce <taskEnvioDatos+0x35e>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000e02:	4b5a      	ldr	r3, [pc, #360]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000e04:	6818      	ldr	r0, [r3, #0]
1a000e06:	b120      	cbz	r0, 1a000e12 <taskEnvioDatos+0x3a2>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000e08:	210a      	movs	r1, #10
1a000e0a:	f000 fed5 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000e0e:	2801      	cmp	r0, #1
1a000e10:	d00e      	beq.n	1a000e30 <taskEnvioDatos+0x3c0>
					strcpy(strEnvio, "giroscopoZ:" );
1a000e12:	ab06      	add	r3, sp, #24
1a000e14:	4a58      	ldr	r2, [pc, #352]	; (1a000f78 <taskEnvioDatos+0x508>)
1a000e16:	ca07      	ldmia	r2, {r0, r1, r2}
1a000e18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					strcpy(strDato ,floatToString(localVehiculo.giroscopoZ,strDato));
1a000e1c:	a802      	add	r0, sp, #8
1a000e1e:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
1a000e22:	f7ff faa1 	bl	1a000368 <floatToString>
1a000e26:	4601      	mov	r1, r0
1a000e28:	a802      	add	r0, sp, #8
1a000e2a:	f004 fc07 	bl	1a00563c <strcpy>
					break;
1a000e2e:	e644      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.giroscopoZ = vehiculo.giroscopoZ;
1a000e30:	4b4d      	ldr	r3, [pc, #308]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000e32:	691b      	ldr	r3, [r3, #16]
1a000e34:	9312      	str	r3, [sp, #72]	; 0x48
							xSemaphoreGive( mutexSem );
1a000e36:	2300      	movs	r3, #0
1a000e38:	461a      	mov	r2, r3
1a000e3a:	4619      	mov	r1, r3
1a000e3c:	484b      	ldr	r0, [pc, #300]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000e3e:	6800      	ldr	r0, [r0, #0]
1a000e40:	f000 fc7a 	bl	1a001738 <xQueueGenericSend>
1a000e44:	e7e5      	b.n	1a000e12 <taskEnvioDatos+0x3a2>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000e46:	4b49      	ldr	r3, [pc, #292]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000e48:	6818      	ldr	r0, [r3, #0]
1a000e4a:	b120      	cbz	r0, 1a000e56 <taskEnvioDatos+0x3e6>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000e4c:	210a      	movs	r1, #10
1a000e4e:	f000 feb3 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000e52:	2801      	cmp	r0, #1
1a000e54:	d013      	beq.n	1a000e7e <taskEnvioDatos+0x40e>
					strcpy(strEnvio, "start:" );
1a000e56:	4b49      	ldr	r3, [pc, #292]	; (1a000f7c <taskEnvioDatos+0x50c>)
1a000e58:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000e5c:	9006      	str	r0, [sp, #24]
1a000e5e:	f8ad 101c 	strh.w	r1, [sp, #28]
1a000e62:	0c09      	lsrs	r1, r1, #16
1a000e64:	f88d 101e 	strb.w	r1, [sp, #30]
					strcpy(strDato ,integerToString(localVehiculo.start,strDato,10));
1a000e68:	220a      	movs	r2, #10
1a000e6a:	a902      	add	r1, sp, #8
1a000e6c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
1a000e70:	f7ff fa46 	bl	1a000300 <integerToString>
1a000e74:	4601      	mov	r1, r0
1a000e76:	a802      	add	r0, sp, #8
1a000e78:	f004 fbe0 	bl	1a00563c <strcpy>
					break;
1a000e7c:	e61d      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.start = vehiculo.start;
1a000e7e:	4b3a      	ldr	r3, [pc, #232]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000e80:	7d1b      	ldrb	r3, [r3, #20]
1a000e82:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
							xSemaphoreGive( mutexSem );
1a000e86:	2300      	movs	r3, #0
1a000e88:	461a      	mov	r2, r3
1a000e8a:	4619      	mov	r1, r3
1a000e8c:	4837      	ldr	r0, [pc, #220]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000e8e:	6800      	ldr	r0, [r0, #0]
1a000e90:	f000 fc52 	bl	1a001738 <xQueueGenericSend>
1a000e94:	e7df      	b.n	1a000e56 <taskEnvioDatos+0x3e6>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000e96:	4b35      	ldr	r3, [pc, #212]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000e98:	6818      	ldr	r0, [r3, #0]
1a000e9a:	b120      	cbz	r0, 1a000ea6 <taskEnvioDatos+0x436>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000e9c:	210a      	movs	r1, #10
1a000e9e:	f000 fe8b 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000ea2:	2801      	cmp	r0, #1
1a000ea4:	d00e      	beq.n	1a000ec4 <taskEnvioDatos+0x454>
					strcpy(strEnvio, "tempBMS:" );
1a000ea6:	4a36      	ldr	r2, [pc, #216]	; (1a000f80 <taskEnvioDatos+0x510>)
1a000ea8:	ab06      	add	r3, sp, #24
1a000eaa:	ca07      	ldmia	r2, {r0, r1, r2}
1a000eac:	c303      	stmia	r3!, {r0, r1}
1a000eae:	701a      	strb	r2, [r3, #0]
					strcpy(strDato ,floatToString(localVehiculo.tempBMS,strDato));
1a000eb0:	a802      	add	r0, sp, #8
1a000eb2:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
1a000eb6:	f7ff fa57 	bl	1a000368 <floatToString>
1a000eba:	4601      	mov	r1, r0
1a000ebc:	a802      	add	r0, sp, #8
1a000ebe:	f004 fbbd 	bl	1a00563c <strcpy>
					break;
1a000ec2:	e5fa      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.tempBMS = vehiculo.tempBMS;
1a000ec4:	4b28      	ldr	r3, [pc, #160]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000ec6:	6a1b      	ldr	r3, [r3, #32]
1a000ec8:	9316      	str	r3, [sp, #88]	; 0x58
							xSemaphoreGive( mutexSem );
1a000eca:	2300      	movs	r3, #0
1a000ecc:	461a      	mov	r2, r3
1a000ece:	4619      	mov	r1, r3
1a000ed0:	4826      	ldr	r0, [pc, #152]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000ed2:	6800      	ldr	r0, [r0, #0]
1a000ed4:	f000 fc30 	bl	1a001738 <xQueueGenericSend>
1a000ed8:	e7e5      	b.n	1a000ea6 <taskEnvioDatos+0x436>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000eda:	4b24      	ldr	r3, [pc, #144]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000edc:	6818      	ldr	r0, [r3, #0]
1a000ede:	b120      	cbz	r0, 1a000eea <taskEnvioDatos+0x47a>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000ee0:	210a      	movs	r1, #10
1a000ee2:	f000 fe69 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000ee6:	2801      	cmp	r0, #1
1a000ee8:	d00f      	beq.n	1a000f0a <taskEnvioDatos+0x49a>
					strcpy(strEnvio, "tempMD:" );
1a000eea:	ab06      	add	r3, sp, #24
1a000eec:	4a25      	ldr	r2, [pc, #148]	; (1a000f84 <taskEnvioDatos+0x514>)
1a000eee:	e892 0003 	ldmia.w	r2, {r0, r1}
1a000ef2:	e883 0003 	stmia.w	r3, {r0, r1}
					strcpy(strDato ,floatToString(localVehiculo.tempMD,strDato));
1a000ef6:	a802      	add	r0, sp, #8
1a000ef8:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
1a000efc:	f7ff fa34 	bl	1a000368 <floatToString>
1a000f00:	4601      	mov	r1, r0
1a000f02:	a802      	add	r0, sp, #8
1a000f04:	f004 fb9a 	bl	1a00563c <strcpy>
					break;
1a000f08:	e5d7      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.tempMD = vehiculo.tempMD;
1a000f0a:	4b17      	ldr	r3, [pc, #92]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000f0c:	69db      	ldr	r3, [r3, #28]
1a000f0e:	9315      	str	r3, [sp, #84]	; 0x54
							xSemaphoreGive( mutexSem );
1a000f10:	2300      	movs	r3, #0
1a000f12:	461a      	mov	r2, r3
1a000f14:	4619      	mov	r1, r3
1a000f16:	4815      	ldr	r0, [pc, #84]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000f18:	6800      	ldr	r0, [r0, #0]
1a000f1a:	f000 fc0d 	bl	1a001738 <xQueueGenericSend>
1a000f1e:	e7e4      	b.n	1a000eea <taskEnvioDatos+0x47a>
					if( mutexSem!= NULL ) //-- Si ya se encuentra creado el mutex
1a000f20:	4b12      	ldr	r3, [pc, #72]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000f22:	6818      	ldr	r0, [r3, #0]
1a000f24:	b120      	cbz	r0, 1a000f30 <taskEnvioDatos+0x4c0>
						if( xSemaphoreTake( mutexSem, ( TickType_t ) 10 ) == pdTRUE )
1a000f26:	210a      	movs	r1, #10
1a000f28:	f000 fe46 	bl	1a001bb8 <xQueueSemaphoreTake>
1a000f2c:	2801      	cmp	r0, #1
1a000f2e:	d00f      	beq.n	1a000f50 <taskEnvioDatos+0x4e0>
					strcpy(strEnvio, "tempMI:" );
1a000f30:	ab06      	add	r3, sp, #24
1a000f32:	4a15      	ldr	r2, [pc, #84]	; (1a000f88 <taskEnvioDatos+0x518>)
1a000f34:	e892 0003 	ldmia.w	r2, {r0, r1}
1a000f38:	e883 0003 	stmia.w	r3, {r0, r1}
					strcpy(strDato ,floatToString(localVehiculo.tempMI,strDato));
1a000f3c:	a802      	add	r0, sp, #8
1a000f3e:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
1a000f42:	f7ff fa11 	bl	1a000368 <floatToString>
1a000f46:	4601      	mov	r1, r0
1a000f48:	a802      	add	r0, sp, #8
1a000f4a:	f004 fb77 	bl	1a00563c <strcpy>
					break;
1a000f4e:	e5b4      	b.n	1a000aba <taskEnvioDatos+0x4a>
							localVehiculo.tempMI = vehiculo.tempMI;
1a000f50:	4b05      	ldr	r3, [pc, #20]	; (1a000f68 <taskEnvioDatos+0x4f8>)
1a000f52:	699b      	ldr	r3, [r3, #24]
1a000f54:	9314      	str	r3, [sp, #80]	; 0x50
							xSemaphoreGive( mutexSem );
1a000f56:	2300      	movs	r3, #0
1a000f58:	461a      	mov	r2, r3
1a000f5a:	4619      	mov	r1, r3
1a000f5c:	4803      	ldr	r0, [pc, #12]	; (1a000f6c <taskEnvioDatos+0x4fc>)
1a000f5e:	6800      	ldr	r0, [r0, #0]
1a000f60:	f000 fbea 	bl	1a001738 <xQueueGenericSend>
1a000f64:	e7e4      	b.n	1a000f30 <taskEnvioDatos+0x4c0>
1a000f66:	bf00      	nop
1a000f68:	10002b38 	.word	0x10002b38
1a000f6c:	100000ac 	.word	0x100000ac
1a000f70:	1a0057bc 	.word	0x1a0057bc
1a000f74:	1a0057c8 	.word	0x1a0057c8
1a000f78:	1a0057d4 	.word	0x1a0057d4
1a000f7c:	1a0057e0 	.word	0x1a0057e0
1a000f80:	1a0057e8 	.word	0x1a0057e8
1a000f84:	1a0057f4 	.word	0x1a0057f4
1a000f88:	1a0057fc 	.word	0x1a0057fc

1a000f8c <taskUartConnection>:
		}

	}
}

void taskUartConnection( void* taskParmPtr ){
1a000f8c:	b510      	push	{r4, lr}
1a000f8e:	b08a      	sub	sp, #40	; 0x28
	//-- Setup tarea
	char* ptrStrRecibido;
	char StrRecibido[30];
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000f90:	f001 f9ca 	bl	1a002328 <xTaskGetTickCount>
1a000f94:	9000      	str	r0, [sp, #0]
	uartConfig(UART_GPIO , 9600);
1a000f96:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a000f9a:	2000      	movs	r0, #0
1a000f9c:	f002 f9ee 	bl	1a00337c <uartInit>
	uartWriteString(UART_GPIO ,"Scheduler inicializado 11\r\n");
1a000fa0:	490f      	ldr	r1, [pc, #60]	; (1a000fe0 <taskUartConnection+0x54>)
1a000fa2:	2000      	movs	r0, #0
1a000fa4:	f002 fa35 	bl	1a003412 <uartWriteString>
1a000fa8:	e007      	b.n	1a000fba <taskUartConnection+0x2e>
		if(returnValue){
			uartWriteString(UART_GPIO ,StrRecibido);
			//gpioWrite(LEDR,ON);
		}
		else{
			uartWriteString(UART_GPIO ,"Nada recibido desde la cola");
1a000faa:	490e      	ldr	r1, [pc, #56]	; (1a000fe4 <taskUartConnection+0x58>)
1a000fac:	2000      	movs	r0, #0
1a000fae:	f002 fa30 	bl	1a003412 <uartWriteString>
			//gpioWrite(LED3,ON);
		}
		vTaskDelayUntil(&tiempo_inicio_ciclo,250/portTICK_RATE_MS);
1a000fb2:	21fa      	movs	r1, #250	; 0xfa
1a000fb4:	4668      	mov	r0, sp
1a000fb6:	f001 fac3 	bl	1a002540 <vTaskDelayUntil>
		returnValue = xQueueReceive(colaMsg,&ptrStrRecibido,(TickType_t) 500 );
1a000fba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a000fbe:	a909      	add	r1, sp, #36	; 0x24
1a000fc0:	4b09      	ldr	r3, [pc, #36]	; (1a000fe8 <taskUartConnection+0x5c>)
1a000fc2:	6818      	ldr	r0, [r3, #0]
1a000fc4:	f000 fd4c 	bl	1a001a60 <xQueueReceive>
1a000fc8:	4604      	mov	r4, r0
		strcpy(StrRecibido,ptrStrRecibido);
1a000fca:	9909      	ldr	r1, [sp, #36]	; 0x24
1a000fcc:	a801      	add	r0, sp, #4
1a000fce:	f004 fb35 	bl	1a00563c <strcpy>
		if(returnValue){
1a000fd2:	2c00      	cmp	r4, #0
1a000fd4:	d0e9      	beq.n	1a000faa <taskUartConnection+0x1e>
			uartWriteString(UART_GPIO ,StrRecibido);
1a000fd6:	a901      	add	r1, sp, #4
1a000fd8:	2000      	movs	r0, #0
1a000fda:	f002 fa1a 	bl	1a003412 <uartWriteString>
1a000fde:	e7e8      	b.n	1a000fb2 <taskUartConnection+0x26>
1a000fe0:	1a0058d0 	.word	0x1a0058d0
1a000fe4:	1a0058ec 	.word	0x1a0058ec
1a000fe8:	10002b6c 	.word	0x10002b6c

1a000fec <configInterrupts>:
void configInterrupts(void){
1a000fec:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a000fee:	4b43      	ldr	r3, [pc, #268]	; (1a0010fc <configInterrupts+0x110>)
1a000ff0:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a000ff4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
1a000ff8:	f042 0204 	orr.w	r2, r2, #4
1a000ffc:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
1a001000:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a001004:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
1a001008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
1a00100c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
1a001010:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a001014:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
1a001018:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
1a00101c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
1a001020:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
1a001024:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
1a001028:	f042 5224 	orr.w	r2, r2, #687865856	; 0x29000000
1a00102c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a001030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001034:	681a      	ldr	r2, [r3, #0]
1a001036:	f022 0201 	bic.w	r2, r2, #1
1a00103a:	601a      	str	r2, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a00103c:	2401      	movs	r4, #1
1a00103e:	615c      	str	r4, [r3, #20]
	pPININT->SIENR = pins;
1a001040:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a001042:	4a2f      	ldr	r2, [pc, #188]	; (1a001100 <configInterrupts+0x114>)
1a001044:	21a0      	movs	r1, #160	; 0xa0
1a001046:	f882 1320 	strb.w	r1, [r2, #800]	; 0x320
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a00104a:	6054      	str	r4, [r2, #4]
	pPININT->ISEL &= ~pins;
1a00104c:	6818      	ldr	r0, [r3, #0]
1a00104e:	f020 0002 	bic.w	r0, r0, #2
1a001052:	6018      	str	r0, [r3, #0]
	pPININT->SIENF = pins;
1a001054:	2002      	movs	r0, #2
1a001056:	6158      	str	r0, [r3, #20]
	pPININT->SIENR = pins;
1a001058:	6098      	str	r0, [r3, #8]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a00105a:	f882 1321 	strb.w	r1, [r2, #801]	; 0x321
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a00105e:	6050      	str	r0, [r2, #4]
	pPININT->ISEL &= ~pins;
1a001060:	6818      	ldr	r0, [r3, #0]
1a001062:	f020 0004 	bic.w	r0, r0, #4
1a001066:	6018      	str	r0, [r3, #0]
	pPININT->SIENF = pins;
1a001068:	2004      	movs	r0, #4
1a00106a:	6158      	str	r0, [r3, #20]
	pPININT->SIENR = pins;
1a00106c:	6098      	str	r0, [r3, #8]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a00106e:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a001072:	6050      	str	r0, [r2, #4]
	pPININT->ISEL &= ~pins;
1a001074:	6818      	ldr	r0, [r3, #0]
1a001076:	f020 0008 	bic.w	r0, r0, #8
1a00107a:	6018      	str	r0, [r3, #0]
	pPININT->SIENF = pins;
1a00107c:	2008      	movs	r0, #8
1a00107e:	6158      	str	r0, [r3, #20]
	pPININT->SIENR = pins;
1a001080:	6098      	str	r0, [r3, #8]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a001082:	f882 1323 	strb.w	r1, [r2, #803]	; 0x323
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a001086:	6050      	str	r0, [r2, #4]
	SemBinTec1RiseEdge = xSemaphoreCreateBinary();
1a001088:	2203      	movs	r2, #3
1a00108a:	2100      	movs	r1, #0
1a00108c:	4620      	mov	r0, r4
1a00108e:	f000 fb2c 	bl	1a0016ea <xQueueGenericCreate>
1a001092:	4b1c      	ldr	r3, [pc, #112]	; (1a001104 <configInterrupts+0x118>)
1a001094:	6018      	str	r0, [r3, #0]
	SemBinTec1FallEdge = xSemaphoreCreateBinary();
1a001096:	2203      	movs	r2, #3
1a001098:	2100      	movs	r1, #0
1a00109a:	4620      	mov	r0, r4
1a00109c:	f000 fb25 	bl	1a0016ea <xQueueGenericCreate>
1a0010a0:	4b19      	ldr	r3, [pc, #100]	; (1a001108 <configInterrupts+0x11c>)
1a0010a2:	6018      	str	r0, [r3, #0]
	SemBinTec2RiseEdge = xSemaphoreCreateBinary();
1a0010a4:	2203      	movs	r2, #3
1a0010a6:	2100      	movs	r1, #0
1a0010a8:	4620      	mov	r0, r4
1a0010aa:	f000 fb1e 	bl	1a0016ea <xQueueGenericCreate>
1a0010ae:	4b17      	ldr	r3, [pc, #92]	; (1a00110c <configInterrupts+0x120>)
1a0010b0:	6018      	str	r0, [r3, #0]
	SemBinTec2FallEdge = xSemaphoreCreateBinary();
1a0010b2:	2203      	movs	r2, #3
1a0010b4:	2100      	movs	r1, #0
1a0010b6:	4620      	mov	r0, r4
1a0010b8:	f000 fb17 	bl	1a0016ea <xQueueGenericCreate>
1a0010bc:	4b14      	ldr	r3, [pc, #80]	; (1a001110 <configInterrupts+0x124>)
1a0010be:	6018      	str	r0, [r3, #0]
	SemBinTec3RiseEdge = xSemaphoreCreateBinary();
1a0010c0:	2203      	movs	r2, #3
1a0010c2:	2100      	movs	r1, #0
1a0010c4:	4620      	mov	r0, r4
1a0010c6:	f000 fb10 	bl	1a0016ea <xQueueGenericCreate>
1a0010ca:	4b12      	ldr	r3, [pc, #72]	; (1a001114 <configInterrupts+0x128>)
1a0010cc:	6018      	str	r0, [r3, #0]
	SemBinTec3FallEdge = xSemaphoreCreateBinary();
1a0010ce:	2203      	movs	r2, #3
1a0010d0:	2100      	movs	r1, #0
1a0010d2:	4620      	mov	r0, r4
1a0010d4:	f000 fb09 	bl	1a0016ea <xQueueGenericCreate>
1a0010d8:	4b0f      	ldr	r3, [pc, #60]	; (1a001118 <configInterrupts+0x12c>)
1a0010da:	6018      	str	r0, [r3, #0]
	SemBinTec4RiseEdge = xSemaphoreCreateBinary();
1a0010dc:	2203      	movs	r2, #3
1a0010de:	2100      	movs	r1, #0
1a0010e0:	4620      	mov	r0, r4
1a0010e2:	f000 fb02 	bl	1a0016ea <xQueueGenericCreate>
1a0010e6:	4b0d      	ldr	r3, [pc, #52]	; (1a00111c <configInterrupts+0x130>)
1a0010e8:	6018      	str	r0, [r3, #0]
	SemBinTec4FallEdge = xSemaphoreCreateBinary();
1a0010ea:	2203      	movs	r2, #3
1a0010ec:	2100      	movs	r1, #0
1a0010ee:	4620      	mov	r0, r4
1a0010f0:	f000 fafb 	bl	1a0016ea <xQueueGenericCreate>
1a0010f4:	4b0a      	ldr	r3, [pc, #40]	; (1a001120 <configInterrupts+0x134>)
1a0010f6:	6018      	str	r0, [r3, #0]
}
1a0010f8:	bd10      	pop	{r4, pc}
1a0010fa:	bf00      	nop
1a0010fc:	40086000 	.word	0x40086000
1a001100:	e000e100 	.word	0xe000e100
1a001104:	1000008c 	.word	0x1000008c
1a001108:	10000088 	.word	0x10000088
1a00110c:	10000094 	.word	0x10000094
1a001110:	10000090 	.word	0x10000090
1a001114:	1000009c 	.word	0x1000009c
1a001118:	10000098 	.word	0x10000098
1a00111c:	100000a4 	.word	0x100000a4
1a001120:	100000a0 	.word	0x100000a0

1a001124 <main>:
{
1a001124:	b500      	push	{lr}
1a001126:	b083      	sub	sp, #12
   boardConfig();
1a001128:	f002 fc0a 	bl	1a003940 <boardInit>
   configInterrupts();
1a00112c:	f7ff ff5e 	bl	1a000fec <configInterrupts>
   debugPrintConfigUart( UART_USB, 115200 );
1a001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a001134:	2103      	movs	r1, #3
1a001136:	482a      	ldr	r0, [pc, #168]	; (1a0011e0 <main+0xbc>)
1a001138:	f002 fc7c 	bl	1a003a34 <printInitUart>
   xTaskCreate(
1a00113c:	2400      	movs	r4, #0
1a00113e:	9401      	str	r4, [sp, #4]
1a001140:	2301      	movs	r3, #1
1a001142:	9300      	str	r3, [sp, #0]
1a001144:	4623      	mov	r3, r4
1a001146:	22b4      	movs	r2, #180	; 0xb4
1a001148:	4926      	ldr	r1, [pc, #152]	; (1a0011e4 <main+0xc0>)
1a00114a:	4827      	ldr	r0, [pc, #156]	; (1a0011e8 <main+0xc4>)
1a00114c:	f001 f867 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a001150:	9401      	str	r4, [sp, #4]
1a001152:	2305      	movs	r3, #5
1a001154:	9300      	str	r3, [sp, #0]
1a001156:	4623      	mov	r3, r4
1a001158:	22b4      	movs	r2, #180	; 0xb4
1a00115a:	4924      	ldr	r1, [pc, #144]	; (1a0011ec <main+0xc8>)
1a00115c:	4824      	ldr	r0, [pc, #144]	; (1a0011f0 <main+0xcc>)
1a00115e:	f001 f85e 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a001162:	9401      	str	r4, [sp, #4]
1a001164:	2304      	movs	r3, #4
1a001166:	9300      	str	r3, [sp, #0]
1a001168:	4623      	mov	r3, r4
1a00116a:	22b4      	movs	r2, #180	; 0xb4
1a00116c:	4921      	ldr	r1, [pc, #132]	; (1a0011f4 <main+0xd0>)
1a00116e:	4822      	ldr	r0, [pc, #136]	; (1a0011f8 <main+0xd4>)
1a001170:	f001 f855 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a001174:	9401      	str	r4, [sp, #4]
1a001176:	2502      	movs	r5, #2
1a001178:	9500      	str	r5, [sp, #0]
1a00117a:	4623      	mov	r3, r4
1a00117c:	f44f 7207 	mov.w	r2, #540	; 0x21c
1a001180:	491e      	ldr	r1, [pc, #120]	; (1a0011fc <main+0xd8>)
1a001182:	481f      	ldr	r0, [pc, #124]	; (1a001200 <main+0xdc>)
1a001184:	f001 f84b 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a001188:	9401      	str	r4, [sp, #4]
1a00118a:	9500      	str	r5, [sp, #0]
1a00118c:	4623      	mov	r3, r4
1a00118e:	22b4      	movs	r2, #180	; 0xb4
1a001190:	491c      	ldr	r1, [pc, #112]	; (1a001204 <main+0xe0>)
1a001192:	481d      	ldr	r0, [pc, #116]	; (1a001208 <main+0xe4>)
1a001194:	f001 f843 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a001198:	9401      	str	r4, [sp, #4]
1a00119a:	2503      	movs	r5, #3
1a00119c:	9500      	str	r5, [sp, #0]
1a00119e:	4623      	mov	r3, r4
1a0011a0:	225a      	movs	r2, #90	; 0x5a
1a0011a2:	491a      	ldr	r1, [pc, #104]	; (1a00120c <main+0xe8>)
1a0011a4:	481a      	ldr	r0, [pc, #104]	; (1a001210 <main+0xec>)
1a0011a6:	f001 f83a 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a0011aa:	9401      	str	r4, [sp, #4]
1a0011ac:	9500      	str	r5, [sp, #0]
1a0011ae:	4623      	mov	r3, r4
1a0011b0:	225a      	movs	r2, #90	; 0x5a
1a0011b2:	4918      	ldr	r1, [pc, #96]	; (1a001214 <main+0xf0>)
1a0011b4:	4818      	ldr	r0, [pc, #96]	; (1a001218 <main+0xf4>)
1a0011b6:	f001 f832 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a0011ba:	9401      	str	r4, [sp, #4]
1a0011bc:	9500      	str	r5, [sp, #0]
1a0011be:	4623      	mov	r3, r4
1a0011c0:	225a      	movs	r2, #90	; 0x5a
1a0011c2:	4916      	ldr	r1, [pc, #88]	; (1a00121c <main+0xf8>)
1a0011c4:	4816      	ldr	r0, [pc, #88]	; (1a001220 <main+0xfc>)
1a0011c6:	f001 f82a 	bl	1a00221e <xTaskCreate>
   xTaskCreate(
1a0011ca:	9401      	str	r4, [sp, #4]
1a0011cc:	9500      	str	r5, [sp, #0]
1a0011ce:	4623      	mov	r3, r4
1a0011d0:	225a      	movs	r2, #90	; 0x5a
1a0011d2:	4914      	ldr	r1, [pc, #80]	; (1a001224 <main+0x100>)
1a0011d4:	4814      	ldr	r0, [pc, #80]	; (1a001228 <main+0x104>)
1a0011d6:	f001 f822 	bl	1a00221e <xTaskCreate>
   vTaskStartScheduler();
1a0011da:	f001 f853 	bl	1a002284 <vTaskStartScheduler>
1a0011de:	e7fe      	b.n	1a0011de <main+0xba>
1a0011e0:	100000a8 	.word	0x100000a8
1a0011e4:	1a0056a8 	.word	0x1a0056a8
1a0011e8:	1a000791 	.word	0x1a000791
1a0011ec:	1a0056b8 	.word	0x1a0056b8
1a0011f0:	1a0007c1 	.word	0x1a0007c1
1a0011f4:	1a0056c8 	.word	0x1a0056c8
1a0011f8:	1a000a15 	.word	0x1a000a15
1a0011fc:	1a0056dc 	.word	0x1a0056dc
1a001200:	1a000a71 	.word	0x1a000a71
1a001204:	1a0056ec 	.word	0x1a0056ec
1a001208:	1a000f8d 	.word	0x1a000f8d
1a00120c:	1a005700 	.word	0x1a005700
1a001210:	1a0003f1 	.word	0x1a0003f1
1a001214:	1a005714 	.word	0x1a005714
1a001218:	1a0004d9 	.word	0x1a0004d9
1a00121c:	1a005728 	.word	0x1a005728
1a001220:	1a0005c1 	.word	0x1a0005c1
1a001224:	1a00573c 	.word	0x1a00573c
1a001228:	1a0006a9 	.word	0x1a0006a9

1a00122c <GPIO0_IRQHandler>:
void GPIO0_IRQHandler(void){
1a00122c:	b508      	push	{r3, lr}
	gpioToggle(LEDG);//Debug
1a00122e:	2029      	movs	r0, #41	; 0x29
1a001230:	f002 fb6d 	bl	1a00390e <gpioToggle>
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetFallStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->FALL;
1a001234:	4b13      	ldr	r3, [pc, #76]	; (1a001284 <GPIO0_IRQHandler+0x58>)
1a001236:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH0){
1a001238:	f013 0f01 	tst.w	r3, #1
1a00123c:	d110      	bne.n	1a001260 <GPIO0_IRQHandler+0x34>
	return pPININT->RISE;
1a00123e:	4b11      	ldr	r3, [pc, #68]	; (1a001284 <GPIO0_IRQHandler+0x58>)
1a001240:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH0){
1a001242:	f013 0f01 	tst.w	r3, #1
1a001246:	d114      	bne.n	1a001272 <GPIO0_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a001248:	4b0f      	ldr	r3, [pc, #60]	; (1a001288 <GPIO0_IRQHandler+0x5c>)
1a00124a:	681b      	ldr	r3, [r3, #0]
1a00124c:	b13b      	cbz	r3, 1a00125e <GPIO0_IRQHandler+0x32>
1a00124e:	4b0f      	ldr	r3, [pc, #60]	; (1a00128c <GPIO0_IRQHandler+0x60>)
1a001250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001254:	601a      	str	r2, [r3, #0]
1a001256:	f3bf 8f4f 	dsb	sy
1a00125a:	f3bf 8f6f 	isb	sy
}
1a00125e:	bd08      	pop	{r3, pc}
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001260:	4b08      	ldr	r3, [pc, #32]	; (1a001284 <GPIO0_IRQHandler+0x58>)
1a001262:	2201      	movs	r2, #1
1a001264:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec1FallEdge, &xHigherPriorityTaskWoken);
1a001266:	4908      	ldr	r1, [pc, #32]	; (1a001288 <GPIO0_IRQHandler+0x5c>)
1a001268:	4b09      	ldr	r3, [pc, #36]	; (1a001290 <GPIO0_IRQHandler+0x64>)
1a00126a:	6818      	ldr	r0, [r3, #0]
1a00126c:	f000 fb9f 	bl	1a0019ae <xQueueGiveFromISR>
1a001270:	e7ea      	b.n	1a001248 <GPIO0_IRQHandler+0x1c>
1a001272:	4b04      	ldr	r3, [pc, #16]	; (1a001284 <GPIO0_IRQHandler+0x58>)
1a001274:	2201      	movs	r2, #1
1a001276:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec1RiseEdge, &xHigherPriorityTaskWoken);
1a001278:	4903      	ldr	r1, [pc, #12]	; (1a001288 <GPIO0_IRQHandler+0x5c>)
1a00127a:	4b06      	ldr	r3, [pc, #24]	; (1a001294 <GPIO0_IRQHandler+0x68>)
1a00127c:	6818      	ldr	r0, [r3, #0]
1a00127e:	f000 fb96 	bl	1a0019ae <xQueueGiveFromISR>
1a001282:	e7e1      	b.n	1a001248 <GPIO0_IRQHandler+0x1c>
1a001284:	40087000 	.word	0x40087000
1a001288:	100000b0 	.word	0x100000b0
1a00128c:	e000ed04 	.word	0xe000ed04
1a001290:	10000088 	.word	0x10000088
1a001294:	1000008c 	.word	0x1000008c

1a001298 <GPIO1_IRQHandler>:
void GPIO1_IRQHandler(void){
1a001298:	b508      	push	{r3, lr}
	gpioToggle(LED2);//Debug
1a00129a:	202c      	movs	r0, #44	; 0x2c
1a00129c:	f002 fb37 	bl	1a00390e <gpioToggle>
	return pPININT->FALL;
1a0012a0:	4b13      	ldr	r3, [pc, #76]	; (1a0012f0 <GPIO1_IRQHandler+0x58>)
1a0012a2:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH1){
1a0012a4:	f013 0f02 	tst.w	r3, #2
1a0012a8:	d110      	bne.n	1a0012cc <GPIO1_IRQHandler+0x34>
	return pPININT->RISE;
1a0012aa:	4b11      	ldr	r3, [pc, #68]	; (1a0012f0 <GPIO1_IRQHandler+0x58>)
1a0012ac:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH1){
1a0012ae:	f013 0f02 	tst.w	r3, #2
1a0012b2:	d114      	bne.n	1a0012de <GPIO1_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a0012b4:	4b0f      	ldr	r3, [pc, #60]	; (1a0012f4 <GPIO1_IRQHandler+0x5c>)
1a0012b6:	681b      	ldr	r3, [r3, #0]
1a0012b8:	b13b      	cbz	r3, 1a0012ca <GPIO1_IRQHandler+0x32>
1a0012ba:	4b0f      	ldr	r3, [pc, #60]	; (1a0012f8 <GPIO1_IRQHandler+0x60>)
1a0012bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012c0:	601a      	str	r2, [r3, #0]
1a0012c2:	f3bf 8f4f 	dsb	sy
1a0012c6:	f3bf 8f6f 	isb	sy
}
1a0012ca:	bd08      	pop	{r3, pc}
	pPININT->IST = pins;
1a0012cc:	4b08      	ldr	r3, [pc, #32]	; (1a0012f0 <GPIO1_IRQHandler+0x58>)
1a0012ce:	2202      	movs	r2, #2
1a0012d0:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec2FallEdge, &xHigherPriorityTaskWoken);
1a0012d2:	4908      	ldr	r1, [pc, #32]	; (1a0012f4 <GPIO1_IRQHandler+0x5c>)
1a0012d4:	4b09      	ldr	r3, [pc, #36]	; (1a0012fc <GPIO1_IRQHandler+0x64>)
1a0012d6:	6818      	ldr	r0, [r3, #0]
1a0012d8:	f000 fb69 	bl	1a0019ae <xQueueGiveFromISR>
1a0012dc:	e7ea      	b.n	1a0012b4 <GPIO1_IRQHandler+0x1c>
1a0012de:	4b04      	ldr	r3, [pc, #16]	; (1a0012f0 <GPIO1_IRQHandler+0x58>)
1a0012e0:	2202      	movs	r2, #2
1a0012e2:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec2RiseEdge, &xHigherPriorityTaskWoken);
1a0012e4:	4903      	ldr	r1, [pc, #12]	; (1a0012f4 <GPIO1_IRQHandler+0x5c>)
1a0012e6:	4b06      	ldr	r3, [pc, #24]	; (1a001300 <GPIO1_IRQHandler+0x68>)
1a0012e8:	6818      	ldr	r0, [r3, #0]
1a0012ea:	f000 fb60 	bl	1a0019ae <xQueueGiveFromISR>
1a0012ee:	e7e1      	b.n	1a0012b4 <GPIO1_IRQHandler+0x1c>
1a0012f0:	40087000 	.word	0x40087000
1a0012f4:	100000b4 	.word	0x100000b4
1a0012f8:	e000ed04 	.word	0xe000ed04
1a0012fc:	10000090 	.word	0x10000090
1a001300:	10000094 	.word	0x10000094

1a001304 <GPIO2_IRQHandler>:
void GPIO2_IRQHandler(void){
1a001304:	b508      	push	{r3, lr}
	gpioToggle(LED3);//Debug
1a001306:	202d      	movs	r0, #45	; 0x2d
1a001308:	f002 fb01 	bl	1a00390e <gpioToggle>
	return pPININT->FALL;
1a00130c:	4b13      	ldr	r3, [pc, #76]	; (1a00135c <GPIO2_IRQHandler+0x58>)
1a00130e:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH2){
1a001310:	f013 0f04 	tst.w	r3, #4
1a001314:	d110      	bne.n	1a001338 <GPIO2_IRQHandler+0x34>
	return pPININT->RISE;
1a001316:	4b11      	ldr	r3, [pc, #68]	; (1a00135c <GPIO2_IRQHandler+0x58>)
1a001318:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH2){
1a00131a:	f013 0f04 	tst.w	r3, #4
1a00131e:	d114      	bne.n	1a00134a <GPIO2_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a001320:	4b0f      	ldr	r3, [pc, #60]	; (1a001360 <GPIO2_IRQHandler+0x5c>)
1a001322:	681b      	ldr	r3, [r3, #0]
1a001324:	b13b      	cbz	r3, 1a001336 <GPIO2_IRQHandler+0x32>
1a001326:	4b0f      	ldr	r3, [pc, #60]	; (1a001364 <GPIO2_IRQHandler+0x60>)
1a001328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00132c:	601a      	str	r2, [r3, #0]
1a00132e:	f3bf 8f4f 	dsb	sy
1a001332:	f3bf 8f6f 	isb	sy
}
1a001336:	bd08      	pop	{r3, pc}
	pPININT->IST = pins;
1a001338:	4b08      	ldr	r3, [pc, #32]	; (1a00135c <GPIO2_IRQHandler+0x58>)
1a00133a:	2204      	movs	r2, #4
1a00133c:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec3FallEdge, &xHigherPriorityTaskWoken);
1a00133e:	4908      	ldr	r1, [pc, #32]	; (1a001360 <GPIO2_IRQHandler+0x5c>)
1a001340:	4b09      	ldr	r3, [pc, #36]	; (1a001368 <GPIO2_IRQHandler+0x64>)
1a001342:	6818      	ldr	r0, [r3, #0]
1a001344:	f000 fb33 	bl	1a0019ae <xQueueGiveFromISR>
1a001348:	e7ea      	b.n	1a001320 <GPIO2_IRQHandler+0x1c>
1a00134a:	4b04      	ldr	r3, [pc, #16]	; (1a00135c <GPIO2_IRQHandler+0x58>)
1a00134c:	2204      	movs	r2, #4
1a00134e:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec3RiseEdge, &xHigherPriorityTaskWoken);
1a001350:	4903      	ldr	r1, [pc, #12]	; (1a001360 <GPIO2_IRQHandler+0x5c>)
1a001352:	4b06      	ldr	r3, [pc, #24]	; (1a00136c <GPIO2_IRQHandler+0x68>)
1a001354:	6818      	ldr	r0, [r3, #0]
1a001356:	f000 fb2a 	bl	1a0019ae <xQueueGiveFromISR>
1a00135a:	e7e1      	b.n	1a001320 <GPIO2_IRQHandler+0x1c>
1a00135c:	40087000 	.word	0x40087000
1a001360:	100000b8 	.word	0x100000b8
1a001364:	e000ed04 	.word	0xe000ed04
1a001368:	10000098 	.word	0x10000098
1a00136c:	1000009c 	.word	0x1000009c

1a001370 <GPIO3_IRQHandler>:
void GPIO3_IRQHandler(void){
1a001370:	b508      	push	{r3, lr}
	gpioToggle(LEDB); //Debug
1a001372:	202a      	movs	r0, #42	; 0x2a
1a001374:	f002 facb 	bl	1a00390e <gpioToggle>
	return pPININT->FALL;
1a001378:	4b13      	ldr	r3, [pc, #76]	; (1a0013c8 <GPIO3_IRQHandler+0x58>)
1a00137a:	6a1b      	ldr	r3, [r3, #32]
	if( Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH3){
1a00137c:	f013 0f08 	tst.w	r3, #8
1a001380:	d110      	bne.n	1a0013a4 <GPIO3_IRQHandler+0x34>
	return pPININT->RISE;
1a001382:	4b11      	ldr	r3, [pc, #68]	; (1a0013c8 <GPIO3_IRQHandler+0x58>)
1a001384:	69db      	ldr	r3, [r3, #28]
	else if( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH3){
1a001386:	f013 0f08 	tst.w	r3, #8
1a00138a:	d114      	bne.n	1a0013b6 <GPIO3_IRQHandler+0x46>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a00138c:	4b0f      	ldr	r3, [pc, #60]	; (1a0013cc <GPIO3_IRQHandler+0x5c>)
1a00138e:	681b      	ldr	r3, [r3, #0]
1a001390:	b13b      	cbz	r3, 1a0013a2 <GPIO3_IRQHandler+0x32>
1a001392:	4b0f      	ldr	r3, [pc, #60]	; (1a0013d0 <GPIO3_IRQHandler+0x60>)
1a001394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001398:	601a      	str	r2, [r3, #0]
1a00139a:	f3bf 8f4f 	dsb	sy
1a00139e:	f3bf 8f6f 	isb	sy
}
1a0013a2:	bd08      	pop	{r3, pc}
	pPININT->IST = pins;
1a0013a4:	4b08      	ldr	r3, [pc, #32]	; (1a0013c8 <GPIO3_IRQHandler+0x58>)
1a0013a6:	2208      	movs	r2, #8
1a0013a8:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec4FallEdge, &xHigherPriorityTaskWoken);
1a0013aa:	4908      	ldr	r1, [pc, #32]	; (1a0013cc <GPIO3_IRQHandler+0x5c>)
1a0013ac:	4b09      	ldr	r3, [pc, #36]	; (1a0013d4 <GPIO3_IRQHandler+0x64>)
1a0013ae:	6818      	ldr	r0, [r3, #0]
1a0013b0:	f000 fafd 	bl	1a0019ae <xQueueGiveFromISR>
1a0013b4:	e7ea      	b.n	1a00138c <GPIO3_IRQHandler+0x1c>
1a0013b6:	4b04      	ldr	r3, [pc, #16]	; (1a0013c8 <GPIO3_IRQHandler+0x58>)
1a0013b8:	2208      	movs	r2, #8
1a0013ba:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR(SemBinTec4RiseEdge, &xHigherPriorityTaskWoken);
1a0013bc:	4903      	ldr	r1, [pc, #12]	; (1a0013cc <GPIO3_IRQHandler+0x5c>)
1a0013be:	4b06      	ldr	r3, [pc, #24]	; (1a0013d8 <GPIO3_IRQHandler+0x68>)
1a0013c0:	6818      	ldr	r0, [r3, #0]
1a0013c2:	f000 faf4 	bl	1a0019ae <xQueueGiveFromISR>
1a0013c6:	e7e1      	b.n	1a00138c <GPIO3_IRQHandler+0x1c>
1a0013c8:	40087000 	.word	0x40087000
1a0013cc:	100000bc 	.word	0x100000bc
1a0013d0:	e000ed04 	.word	0xe000ed04
1a0013d4:	100000a0 	.word	0x100000a0
1a0013d8:	100000a4 	.word	0x100000a4

1a0013dc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0013dc:	b538      	push	{r3, r4, r5, lr}
1a0013de:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0013e0:	f010 0f07 	tst.w	r0, #7
1a0013e4:	d002      	beq.n	1a0013ec <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0013e6:	f020 0407 	bic.w	r4, r0, #7
1a0013ea:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0013ec:	f000 ff94 	bl	1a002318 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0013f0:	4b13      	ldr	r3, [pc, #76]	; (1a001440 <pvPortMalloc+0x64>)
1a0013f2:	681b      	ldr	r3, [r3, #0]
1a0013f4:	b17b      	cbz	r3, 1a001416 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0013f6:	4b13      	ldr	r3, [pc, #76]	; (1a001444 <pvPortMalloc+0x68>)
1a0013f8:	681b      	ldr	r3, [r3, #0]
1a0013fa:	441c      	add	r4, r3
1a0013fc:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a001400:	4294      	cmp	r4, r2
1a001402:	d80e      	bhi.n	1a001422 <pvPortMalloc+0x46>
1a001404:	42a3      	cmp	r3, r4
1a001406:	d310      	bcc.n	1a00142a <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a001408:	f001 f820 	bl	1a00244c <xTaskResumeAll>
void *pvReturn = NULL;
1a00140c:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a00140e:	f000 fd40 	bl	1a001e92 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a001412:	4628      	mov	r0, r5
1a001414:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a001416:	4b0c      	ldr	r3, [pc, #48]	; (1a001448 <pvPortMalloc+0x6c>)
1a001418:	f023 0307 	bic.w	r3, r3, #7
1a00141c:	4a08      	ldr	r2, [pc, #32]	; (1a001440 <pvPortMalloc+0x64>)
1a00141e:	6013      	str	r3, [r2, #0]
1a001420:	e7e9      	b.n	1a0013f6 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a001422:	f001 f813 	bl	1a00244c <xTaskResumeAll>
void *pvReturn = NULL;
1a001426:	2500      	movs	r5, #0
1a001428:	e7f1      	b.n	1a00140e <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00142a:	4a05      	ldr	r2, [pc, #20]	; (1a001440 <pvPortMalloc+0x64>)
1a00142c:	6815      	ldr	r5, [r2, #0]
1a00142e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a001430:	4b04      	ldr	r3, [pc, #16]	; (1a001444 <pvPortMalloc+0x68>)
1a001432:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a001434:	f001 f80a 	bl	1a00244c <xTaskResumeAll>
		if( pvReturn == NULL )
1a001438:	2d00      	cmp	r5, #0
1a00143a:	d1ea      	bne.n	1a001412 <pvPortMalloc+0x36>
1a00143c:	e7e7      	b.n	1a00140e <pvPortMalloc+0x32>
1a00143e:	bf00      	nop
1a001440:	100000c0 	.word	0x100000c0
1a001444:	100020c4 	.word	0x100020c4
1a001448:	100000cc 	.word	0x100000cc

1a00144c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a00144c:	b140      	cbz	r0, 1a001460 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00144e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001452:	f383 8811 	msr	BASEPRI, r3
1a001456:	f3bf 8f6f 	isb	sy
1a00145a:	f3bf 8f4f 	dsb	sy
1a00145e:	e7fe      	b.n	1a00145e <vPortFree+0x12>
}
1a001460:	4770      	bx	lr

1a001462 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a001462:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a001464:	b123      	cbz	r3, 1a001470 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a001466:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a001468:	6818      	ldr	r0, [r3, #0]
1a00146a:	f1c0 0007 	rsb	r0, r0, #7
1a00146e:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a001470:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a001472:	4770      	bx	lr

1a001474 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001474:	b510      	push	{r4, lr}
1a001476:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001478:	f001 fe04 	bl	1a003084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00147c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00147e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001480:	429a      	cmp	r2, r3
1a001482:	d004      	beq.n	1a00148e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a001484:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a001486:	f001 fe1f 	bl	1a0030c8 <vPortExitCritical>

	return xReturn;
}
1a00148a:	4620      	mov	r0, r4
1a00148c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00148e:	2401      	movs	r4, #1
1a001490:	e7f9      	b.n	1a001486 <prvIsQueueFull+0x12>

1a001492 <prvIsQueueEmpty>:
{
1a001492:	b510      	push	{r4, lr}
1a001494:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001496:	f001 fdf5 	bl	1a003084 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00149a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00149c:	b123      	cbz	r3, 1a0014a8 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a00149e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0014a0:	f001 fe12 	bl	1a0030c8 <vPortExitCritical>
}
1a0014a4:	4620      	mov	r0, r4
1a0014a6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0014a8:	2401      	movs	r4, #1
1a0014aa:	e7f9      	b.n	1a0014a0 <prvIsQueueEmpty+0xe>

1a0014ac <prvCopyDataToQueue>:
{
1a0014ac:	b570      	push	{r4, r5, r6, lr}
1a0014ae:	4604      	mov	r4, r0
1a0014b0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0014b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0014b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0014b6:	b95a      	cbnz	r2, 1a0014d0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0014b8:	6803      	ldr	r3, [r0, #0]
1a0014ba:	b11b      	cbz	r3, 1a0014c4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0014bc:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0014be:	3501      	adds	r5, #1
1a0014c0:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0014c2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0014c4:	6840      	ldr	r0, [r0, #4]
1a0014c6:	f001 fa4f 	bl	1a002968 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0014ca:	2300      	movs	r3, #0
1a0014cc:	6063      	str	r3, [r4, #4]
1a0014ce:	e7f6      	b.n	1a0014be <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0014d0:	b96e      	cbnz	r6, 1a0014ee <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0014d2:	6880      	ldr	r0, [r0, #8]
1a0014d4:	f004 f890 	bl	1a0055f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0014d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0014da:	68a3      	ldr	r3, [r4, #8]
1a0014dc:	4413      	add	r3, r2
1a0014de:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0014e0:	6862      	ldr	r2, [r4, #4]
1a0014e2:	4293      	cmp	r3, r2
1a0014e4:	d319      	bcc.n	1a00151a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0014e6:	6823      	ldr	r3, [r4, #0]
1a0014e8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0014ea:	2000      	movs	r0, #0
1a0014ec:	e7e7      	b.n	1a0014be <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014ee:	68c0      	ldr	r0, [r0, #12]
1a0014f0:	f004 f882 	bl	1a0055f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0014f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0014f6:	4252      	negs	r2, r2
1a0014f8:	68e3      	ldr	r3, [r4, #12]
1a0014fa:	4413      	add	r3, r2
1a0014fc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0014fe:	6821      	ldr	r1, [r4, #0]
1a001500:	428b      	cmp	r3, r1
1a001502:	d202      	bcs.n	1a00150a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001504:	6863      	ldr	r3, [r4, #4]
1a001506:	441a      	add	r2, r3
1a001508:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00150a:	2e02      	cmp	r6, #2
1a00150c:	d001      	beq.n	1a001512 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00150e:	2000      	movs	r0, #0
1a001510:	e7d5      	b.n	1a0014be <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001512:	b125      	cbz	r5, 1a00151e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001514:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001516:	2000      	movs	r0, #0
1a001518:	e7d1      	b.n	1a0014be <prvCopyDataToQueue+0x12>
1a00151a:	2000      	movs	r0, #0
1a00151c:	e7cf      	b.n	1a0014be <prvCopyDataToQueue+0x12>
1a00151e:	2000      	movs	r0, #0
1a001520:	e7cd      	b.n	1a0014be <prvCopyDataToQueue+0x12>

1a001522 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001522:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001524:	b172      	cbz	r2, 1a001544 <prvCopyDataFromQueue+0x22>
{
1a001526:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001528:	68c3      	ldr	r3, [r0, #12]
1a00152a:	4413      	add	r3, r2
1a00152c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00152e:	6844      	ldr	r4, [r0, #4]
1a001530:	42a3      	cmp	r3, r4
1a001532:	d301      	bcc.n	1a001538 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001534:	6803      	ldr	r3, [r0, #0]
1a001536:	60c3      	str	r3, [r0, #12]
1a001538:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00153a:	68c1      	ldr	r1, [r0, #12]
1a00153c:	4620      	mov	r0, r4
1a00153e:	f004 f85b 	bl	1a0055f8 <memcpy>
}
1a001542:	bd10      	pop	{r4, pc}
1a001544:	4770      	bx	lr

1a001546 <prvUnlockQueue>:
{
1a001546:	b538      	push	{r3, r4, r5, lr}
1a001548:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00154a:	f001 fd9b 	bl	1a003084 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00154e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a001552:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001554:	e003      	b.n	1a00155e <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001556:	f001 f995 	bl	1a002884 <vTaskMissedYield>
			--cTxLock;
1a00155a:	3c01      	subs	r4, #1
1a00155c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00155e:	2c00      	cmp	r4, #0
1a001560:	dd08      	ble.n	1a001574 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001564:	b133      	cbz	r3, 1a001574 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001566:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00156a:	f001 f8f9 	bl	1a002760 <xTaskRemoveFromEventList>
1a00156e:	2800      	cmp	r0, #0
1a001570:	d0f3      	beq.n	1a00155a <prvUnlockQueue+0x14>
1a001572:	e7f0      	b.n	1a001556 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001574:	23ff      	movs	r3, #255	; 0xff
1a001576:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00157a:	f001 fda5 	bl	1a0030c8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00157e:	f001 fd81 	bl	1a003084 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a001582:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001586:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001588:	e003      	b.n	1a001592 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00158a:	f001 f97b 	bl	1a002884 <vTaskMissedYield>
				--cRxLock;
1a00158e:	3c01      	subs	r4, #1
1a001590:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001592:	2c00      	cmp	r4, #0
1a001594:	dd08      	ble.n	1a0015a8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001596:	692b      	ldr	r3, [r5, #16]
1a001598:	b133      	cbz	r3, 1a0015a8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00159a:	f105 0010 	add.w	r0, r5, #16
1a00159e:	f001 f8df 	bl	1a002760 <xTaskRemoveFromEventList>
1a0015a2:	2800      	cmp	r0, #0
1a0015a4:	d0f3      	beq.n	1a00158e <prvUnlockQueue+0x48>
1a0015a6:	e7f0      	b.n	1a00158a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0015a8:	23ff      	movs	r3, #255	; 0xff
1a0015aa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0015ae:	f001 fd8b 	bl	1a0030c8 <vPortExitCritical>
}
1a0015b2:	bd38      	pop	{r3, r4, r5, pc}

1a0015b4 <xQueueGenericReset>:
{
1a0015b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0015b6:	b940      	cbnz	r0, 1a0015ca <xQueueGenericReset+0x16>
1a0015b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015bc:	f383 8811 	msr	BASEPRI, r3
1a0015c0:	f3bf 8f6f 	isb	sy
1a0015c4:	f3bf 8f4f 	dsb	sy
1a0015c8:	e7fe      	b.n	1a0015c8 <xQueueGenericReset+0x14>
1a0015ca:	4604      	mov	r4, r0
1a0015cc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0015ce:	f001 fd59 	bl	1a003084 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0015d2:	6821      	ldr	r1, [r4, #0]
1a0015d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0015d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0015d8:	fb03 1002 	mla	r0, r3, r2, r1
1a0015dc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0015de:	2000      	movs	r0, #0
1a0015e0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0015e2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0015e4:	3a01      	subs	r2, #1
1a0015e6:	fb02 1303 	mla	r3, r2, r3, r1
1a0015ea:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0015ec:	23ff      	movs	r3, #255	; 0xff
1a0015ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0015f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0015f6:	b9a5      	cbnz	r5, 1a001622 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0015f8:	6923      	ldr	r3, [r4, #16]
1a0015fa:	b91b      	cbnz	r3, 1a001604 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0015fc:	f001 fd64 	bl	1a0030c8 <vPortExitCritical>
}
1a001600:	2001      	movs	r0, #1
1a001602:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001604:	f104 0010 	add.w	r0, r4, #16
1a001608:	f001 f8aa 	bl	1a002760 <xTaskRemoveFromEventList>
1a00160c:	2800      	cmp	r0, #0
1a00160e:	d0f5      	beq.n	1a0015fc <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a001610:	4b08      	ldr	r3, [pc, #32]	; (1a001634 <xQueueGenericReset+0x80>)
1a001612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001616:	601a      	str	r2, [r3, #0]
1a001618:	f3bf 8f4f 	dsb	sy
1a00161c:	f3bf 8f6f 	isb	sy
1a001620:	e7ec      	b.n	1a0015fc <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001622:	f104 0010 	add.w	r0, r4, #16
1a001626:	f000 fbd2 	bl	1a001dce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00162a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00162e:	f000 fbce 	bl	1a001dce <vListInitialise>
1a001632:	e7e3      	b.n	1a0015fc <xQueueGenericReset+0x48>
1a001634:	e000ed04 	.word	0xe000ed04

1a001638 <prvInitialiseNewQueue>:
{
1a001638:	b538      	push	{r3, r4, r5, lr}
1a00163a:	461d      	mov	r5, r3
1a00163c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00163e:	460b      	mov	r3, r1
1a001640:	b149      	cbz	r1, 1a001656 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001642:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001644:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001646:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001648:	2101      	movs	r1, #1
1a00164a:	4620      	mov	r0, r4
1a00164c:	f7ff ffb2 	bl	1a0015b4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001650:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001654:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001656:	6024      	str	r4, [r4, #0]
1a001658:	e7f4      	b.n	1a001644 <prvInitialiseNewQueue+0xc>

1a00165a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00165a:	b940      	cbnz	r0, 1a00166e <xQueueGenericCreateStatic+0x14>
1a00165c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001660:	f383 8811 	msr	BASEPRI, r3
1a001664:	f3bf 8f6f 	isb	sy
1a001668:	f3bf 8f4f 	dsb	sy
1a00166c:	e7fe      	b.n	1a00166c <xQueueGenericCreateStatic+0x12>
	{
1a00166e:	b510      	push	{r4, lr}
1a001670:	b084      	sub	sp, #16
1a001672:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001674:	b153      	cbz	r3, 1a00168c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001676:	b192      	cbz	r2, 1a00169e <xQueueGenericCreateStatic+0x44>
1a001678:	b989      	cbnz	r1, 1a00169e <xQueueGenericCreateStatic+0x44>
1a00167a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00167e:	f383 8811 	msr	BASEPRI, r3
1a001682:	f3bf 8f6f 	isb	sy
1a001686:	f3bf 8f4f 	dsb	sy
1a00168a:	e7fe      	b.n	1a00168a <xQueueGenericCreateStatic+0x30>
1a00168c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001690:	f383 8811 	msr	BASEPRI, r3
1a001694:	f3bf 8f6f 	isb	sy
1a001698:	f3bf 8f4f 	dsb	sy
1a00169c:	e7fe      	b.n	1a00169c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00169e:	b94a      	cbnz	r2, 1a0016b4 <xQueueGenericCreateStatic+0x5a>
1a0016a0:	b141      	cbz	r1, 1a0016b4 <xQueueGenericCreateStatic+0x5a>
1a0016a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016a6:	f383 8811 	msr	BASEPRI, r3
1a0016aa:	f3bf 8f6f 	isb	sy
1a0016ae:	f3bf 8f4f 	dsb	sy
1a0016b2:	e7fe      	b.n	1a0016b2 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0016b4:	2050      	movs	r0, #80	; 0x50
1a0016b6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0016b8:	9803      	ldr	r0, [sp, #12]
1a0016ba:	2850      	cmp	r0, #80	; 0x50
1a0016bc:	d008      	beq.n	1a0016d0 <xQueueGenericCreateStatic+0x76>
1a0016be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016c2:	f383 8811 	msr	BASEPRI, r3
1a0016c6:	f3bf 8f6f 	isb	sy
1a0016ca:	f3bf 8f4f 	dsb	sy
1a0016ce:	e7fe      	b.n	1a0016ce <xQueueGenericCreateStatic+0x74>
1a0016d0:	4620      	mov	r0, r4
1a0016d2:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0016d4:	2301      	movs	r3, #1
1a0016d6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0016da:	9400      	str	r4, [sp, #0]
1a0016dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0016e0:	f7ff ffaa 	bl	1a001638 <prvInitialiseNewQueue>
	}
1a0016e4:	4620      	mov	r0, r4
1a0016e6:	b004      	add	sp, #16
1a0016e8:	bd10      	pop	{r4, pc}

1a0016ea <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0016ea:	b940      	cbnz	r0, 1a0016fe <xQueueGenericCreate+0x14>
1a0016ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016f0:	f383 8811 	msr	BASEPRI, r3
1a0016f4:	f3bf 8f6f 	isb	sy
1a0016f8:	f3bf 8f4f 	dsb	sy
1a0016fc:	e7fe      	b.n	1a0016fc <xQueueGenericCreate+0x12>
	{
1a0016fe:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001700:	b083      	sub	sp, #12
1a001702:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001704:	b111      	cbz	r1, 1a00170c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001706:	fb01 f000 	mul.w	r0, r1, r0
1a00170a:	e000      	b.n	1a00170e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a00170c:	2000      	movs	r0, #0
1a00170e:	4617      	mov	r7, r2
1a001710:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001712:	3050      	adds	r0, #80	; 0x50
1a001714:	f7ff fe62 	bl	1a0013dc <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001718:	4605      	mov	r5, r0
1a00171a:	b150      	cbz	r0, 1a001732 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a00171c:	2300      	movs	r3, #0
1a00171e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001722:	9000      	str	r0, [sp, #0]
1a001724:	463b      	mov	r3, r7
1a001726:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00172a:	4621      	mov	r1, r4
1a00172c:	4630      	mov	r0, r6
1a00172e:	f7ff ff83 	bl	1a001638 <prvInitialiseNewQueue>
	}
1a001732:	4628      	mov	r0, r5
1a001734:	b003      	add	sp, #12
1a001736:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001738 <xQueueGenericSend>:
{
1a001738:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00173a:	b085      	sub	sp, #20
1a00173c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00173e:	b160      	cbz	r0, 1a00175a <xQueueGenericSend+0x22>
1a001740:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001742:	b999      	cbnz	r1, 1a00176c <xQueueGenericSend+0x34>
1a001744:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001746:	b18a      	cbz	r2, 1a00176c <xQueueGenericSend+0x34>
1a001748:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00174c:	f383 8811 	msr	BASEPRI, r3
1a001750:	f3bf 8f6f 	isb	sy
1a001754:	f3bf 8f4f 	dsb	sy
1a001758:	e7fe      	b.n	1a001758 <xQueueGenericSend+0x20>
1a00175a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00175e:	f383 8811 	msr	BASEPRI, r3
1a001762:	f3bf 8f6f 	isb	sy
1a001766:	f3bf 8f4f 	dsb	sy
1a00176a:	e7fe      	b.n	1a00176a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00176c:	2b02      	cmp	r3, #2
1a00176e:	d10b      	bne.n	1a001788 <xQueueGenericSend+0x50>
1a001770:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001772:	2a01      	cmp	r2, #1
1a001774:	d008      	beq.n	1a001788 <xQueueGenericSend+0x50>
1a001776:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00177a:	f383 8811 	msr	BASEPRI, r3
1a00177e:	f3bf 8f6f 	isb	sy
1a001782:	f3bf 8f4f 	dsb	sy
1a001786:	e7fe      	b.n	1a001786 <xQueueGenericSend+0x4e>
1a001788:	461e      	mov	r6, r3
1a00178a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00178c:	f001 f880 	bl	1a002890 <xTaskGetSchedulerState>
1a001790:	b950      	cbnz	r0, 1a0017a8 <xQueueGenericSend+0x70>
1a001792:	9b01      	ldr	r3, [sp, #4]
1a001794:	b153      	cbz	r3, 1a0017ac <xQueueGenericSend+0x74>
1a001796:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00179a:	f383 8811 	msr	BASEPRI, r3
1a00179e:	f3bf 8f6f 	isb	sy
1a0017a2:	f3bf 8f4f 	dsb	sy
1a0017a6:	e7fe      	b.n	1a0017a6 <xQueueGenericSend+0x6e>
1a0017a8:	2500      	movs	r5, #0
1a0017aa:	e03a      	b.n	1a001822 <xQueueGenericSend+0xea>
1a0017ac:	2500      	movs	r5, #0
1a0017ae:	e038      	b.n	1a001822 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0017b0:	4632      	mov	r2, r6
1a0017b2:	4639      	mov	r1, r7
1a0017b4:	4620      	mov	r0, r4
1a0017b6:	f7ff fe79 	bl	1a0014ac <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0017ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0017bc:	b94b      	cbnz	r3, 1a0017d2 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0017be:	b1a8      	cbz	r0, 1a0017ec <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0017c0:	4b3b      	ldr	r3, [pc, #236]	; (1a0018b0 <xQueueGenericSend+0x178>)
1a0017c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017c6:	601a      	str	r2, [r3, #0]
1a0017c8:	f3bf 8f4f 	dsb	sy
1a0017cc:	f3bf 8f6f 	isb	sy
1a0017d0:	e00c      	b.n	1a0017ec <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0017d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0017d6:	f000 ffc3 	bl	1a002760 <xTaskRemoveFromEventList>
1a0017da:	b138      	cbz	r0, 1a0017ec <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0017dc:	4b34      	ldr	r3, [pc, #208]	; (1a0018b0 <xQueueGenericSend+0x178>)
1a0017de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017e2:	601a      	str	r2, [r3, #0]
1a0017e4:	f3bf 8f4f 	dsb	sy
1a0017e8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0017ec:	f001 fc6c 	bl	1a0030c8 <vPortExitCritical>
				return pdPASS;
1a0017f0:	2001      	movs	r0, #1
}
1a0017f2:	b005      	add	sp, #20
1a0017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0017f6:	f001 fc67 	bl	1a0030c8 <vPortExitCritical>
					return errQUEUE_FULL;
1a0017fa:	2000      	movs	r0, #0
1a0017fc:	e7f9      	b.n	1a0017f2 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0017fe:	a802      	add	r0, sp, #8
1a001800:	f000 fff4 	bl	1a0027ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001804:	2501      	movs	r5, #1
1a001806:	e019      	b.n	1a00183c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a001808:	2300      	movs	r3, #0
1a00180a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00180e:	e021      	b.n	1a001854 <xQueueGenericSend+0x11c>
1a001810:	2300      	movs	r3, #0
1a001812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001816:	e023      	b.n	1a001860 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a001818:	4620      	mov	r0, r4
1a00181a:	f7ff fe94 	bl	1a001546 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00181e:	f000 fe15 	bl	1a00244c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001822:	f001 fc2f 	bl	1a003084 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001826:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00182a:	429a      	cmp	r2, r3
1a00182c:	d3c0      	bcc.n	1a0017b0 <xQueueGenericSend+0x78>
1a00182e:	2e02      	cmp	r6, #2
1a001830:	d0be      	beq.n	1a0017b0 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001832:	9b01      	ldr	r3, [sp, #4]
1a001834:	2b00      	cmp	r3, #0
1a001836:	d0de      	beq.n	1a0017f6 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a001838:	2d00      	cmp	r5, #0
1a00183a:	d0e0      	beq.n	1a0017fe <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a00183c:	f001 fc44 	bl	1a0030c8 <vPortExitCritical>
		vTaskSuspendAll();
1a001840:	f000 fd6a 	bl	1a002318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001844:	f001 fc1e 	bl	1a003084 <vPortEnterCritical>
1a001848:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00184c:	b25b      	sxtb	r3, r3
1a00184e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001852:	d0d9      	beq.n	1a001808 <xQueueGenericSend+0xd0>
1a001854:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001858:	b25b      	sxtb	r3, r3
1a00185a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00185e:	d0d7      	beq.n	1a001810 <xQueueGenericSend+0xd8>
1a001860:	f001 fc32 	bl	1a0030c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001864:	a901      	add	r1, sp, #4
1a001866:	a802      	add	r0, sp, #8
1a001868:	f000 ffcc 	bl	1a002804 <xTaskCheckForTimeOut>
1a00186c:	b9c8      	cbnz	r0, 1a0018a2 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00186e:	4620      	mov	r0, r4
1a001870:	f7ff fe00 	bl	1a001474 <prvIsQueueFull>
1a001874:	2800      	cmp	r0, #0
1a001876:	d0cf      	beq.n	1a001818 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001878:	9901      	ldr	r1, [sp, #4]
1a00187a:	f104 0010 	add.w	r0, r4, #16
1a00187e:	f000 ff3b 	bl	1a0026f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001882:	4620      	mov	r0, r4
1a001884:	f7ff fe5f 	bl	1a001546 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001888:	f000 fde0 	bl	1a00244c <xTaskResumeAll>
1a00188c:	2800      	cmp	r0, #0
1a00188e:	d1c8      	bne.n	1a001822 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001890:	4b07      	ldr	r3, [pc, #28]	; (1a0018b0 <xQueueGenericSend+0x178>)
1a001892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001896:	601a      	str	r2, [r3, #0]
1a001898:	f3bf 8f4f 	dsb	sy
1a00189c:	f3bf 8f6f 	isb	sy
1a0018a0:	e7bf      	b.n	1a001822 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a0018a2:	4620      	mov	r0, r4
1a0018a4:	f7ff fe4f 	bl	1a001546 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0018a8:	f000 fdd0 	bl	1a00244c <xTaskResumeAll>
			return errQUEUE_FULL;
1a0018ac:	2000      	movs	r0, #0
1a0018ae:	e7a0      	b.n	1a0017f2 <xQueueGenericSend+0xba>
1a0018b0:	e000ed04 	.word	0xe000ed04

1a0018b4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a0018b4:	b148      	cbz	r0, 1a0018ca <prvInitialiseMutex+0x16>
	{
1a0018b6:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a0018b8:	2100      	movs	r1, #0
1a0018ba:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a0018bc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a0018be:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a0018c0:	460b      	mov	r3, r1
1a0018c2:	460a      	mov	r2, r1
1a0018c4:	f7ff ff38 	bl	1a001738 <xQueueGenericSend>
	}
1a0018c8:	bd08      	pop	{r3, pc}
1a0018ca:	4770      	bx	lr

1a0018cc <xQueueCreateMutex>:
	{
1a0018cc:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a0018ce:	4602      	mov	r2, r0
1a0018d0:	2100      	movs	r1, #0
1a0018d2:	2001      	movs	r0, #1
1a0018d4:	f7ff ff09 	bl	1a0016ea <xQueueGenericCreate>
1a0018d8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a0018da:	f7ff ffeb 	bl	1a0018b4 <prvInitialiseMutex>
	}
1a0018de:	4620      	mov	r0, r4
1a0018e0:	bd10      	pop	{r4, pc}

1a0018e2 <xQueueGenericSendFromISR>:
{
1a0018e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0018e6:	b160      	cbz	r0, 1a001902 <xQueueGenericSendFromISR+0x20>
1a0018e8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0018ea:	b999      	cbnz	r1, 1a001914 <xQueueGenericSendFromISR+0x32>
1a0018ec:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0018ee:	b188      	cbz	r0, 1a001914 <xQueueGenericSendFromISR+0x32>
1a0018f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018f4:	f383 8811 	msr	BASEPRI, r3
1a0018f8:	f3bf 8f6f 	isb	sy
1a0018fc:	f3bf 8f4f 	dsb	sy
1a001900:	e7fe      	b.n	1a001900 <xQueueGenericSendFromISR+0x1e>
1a001902:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001906:	f383 8811 	msr	BASEPRI, r3
1a00190a:	f3bf 8f6f 	isb	sy
1a00190e:	f3bf 8f4f 	dsb	sy
1a001912:	e7fe      	b.n	1a001912 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001914:	2b02      	cmp	r3, #2
1a001916:	d10b      	bne.n	1a001930 <xQueueGenericSendFromISR+0x4e>
1a001918:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a00191a:	2801      	cmp	r0, #1
1a00191c:	d008      	beq.n	1a001930 <xQueueGenericSendFromISR+0x4e>
1a00191e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001922:	f383 8811 	msr	BASEPRI, r3
1a001926:	f3bf 8f6f 	isb	sy
1a00192a:	f3bf 8f4f 	dsb	sy
1a00192e:	e7fe      	b.n	1a00192e <xQueueGenericSendFromISR+0x4c>
1a001930:	461f      	mov	r7, r3
1a001932:	4690      	mov	r8, r2
1a001934:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001936:	f001 fccf 	bl	1a0032d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00193a:	f3ef 8611 	mrs	r6, BASEPRI
1a00193e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001942:	f383 8811 	msr	BASEPRI, r3
1a001946:	f3bf 8f6f 	isb	sy
1a00194a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00194e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001952:	429a      	cmp	r2, r3
1a001954:	d303      	bcc.n	1a00195e <xQueueGenericSendFromISR+0x7c>
1a001956:	2f02      	cmp	r7, #2
1a001958:	d001      	beq.n	1a00195e <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a00195a:	2000      	movs	r0, #0
1a00195c:	e00f      	b.n	1a00197e <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a00195e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001962:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001964:	463a      	mov	r2, r7
1a001966:	4649      	mov	r1, r9
1a001968:	4620      	mov	r0, r4
1a00196a:	f7ff fd9f 	bl	1a0014ac <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a00196e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001972:	d008      	beq.n	1a001986 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001974:	1c6b      	adds	r3, r5, #1
1a001976:	b25b      	sxtb	r3, r3
1a001978:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a00197c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00197e:	f386 8811 	msr	BASEPRI, r6
}
1a001982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001986:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001988:	b15b      	cbz	r3, 1a0019a2 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00198a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00198e:	f000 fee7 	bl	1a002760 <xTaskRemoveFromEventList>
1a001992:	b140      	cbz	r0, 1a0019a6 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001994:	f1b8 0f00 	cmp.w	r8, #0
1a001998:	d007      	beq.n	1a0019aa <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00199a:	2001      	movs	r0, #1
1a00199c:	f8c8 0000 	str.w	r0, [r8]
1a0019a0:	e7ed      	b.n	1a00197e <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0019a2:	2001      	movs	r0, #1
1a0019a4:	e7eb      	b.n	1a00197e <xQueueGenericSendFromISR+0x9c>
1a0019a6:	2001      	movs	r0, #1
1a0019a8:	e7e9      	b.n	1a00197e <xQueueGenericSendFromISR+0x9c>
1a0019aa:	2001      	movs	r0, #1
1a0019ac:	e7e7      	b.n	1a00197e <xQueueGenericSendFromISR+0x9c>

1a0019ae <xQueueGiveFromISR>:
	configASSERT( pxQueue );
1a0019ae:	b160      	cbz	r0, 1a0019ca <xQueueGiveFromISR+0x1c>
{
1a0019b0:	b570      	push	{r4, r5, r6, lr}
1a0019b2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a0019b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0019b6:	b18b      	cbz	r3, 1a0019dc <xQueueGiveFromISR+0x2e>
	__asm volatile
1a0019b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019bc:	f383 8811 	msr	BASEPRI, r3
1a0019c0:	f3bf 8f6f 	isb	sy
1a0019c4:	f3bf 8f4f 	dsb	sy
1a0019c8:	e7fe      	b.n	1a0019c8 <xQueueGiveFromISR+0x1a>
1a0019ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019ce:	f383 8811 	msr	BASEPRI, r3
1a0019d2:	f3bf 8f6f 	isb	sy
1a0019d6:	f3bf 8f4f 	dsb	sy
1a0019da:	e7fe      	b.n	1a0019da <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a0019dc:	6803      	ldr	r3, [r0, #0]
1a0019de:	b32b      	cbz	r3, 1a001a2c <xQueueGiveFromISR+0x7e>
1a0019e0:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0019e2:	f001 fc79 	bl	1a0032d8 <vPortValidateInterruptPriority>
	__asm volatile
1a0019e6:	f3ef 8511 	mrs	r5, BASEPRI
1a0019ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019ee:	f383 8811 	msr	BASEPRI, r3
1a0019f2:	f3bf 8f6f 	isb	sy
1a0019f6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0019fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
1a0019fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0019fe:	4293      	cmp	r3, r2
1a001a00:	d926      	bls.n	1a001a50 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001a02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001a06:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a001a08:	3201      	adds	r2, #1
1a001a0a:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
1a001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a10:	d118      	bne.n	1a001a44 <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a14:	b1f3      	cbz	r3, 1a001a54 <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001a16:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001a1a:	f000 fea1 	bl	1a002760 <xTaskRemoveFromEventList>
1a001a1e:	b1d8      	cbz	r0, 1a001a58 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
1a001a20:	b1e6      	cbz	r6, 1a001a5c <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001a22:	2001      	movs	r0, #1
1a001a24:	6030      	str	r0, [r6, #0]
	__asm volatile
1a001a26:	f385 8811 	msr	BASEPRI, r5
}
1a001a2a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a001a2c:	6843      	ldr	r3, [r0, #4]
1a001a2e:	2b00      	cmp	r3, #0
1a001a30:	d0d6      	beq.n	1a0019e0 <xQueueGiveFromISR+0x32>
	__asm volatile
1a001a32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a36:	f383 8811 	msr	BASEPRI, r3
1a001a3a:	f3bf 8f6f 	isb	sy
1a001a3e:	f3bf 8f4f 	dsb	sy
1a001a42:	e7fe      	b.n	1a001a42 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001a44:	3301      	adds	r3, #1
1a001a46:	b25b      	sxtb	r3, r3
1a001a48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001a4c:	2001      	movs	r0, #1
1a001a4e:	e7ea      	b.n	1a001a26 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
1a001a50:	2000      	movs	r0, #0
1a001a52:	e7e8      	b.n	1a001a26 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
1a001a54:	2001      	movs	r0, #1
1a001a56:	e7e6      	b.n	1a001a26 <xQueueGiveFromISR+0x78>
1a001a58:	2001      	movs	r0, #1
1a001a5a:	e7e4      	b.n	1a001a26 <xQueueGiveFromISR+0x78>
1a001a5c:	2001      	movs	r0, #1
1a001a5e:	e7e2      	b.n	1a001a26 <xQueueGiveFromISR+0x78>

1a001a60 <xQueueReceive>:
{
1a001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a62:	b085      	sub	sp, #20
1a001a64:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001a66:	b160      	cbz	r0, 1a001a82 <xQueueReceive+0x22>
1a001a68:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001a6a:	b999      	cbnz	r1, 1a001a94 <xQueueReceive+0x34>
1a001a6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001a6e:	b18b      	cbz	r3, 1a001a94 <xQueueReceive+0x34>
1a001a70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a74:	f383 8811 	msr	BASEPRI, r3
1a001a78:	f3bf 8f6f 	isb	sy
1a001a7c:	f3bf 8f4f 	dsb	sy
1a001a80:	e7fe      	b.n	1a001a80 <xQueueReceive+0x20>
1a001a82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a86:	f383 8811 	msr	BASEPRI, r3
1a001a8a:	f3bf 8f6f 	isb	sy
1a001a8e:	f3bf 8f4f 	dsb	sy
1a001a92:	e7fe      	b.n	1a001a92 <xQueueReceive+0x32>
1a001a94:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001a96:	f000 fefb 	bl	1a002890 <xTaskGetSchedulerState>
1a001a9a:	b950      	cbnz	r0, 1a001ab2 <xQueueReceive+0x52>
1a001a9c:	9b01      	ldr	r3, [sp, #4]
1a001a9e:	b153      	cbz	r3, 1a001ab6 <xQueueReceive+0x56>
1a001aa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa4:	f383 8811 	msr	BASEPRI, r3
1a001aa8:	f3bf 8f6f 	isb	sy
1a001aac:	f3bf 8f4f 	dsb	sy
1a001ab0:	e7fe      	b.n	1a001ab0 <xQueueReceive+0x50>
1a001ab2:	2600      	movs	r6, #0
1a001ab4:	e03e      	b.n	1a001b34 <xQueueReceive+0xd4>
1a001ab6:	2600      	movs	r6, #0
1a001ab8:	e03c      	b.n	1a001b34 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001aba:	4639      	mov	r1, r7
1a001abc:	4620      	mov	r0, r4
1a001abe:	f7ff fd30 	bl	1a001522 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001ac2:	3d01      	subs	r5, #1
1a001ac4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001ac6:	6923      	ldr	r3, [r4, #16]
1a001ac8:	b923      	cbnz	r3, 1a001ad4 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001aca:	f001 fafd 	bl	1a0030c8 <vPortExitCritical>
				return pdPASS;
1a001ace:	2001      	movs	r0, #1
}
1a001ad0:	b005      	add	sp, #20
1a001ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001ad4:	f104 0010 	add.w	r0, r4, #16
1a001ad8:	f000 fe42 	bl	1a002760 <xTaskRemoveFromEventList>
1a001adc:	2800      	cmp	r0, #0
1a001ade:	d0f4      	beq.n	1a001aca <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001ae0:	4b34      	ldr	r3, [pc, #208]	; (1a001bb4 <xQueueReceive+0x154>)
1a001ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ae6:	601a      	str	r2, [r3, #0]
1a001ae8:	f3bf 8f4f 	dsb	sy
1a001aec:	f3bf 8f6f 	isb	sy
1a001af0:	e7eb      	b.n	1a001aca <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001af2:	f001 fae9 	bl	1a0030c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001af6:	2000      	movs	r0, #0
1a001af8:	e7ea      	b.n	1a001ad0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001afa:	a802      	add	r0, sp, #8
1a001afc:	f000 fe76 	bl	1a0027ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001b00:	2601      	movs	r6, #1
1a001b02:	e021      	b.n	1a001b48 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001b04:	2300      	movs	r3, #0
1a001b06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001b0a:	e029      	b.n	1a001b60 <xQueueReceive+0x100>
1a001b0c:	2300      	movs	r3, #0
1a001b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001b12:	e02b      	b.n	1a001b6c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001b14:	4620      	mov	r0, r4
1a001b16:	f7ff fd16 	bl	1a001546 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001b1a:	f000 fc97 	bl	1a00244c <xTaskResumeAll>
1a001b1e:	e009      	b.n	1a001b34 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001b20:	4620      	mov	r0, r4
1a001b22:	f7ff fd10 	bl	1a001546 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001b26:	f000 fc91 	bl	1a00244c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b2a:	4620      	mov	r0, r4
1a001b2c:	f7ff fcb1 	bl	1a001492 <prvIsQueueEmpty>
1a001b30:	2800      	cmp	r0, #0
1a001b32:	d13d      	bne.n	1a001bb0 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001b34:	f001 faa6 	bl	1a003084 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001b38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001b3a:	2d00      	cmp	r5, #0
1a001b3c:	d1bd      	bne.n	1a001aba <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001b3e:	9b01      	ldr	r3, [sp, #4]
1a001b40:	2b00      	cmp	r3, #0
1a001b42:	d0d6      	beq.n	1a001af2 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001b44:	2e00      	cmp	r6, #0
1a001b46:	d0d8      	beq.n	1a001afa <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001b48:	f001 fabe 	bl	1a0030c8 <vPortExitCritical>
		vTaskSuspendAll();
1a001b4c:	f000 fbe4 	bl	1a002318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001b50:	f001 fa98 	bl	1a003084 <vPortEnterCritical>
1a001b54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001b58:	b25b      	sxtb	r3, r3
1a001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b5e:	d0d1      	beq.n	1a001b04 <xQueueReceive+0xa4>
1a001b60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001b64:	b25b      	sxtb	r3, r3
1a001b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b6a:	d0cf      	beq.n	1a001b0c <xQueueReceive+0xac>
1a001b6c:	f001 faac 	bl	1a0030c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001b70:	a901      	add	r1, sp, #4
1a001b72:	a802      	add	r0, sp, #8
1a001b74:	f000 fe46 	bl	1a002804 <xTaskCheckForTimeOut>
1a001b78:	2800      	cmp	r0, #0
1a001b7a:	d1d1      	bne.n	1a001b20 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b7c:	4620      	mov	r0, r4
1a001b7e:	f7ff fc88 	bl	1a001492 <prvIsQueueEmpty>
1a001b82:	2800      	cmp	r0, #0
1a001b84:	d0c6      	beq.n	1a001b14 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001b86:	9901      	ldr	r1, [sp, #4]
1a001b88:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b8c:	f000 fdb4 	bl	1a0026f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001b90:	4620      	mov	r0, r4
1a001b92:	f7ff fcd8 	bl	1a001546 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001b96:	f000 fc59 	bl	1a00244c <xTaskResumeAll>
1a001b9a:	2800      	cmp	r0, #0
1a001b9c:	d1ca      	bne.n	1a001b34 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001b9e:	4b05      	ldr	r3, [pc, #20]	; (1a001bb4 <xQueueReceive+0x154>)
1a001ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ba4:	601a      	str	r2, [r3, #0]
1a001ba6:	f3bf 8f4f 	dsb	sy
1a001baa:	f3bf 8f6f 	isb	sy
1a001bae:	e7c1      	b.n	1a001b34 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001bb0:	2000      	movs	r0, #0
1a001bb2:	e78d      	b.n	1a001ad0 <xQueueReceive+0x70>
1a001bb4:	e000ed04 	.word	0xe000ed04

1a001bb8 <xQueueSemaphoreTake>:
{
1a001bb8:	b570      	push	{r4, r5, r6, lr}
1a001bba:	b084      	sub	sp, #16
1a001bbc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001bbe:	b940      	cbnz	r0, 1a001bd2 <xQueueSemaphoreTake+0x1a>
1a001bc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bc4:	f383 8811 	msr	BASEPRI, r3
1a001bc8:	f3bf 8f6f 	isb	sy
1a001bcc:	f3bf 8f4f 	dsb	sy
1a001bd0:	e7fe      	b.n	1a001bd0 <xQueueSemaphoreTake+0x18>
1a001bd2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001bd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001bd6:	b143      	cbz	r3, 1a001bea <xQueueSemaphoreTake+0x32>
1a001bd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bdc:	f383 8811 	msr	BASEPRI, r3
1a001be0:	f3bf 8f6f 	isb	sy
1a001be4:	f3bf 8f4f 	dsb	sy
1a001be8:	e7fe      	b.n	1a001be8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001bea:	f000 fe51 	bl	1a002890 <xTaskGetSchedulerState>
1a001bee:	b950      	cbnz	r0, 1a001c06 <xQueueSemaphoreTake+0x4e>
1a001bf0:	9b01      	ldr	r3, [sp, #4]
1a001bf2:	b15b      	cbz	r3, 1a001c0c <xQueueSemaphoreTake+0x54>
1a001bf4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bf8:	f383 8811 	msr	BASEPRI, r3
1a001bfc:	f3bf 8f6f 	isb	sy
1a001c00:	f3bf 8f4f 	dsb	sy
1a001c04:	e7fe      	b.n	1a001c04 <xQueueSemaphoreTake+0x4c>
1a001c06:	2500      	movs	r5, #0
1a001c08:	462e      	mov	r6, r5
1a001c0a:	e051      	b.n	1a001cb0 <xQueueSemaphoreTake+0xf8>
1a001c0c:	2500      	movs	r5, #0
1a001c0e:	462e      	mov	r6, r5
1a001c10:	e04e      	b.n	1a001cb0 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001c12:	3b01      	subs	r3, #1
1a001c14:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001c16:	6823      	ldr	r3, [r4, #0]
1a001c18:	b913      	cbnz	r3, 1a001c20 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001c1a:	f000 ff5d 	bl	1a002ad8 <pvTaskIncrementMutexHeldCount>
1a001c1e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001c20:	6923      	ldr	r3, [r4, #16]
1a001c22:	b163      	cbz	r3, 1a001c3e <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001c24:	f104 0010 	add.w	r0, r4, #16
1a001c28:	f000 fd9a 	bl	1a002760 <xTaskRemoveFromEventList>
1a001c2c:	b138      	cbz	r0, 1a001c3e <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a001c2e:	4b48      	ldr	r3, [pc, #288]	; (1a001d50 <xQueueSemaphoreTake+0x198>)
1a001c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c34:	601a      	str	r2, [r3, #0]
1a001c36:	f3bf 8f4f 	dsb	sy
1a001c3a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001c3e:	f001 fa43 	bl	1a0030c8 <vPortExitCritical>
				return pdPASS;
1a001c42:	2501      	movs	r5, #1
}
1a001c44:	4628      	mov	r0, r5
1a001c46:	b004      	add	sp, #16
1a001c48:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001c4a:	b145      	cbz	r5, 1a001c5e <xQueueSemaphoreTake+0xa6>
1a001c4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c50:	f383 8811 	msr	BASEPRI, r3
1a001c54:	f3bf 8f6f 	isb	sy
1a001c58:	f3bf 8f4f 	dsb	sy
1a001c5c:	e7fe      	b.n	1a001c5c <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a001c5e:	f001 fa33 	bl	1a0030c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001c62:	e7ef      	b.n	1a001c44 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001c64:	a802      	add	r0, sp, #8
1a001c66:	f000 fdc1 	bl	1a0027ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001c6a:	2601      	movs	r6, #1
1a001c6c:	e02a      	b.n	1a001cc4 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a001c6e:	2300      	movs	r3, #0
1a001c70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001c74:	e032      	b.n	1a001cdc <xQueueSemaphoreTake+0x124>
1a001c76:	2300      	movs	r3, #0
1a001c78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001c7c:	e034      	b.n	1a001ce8 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a001c7e:	f001 fa01 	bl	1a003084 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001c82:	6860      	ldr	r0, [r4, #4]
1a001c84:	f000 fe14 	bl	1a0028b0 <xTaskPriorityInherit>
1a001c88:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001c8a:	f001 fa1d 	bl	1a0030c8 <vPortExitCritical>
1a001c8e:	e03b      	b.n	1a001d08 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a001c90:	4620      	mov	r0, r4
1a001c92:	f7ff fc58 	bl	1a001546 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001c96:	f000 fbd9 	bl	1a00244c <xTaskResumeAll>
1a001c9a:	e009      	b.n	1a001cb0 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001c9c:	4620      	mov	r0, r4
1a001c9e:	f7ff fc52 	bl	1a001546 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001ca2:	f000 fbd3 	bl	1a00244c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001ca6:	4620      	mov	r0, r4
1a001ca8:	f7ff fbf3 	bl	1a001492 <prvIsQueueEmpty>
1a001cac:	2800      	cmp	r0, #0
1a001cae:	d140      	bne.n	1a001d32 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a001cb0:	f001 f9e8 	bl	1a003084 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001cb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001cb6:	2b00      	cmp	r3, #0
1a001cb8:	d1ab      	bne.n	1a001c12 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001cba:	9b01      	ldr	r3, [sp, #4]
1a001cbc:	2b00      	cmp	r3, #0
1a001cbe:	d0c4      	beq.n	1a001c4a <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001cc0:	2e00      	cmp	r6, #0
1a001cc2:	d0cf      	beq.n	1a001c64 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001cc4:	f001 fa00 	bl	1a0030c8 <vPortExitCritical>
		vTaskSuspendAll();
1a001cc8:	f000 fb26 	bl	1a002318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001ccc:	f001 f9da 	bl	1a003084 <vPortEnterCritical>
1a001cd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001cd4:	b25b      	sxtb	r3, r3
1a001cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001cda:	d0c8      	beq.n	1a001c6e <xQueueSemaphoreTake+0xb6>
1a001cdc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001ce0:	b25b      	sxtb	r3, r3
1a001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001ce6:	d0c6      	beq.n	1a001c76 <xQueueSemaphoreTake+0xbe>
1a001ce8:	f001 f9ee 	bl	1a0030c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001cec:	a901      	add	r1, sp, #4
1a001cee:	a802      	add	r0, sp, #8
1a001cf0:	f000 fd88 	bl	1a002804 <xTaskCheckForTimeOut>
1a001cf4:	2800      	cmp	r0, #0
1a001cf6:	d1d1      	bne.n	1a001c9c <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001cf8:	4620      	mov	r0, r4
1a001cfa:	f7ff fbca 	bl	1a001492 <prvIsQueueEmpty>
1a001cfe:	2800      	cmp	r0, #0
1a001d00:	d0c6      	beq.n	1a001c90 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001d02:	6823      	ldr	r3, [r4, #0]
1a001d04:	2b00      	cmp	r3, #0
1a001d06:	d0ba      	beq.n	1a001c7e <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001d08:	9901      	ldr	r1, [sp, #4]
1a001d0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001d0e:	f000 fcf3 	bl	1a0026f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001d12:	4620      	mov	r0, r4
1a001d14:	f7ff fc17 	bl	1a001546 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001d18:	f000 fb98 	bl	1a00244c <xTaskResumeAll>
1a001d1c:	2800      	cmp	r0, #0
1a001d1e:	d1c7      	bne.n	1a001cb0 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a001d20:	4b0b      	ldr	r3, [pc, #44]	; (1a001d50 <xQueueSemaphoreTake+0x198>)
1a001d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d26:	601a      	str	r2, [r3, #0]
1a001d28:	f3bf 8f4f 	dsb	sy
1a001d2c:	f3bf 8f6f 	isb	sy
1a001d30:	e7be      	b.n	1a001cb0 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a001d32:	2d00      	cmp	r5, #0
1a001d34:	d086      	beq.n	1a001c44 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a001d36:	f001 f9a5 	bl	1a003084 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001d3a:	4620      	mov	r0, r4
1a001d3c:	f7ff fb91 	bl	1a001462 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001d40:	4601      	mov	r1, r0
1a001d42:	6860      	ldr	r0, [r4, #4]
1a001d44:	f000 fe68 	bl	1a002a18 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001d48:	f001 f9be 	bl	1a0030c8 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001d4c:	2500      	movs	r5, #0
1a001d4e:	e779      	b.n	1a001c44 <xQueueSemaphoreTake+0x8c>
1a001d50:	e000ed04 	.word	0xe000ed04

1a001d54 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001d54:	2300      	movs	r3, #0
1a001d56:	2b07      	cmp	r3, #7
1a001d58:	d80c      	bhi.n	1a001d74 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001d5a:	4a07      	ldr	r2, [pc, #28]	; (1a001d78 <vQueueAddToRegistry+0x24>)
1a001d5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001d60:	b10a      	cbz	r2, 1a001d66 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001d62:	3301      	adds	r3, #1
1a001d64:	e7f7      	b.n	1a001d56 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001d66:	4a04      	ldr	r2, [pc, #16]	; (1a001d78 <vQueueAddToRegistry+0x24>)
1a001d68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001d6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001d70:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001d72:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001d74:	4770      	bx	lr
1a001d76:	bf00      	nop
1a001d78:	10002b70 	.word	0x10002b70

1a001d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001d7c:	b570      	push	{r4, r5, r6, lr}
1a001d7e:	4604      	mov	r4, r0
1a001d80:	460d      	mov	r5, r1
1a001d82:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001d84:	f001 f97e 	bl	1a003084 <vPortEnterCritical>
1a001d88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001d8c:	b25b      	sxtb	r3, r3
1a001d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d92:	d00d      	beq.n	1a001db0 <vQueueWaitForMessageRestricted+0x34>
1a001d94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001d98:	b25b      	sxtb	r3, r3
1a001d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d9e:	d00b      	beq.n	1a001db8 <vQueueWaitForMessageRestricted+0x3c>
1a001da0:	f001 f992 	bl	1a0030c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001da6:	b15b      	cbz	r3, 1a001dc0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001da8:	4620      	mov	r0, r4
1a001daa:	f7ff fbcc 	bl	1a001546 <prvUnlockQueue>
	}
1a001dae:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001db0:	2300      	movs	r3, #0
1a001db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001db6:	e7ed      	b.n	1a001d94 <vQueueWaitForMessageRestricted+0x18>
1a001db8:	2300      	movs	r3, #0
1a001dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001dbe:	e7ef      	b.n	1a001da0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001dc0:	4632      	mov	r2, r6
1a001dc2:	4629      	mov	r1, r5
1a001dc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001dc8:	f000 fcae 	bl	1a002728 <vTaskPlaceOnEventListRestricted>
1a001dcc:	e7ec      	b.n	1a001da8 <vQueueWaitForMessageRestricted+0x2c>

1a001dce <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001dce:	f100 0308 	add.w	r3, r0, #8
1a001dd2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001dd8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001dda:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001ddc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001dde:	2300      	movs	r3, #0
1a001de0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001de2:	4770      	bx	lr

1a001de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001de4:	2300      	movs	r3, #0
1a001de6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001de8:	4770      	bx	lr

1a001dea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001dea:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001dec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001dee:	689a      	ldr	r2, [r3, #8]
1a001df0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001df2:	689a      	ldr	r2, [r3, #8]
1a001df4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001df6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001df8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001dfa:	6803      	ldr	r3, [r0, #0]
1a001dfc:	3301      	adds	r3, #1
1a001dfe:	6003      	str	r3, [r0, #0]
}
1a001e00:	4770      	bx	lr

1a001e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001e02:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001e04:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001e06:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001e0a:	d002      	beq.n	1a001e12 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001e0c:	f100 0208 	add.w	r2, r0, #8
1a001e10:	e002      	b.n	1a001e18 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001e12:	6902      	ldr	r2, [r0, #16]
1a001e14:	e004      	b.n	1a001e20 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001e16:	461a      	mov	r2, r3
1a001e18:	6853      	ldr	r3, [r2, #4]
1a001e1a:	681c      	ldr	r4, [r3, #0]
1a001e1c:	42ac      	cmp	r4, r5
1a001e1e:	d9fa      	bls.n	1a001e16 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001e20:	6853      	ldr	r3, [r2, #4]
1a001e22:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001e24:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001e26:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001e28:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001e2a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001e2c:	6803      	ldr	r3, [r0, #0]
1a001e2e:	3301      	adds	r3, #1
1a001e30:	6003      	str	r3, [r0, #0]
}
1a001e32:	bc30      	pop	{r4, r5}
1a001e34:	4770      	bx	lr

1a001e36 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001e36:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001e38:	6842      	ldr	r2, [r0, #4]
1a001e3a:	6881      	ldr	r1, [r0, #8]
1a001e3c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001e3e:	6882      	ldr	r2, [r0, #8]
1a001e40:	6841      	ldr	r1, [r0, #4]
1a001e42:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001e44:	685a      	ldr	r2, [r3, #4]
1a001e46:	4282      	cmp	r2, r0
1a001e48:	d006      	beq.n	1a001e58 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001e4a:	2200      	movs	r2, #0
1a001e4c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001e4e:	681a      	ldr	r2, [r3, #0]
1a001e50:	3a01      	subs	r2, #1
1a001e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001e54:	6818      	ldr	r0, [r3, #0]
}
1a001e56:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001e58:	6882      	ldr	r2, [r0, #8]
1a001e5a:	605a      	str	r2, [r3, #4]
1a001e5c:	e7f5      	b.n	1a001e4a <uxListRemove+0x14>
1a001e5e:	Address 0x000000001a001e5e is out of bounds.


1a001e60 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001e60:	4b03      	ldr	r3, [pc, #12]	; (1a001e70 <vApplicationGetIdleTaskMemory+0x10>)
1a001e62:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001e64:	4b03      	ldr	r3, [pc, #12]	; (1a001e74 <vApplicationGetIdleTaskMemory+0x14>)
1a001e66:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001e68:	235a      	movs	r3, #90	; 0x5a
1a001e6a:	6013      	str	r3, [r2, #0]
}
1a001e6c:	4770      	bx	lr
1a001e6e:	bf00      	nop
1a001e70:	100027d0 	.word	0x100027d0
1a001e74:	100020c8 	.word	0x100020c8

1a001e78 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001e78:	4b03      	ldr	r3, [pc, #12]	; (1a001e88 <vApplicationGetTimerTaskMemory+0x10>)
1a001e7a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001e7c:	4b03      	ldr	r3, [pc, #12]	; (1a001e8c <vApplicationGetTimerTaskMemory+0x14>)
1a001e7e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001e80:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001e84:	6013      	str	r3, [r2, #0]
1a001e86:	4770      	bx	lr
1a001e88:	10002830 	.word	0x10002830
1a001e8c:	10002230 	.word	0x10002230

1a001e90 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a001e90:	e7fe      	b.n	1a001e90 <vApplicationStackOverflowHook>

1a001e92 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a001e92:	e7fe      	b.n	1a001e92 <vApplicationMallocFailedHook>

1a001e94 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001e94:	4b08      	ldr	r3, [pc, #32]	; (1a001eb8 <prvResetNextTaskUnblockTime+0x24>)
1a001e96:	681b      	ldr	r3, [r3, #0]
1a001e98:	681b      	ldr	r3, [r3, #0]
1a001e9a:	b13b      	cbz	r3, 1a001eac <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001e9c:	4b06      	ldr	r3, [pc, #24]	; (1a001eb8 <prvResetNextTaskUnblockTime+0x24>)
1a001e9e:	681b      	ldr	r3, [r3, #0]
1a001ea0:	68db      	ldr	r3, [r3, #12]
1a001ea2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001ea4:	685a      	ldr	r2, [r3, #4]
1a001ea6:	4b05      	ldr	r3, [pc, #20]	; (1a001ebc <prvResetNextTaskUnblockTime+0x28>)
1a001ea8:	601a      	str	r2, [r3, #0]
	}
}
1a001eaa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001eac:	4b03      	ldr	r3, [pc, #12]	; (1a001ebc <prvResetNextTaskUnblockTime+0x28>)
1a001eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001eb2:	601a      	str	r2, [r3, #0]
1a001eb4:	4770      	bx	lr
1a001eb6:	bf00      	nop
1a001eb8:	10002894 	.word	0x10002894
1a001ebc:	10002968 	.word	0x10002968

1a001ec0 <prvInitialiseNewTask>:
{
1a001ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001ec4:	4681      	mov	r9, r0
1a001ec6:	460d      	mov	r5, r1
1a001ec8:	4617      	mov	r7, r2
1a001eca:	469a      	mov	sl, r3
1a001ecc:	9e08      	ldr	r6, [sp, #32]
1a001ece:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001ed2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001ed4:	0092      	lsls	r2, r2, #2
1a001ed6:	21a5      	movs	r1, #165	; 0xa5
1a001ed8:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001eda:	f003 fb98 	bl	1a00560e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001ede:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001ee0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001ee4:	3a01      	subs	r2, #1
1a001ee6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001eea:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001eee:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001ef0:	2300      	movs	r3, #0
1a001ef2:	2b0f      	cmp	r3, #15
1a001ef4:	d807      	bhi.n	1a001f06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001ef6:	5ce9      	ldrb	r1, [r5, r3]
1a001ef8:	18e2      	adds	r2, r4, r3
1a001efa:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001efe:	5cea      	ldrb	r2, [r5, r3]
1a001f00:	b10a      	cbz	r2, 1a001f06 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001f02:	3301      	adds	r3, #1
1a001f04:	e7f5      	b.n	1a001ef2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001f06:	2300      	movs	r3, #0
1a001f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001f0c:	2e06      	cmp	r6, #6
1a001f0e:	d900      	bls.n	1a001f12 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001f10:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001f12:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001f14:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001f16:	2500      	movs	r5, #0
1a001f18:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001f1a:	1d20      	adds	r0, r4, #4
1a001f1c:	f7ff ff62 	bl	1a001de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001f20:	f104 0018 	add.w	r0, r4, #24
1a001f24:	f7ff ff5e 	bl	1a001de4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001f28:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f2a:	f1c6 0607 	rsb	r6, r6, #7
1a001f2e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001f30:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001f32:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001f34:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001f38:	4652      	mov	r2, sl
1a001f3a:	4649      	mov	r1, r9
1a001f3c:	4638      	mov	r0, r7
1a001f3e:	f001 f877 	bl	1a003030 <pxPortInitialiseStack>
1a001f42:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001f44:	f1b8 0f00 	cmp.w	r8, #0
1a001f48:	d001      	beq.n	1a001f4e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001f4a:	f8c8 4000 	str.w	r4, [r8]
}
1a001f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f52:	Address 0x000000001a001f52 is out of bounds.


1a001f54 <prvInitialiseTaskLists>:
{
1a001f54:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001f56:	2400      	movs	r4, #0
1a001f58:	e007      	b.n	1a001f6a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001f5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001f5e:	0093      	lsls	r3, r2, #2
1a001f60:	480e      	ldr	r0, [pc, #56]	; (1a001f9c <prvInitialiseTaskLists+0x48>)
1a001f62:	4418      	add	r0, r3
1a001f64:	f7ff ff33 	bl	1a001dce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001f68:	3401      	adds	r4, #1
1a001f6a:	2c06      	cmp	r4, #6
1a001f6c:	d9f5      	bls.n	1a001f5a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001f6e:	4d0c      	ldr	r5, [pc, #48]	; (1a001fa0 <prvInitialiseTaskLists+0x4c>)
1a001f70:	4628      	mov	r0, r5
1a001f72:	f7ff ff2c 	bl	1a001dce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001f76:	4c0b      	ldr	r4, [pc, #44]	; (1a001fa4 <prvInitialiseTaskLists+0x50>)
1a001f78:	4620      	mov	r0, r4
1a001f7a:	f7ff ff28 	bl	1a001dce <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001f7e:	480a      	ldr	r0, [pc, #40]	; (1a001fa8 <prvInitialiseTaskLists+0x54>)
1a001f80:	f7ff ff25 	bl	1a001dce <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001f84:	4809      	ldr	r0, [pc, #36]	; (1a001fac <prvInitialiseTaskLists+0x58>)
1a001f86:	f7ff ff22 	bl	1a001dce <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001f8a:	4809      	ldr	r0, [pc, #36]	; (1a001fb0 <prvInitialiseTaskLists+0x5c>)
1a001f8c:	f7ff ff1f 	bl	1a001dce <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001f90:	4b08      	ldr	r3, [pc, #32]	; (1a001fb4 <prvInitialiseTaskLists+0x60>)
1a001f92:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001f94:	4b08      	ldr	r3, [pc, #32]	; (1a001fb8 <prvInitialiseTaskLists+0x64>)
1a001f96:	601c      	str	r4, [r3, #0]
}
1a001f98:	bd38      	pop	{r3, r4, r5, pc}
1a001f9a:	bf00      	nop
1a001f9c:	1000289c 	.word	0x1000289c
1a001fa0:	10002940 	.word	0x10002940
1a001fa4:	10002954 	.word	0x10002954
1a001fa8:	10002970 	.word	0x10002970
1a001fac:	1000299c 	.word	0x1000299c
1a001fb0:	10002988 	.word	0x10002988
1a001fb4:	10002894 	.word	0x10002894
1a001fb8:	10002898 	.word	0x10002898

1a001fbc <prvAddNewTaskToReadyList>:
{
1a001fbc:	b510      	push	{r4, lr}
1a001fbe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001fc0:	f001 f860 	bl	1a003084 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001fc4:	4a21      	ldr	r2, [pc, #132]	; (1a00204c <prvAddNewTaskToReadyList+0x90>)
1a001fc6:	6813      	ldr	r3, [r2, #0]
1a001fc8:	3301      	adds	r3, #1
1a001fca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001fcc:	4b20      	ldr	r3, [pc, #128]	; (1a002050 <prvAddNewTaskToReadyList+0x94>)
1a001fce:	681b      	ldr	r3, [r3, #0]
1a001fd0:	b15b      	cbz	r3, 1a001fea <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001fd2:	4b20      	ldr	r3, [pc, #128]	; (1a002054 <prvAddNewTaskToReadyList+0x98>)
1a001fd4:	681b      	ldr	r3, [r3, #0]
1a001fd6:	b96b      	cbnz	r3, 1a001ff4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001fd8:	4b1d      	ldr	r3, [pc, #116]	; (1a002050 <prvAddNewTaskToReadyList+0x94>)
1a001fda:	681b      	ldr	r3, [r3, #0]
1a001fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001fde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001fe0:	429a      	cmp	r2, r3
1a001fe2:	d807      	bhi.n	1a001ff4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001fe4:	4b1a      	ldr	r3, [pc, #104]	; (1a002050 <prvAddNewTaskToReadyList+0x94>)
1a001fe6:	601c      	str	r4, [r3, #0]
1a001fe8:	e004      	b.n	1a001ff4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001fea:	4b19      	ldr	r3, [pc, #100]	; (1a002050 <prvAddNewTaskToReadyList+0x94>)
1a001fec:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001fee:	6813      	ldr	r3, [r2, #0]
1a001ff0:	2b01      	cmp	r3, #1
1a001ff2:	d027      	beq.n	1a002044 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001ff4:	4a18      	ldr	r2, [pc, #96]	; (1a002058 <prvAddNewTaskToReadyList+0x9c>)
1a001ff6:	6813      	ldr	r3, [r2, #0]
1a001ff8:	3301      	adds	r3, #1
1a001ffa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001ffc:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002000:	2201      	movs	r2, #1
1a002002:	409a      	lsls	r2, r3
1a002004:	4915      	ldr	r1, [pc, #84]	; (1a00205c <prvAddNewTaskToReadyList+0xa0>)
1a002006:	6808      	ldr	r0, [r1, #0]
1a002008:	4302      	orrs	r2, r0
1a00200a:	600a      	str	r2, [r1, #0]
1a00200c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002010:	009a      	lsls	r2, r3, #2
1a002012:	1d21      	adds	r1, r4, #4
1a002014:	4812      	ldr	r0, [pc, #72]	; (1a002060 <prvAddNewTaskToReadyList+0xa4>)
1a002016:	4410      	add	r0, r2
1a002018:	f7ff fee7 	bl	1a001dea <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00201c:	f001 f854 	bl	1a0030c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a002020:	4b0c      	ldr	r3, [pc, #48]	; (1a002054 <prvAddNewTaskToReadyList+0x98>)
1a002022:	681b      	ldr	r3, [r3, #0]
1a002024:	b16b      	cbz	r3, 1a002042 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a002026:	4b0a      	ldr	r3, [pc, #40]	; (1a002050 <prvAddNewTaskToReadyList+0x94>)
1a002028:	681b      	ldr	r3, [r3, #0]
1a00202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00202c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00202e:	429a      	cmp	r2, r3
1a002030:	d207      	bcs.n	1a002042 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a002032:	4b0c      	ldr	r3, [pc, #48]	; (1a002064 <prvAddNewTaskToReadyList+0xa8>)
1a002034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002038:	601a      	str	r2, [r3, #0]
1a00203a:	f3bf 8f4f 	dsb	sy
1a00203e:	f3bf 8f6f 	isb	sy
}
1a002042:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a002044:	f7ff ff86 	bl	1a001f54 <prvInitialiseTaskLists>
1a002048:	e7d4      	b.n	1a001ff4 <prvAddNewTaskToReadyList+0x38>
1a00204a:	bf00      	nop
1a00204c:	10002928 	.word	0x10002928
1a002050:	10002890 	.word	0x10002890
1a002054:	10002984 	.word	0x10002984
1a002058:	10002938 	.word	0x10002938
1a00205c:	1000293c 	.word	0x1000293c
1a002060:	1000289c 	.word	0x1000289c
1a002064:	e000ed04 	.word	0xe000ed04

1a002068 <prvDeleteTCB>:
	{
1a002068:	b510      	push	{r4, lr}
1a00206a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00206c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a002070:	b933      	cbnz	r3, 1a002080 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a002072:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002074:	f7ff f9ea 	bl	1a00144c <vPortFree>
				vPortFree( pxTCB );
1a002078:	4620      	mov	r0, r4
1a00207a:	f7ff f9e7 	bl	1a00144c <vPortFree>
	}
1a00207e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a002080:	2b01      	cmp	r3, #1
1a002082:	d00a      	beq.n	1a00209a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a002084:	2b02      	cmp	r3, #2
1a002086:	d0fa      	beq.n	1a00207e <prvDeleteTCB+0x16>
1a002088:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00208c:	f383 8811 	msr	BASEPRI, r3
1a002090:	f3bf 8f6f 	isb	sy
1a002094:	f3bf 8f4f 	dsb	sy
1a002098:	e7fe      	b.n	1a002098 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a00209a:	f7ff f9d7 	bl	1a00144c <vPortFree>
1a00209e:	e7ee      	b.n	1a00207e <prvDeleteTCB+0x16>

1a0020a0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0020a0:	4b0f      	ldr	r3, [pc, #60]	; (1a0020e0 <prvCheckTasksWaitingTermination+0x40>)
1a0020a2:	681b      	ldr	r3, [r3, #0]
1a0020a4:	b1d3      	cbz	r3, 1a0020dc <prvCheckTasksWaitingTermination+0x3c>
{
1a0020a6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0020a8:	f000 ffec 	bl	1a003084 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0020ac:	4b0d      	ldr	r3, [pc, #52]	; (1a0020e4 <prvCheckTasksWaitingTermination+0x44>)
1a0020ae:	68db      	ldr	r3, [r3, #12]
1a0020b0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0020b2:	1d20      	adds	r0, r4, #4
1a0020b4:	f7ff febf 	bl	1a001e36 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0020b8:	4a0b      	ldr	r2, [pc, #44]	; (1a0020e8 <prvCheckTasksWaitingTermination+0x48>)
1a0020ba:	6813      	ldr	r3, [r2, #0]
1a0020bc:	3b01      	subs	r3, #1
1a0020be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0020c0:	4a07      	ldr	r2, [pc, #28]	; (1a0020e0 <prvCheckTasksWaitingTermination+0x40>)
1a0020c2:	6813      	ldr	r3, [r2, #0]
1a0020c4:	3b01      	subs	r3, #1
1a0020c6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0020c8:	f000 fffe 	bl	1a0030c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0020cc:	4620      	mov	r0, r4
1a0020ce:	f7ff ffcb 	bl	1a002068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0020d2:	4b03      	ldr	r3, [pc, #12]	; (1a0020e0 <prvCheckTasksWaitingTermination+0x40>)
1a0020d4:	681b      	ldr	r3, [r3, #0]
1a0020d6:	2b00      	cmp	r3, #0
1a0020d8:	d1e6      	bne.n	1a0020a8 <prvCheckTasksWaitingTermination+0x8>
}
1a0020da:	bd10      	pop	{r4, pc}
1a0020dc:	4770      	bx	lr
1a0020de:	bf00      	nop
1a0020e0:	1000292c 	.word	0x1000292c
1a0020e4:	1000299c 	.word	0x1000299c
1a0020e8:	10002928 	.word	0x10002928

1a0020ec <prvIdleTask>:
{
1a0020ec:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0020ee:	f7ff ffd7 	bl	1a0020a0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0020f2:	4b06      	ldr	r3, [pc, #24]	; (1a00210c <prvIdleTask+0x20>)
1a0020f4:	681b      	ldr	r3, [r3, #0]
1a0020f6:	2b01      	cmp	r3, #1
1a0020f8:	d9f9      	bls.n	1a0020ee <prvIdleTask+0x2>
				taskYIELD();
1a0020fa:	4b05      	ldr	r3, [pc, #20]	; (1a002110 <prvIdleTask+0x24>)
1a0020fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002100:	601a      	str	r2, [r3, #0]
1a002102:	f3bf 8f4f 	dsb	sy
1a002106:	f3bf 8f6f 	isb	sy
1a00210a:	e7f0      	b.n	1a0020ee <prvIdleTask+0x2>
1a00210c:	1000289c 	.word	0x1000289c
1a002110:	e000ed04 	.word	0xe000ed04

1a002114 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a002114:	b570      	push	{r4, r5, r6, lr}
1a002116:	4604      	mov	r4, r0
1a002118:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00211a:	4b1d      	ldr	r3, [pc, #116]	; (1a002190 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00211c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00211e:	4b1d      	ldr	r3, [pc, #116]	; (1a002194 <prvAddCurrentTaskToDelayedList+0x80>)
1a002120:	6818      	ldr	r0, [r3, #0]
1a002122:	3004      	adds	r0, #4
1a002124:	f7ff fe87 	bl	1a001e36 <uxListRemove>
1a002128:	b950      	cbnz	r0, 1a002140 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00212a:	4b1a      	ldr	r3, [pc, #104]	; (1a002194 <prvAddCurrentTaskToDelayedList+0x80>)
1a00212c:	681b      	ldr	r3, [r3, #0]
1a00212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002130:	2301      	movs	r3, #1
1a002132:	fa03 f202 	lsl.w	r2, r3, r2
1a002136:	4918      	ldr	r1, [pc, #96]	; (1a002198 <prvAddCurrentTaskToDelayedList+0x84>)
1a002138:	680b      	ldr	r3, [r1, #0]
1a00213a:	ea23 0302 	bic.w	r3, r3, r2
1a00213e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002140:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a002144:	d013      	beq.n	1a00216e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a002146:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a002148:	4b12      	ldr	r3, [pc, #72]	; (1a002194 <prvAddCurrentTaskToDelayedList+0x80>)
1a00214a:	681b      	ldr	r3, [r3, #0]
1a00214c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00214e:	42a5      	cmp	r5, r4
1a002150:	d816      	bhi.n	1a002180 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002152:	4b12      	ldr	r3, [pc, #72]	; (1a00219c <prvAddCurrentTaskToDelayedList+0x88>)
1a002154:	6818      	ldr	r0, [r3, #0]
1a002156:	4b0f      	ldr	r3, [pc, #60]	; (1a002194 <prvAddCurrentTaskToDelayedList+0x80>)
1a002158:	6819      	ldr	r1, [r3, #0]
1a00215a:	3104      	adds	r1, #4
1a00215c:	f7ff fe51 	bl	1a001e02 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a002160:	4b0f      	ldr	r3, [pc, #60]	; (1a0021a0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a002162:	681b      	ldr	r3, [r3, #0]
1a002164:	42a3      	cmp	r3, r4
1a002166:	d912      	bls.n	1a00218e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a002168:	4b0d      	ldr	r3, [pc, #52]	; (1a0021a0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00216a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00216c:	e00f      	b.n	1a00218e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00216e:	2e00      	cmp	r6, #0
1a002170:	d0e9      	beq.n	1a002146 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002172:	4b08      	ldr	r3, [pc, #32]	; (1a002194 <prvAddCurrentTaskToDelayedList+0x80>)
1a002174:	6819      	ldr	r1, [r3, #0]
1a002176:	3104      	adds	r1, #4
1a002178:	480a      	ldr	r0, [pc, #40]	; (1a0021a4 <prvAddCurrentTaskToDelayedList+0x90>)
1a00217a:	f7ff fe36 	bl	1a001dea <vListInsertEnd>
1a00217e:	e006      	b.n	1a00218e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002180:	4b09      	ldr	r3, [pc, #36]	; (1a0021a8 <prvAddCurrentTaskToDelayedList+0x94>)
1a002182:	6818      	ldr	r0, [r3, #0]
1a002184:	4b03      	ldr	r3, [pc, #12]	; (1a002194 <prvAddCurrentTaskToDelayedList+0x80>)
1a002186:	6819      	ldr	r1, [r3, #0]
1a002188:	3104      	adds	r1, #4
1a00218a:	f7ff fe3a 	bl	1a001e02 <vListInsert>
}
1a00218e:	bd70      	pop	{r4, r5, r6, pc}
1a002190:	100029b0 	.word	0x100029b0
1a002194:	10002890 	.word	0x10002890
1a002198:	1000293c 	.word	0x1000293c
1a00219c:	10002894 	.word	0x10002894
1a0021a0:	10002968 	.word	0x10002968
1a0021a4:	10002988 	.word	0x10002988
1a0021a8:	10002898 	.word	0x10002898

1a0021ac <xTaskCreateStatic>:
	{
1a0021ac:	b570      	push	{r4, r5, r6, lr}
1a0021ae:	b086      	sub	sp, #24
1a0021b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0021b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0021b4:	b945      	cbnz	r5, 1a0021c8 <xTaskCreateStatic+0x1c>
1a0021b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ba:	f383 8811 	msr	BASEPRI, r3
1a0021be:	f3bf 8f6f 	isb	sy
1a0021c2:	f3bf 8f4f 	dsb	sy
1a0021c6:	e7fe      	b.n	1a0021c6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0021c8:	b944      	cbnz	r4, 1a0021dc <xTaskCreateStatic+0x30>
1a0021ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ce:	f383 8811 	msr	BASEPRI, r3
1a0021d2:	f3bf 8f6f 	isb	sy
1a0021d6:	f3bf 8f4f 	dsb	sy
1a0021da:	e7fe      	b.n	1a0021da <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0021dc:	2660      	movs	r6, #96	; 0x60
1a0021de:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0021e0:	9e04      	ldr	r6, [sp, #16]
1a0021e2:	2e60      	cmp	r6, #96	; 0x60
1a0021e4:	d008      	beq.n	1a0021f8 <xTaskCreateStatic+0x4c>
1a0021e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ea:	f383 8811 	msr	BASEPRI, r3
1a0021ee:	f3bf 8f6f 	isb	sy
1a0021f2:	f3bf 8f4f 	dsb	sy
1a0021f6:	e7fe      	b.n	1a0021f6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0021f8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0021fa:	2502      	movs	r5, #2
1a0021fc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a002200:	2500      	movs	r5, #0
1a002202:	9503      	str	r5, [sp, #12]
1a002204:	9402      	str	r4, [sp, #8]
1a002206:	ad05      	add	r5, sp, #20
1a002208:	9501      	str	r5, [sp, #4]
1a00220a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00220c:	9500      	str	r5, [sp, #0]
1a00220e:	f7ff fe57 	bl	1a001ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002212:	4620      	mov	r0, r4
1a002214:	f7ff fed2 	bl	1a001fbc <prvAddNewTaskToReadyList>
	}
1a002218:	9805      	ldr	r0, [sp, #20]
1a00221a:	b006      	add	sp, #24
1a00221c:	bd70      	pop	{r4, r5, r6, pc}

1a00221e <xTaskCreate>:
	{
1a00221e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002222:	b085      	sub	sp, #20
1a002224:	4607      	mov	r7, r0
1a002226:	4688      	mov	r8, r1
1a002228:	4615      	mov	r5, r2
1a00222a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00222c:	0090      	lsls	r0, r2, #2
1a00222e:	f7ff f8d5 	bl	1a0013dc <pvPortMalloc>
			if( pxStack != NULL )
1a002232:	b308      	cbz	r0, 1a002278 <xTaskCreate+0x5a>
1a002234:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a002236:	2060      	movs	r0, #96	; 0x60
1a002238:	f7ff f8d0 	bl	1a0013dc <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00223c:	4604      	mov	r4, r0
1a00223e:	b1b8      	cbz	r0, 1a002270 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a002240:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a002242:	b1e4      	cbz	r4, 1a00227e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a002244:	2300      	movs	r3, #0
1a002246:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00224a:	9303      	str	r3, [sp, #12]
1a00224c:	9402      	str	r4, [sp, #8]
1a00224e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a002250:	9301      	str	r3, [sp, #4]
1a002252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002254:	9300      	str	r3, [sp, #0]
1a002256:	464b      	mov	r3, r9
1a002258:	462a      	mov	r2, r5
1a00225a:	4641      	mov	r1, r8
1a00225c:	4638      	mov	r0, r7
1a00225e:	f7ff fe2f 	bl	1a001ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002262:	4620      	mov	r0, r4
1a002264:	f7ff feaa 	bl	1a001fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a002268:	2001      	movs	r0, #1
	}
1a00226a:	b005      	add	sp, #20
1a00226c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a002270:	4630      	mov	r0, r6
1a002272:	f7ff f8eb 	bl	1a00144c <vPortFree>
1a002276:	e7e4      	b.n	1a002242 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a002278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00227c:	e7f5      	b.n	1a00226a <xTaskCreate+0x4c>
1a00227e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a002282:	e7f2      	b.n	1a00226a <xTaskCreate+0x4c>

1a002284 <vTaskStartScheduler>:
{
1a002284:	b510      	push	{r4, lr}
1a002286:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a002288:	2400      	movs	r4, #0
1a00228a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a00228c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00228e:	aa07      	add	r2, sp, #28
1a002290:	a906      	add	r1, sp, #24
1a002292:	a805      	add	r0, sp, #20
1a002294:	f7ff fde4 	bl	1a001e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a002298:	9b05      	ldr	r3, [sp, #20]
1a00229a:	9302      	str	r3, [sp, #8]
1a00229c:	9b06      	ldr	r3, [sp, #24]
1a00229e:	9301      	str	r3, [sp, #4]
1a0022a0:	9400      	str	r4, [sp, #0]
1a0022a2:	4623      	mov	r3, r4
1a0022a4:	9a07      	ldr	r2, [sp, #28]
1a0022a6:	4917      	ldr	r1, [pc, #92]	; (1a002304 <vTaskStartScheduler+0x80>)
1a0022a8:	4817      	ldr	r0, [pc, #92]	; (1a002308 <vTaskStartScheduler+0x84>)
1a0022aa:	f7ff ff7f 	bl	1a0021ac <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0022ae:	b140      	cbz	r0, 1a0022c2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0022b0:	f000 fcac 	bl	1a002c0c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0022b4:	2801      	cmp	r0, #1
1a0022b6:	d006      	beq.n	1a0022c6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0022b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0022bc:	d018      	beq.n	1a0022f0 <vTaskStartScheduler+0x6c>
}
1a0022be:	b008      	add	sp, #32
1a0022c0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0022c2:	2000      	movs	r0, #0
1a0022c4:	e7f6      	b.n	1a0022b4 <vTaskStartScheduler+0x30>
1a0022c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022ca:	f383 8811 	msr	BASEPRI, r3
1a0022ce:	f3bf 8f6f 	isb	sy
1a0022d2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0022d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00230c <vTaskStartScheduler+0x88>)
1a0022d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0022dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0022de:	4b0c      	ldr	r3, [pc, #48]	; (1a002310 <vTaskStartScheduler+0x8c>)
1a0022e0:	2201      	movs	r2, #1
1a0022e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0022e4:	4b0b      	ldr	r3, [pc, #44]	; (1a002314 <vTaskStartScheduler+0x90>)
1a0022e6:	2200      	movs	r2, #0
1a0022e8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0022ea:	f000 ff6d 	bl	1a0031c8 <xPortStartScheduler>
1a0022ee:	e7e6      	b.n	1a0022be <vTaskStartScheduler+0x3a>
1a0022f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022f4:	f383 8811 	msr	BASEPRI, r3
1a0022f8:	f3bf 8f6f 	isb	sy
1a0022fc:	f3bf 8f4f 	dsb	sy
1a002300:	e7fe      	b.n	1a002300 <vTaskStartScheduler+0x7c>
1a002302:	bf00      	nop
1a002304:	1a005908 	.word	0x1a005908
1a002308:	1a0020ed 	.word	0x1a0020ed
1a00230c:	10002968 	.word	0x10002968
1a002310:	10002984 	.word	0x10002984
1a002314:	100029b0 	.word	0x100029b0

1a002318 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a002318:	4a02      	ldr	r2, [pc, #8]	; (1a002324 <vTaskSuspendAll+0xc>)
1a00231a:	6813      	ldr	r3, [r2, #0]
1a00231c:	3301      	adds	r3, #1
1a00231e:	6013      	str	r3, [r2, #0]
}
1a002320:	4770      	bx	lr
1a002322:	bf00      	nop
1a002324:	10002934 	.word	0x10002934

1a002328 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a002328:	4b01      	ldr	r3, [pc, #4]	; (1a002330 <xTaskGetTickCount+0x8>)
1a00232a:	6818      	ldr	r0, [r3, #0]
}
1a00232c:	4770      	bx	lr
1a00232e:	bf00      	nop
1a002330:	100029b0 	.word	0x100029b0

1a002334 <xTaskIncrementTick>:
{
1a002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002336:	4b3a      	ldr	r3, [pc, #232]	; (1a002420 <xTaskIncrementTick+0xec>)
1a002338:	681b      	ldr	r3, [r3, #0]
1a00233a:	2b00      	cmp	r3, #0
1a00233c:	d164      	bne.n	1a002408 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00233e:	4b39      	ldr	r3, [pc, #228]	; (1a002424 <xTaskIncrementTick+0xf0>)
1a002340:	681d      	ldr	r5, [r3, #0]
1a002342:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a002344:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a002346:	b9c5      	cbnz	r5, 1a00237a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a002348:	4b37      	ldr	r3, [pc, #220]	; (1a002428 <xTaskIncrementTick+0xf4>)
1a00234a:	681b      	ldr	r3, [r3, #0]
1a00234c:	681b      	ldr	r3, [r3, #0]
1a00234e:	b143      	cbz	r3, 1a002362 <xTaskIncrementTick+0x2e>
1a002350:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002354:	f383 8811 	msr	BASEPRI, r3
1a002358:	f3bf 8f6f 	isb	sy
1a00235c:	f3bf 8f4f 	dsb	sy
1a002360:	e7fe      	b.n	1a002360 <xTaskIncrementTick+0x2c>
1a002362:	4a31      	ldr	r2, [pc, #196]	; (1a002428 <xTaskIncrementTick+0xf4>)
1a002364:	6811      	ldr	r1, [r2, #0]
1a002366:	4b31      	ldr	r3, [pc, #196]	; (1a00242c <xTaskIncrementTick+0xf8>)
1a002368:	6818      	ldr	r0, [r3, #0]
1a00236a:	6010      	str	r0, [r2, #0]
1a00236c:	6019      	str	r1, [r3, #0]
1a00236e:	4a30      	ldr	r2, [pc, #192]	; (1a002430 <xTaskIncrementTick+0xfc>)
1a002370:	6813      	ldr	r3, [r2, #0]
1a002372:	3301      	adds	r3, #1
1a002374:	6013      	str	r3, [r2, #0]
1a002376:	f7ff fd8d 	bl	1a001e94 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00237a:	4b2e      	ldr	r3, [pc, #184]	; (1a002434 <xTaskIncrementTick+0x100>)
1a00237c:	681b      	ldr	r3, [r3, #0]
1a00237e:	42ab      	cmp	r3, r5
1a002380:	d938      	bls.n	1a0023f4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a002382:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a002384:	4b2c      	ldr	r3, [pc, #176]	; (1a002438 <xTaskIncrementTick+0x104>)
1a002386:	681b      	ldr	r3, [r3, #0]
1a002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00238a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00238e:	009a      	lsls	r2, r3, #2
1a002390:	4b2a      	ldr	r3, [pc, #168]	; (1a00243c <xTaskIncrementTick+0x108>)
1a002392:	589b      	ldr	r3, [r3, r2]
1a002394:	2b01      	cmp	r3, #1
1a002396:	d93c      	bls.n	1a002412 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a002398:	2401      	movs	r4, #1
1a00239a:	e03a      	b.n	1a002412 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a00239c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00239e:	4b22      	ldr	r3, [pc, #136]	; (1a002428 <xTaskIncrementTick+0xf4>)
1a0023a0:	681b      	ldr	r3, [r3, #0]
1a0023a2:	681b      	ldr	r3, [r3, #0]
1a0023a4:	b343      	cbz	r3, 1a0023f8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0023a6:	4b20      	ldr	r3, [pc, #128]	; (1a002428 <xTaskIncrementTick+0xf4>)
1a0023a8:	681b      	ldr	r3, [r3, #0]
1a0023aa:	68db      	ldr	r3, [r3, #12]
1a0023ac:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0023ae:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0023b0:	429d      	cmp	r5, r3
1a0023b2:	d326      	bcc.n	1a002402 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0023b4:	1d37      	adds	r7, r6, #4
1a0023b6:	4638      	mov	r0, r7
1a0023b8:	f7ff fd3d 	bl	1a001e36 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0023bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0023be:	b11b      	cbz	r3, 1a0023c8 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0023c0:	f106 0018 	add.w	r0, r6, #24
1a0023c4:	f7ff fd37 	bl	1a001e36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0023c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0023ca:	2201      	movs	r2, #1
1a0023cc:	409a      	lsls	r2, r3
1a0023ce:	491c      	ldr	r1, [pc, #112]	; (1a002440 <xTaskIncrementTick+0x10c>)
1a0023d0:	6808      	ldr	r0, [r1, #0]
1a0023d2:	4302      	orrs	r2, r0
1a0023d4:	600a      	str	r2, [r1, #0]
1a0023d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0023da:	009a      	lsls	r2, r3, #2
1a0023dc:	4639      	mov	r1, r7
1a0023de:	4817      	ldr	r0, [pc, #92]	; (1a00243c <xTaskIncrementTick+0x108>)
1a0023e0:	4410      	add	r0, r2
1a0023e2:	f7ff fd02 	bl	1a001dea <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0023e6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0023e8:	4b13      	ldr	r3, [pc, #76]	; (1a002438 <xTaskIncrementTick+0x104>)
1a0023ea:	681b      	ldr	r3, [r3, #0]
1a0023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0023ee:	429a      	cmp	r2, r3
1a0023f0:	d2d4      	bcs.n	1a00239c <xTaskIncrementTick+0x68>
1a0023f2:	e7d4      	b.n	1a00239e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0023f4:	2400      	movs	r4, #0
1a0023f6:	e7d2      	b.n	1a00239e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0023f8:	4b0e      	ldr	r3, [pc, #56]	; (1a002434 <xTaskIncrementTick+0x100>)
1a0023fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0023fe:	601a      	str	r2, [r3, #0]
					break;
1a002400:	e7c0      	b.n	1a002384 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a002402:	4a0c      	ldr	r2, [pc, #48]	; (1a002434 <xTaskIncrementTick+0x100>)
1a002404:	6013      	str	r3, [r2, #0]
						break;
1a002406:	e7bd      	b.n	1a002384 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a002408:	4a0e      	ldr	r2, [pc, #56]	; (1a002444 <xTaskIncrementTick+0x110>)
1a00240a:	6813      	ldr	r3, [r2, #0]
1a00240c:	3301      	adds	r3, #1
1a00240e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a002410:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a002412:	4b0d      	ldr	r3, [pc, #52]	; (1a002448 <xTaskIncrementTick+0x114>)
1a002414:	681b      	ldr	r3, [r3, #0]
1a002416:	b103      	cbz	r3, 1a00241a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a002418:	2401      	movs	r4, #1
}
1a00241a:	4620      	mov	r0, r4
1a00241c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00241e:	bf00      	nop
1a002420:	10002934 	.word	0x10002934
1a002424:	100029b0 	.word	0x100029b0
1a002428:	10002894 	.word	0x10002894
1a00242c:	10002898 	.word	0x10002898
1a002430:	1000296c 	.word	0x1000296c
1a002434:	10002968 	.word	0x10002968
1a002438:	10002890 	.word	0x10002890
1a00243c:	1000289c 	.word	0x1000289c
1a002440:	1000293c 	.word	0x1000293c
1a002444:	10002930 	.word	0x10002930
1a002448:	100029b4 	.word	0x100029b4

1a00244c <xTaskResumeAll>:
{
1a00244c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00244e:	4b33      	ldr	r3, [pc, #204]	; (1a00251c <xTaskResumeAll+0xd0>)
1a002450:	681b      	ldr	r3, [r3, #0]
1a002452:	b943      	cbnz	r3, 1a002466 <xTaskResumeAll+0x1a>
1a002454:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002458:	f383 8811 	msr	BASEPRI, r3
1a00245c:	f3bf 8f6f 	isb	sy
1a002460:	f3bf 8f4f 	dsb	sy
1a002464:	e7fe      	b.n	1a002464 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a002466:	f000 fe0d 	bl	1a003084 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00246a:	4b2c      	ldr	r3, [pc, #176]	; (1a00251c <xTaskResumeAll+0xd0>)
1a00246c:	681a      	ldr	r2, [r3, #0]
1a00246e:	3a01      	subs	r2, #1
1a002470:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002472:	681b      	ldr	r3, [r3, #0]
1a002474:	2b00      	cmp	r3, #0
1a002476:	d14d      	bne.n	1a002514 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a002478:	4b29      	ldr	r3, [pc, #164]	; (1a002520 <xTaskResumeAll+0xd4>)
1a00247a:	681b      	ldr	r3, [r3, #0]
1a00247c:	b923      	cbnz	r3, 1a002488 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00247e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002480:	f000 fe22 	bl	1a0030c8 <vPortExitCritical>
}
1a002484:	4620      	mov	r0, r4
1a002486:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a002488:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00248a:	4b26      	ldr	r3, [pc, #152]	; (1a002524 <xTaskResumeAll+0xd8>)
1a00248c:	681b      	ldr	r3, [r3, #0]
1a00248e:	b31b      	cbz	r3, 1a0024d8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002490:	4b24      	ldr	r3, [pc, #144]	; (1a002524 <xTaskResumeAll+0xd8>)
1a002492:	68db      	ldr	r3, [r3, #12]
1a002494:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002496:	f104 0018 	add.w	r0, r4, #24
1a00249a:	f7ff fccc 	bl	1a001e36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00249e:	1d25      	adds	r5, r4, #4
1a0024a0:	4628      	mov	r0, r5
1a0024a2:	f7ff fcc8 	bl	1a001e36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0024a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0024a8:	2201      	movs	r2, #1
1a0024aa:	409a      	lsls	r2, r3
1a0024ac:	491e      	ldr	r1, [pc, #120]	; (1a002528 <xTaskResumeAll+0xdc>)
1a0024ae:	6808      	ldr	r0, [r1, #0]
1a0024b0:	4302      	orrs	r2, r0
1a0024b2:	600a      	str	r2, [r1, #0]
1a0024b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0024b8:	009a      	lsls	r2, r3, #2
1a0024ba:	4629      	mov	r1, r5
1a0024bc:	481b      	ldr	r0, [pc, #108]	; (1a00252c <xTaskResumeAll+0xe0>)
1a0024be:	4410      	add	r0, r2
1a0024c0:	f7ff fc93 	bl	1a001dea <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0024c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0024c6:	4b1a      	ldr	r3, [pc, #104]	; (1a002530 <xTaskResumeAll+0xe4>)
1a0024c8:	681b      	ldr	r3, [r3, #0]
1a0024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0024cc:	429a      	cmp	r2, r3
1a0024ce:	d3dc      	bcc.n	1a00248a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0024d0:	4b18      	ldr	r3, [pc, #96]	; (1a002534 <xTaskResumeAll+0xe8>)
1a0024d2:	2201      	movs	r2, #1
1a0024d4:	601a      	str	r2, [r3, #0]
1a0024d6:	e7d8      	b.n	1a00248a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0024d8:	b10c      	cbz	r4, 1a0024de <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0024da:	f7ff fcdb 	bl	1a001e94 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0024de:	4b16      	ldr	r3, [pc, #88]	; (1a002538 <xTaskResumeAll+0xec>)
1a0024e0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0024e2:	b154      	cbz	r4, 1a0024fa <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0024e4:	f7ff ff26 	bl	1a002334 <xTaskIncrementTick>
1a0024e8:	b110      	cbz	r0, 1a0024f0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0024ea:	4b12      	ldr	r3, [pc, #72]	; (1a002534 <xTaskResumeAll+0xe8>)
1a0024ec:	2201      	movs	r2, #1
1a0024ee:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0024f0:	3c01      	subs	r4, #1
1a0024f2:	d1f7      	bne.n	1a0024e4 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0024f4:	4b10      	ldr	r3, [pc, #64]	; (1a002538 <xTaskResumeAll+0xec>)
1a0024f6:	2200      	movs	r2, #0
1a0024f8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0024fa:	4b0e      	ldr	r3, [pc, #56]	; (1a002534 <xTaskResumeAll+0xe8>)
1a0024fc:	681b      	ldr	r3, [r3, #0]
1a0024fe:	b15b      	cbz	r3, 1a002518 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a002500:	4b0e      	ldr	r3, [pc, #56]	; (1a00253c <xTaskResumeAll+0xf0>)
1a002502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002506:	601a      	str	r2, [r3, #0]
1a002508:	f3bf 8f4f 	dsb	sy
1a00250c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a002510:	2401      	movs	r4, #1
1a002512:	e7b5      	b.n	1a002480 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a002514:	2400      	movs	r4, #0
1a002516:	e7b3      	b.n	1a002480 <xTaskResumeAll+0x34>
1a002518:	2400      	movs	r4, #0
1a00251a:	e7b1      	b.n	1a002480 <xTaskResumeAll+0x34>
1a00251c:	10002934 	.word	0x10002934
1a002520:	10002928 	.word	0x10002928
1a002524:	10002970 	.word	0x10002970
1a002528:	1000293c 	.word	0x1000293c
1a00252c:	1000289c 	.word	0x1000289c
1a002530:	10002890 	.word	0x10002890
1a002534:	100029b4 	.word	0x100029b4
1a002538:	10002930 	.word	0x10002930
1a00253c:	e000ed04 	.word	0xe000ed04

1a002540 <vTaskDelayUntil>:
	{
1a002540:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a002542:	b150      	cbz	r0, 1a00255a <vTaskDelayUntil+0x1a>
1a002544:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a002546:	b989      	cbnz	r1, 1a00256c <vTaskDelayUntil+0x2c>
1a002548:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00254c:	f383 8811 	msr	BASEPRI, r3
1a002550:	f3bf 8f6f 	isb	sy
1a002554:	f3bf 8f4f 	dsb	sy
1a002558:	e7fe      	b.n	1a002558 <vTaskDelayUntil+0x18>
1a00255a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00255e:	f383 8811 	msr	BASEPRI, r3
1a002562:	f3bf 8f6f 	isb	sy
1a002566:	f3bf 8f4f 	dsb	sy
1a00256a:	e7fe      	b.n	1a00256a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a00256c:	4b1a      	ldr	r3, [pc, #104]	; (1a0025d8 <vTaskDelayUntil+0x98>)
1a00256e:	681b      	ldr	r3, [r3, #0]
1a002570:	b143      	cbz	r3, 1a002584 <vTaskDelayUntil+0x44>
1a002572:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002576:	f383 8811 	msr	BASEPRI, r3
1a00257a:	f3bf 8f6f 	isb	sy
1a00257e:	f3bf 8f4f 	dsb	sy
1a002582:	e7fe      	b.n	1a002582 <vTaskDelayUntil+0x42>
1a002584:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a002586:	f7ff fec7 	bl	1a002318 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00258a:	4b14      	ldr	r3, [pc, #80]	; (1a0025dc <vTaskDelayUntil+0x9c>)
1a00258c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00258e:	682a      	ldr	r2, [r5, #0]
1a002590:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a002592:	4282      	cmp	r2, r0
1a002594:	d918      	bls.n	1a0025c8 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002596:	42a2      	cmp	r2, r4
1a002598:	d80c      	bhi.n	1a0025b4 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a00259a:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a00259c:	f7ff ff56 	bl	1a00244c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0025a0:	b938      	cbnz	r0, 1a0025b2 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a0025a2:	4b0f      	ldr	r3, [pc, #60]	; (1a0025e0 <vTaskDelayUntil+0xa0>)
1a0025a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0025a8:	601a      	str	r2, [r3, #0]
1a0025aa:	f3bf 8f4f 	dsb	sy
1a0025ae:	f3bf 8f6f 	isb	sy
	}
1a0025b2:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0025b4:	42a0      	cmp	r0, r4
1a0025b6:	d301      	bcc.n	1a0025bc <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0025b8:	602c      	str	r4, [r5, #0]
1a0025ba:	e7ef      	b.n	1a00259c <vTaskDelayUntil+0x5c>
1a0025bc:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0025be:	2100      	movs	r1, #0
1a0025c0:	1a20      	subs	r0, r4, r0
1a0025c2:	f7ff fda7 	bl	1a002114 <prvAddCurrentTaskToDelayedList>
1a0025c6:	e7e9      	b.n	1a00259c <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a0025c8:	42a2      	cmp	r2, r4
1a0025ca:	d801      	bhi.n	1a0025d0 <vTaskDelayUntil+0x90>
1a0025cc:	42a0      	cmp	r0, r4
1a0025ce:	d201      	bcs.n	1a0025d4 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0025d0:	602c      	str	r4, [r5, #0]
1a0025d2:	e7f4      	b.n	1a0025be <vTaskDelayUntil+0x7e>
1a0025d4:	602c      	str	r4, [r5, #0]
1a0025d6:	e7e1      	b.n	1a00259c <vTaskDelayUntil+0x5c>
1a0025d8:	10002934 	.word	0x10002934
1a0025dc:	100029b0 	.word	0x100029b0
1a0025e0:	e000ed04 	.word	0xe000ed04

1a0025e4 <vTaskDelay>:
	{
1a0025e4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0025e6:	b1a8      	cbz	r0, 1a002614 <vTaskDelay+0x30>
1a0025e8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0025ea:	4b0f      	ldr	r3, [pc, #60]	; (1a002628 <vTaskDelay+0x44>)
1a0025ec:	681b      	ldr	r3, [r3, #0]
1a0025ee:	b143      	cbz	r3, 1a002602 <vTaskDelay+0x1e>
1a0025f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025f4:	f383 8811 	msr	BASEPRI, r3
1a0025f8:	f3bf 8f6f 	isb	sy
1a0025fc:	f3bf 8f4f 	dsb	sy
1a002600:	e7fe      	b.n	1a002600 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a002602:	f7ff fe89 	bl	1a002318 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a002606:	2100      	movs	r1, #0
1a002608:	4620      	mov	r0, r4
1a00260a:	f7ff fd83 	bl	1a002114 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00260e:	f7ff ff1d 	bl	1a00244c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a002612:	b938      	cbnz	r0, 1a002624 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a002614:	4b05      	ldr	r3, [pc, #20]	; (1a00262c <vTaskDelay+0x48>)
1a002616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00261a:	601a      	str	r2, [r3, #0]
1a00261c:	f3bf 8f4f 	dsb	sy
1a002620:	f3bf 8f6f 	isb	sy
	}
1a002624:	bd10      	pop	{r4, pc}
1a002626:	bf00      	nop
1a002628:	10002934 	.word	0x10002934
1a00262c:	e000ed04 	.word	0xe000ed04

1a002630 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a002630:	4b2c      	ldr	r3, [pc, #176]	; (1a0026e4 <vTaskSwitchContext+0xb4>)
1a002632:	681b      	ldr	r3, [r3, #0]
1a002634:	b11b      	cbz	r3, 1a00263e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a002636:	4b2c      	ldr	r3, [pc, #176]	; (1a0026e8 <vTaskSwitchContext+0xb8>)
1a002638:	2201      	movs	r2, #1
1a00263a:	601a      	str	r2, [r3, #0]
1a00263c:	4770      	bx	lr
{
1a00263e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a002640:	4b29      	ldr	r3, [pc, #164]	; (1a0026e8 <vTaskSwitchContext+0xb8>)
1a002642:	2200      	movs	r2, #0
1a002644:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a002646:	4b29      	ldr	r3, [pc, #164]	; (1a0026ec <vTaskSwitchContext+0xbc>)
1a002648:	681b      	ldr	r3, [r3, #0]
1a00264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00264c:	681a      	ldr	r2, [r3, #0]
1a00264e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002652:	d103      	bne.n	1a00265c <vTaskSwitchContext+0x2c>
1a002654:	685a      	ldr	r2, [r3, #4]
1a002656:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00265a:	d01b      	beq.n	1a002694 <vTaskSwitchContext+0x64>
1a00265c:	4b23      	ldr	r3, [pc, #140]	; (1a0026ec <vTaskSwitchContext+0xbc>)
1a00265e:	6818      	ldr	r0, [r3, #0]
1a002660:	6819      	ldr	r1, [r3, #0]
1a002662:	3134      	adds	r1, #52	; 0x34
1a002664:	f7ff fc14 	bl	1a001e90 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002668:	4b21      	ldr	r3, [pc, #132]	; (1a0026f0 <vTaskSwitchContext+0xc0>)
1a00266a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a00266c:	fab3 f383 	clz	r3, r3
1a002670:	b2db      	uxtb	r3, r3
1a002672:	f1c3 031f 	rsb	r3, r3, #31
1a002676:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00267a:	008a      	lsls	r2, r1, #2
1a00267c:	491d      	ldr	r1, [pc, #116]	; (1a0026f4 <vTaskSwitchContext+0xc4>)
1a00267e:	588a      	ldr	r2, [r1, r2]
1a002680:	b98a      	cbnz	r2, 1a0026a6 <vTaskSwitchContext+0x76>
	__asm volatile
1a002682:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002686:	f383 8811 	msr	BASEPRI, r3
1a00268a:	f3bf 8f6f 	isb	sy
1a00268e:	f3bf 8f4f 	dsb	sy
1a002692:	e7fe      	b.n	1a002692 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a002694:	689a      	ldr	r2, [r3, #8]
1a002696:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00269a:	d1df      	bne.n	1a00265c <vTaskSwitchContext+0x2c>
1a00269c:	68db      	ldr	r3, [r3, #12]
1a00269e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0026a2:	d1db      	bne.n	1a00265c <vTaskSwitchContext+0x2c>
1a0026a4:	e7e0      	b.n	1a002668 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0026a6:	4813      	ldr	r0, [pc, #76]	; (1a0026f4 <vTaskSwitchContext+0xc4>)
1a0026a8:	009a      	lsls	r2, r3, #2
1a0026aa:	18d4      	adds	r4, r2, r3
1a0026ac:	00a1      	lsls	r1, r4, #2
1a0026ae:	4401      	add	r1, r0
1a0026b0:	684c      	ldr	r4, [r1, #4]
1a0026b2:	6864      	ldr	r4, [r4, #4]
1a0026b4:	604c      	str	r4, [r1, #4]
1a0026b6:	441a      	add	r2, r3
1a0026b8:	0091      	lsls	r1, r2, #2
1a0026ba:	3108      	adds	r1, #8
1a0026bc:	4408      	add	r0, r1
1a0026be:	4284      	cmp	r4, r0
1a0026c0:	d009      	beq.n	1a0026d6 <vTaskSwitchContext+0xa6>
1a0026c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0026c6:	009a      	lsls	r2, r3, #2
1a0026c8:	4b0a      	ldr	r3, [pc, #40]	; (1a0026f4 <vTaskSwitchContext+0xc4>)
1a0026ca:	4413      	add	r3, r2
1a0026cc:	685b      	ldr	r3, [r3, #4]
1a0026ce:	68da      	ldr	r2, [r3, #12]
1a0026d0:	4b06      	ldr	r3, [pc, #24]	; (1a0026ec <vTaskSwitchContext+0xbc>)
1a0026d2:	601a      	str	r2, [r3, #0]
}
1a0026d4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0026d6:	6861      	ldr	r1, [r4, #4]
1a0026d8:	4806      	ldr	r0, [pc, #24]	; (1a0026f4 <vTaskSwitchContext+0xc4>)
1a0026da:	2214      	movs	r2, #20
1a0026dc:	fb02 0203 	mla	r2, r2, r3, r0
1a0026e0:	6051      	str	r1, [r2, #4]
1a0026e2:	e7ee      	b.n	1a0026c2 <vTaskSwitchContext+0x92>
1a0026e4:	10002934 	.word	0x10002934
1a0026e8:	100029b4 	.word	0x100029b4
1a0026ec:	10002890 	.word	0x10002890
1a0026f0:	1000293c 	.word	0x1000293c
1a0026f4:	1000289c 	.word	0x1000289c

1a0026f8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0026f8:	b940      	cbnz	r0, 1a00270c <vTaskPlaceOnEventList+0x14>
1a0026fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026fe:	f383 8811 	msr	BASEPRI, r3
1a002702:	f3bf 8f6f 	isb	sy
1a002706:	f3bf 8f4f 	dsb	sy
1a00270a:	e7fe      	b.n	1a00270a <vTaskPlaceOnEventList+0x12>
{
1a00270c:	b510      	push	{r4, lr}
1a00270e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002710:	4b04      	ldr	r3, [pc, #16]	; (1a002724 <vTaskPlaceOnEventList+0x2c>)
1a002712:	6819      	ldr	r1, [r3, #0]
1a002714:	3118      	adds	r1, #24
1a002716:	f7ff fb74 	bl	1a001e02 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00271a:	2101      	movs	r1, #1
1a00271c:	4620      	mov	r0, r4
1a00271e:	f7ff fcf9 	bl	1a002114 <prvAddCurrentTaskToDelayedList>
}
1a002722:	bd10      	pop	{r4, pc}
1a002724:	10002890 	.word	0x10002890

1a002728 <vTaskPlaceOnEventListRestricted>:
	{
1a002728:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00272a:	b940      	cbnz	r0, 1a00273e <vTaskPlaceOnEventListRestricted+0x16>
1a00272c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002730:	f383 8811 	msr	BASEPRI, r3
1a002734:	f3bf 8f6f 	isb	sy
1a002738:	f3bf 8f4f 	dsb	sy
1a00273c:	e7fe      	b.n	1a00273c <vTaskPlaceOnEventListRestricted+0x14>
1a00273e:	460c      	mov	r4, r1
1a002740:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002742:	4a06      	ldr	r2, [pc, #24]	; (1a00275c <vTaskPlaceOnEventListRestricted+0x34>)
1a002744:	6811      	ldr	r1, [r2, #0]
1a002746:	3118      	adds	r1, #24
1a002748:	f7ff fb4f 	bl	1a001dea <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00274c:	b10d      	cbz	r5, 1a002752 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00274e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a002752:	4629      	mov	r1, r5
1a002754:	4620      	mov	r0, r4
1a002756:	f7ff fcdd 	bl	1a002114 <prvAddCurrentTaskToDelayedList>
	}
1a00275a:	bd38      	pop	{r3, r4, r5, pc}
1a00275c:	10002890 	.word	0x10002890

1a002760 <xTaskRemoveFromEventList>:
{
1a002760:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a002762:	68c3      	ldr	r3, [r0, #12]
1a002764:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002766:	b944      	cbnz	r4, 1a00277a <xTaskRemoveFromEventList+0x1a>
1a002768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00276c:	f383 8811 	msr	BASEPRI, r3
1a002770:	f3bf 8f6f 	isb	sy
1a002774:	f3bf 8f4f 	dsb	sy
1a002778:	e7fe      	b.n	1a002778 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a00277a:	f104 0518 	add.w	r5, r4, #24
1a00277e:	4628      	mov	r0, r5
1a002780:	f7ff fb59 	bl	1a001e36 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002784:	4b13      	ldr	r3, [pc, #76]	; (1a0027d4 <xTaskRemoveFromEventList+0x74>)
1a002786:	681b      	ldr	r3, [r3, #0]
1a002788:	b9e3      	cbnz	r3, 1a0027c4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a00278a:	1d25      	adds	r5, r4, #4
1a00278c:	4628      	mov	r0, r5
1a00278e:	f7ff fb52 	bl	1a001e36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a002792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002794:	2201      	movs	r2, #1
1a002796:	409a      	lsls	r2, r3
1a002798:	490f      	ldr	r1, [pc, #60]	; (1a0027d8 <xTaskRemoveFromEventList+0x78>)
1a00279a:	6808      	ldr	r0, [r1, #0]
1a00279c:	4302      	orrs	r2, r0
1a00279e:	600a      	str	r2, [r1, #0]
1a0027a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0027a4:	009a      	lsls	r2, r3, #2
1a0027a6:	4629      	mov	r1, r5
1a0027a8:	480c      	ldr	r0, [pc, #48]	; (1a0027dc <xTaskRemoveFromEventList+0x7c>)
1a0027aa:	4410      	add	r0, r2
1a0027ac:	f7ff fb1d 	bl	1a001dea <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0027b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0027b2:	4b0b      	ldr	r3, [pc, #44]	; (1a0027e0 <xTaskRemoveFromEventList+0x80>)
1a0027b4:	681b      	ldr	r3, [r3, #0]
1a0027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0027b8:	429a      	cmp	r2, r3
1a0027ba:	d908      	bls.n	1a0027ce <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0027bc:	2001      	movs	r0, #1
1a0027be:	4b09      	ldr	r3, [pc, #36]	; (1a0027e4 <xTaskRemoveFromEventList+0x84>)
1a0027c0:	6018      	str	r0, [r3, #0]
}
1a0027c2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0027c4:	4629      	mov	r1, r5
1a0027c6:	4808      	ldr	r0, [pc, #32]	; (1a0027e8 <xTaskRemoveFromEventList+0x88>)
1a0027c8:	f7ff fb0f 	bl	1a001dea <vListInsertEnd>
1a0027cc:	e7f0      	b.n	1a0027b0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0027ce:	2000      	movs	r0, #0
	return xReturn;
1a0027d0:	e7f7      	b.n	1a0027c2 <xTaskRemoveFromEventList+0x62>
1a0027d2:	bf00      	nop
1a0027d4:	10002934 	.word	0x10002934
1a0027d8:	1000293c 	.word	0x1000293c
1a0027dc:	1000289c 	.word	0x1000289c
1a0027e0:	10002890 	.word	0x10002890
1a0027e4:	100029b4 	.word	0x100029b4
1a0027e8:	10002970 	.word	0x10002970

1a0027ec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0027ec:	4b03      	ldr	r3, [pc, #12]	; (1a0027fc <vTaskInternalSetTimeOutState+0x10>)
1a0027ee:	681b      	ldr	r3, [r3, #0]
1a0027f0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0027f2:	4b03      	ldr	r3, [pc, #12]	; (1a002800 <vTaskInternalSetTimeOutState+0x14>)
1a0027f4:	681b      	ldr	r3, [r3, #0]
1a0027f6:	6043      	str	r3, [r0, #4]
}
1a0027f8:	4770      	bx	lr
1a0027fa:	bf00      	nop
1a0027fc:	1000296c 	.word	0x1000296c
1a002800:	100029b0 	.word	0x100029b0

1a002804 <xTaskCheckForTimeOut>:
{
1a002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002806:	b150      	cbz	r0, 1a00281e <xTaskCheckForTimeOut+0x1a>
1a002808:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00280a:	b989      	cbnz	r1, 1a002830 <xTaskCheckForTimeOut+0x2c>
1a00280c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002810:	f383 8811 	msr	BASEPRI, r3
1a002814:	f3bf 8f6f 	isb	sy
1a002818:	f3bf 8f4f 	dsb	sy
1a00281c:	e7fe      	b.n	1a00281c <xTaskCheckForTimeOut+0x18>
1a00281e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002822:	f383 8811 	msr	BASEPRI, r3
1a002826:	f3bf 8f6f 	isb	sy
1a00282a:	f3bf 8f4f 	dsb	sy
1a00282e:	e7fe      	b.n	1a00282e <xTaskCheckForTimeOut+0x2a>
1a002830:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a002832:	f000 fc27 	bl	1a003084 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a002836:	4b11      	ldr	r3, [pc, #68]	; (1a00287c <xTaskCheckForTimeOut+0x78>)
1a002838:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00283a:	6868      	ldr	r0, [r5, #4]
1a00283c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00283e:	6823      	ldr	r3, [r4, #0]
1a002840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002844:	d016      	beq.n	1a002874 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002846:	682f      	ldr	r7, [r5, #0]
1a002848:	4e0d      	ldr	r6, [pc, #52]	; (1a002880 <xTaskCheckForTimeOut+0x7c>)
1a00284a:	6836      	ldr	r6, [r6, #0]
1a00284c:	42b7      	cmp	r7, r6
1a00284e:	d001      	beq.n	1a002854 <xTaskCheckForTimeOut+0x50>
1a002850:	4288      	cmp	r0, r1
1a002852:	d911      	bls.n	1a002878 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002854:	4293      	cmp	r3, r2
1a002856:	d803      	bhi.n	1a002860 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002858:	2300      	movs	r3, #0
1a00285a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a00285c:	2401      	movs	r4, #1
1a00285e:	e005      	b.n	1a00286c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a002860:	1a9b      	subs	r3, r3, r2
1a002862:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002864:	4628      	mov	r0, r5
1a002866:	f7ff ffc1 	bl	1a0027ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00286a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00286c:	f000 fc2c 	bl	1a0030c8 <vPortExitCritical>
}
1a002870:	4620      	mov	r0, r4
1a002872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a002874:	2400      	movs	r4, #0
1a002876:	e7f9      	b.n	1a00286c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002878:	2401      	movs	r4, #1
1a00287a:	e7f7      	b.n	1a00286c <xTaskCheckForTimeOut+0x68>
1a00287c:	100029b0 	.word	0x100029b0
1a002880:	1000296c 	.word	0x1000296c

1a002884 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002884:	4b01      	ldr	r3, [pc, #4]	; (1a00288c <vTaskMissedYield+0x8>)
1a002886:	2201      	movs	r2, #1
1a002888:	601a      	str	r2, [r3, #0]
}
1a00288a:	4770      	bx	lr
1a00288c:	100029b4 	.word	0x100029b4

1a002890 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002890:	4b05      	ldr	r3, [pc, #20]	; (1a0028a8 <xTaskGetSchedulerState+0x18>)
1a002892:	681b      	ldr	r3, [r3, #0]
1a002894:	b133      	cbz	r3, 1a0028a4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002896:	4b05      	ldr	r3, [pc, #20]	; (1a0028ac <xTaskGetSchedulerState+0x1c>)
1a002898:	681b      	ldr	r3, [r3, #0]
1a00289a:	b10b      	cbz	r3, 1a0028a0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a00289c:	2000      	movs	r0, #0
	}
1a00289e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0028a0:	2002      	movs	r0, #2
1a0028a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0028a4:	2001      	movs	r0, #1
1a0028a6:	4770      	bx	lr
1a0028a8:	10002984 	.word	0x10002984
1a0028ac:	10002934 	.word	0x10002934

1a0028b0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0028b0:	2800      	cmp	r0, #0
1a0028b2:	d050      	beq.n	1a002956 <xTaskPriorityInherit+0xa6>
	{
1a0028b4:	b538      	push	{r3, r4, r5, lr}
1a0028b6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0028b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0028ba:	4928      	ldr	r1, [pc, #160]	; (1a00295c <xTaskPriorityInherit+0xac>)
1a0028bc:	6809      	ldr	r1, [r1, #0]
1a0028be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0028c0:	428a      	cmp	r2, r1
1a0028c2:	d23e      	bcs.n	1a002942 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0028c4:	6981      	ldr	r1, [r0, #24]
1a0028c6:	2900      	cmp	r1, #0
1a0028c8:	db05      	blt.n	1a0028d6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0028ca:	4924      	ldr	r1, [pc, #144]	; (1a00295c <xTaskPriorityInherit+0xac>)
1a0028cc:	6809      	ldr	r1, [r1, #0]
1a0028ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0028d0:	f1c1 0107 	rsb	r1, r1, #7
1a0028d4:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a0028d6:	6960      	ldr	r0, [r4, #20]
1a0028d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0028dc:	0091      	lsls	r1, r2, #2
1a0028de:	4a20      	ldr	r2, [pc, #128]	; (1a002960 <xTaskPriorityInherit+0xb0>)
1a0028e0:	440a      	add	r2, r1
1a0028e2:	4290      	cmp	r0, r2
1a0028e4:	d005      	beq.n	1a0028f2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0028e6:	4a1d      	ldr	r2, [pc, #116]	; (1a00295c <xTaskPriorityInherit+0xac>)
1a0028e8:	6812      	ldr	r2, [r2, #0]
1a0028ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a0028ec:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a0028ee:	2001      	movs	r0, #1
	}
1a0028f0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0028f2:	1d25      	adds	r5, r4, #4
1a0028f4:	4628      	mov	r0, r5
1a0028f6:	f7ff fa9e 	bl	1a001e36 <uxListRemove>
1a0028fa:	b968      	cbnz	r0, 1a002918 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a0028fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0028fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002902:	008a      	lsls	r2, r1, #2
1a002904:	4916      	ldr	r1, [pc, #88]	; (1a002960 <xTaskPriorityInherit+0xb0>)
1a002906:	588a      	ldr	r2, [r1, r2]
1a002908:	b932      	cbnz	r2, 1a002918 <xTaskPriorityInherit+0x68>
1a00290a:	2201      	movs	r2, #1
1a00290c:	409a      	lsls	r2, r3
1a00290e:	4915      	ldr	r1, [pc, #84]	; (1a002964 <xTaskPriorityInherit+0xb4>)
1a002910:	680b      	ldr	r3, [r1, #0]
1a002912:	ea23 0302 	bic.w	r3, r3, r2
1a002916:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002918:	4b10      	ldr	r3, [pc, #64]	; (1a00295c <xTaskPriorityInherit+0xac>)
1a00291a:	681b      	ldr	r3, [r3, #0]
1a00291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00291e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002920:	2401      	movs	r4, #1
1a002922:	fa04 f203 	lsl.w	r2, r4, r3
1a002926:	490f      	ldr	r1, [pc, #60]	; (1a002964 <xTaskPriorityInherit+0xb4>)
1a002928:	6808      	ldr	r0, [r1, #0]
1a00292a:	4302      	orrs	r2, r0
1a00292c:	600a      	str	r2, [r1, #0]
1a00292e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002932:	009a      	lsls	r2, r3, #2
1a002934:	4629      	mov	r1, r5
1a002936:	480a      	ldr	r0, [pc, #40]	; (1a002960 <xTaskPriorityInherit+0xb0>)
1a002938:	4410      	add	r0, r2
1a00293a:	f7ff fa56 	bl	1a001dea <vListInsertEnd>
				xReturn = pdTRUE;
1a00293e:	4620      	mov	r0, r4
1a002940:	e7d6      	b.n	1a0028f0 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a002942:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002944:	4b05      	ldr	r3, [pc, #20]	; (1a00295c <xTaskPriorityInherit+0xac>)
1a002946:	681b      	ldr	r3, [r3, #0]
1a002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00294a:	429a      	cmp	r2, r3
1a00294c:	d201      	bcs.n	1a002952 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a00294e:	2001      	movs	r0, #1
		return xReturn;
1a002950:	e7ce      	b.n	1a0028f0 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a002952:	2000      	movs	r0, #0
1a002954:	e7cc      	b.n	1a0028f0 <xTaskPriorityInherit+0x40>
1a002956:	2000      	movs	r0, #0
	}
1a002958:	4770      	bx	lr
1a00295a:	bf00      	nop
1a00295c:	10002890 	.word	0x10002890
1a002960:	1000289c 	.word	0x1000289c
1a002964:	1000293c 	.word	0x1000293c

1a002968 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002968:	2800      	cmp	r0, #0
1a00296a:	d049      	beq.n	1a002a00 <xTaskPriorityDisinherit+0x98>
	{
1a00296c:	b538      	push	{r3, r4, r5, lr}
1a00296e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002970:	4a26      	ldr	r2, [pc, #152]	; (1a002a0c <xTaskPriorityDisinherit+0xa4>)
1a002972:	6812      	ldr	r2, [r2, #0]
1a002974:	4282      	cmp	r2, r0
1a002976:	d008      	beq.n	1a00298a <xTaskPriorityDisinherit+0x22>
1a002978:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00297c:	f383 8811 	msr	BASEPRI, r3
1a002980:	f3bf 8f6f 	isb	sy
1a002984:	f3bf 8f4f 	dsb	sy
1a002988:	e7fe      	b.n	1a002988 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00298a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a00298c:	b942      	cbnz	r2, 1a0029a0 <xTaskPriorityDisinherit+0x38>
1a00298e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002992:	f383 8811 	msr	BASEPRI, r3
1a002996:	f3bf 8f6f 	isb	sy
1a00299a:	f3bf 8f4f 	dsb	sy
1a00299e:	e7fe      	b.n	1a00299e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0029a0:	3a01      	subs	r2, #1
1a0029a2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0029a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0029a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0029a8:	4288      	cmp	r0, r1
1a0029aa:	d02b      	beq.n	1a002a04 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0029ac:	bb62      	cbnz	r2, 1a002a08 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0029ae:	1d25      	adds	r5, r4, #4
1a0029b0:	4628      	mov	r0, r5
1a0029b2:	f7ff fa40 	bl	1a001e36 <uxListRemove>
1a0029b6:	b970      	cbnz	r0, 1a0029d6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0029b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0029ba:	2314      	movs	r3, #20
1a0029bc:	fb03 f302 	mul.w	r3, r3, r2
1a0029c0:	4913      	ldr	r1, [pc, #76]	; (1a002a10 <xTaskPriorityDisinherit+0xa8>)
1a0029c2:	58cb      	ldr	r3, [r1, r3]
1a0029c4:	b93b      	cbnz	r3, 1a0029d6 <xTaskPriorityDisinherit+0x6e>
1a0029c6:	2301      	movs	r3, #1
1a0029c8:	fa03 f202 	lsl.w	r2, r3, r2
1a0029cc:	4911      	ldr	r1, [pc, #68]	; (1a002a14 <xTaskPriorityDisinherit+0xac>)
1a0029ce:	680b      	ldr	r3, [r1, #0]
1a0029d0:	ea23 0302 	bic.w	r3, r3, r2
1a0029d4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0029d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0029d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0029da:	f1c3 0207 	rsb	r2, r3, #7
1a0029de:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0029e0:	2401      	movs	r4, #1
1a0029e2:	fa04 f203 	lsl.w	r2, r4, r3
1a0029e6:	490b      	ldr	r1, [pc, #44]	; (1a002a14 <xTaskPriorityDisinherit+0xac>)
1a0029e8:	6808      	ldr	r0, [r1, #0]
1a0029ea:	4302      	orrs	r2, r0
1a0029ec:	600a      	str	r2, [r1, #0]
1a0029ee:	4629      	mov	r1, r5
1a0029f0:	4a07      	ldr	r2, [pc, #28]	; (1a002a10 <xTaskPriorityDisinherit+0xa8>)
1a0029f2:	2014      	movs	r0, #20
1a0029f4:	fb00 2003 	mla	r0, r0, r3, r2
1a0029f8:	f7ff f9f7 	bl	1a001dea <vListInsertEnd>
					xReturn = pdTRUE;
1a0029fc:	4620      	mov	r0, r4
	}
1a0029fe:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a002a00:	2000      	movs	r0, #0
	}
1a002a02:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002a04:	2000      	movs	r0, #0
1a002a06:	e7fa      	b.n	1a0029fe <xTaskPriorityDisinherit+0x96>
1a002a08:	2000      	movs	r0, #0
		return xReturn;
1a002a0a:	e7f8      	b.n	1a0029fe <xTaskPriorityDisinherit+0x96>
1a002a0c:	10002890 	.word	0x10002890
1a002a10:	1000289c 	.word	0x1000289c
1a002a14:	1000293c 	.word	0x1000293c

1a002a18 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a002a18:	2800      	cmp	r0, #0
1a002a1a:	d055      	beq.n	1a002ac8 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a002a1c:	b538      	push	{r3, r4, r5, lr}
1a002a1e:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a002a20:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a002a22:	b940      	cbnz	r0, 1a002a36 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002a24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a28:	f383 8811 	msr	BASEPRI, r3
1a002a2c:	f3bf 8f6f 	isb	sy
1a002a30:	f3bf 8f4f 	dsb	sy
1a002a34:	e7fe      	b.n	1a002a34 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a002a38:	428a      	cmp	r2, r1
1a002a3a:	d200      	bcs.n	1a002a3e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002a3c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a002a3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a002a40:	4291      	cmp	r1, r2
1a002a42:	d001      	beq.n	1a002a48 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002a44:	2801      	cmp	r0, #1
1a002a46:	d000      	beq.n	1a002a4a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a002a48:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a002a4a:	4820      	ldr	r0, [pc, #128]	; (1a002acc <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a002a4c:	6800      	ldr	r0, [r0, #0]
1a002a4e:	4298      	cmp	r0, r3
1a002a50:	d108      	bne.n	1a002a64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a002a52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a56:	f383 8811 	msr	BASEPRI, r3
1a002a5a:	f3bf 8f6f 	isb	sy
1a002a5e:	f3bf 8f4f 	dsb	sy
1a002a62:	e7fe      	b.n	1a002a62 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a002a64:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002a66:	6998      	ldr	r0, [r3, #24]
1a002a68:	2800      	cmp	r0, #0
1a002a6a:	db02      	blt.n	1a002a72 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002a6c:	f1c2 0207 	rsb	r2, r2, #7
1a002a70:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a002a72:	695a      	ldr	r2, [r3, #20]
1a002a74:	4816      	ldr	r0, [pc, #88]	; (1a002ad0 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002a76:	2414      	movs	r4, #20
1a002a78:	fb04 0101 	mla	r1, r4, r1, r0
1a002a7c:	428a      	cmp	r2, r1
1a002a7e:	d1e3      	bne.n	1a002a48 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002a80:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002a82:	1d1d      	adds	r5, r3, #4
1a002a84:	4628      	mov	r0, r5
1a002a86:	f7ff f9d6 	bl	1a001e36 <uxListRemove>
1a002a8a:	b970      	cbnz	r0, 1a002aaa <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002a8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002a8e:	2314      	movs	r3, #20
1a002a90:	fb03 f302 	mul.w	r3, r3, r2
1a002a94:	490e      	ldr	r1, [pc, #56]	; (1a002ad0 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002a96:	58cb      	ldr	r3, [r1, r3]
1a002a98:	b93b      	cbnz	r3, 1a002aaa <vTaskPriorityDisinheritAfterTimeout+0x92>
1a002a9a:	2301      	movs	r3, #1
1a002a9c:	fa03 f202 	lsl.w	r2, r3, r2
1a002aa0:	490c      	ldr	r1, [pc, #48]	; (1a002ad4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a002aa2:	680b      	ldr	r3, [r1, #0]
1a002aa4:	ea23 0302 	bic.w	r3, r3, r2
1a002aa8:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a002aaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002aac:	2301      	movs	r3, #1
1a002aae:	4093      	lsls	r3, r2
1a002ab0:	4908      	ldr	r1, [pc, #32]	; (1a002ad4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a002ab2:	6808      	ldr	r0, [r1, #0]
1a002ab4:	4303      	orrs	r3, r0
1a002ab6:	600b      	str	r3, [r1, #0]
1a002ab8:	4629      	mov	r1, r5
1a002aba:	4b05      	ldr	r3, [pc, #20]	; (1a002ad0 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002abc:	2014      	movs	r0, #20
1a002abe:	fb00 3002 	mla	r0, r0, r2, r3
1a002ac2:	f7ff f992 	bl	1a001dea <vListInsertEnd>
	}
1a002ac6:	e7bf      	b.n	1a002a48 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002ac8:	4770      	bx	lr
1a002aca:	bf00      	nop
1a002acc:	10002890 	.word	0x10002890
1a002ad0:	1000289c 	.word	0x1000289c
1a002ad4:	1000293c 	.word	0x1000293c

1a002ad8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002ad8:	4b05      	ldr	r3, [pc, #20]	; (1a002af0 <pvTaskIncrementMutexHeldCount+0x18>)
1a002ada:	681b      	ldr	r3, [r3, #0]
1a002adc:	b123      	cbz	r3, 1a002ae8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a002ade:	4b04      	ldr	r3, [pc, #16]	; (1a002af0 <pvTaskIncrementMutexHeldCount+0x18>)
1a002ae0:	681a      	ldr	r2, [r3, #0]
1a002ae2:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002ae4:	3301      	adds	r3, #1
1a002ae6:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002ae8:	4b01      	ldr	r3, [pc, #4]	; (1a002af0 <pvTaskIncrementMutexHeldCount+0x18>)
1a002aea:	6818      	ldr	r0, [r3, #0]
	}
1a002aec:	4770      	bx	lr
1a002aee:	bf00      	nop
1a002af0:	10002890 	.word	0x10002890

1a002af4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002af4:	4b06      	ldr	r3, [pc, #24]	; (1a002b10 <prvGetNextExpireTime+0x1c>)
1a002af6:	681a      	ldr	r2, [r3, #0]
1a002af8:	6813      	ldr	r3, [r2, #0]
1a002afa:	fab3 f383 	clz	r3, r3
1a002afe:	095b      	lsrs	r3, r3, #5
1a002b00:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002b02:	b913      	cbnz	r3, 1a002b0a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002b04:	68d3      	ldr	r3, [r2, #12]
1a002b06:	6818      	ldr	r0, [r3, #0]
1a002b08:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002b0a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002b0c:	4770      	bx	lr
1a002b0e:	bf00      	nop
1a002b10:	100029b8 	.word	0x100029b8

1a002b14 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002b14:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002b16:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002b18:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002b1a:	4291      	cmp	r1, r2
1a002b1c:	d80c      	bhi.n	1a002b38 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002b1e:	1ad2      	subs	r2, r2, r3
1a002b20:	6983      	ldr	r3, [r0, #24]
1a002b22:	429a      	cmp	r2, r3
1a002b24:	d301      	bcc.n	1a002b2a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002b26:	2001      	movs	r0, #1
1a002b28:	e010      	b.n	1a002b4c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002b2a:	1d01      	adds	r1, r0, #4
1a002b2c:	4b09      	ldr	r3, [pc, #36]	; (1a002b54 <prvInsertTimerInActiveList+0x40>)
1a002b2e:	6818      	ldr	r0, [r3, #0]
1a002b30:	f7ff f967 	bl	1a001e02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002b34:	2000      	movs	r0, #0
1a002b36:	e009      	b.n	1a002b4c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002b38:	429a      	cmp	r2, r3
1a002b3a:	d201      	bcs.n	1a002b40 <prvInsertTimerInActiveList+0x2c>
1a002b3c:	4299      	cmp	r1, r3
1a002b3e:	d206      	bcs.n	1a002b4e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002b40:	1d01      	adds	r1, r0, #4
1a002b42:	4b05      	ldr	r3, [pc, #20]	; (1a002b58 <prvInsertTimerInActiveList+0x44>)
1a002b44:	6818      	ldr	r0, [r3, #0]
1a002b46:	f7ff f95c 	bl	1a001e02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002b4a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002b4c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002b4e:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002b50:	e7fc      	b.n	1a002b4c <prvInsertTimerInActiveList+0x38>
1a002b52:	bf00      	nop
1a002b54:	100029bc 	.word	0x100029bc
1a002b58:	100029b8 	.word	0x100029b8

1a002b5c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002b5c:	b530      	push	{r4, r5, lr}
1a002b5e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002b60:	f000 fa90 	bl	1a003084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002b64:	4b11      	ldr	r3, [pc, #68]	; (1a002bac <prvCheckForValidListAndQueue+0x50>)
1a002b66:	681b      	ldr	r3, [r3, #0]
1a002b68:	b11b      	cbz	r3, 1a002b72 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002b6a:	f000 faad 	bl	1a0030c8 <vPortExitCritical>
}
1a002b6e:	b003      	add	sp, #12
1a002b70:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a002b72:	4d0f      	ldr	r5, [pc, #60]	; (1a002bb0 <prvCheckForValidListAndQueue+0x54>)
1a002b74:	4628      	mov	r0, r5
1a002b76:	f7ff f92a 	bl	1a001dce <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002b7a:	4c0e      	ldr	r4, [pc, #56]	; (1a002bb4 <prvCheckForValidListAndQueue+0x58>)
1a002b7c:	4620      	mov	r0, r4
1a002b7e:	f7ff f926 	bl	1a001dce <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002b82:	4b0d      	ldr	r3, [pc, #52]	; (1a002bb8 <prvCheckForValidListAndQueue+0x5c>)
1a002b84:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002b86:	4b0d      	ldr	r3, [pc, #52]	; (1a002bbc <prvCheckForValidListAndQueue+0x60>)
1a002b88:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002b8a:	2300      	movs	r3, #0
1a002b8c:	9300      	str	r3, [sp, #0]
1a002b8e:	4b0c      	ldr	r3, [pc, #48]	; (1a002bc0 <prvCheckForValidListAndQueue+0x64>)
1a002b90:	4a0c      	ldr	r2, [pc, #48]	; (1a002bc4 <prvCheckForValidListAndQueue+0x68>)
1a002b92:	2110      	movs	r1, #16
1a002b94:	200a      	movs	r0, #10
1a002b96:	f7fe fd60 	bl	1a00165a <xQueueGenericCreateStatic>
1a002b9a:	4b04      	ldr	r3, [pc, #16]	; (1a002bac <prvCheckForValidListAndQueue+0x50>)
1a002b9c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002b9e:	2800      	cmp	r0, #0
1a002ba0:	d0e3      	beq.n	1a002b6a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002ba2:	4909      	ldr	r1, [pc, #36]	; (1a002bc8 <prvCheckForValidListAndQueue+0x6c>)
1a002ba4:	f7ff f8d6 	bl	1a001d54 <vQueueAddToRegistry>
1a002ba8:	e7df      	b.n	1a002b6a <prvCheckForValidListAndQueue+0xe>
1a002baa:	bf00      	nop
1a002bac:	10002adc 	.word	0x10002adc
1a002bb0:	10002a60 	.word	0x10002a60
1a002bb4:	10002a74 	.word	0x10002a74
1a002bb8:	100029b8 	.word	0x100029b8
1a002bbc:	100029bc 	.word	0x100029bc
1a002bc0:	10002a8c 	.word	0x10002a8c
1a002bc4:	100029c0 	.word	0x100029c0
1a002bc8:	1a005910 	.word	0x1a005910

1a002bcc <prvInitialiseNewTimer>:
{
1a002bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002bd0:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a002bd2:	b941      	cbnz	r1, 1a002be6 <prvInitialiseNewTimer+0x1a>
1a002bd4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bd8:	f383 8811 	msr	BASEPRI, r3
1a002bdc:	f3bf 8f6f 	isb	sy
1a002be0:	f3bf 8f4f 	dsb	sy
1a002be4:	e7fe      	b.n	1a002be4 <prvInitialiseNewTimer+0x18>
1a002be6:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a002be8:	b174      	cbz	r4, 1a002c08 <prvInitialiseNewTimer+0x3c>
1a002bea:	461d      	mov	r5, r3
1a002bec:	4616      	mov	r6, r2
1a002bee:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a002bf0:	f7ff ffb4 	bl	1a002b5c <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a002bf4:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002bf8:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a002bfa:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002bfc:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a002bfe:	9b06      	ldr	r3, [sp, #24]
1a002c00:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a002c02:	1d20      	adds	r0, r4, #4
1a002c04:	f7ff f8ee 	bl	1a001de4 <vListInitialiseItem>
}
1a002c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002c0c <xTimerCreateTimerTask>:
{
1a002c0c:	b510      	push	{r4, lr}
1a002c0e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002c10:	f7ff ffa4 	bl	1a002b5c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002c14:	4b12      	ldr	r3, [pc, #72]	; (1a002c60 <xTimerCreateTimerTask+0x54>)
1a002c16:	681b      	ldr	r3, [r3, #0]
1a002c18:	b1cb      	cbz	r3, 1a002c4e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002c1a:	2400      	movs	r4, #0
1a002c1c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002c1e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002c20:	aa07      	add	r2, sp, #28
1a002c22:	a906      	add	r1, sp, #24
1a002c24:	a805      	add	r0, sp, #20
1a002c26:	f7ff f927 	bl	1a001e78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002c2a:	9b05      	ldr	r3, [sp, #20]
1a002c2c:	9302      	str	r3, [sp, #8]
1a002c2e:	9b06      	ldr	r3, [sp, #24]
1a002c30:	9301      	str	r3, [sp, #4]
1a002c32:	2304      	movs	r3, #4
1a002c34:	9300      	str	r3, [sp, #0]
1a002c36:	4623      	mov	r3, r4
1a002c38:	9a07      	ldr	r2, [sp, #28]
1a002c3a:	490a      	ldr	r1, [pc, #40]	; (1a002c64 <xTimerCreateTimerTask+0x58>)
1a002c3c:	480a      	ldr	r0, [pc, #40]	; (1a002c68 <xTimerCreateTimerTask+0x5c>)
1a002c3e:	f7ff fab5 	bl	1a0021ac <xTaskCreateStatic>
1a002c42:	4b0a      	ldr	r3, [pc, #40]	; (1a002c6c <xTimerCreateTimerTask+0x60>)
1a002c44:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002c46:	b110      	cbz	r0, 1a002c4e <xTimerCreateTimerTask+0x42>
}
1a002c48:	2001      	movs	r0, #1
1a002c4a:	b008      	add	sp, #32
1a002c4c:	bd10      	pop	{r4, pc}
1a002c4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c52:	f383 8811 	msr	BASEPRI, r3
1a002c56:	f3bf 8f6f 	isb	sy
1a002c5a:	f3bf 8f4f 	dsb	sy
1a002c5e:	e7fe      	b.n	1a002c5e <xTimerCreateTimerTask+0x52>
1a002c60:	10002adc 	.word	0x10002adc
1a002c64:	1a005918 	.word	0x1a005918
1a002c68:	1a002f9d 	.word	0x1a002f9d
1a002c6c:	10002ae0 	.word	0x10002ae0

1a002c70 <xTimerCreateStatic>:
	{
1a002c70:	b530      	push	{r4, r5, lr}
1a002c72:	b085      	sub	sp, #20
1a002c74:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002c76:	2530      	movs	r5, #48	; 0x30
1a002c78:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002c7a:	9d03      	ldr	r5, [sp, #12]
1a002c7c:	2d30      	cmp	r5, #48	; 0x30
1a002c7e:	d008      	beq.n	1a002c92 <xTimerCreateStatic+0x22>
1a002c80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c84:	f383 8811 	msr	BASEPRI, r3
1a002c88:	f3bf 8f6f 	isb	sy
1a002c8c:	f3bf 8f4f 	dsb	sy
1a002c90:	e7fe      	b.n	1a002c90 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a002c92:	b944      	cbnz	r4, 1a002ca6 <xTimerCreateStatic+0x36>
1a002c94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c98:	f383 8811 	msr	BASEPRI, r3
1a002c9c:	f3bf 8f6f 	isb	sy
1a002ca0:	f3bf 8f4f 	dsb	sy
1a002ca4:	e7fe      	b.n	1a002ca4 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002ca6:	9401      	str	r4, [sp, #4]
1a002ca8:	9d08      	ldr	r5, [sp, #32]
1a002caa:	9500      	str	r5, [sp, #0]
1a002cac:	f7ff ff8e 	bl	1a002bcc <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a002cb0:	2301      	movs	r3, #1
1a002cb2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002cb6:	4620      	mov	r0, r4
1a002cb8:	b005      	add	sp, #20
1a002cba:	bd30      	pop	{r4, r5, pc}

1a002cbc <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002cbc:	b1c8      	cbz	r0, 1a002cf2 <xTimerGenericCommand+0x36>
{
1a002cbe:	b530      	push	{r4, r5, lr}
1a002cc0:	b085      	sub	sp, #20
1a002cc2:	4615      	mov	r5, r2
1a002cc4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002cc6:	4a17      	ldr	r2, [pc, #92]	; (1a002d24 <xTimerGenericCommand+0x68>)
1a002cc8:	6810      	ldr	r0, [r2, #0]
1a002cca:	b340      	cbz	r0, 1a002d1e <xTimerGenericCommand+0x62>
1a002ccc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002cce:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002cd0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002cd2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002cd4:	2905      	cmp	r1, #5
1a002cd6:	dc1d      	bgt.n	1a002d14 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002cd8:	f7ff fdda 	bl	1a002890 <xTaskGetSchedulerState>
1a002cdc:	2802      	cmp	r0, #2
1a002cde:	d011      	beq.n	1a002d04 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002ce0:	2300      	movs	r3, #0
1a002ce2:	461a      	mov	r2, r3
1a002ce4:	4669      	mov	r1, sp
1a002ce6:	480f      	ldr	r0, [pc, #60]	; (1a002d24 <xTimerGenericCommand+0x68>)
1a002ce8:	6800      	ldr	r0, [r0, #0]
1a002cea:	f7fe fd25 	bl	1a001738 <xQueueGenericSend>
}
1a002cee:	b005      	add	sp, #20
1a002cf0:	bd30      	pop	{r4, r5, pc}
1a002cf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cf6:	f383 8811 	msr	BASEPRI, r3
1a002cfa:	f3bf 8f6f 	isb	sy
1a002cfe:	f3bf 8f4f 	dsb	sy
1a002d02:	e7fe      	b.n	1a002d02 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002d04:	2300      	movs	r3, #0
1a002d06:	9a08      	ldr	r2, [sp, #32]
1a002d08:	4669      	mov	r1, sp
1a002d0a:	4806      	ldr	r0, [pc, #24]	; (1a002d24 <xTimerGenericCommand+0x68>)
1a002d0c:	6800      	ldr	r0, [r0, #0]
1a002d0e:	f7fe fd13 	bl	1a001738 <xQueueGenericSend>
1a002d12:	e7ec      	b.n	1a002cee <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002d14:	2300      	movs	r3, #0
1a002d16:	4669      	mov	r1, sp
1a002d18:	f7fe fde3 	bl	1a0018e2 <xQueueGenericSendFromISR>
1a002d1c:	e7e7      	b.n	1a002cee <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a002d1e:	2000      	movs	r0, #0
	return xReturn;
1a002d20:	e7e5      	b.n	1a002cee <xTimerGenericCommand+0x32>
1a002d22:	bf00      	nop
1a002d24:	10002adc 	.word	0x10002adc

1a002d28 <prvSwitchTimerLists>:
{
1a002d28:	b570      	push	{r4, r5, r6, lr}
1a002d2a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002d2c:	4b1a      	ldr	r3, [pc, #104]	; (1a002d98 <prvSwitchTimerLists+0x70>)
1a002d2e:	681b      	ldr	r3, [r3, #0]
1a002d30:	681a      	ldr	r2, [r3, #0]
1a002d32:	b352      	cbz	r2, 1a002d8a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002d34:	68db      	ldr	r3, [r3, #12]
1a002d36:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002d38:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002d3a:	1d25      	adds	r5, r4, #4
1a002d3c:	4628      	mov	r0, r5
1a002d3e:	f7ff f87a 	bl	1a001e36 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002d44:	4620      	mov	r0, r4
1a002d46:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002d48:	69e3      	ldr	r3, [r4, #28]
1a002d4a:	2b01      	cmp	r3, #1
1a002d4c:	d1ee      	bne.n	1a002d2c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002d4e:	69a3      	ldr	r3, [r4, #24]
1a002d50:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002d52:	429e      	cmp	r6, r3
1a002d54:	d207      	bcs.n	1a002d66 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002d56:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002d58:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002d5a:	4629      	mov	r1, r5
1a002d5c:	4b0e      	ldr	r3, [pc, #56]	; (1a002d98 <prvSwitchTimerLists+0x70>)
1a002d5e:	6818      	ldr	r0, [r3, #0]
1a002d60:	f7ff f84f 	bl	1a001e02 <vListInsert>
1a002d64:	e7e2      	b.n	1a002d2c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002d66:	2100      	movs	r1, #0
1a002d68:	9100      	str	r1, [sp, #0]
1a002d6a:	460b      	mov	r3, r1
1a002d6c:	4632      	mov	r2, r6
1a002d6e:	4620      	mov	r0, r4
1a002d70:	f7ff ffa4 	bl	1a002cbc <xTimerGenericCommand>
				configASSERT( xResult );
1a002d74:	2800      	cmp	r0, #0
1a002d76:	d1d9      	bne.n	1a002d2c <prvSwitchTimerLists+0x4>
1a002d78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d7c:	f383 8811 	msr	BASEPRI, r3
1a002d80:	f3bf 8f6f 	isb	sy
1a002d84:	f3bf 8f4f 	dsb	sy
1a002d88:	e7fe      	b.n	1a002d88 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002d8a:	4a04      	ldr	r2, [pc, #16]	; (1a002d9c <prvSwitchTimerLists+0x74>)
1a002d8c:	6810      	ldr	r0, [r2, #0]
1a002d8e:	4902      	ldr	r1, [pc, #8]	; (1a002d98 <prvSwitchTimerLists+0x70>)
1a002d90:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002d92:	6013      	str	r3, [r2, #0]
}
1a002d94:	b002      	add	sp, #8
1a002d96:	bd70      	pop	{r4, r5, r6, pc}
1a002d98:	100029b8 	.word	0x100029b8
1a002d9c:	100029bc 	.word	0x100029bc

1a002da0 <prvSampleTimeNow>:
{
1a002da0:	b538      	push	{r3, r4, r5, lr}
1a002da2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002da4:	f7ff fac0 	bl	1a002328 <xTaskGetTickCount>
1a002da8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002daa:	4b07      	ldr	r3, [pc, #28]	; (1a002dc8 <prvSampleTimeNow+0x28>)
1a002dac:	681b      	ldr	r3, [r3, #0]
1a002dae:	4283      	cmp	r3, r0
1a002db0:	d805      	bhi.n	1a002dbe <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002db2:	2300      	movs	r3, #0
1a002db4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002db6:	4b04      	ldr	r3, [pc, #16]	; (1a002dc8 <prvSampleTimeNow+0x28>)
1a002db8:	601c      	str	r4, [r3, #0]
}
1a002dba:	4620      	mov	r0, r4
1a002dbc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002dbe:	f7ff ffb3 	bl	1a002d28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002dc2:	2301      	movs	r3, #1
1a002dc4:	602b      	str	r3, [r5, #0]
1a002dc6:	e7f6      	b.n	1a002db6 <prvSampleTimeNow+0x16>
1a002dc8:	10002a88 	.word	0x10002a88

1a002dcc <prvProcessExpiredTimer>:
{
1a002dcc:	b570      	push	{r4, r5, r6, lr}
1a002dce:	b082      	sub	sp, #8
1a002dd0:	4605      	mov	r5, r0
1a002dd2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002dd4:	4b14      	ldr	r3, [pc, #80]	; (1a002e28 <prvProcessExpiredTimer+0x5c>)
1a002dd6:	681b      	ldr	r3, [r3, #0]
1a002dd8:	68db      	ldr	r3, [r3, #12]
1a002dda:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002ddc:	1d20      	adds	r0, r4, #4
1a002dde:	f7ff f82a 	bl	1a001e36 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002de2:	69e3      	ldr	r3, [r4, #28]
1a002de4:	2b01      	cmp	r3, #1
1a002de6:	d004      	beq.n	1a002df2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002dea:	4620      	mov	r0, r4
1a002dec:	4798      	blx	r3
}
1a002dee:	b002      	add	sp, #8
1a002df0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002df2:	69a1      	ldr	r1, [r4, #24]
1a002df4:	462b      	mov	r3, r5
1a002df6:	4632      	mov	r2, r6
1a002df8:	4429      	add	r1, r5
1a002dfa:	4620      	mov	r0, r4
1a002dfc:	f7ff fe8a 	bl	1a002b14 <prvInsertTimerInActiveList>
1a002e00:	2800      	cmp	r0, #0
1a002e02:	d0f1      	beq.n	1a002de8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002e04:	2100      	movs	r1, #0
1a002e06:	9100      	str	r1, [sp, #0]
1a002e08:	460b      	mov	r3, r1
1a002e0a:	462a      	mov	r2, r5
1a002e0c:	4620      	mov	r0, r4
1a002e0e:	f7ff ff55 	bl	1a002cbc <xTimerGenericCommand>
			configASSERT( xResult );
1a002e12:	2800      	cmp	r0, #0
1a002e14:	d1e8      	bne.n	1a002de8 <prvProcessExpiredTimer+0x1c>
1a002e16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e1a:	f383 8811 	msr	BASEPRI, r3
1a002e1e:	f3bf 8f6f 	isb	sy
1a002e22:	f3bf 8f4f 	dsb	sy
1a002e26:	e7fe      	b.n	1a002e26 <prvProcessExpiredTimer+0x5a>
1a002e28:	100029b8 	.word	0x100029b8

1a002e2c <prvProcessTimerOrBlockTask>:
{
1a002e2c:	b570      	push	{r4, r5, r6, lr}
1a002e2e:	b082      	sub	sp, #8
1a002e30:	4606      	mov	r6, r0
1a002e32:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002e34:	f7ff fa70 	bl	1a002318 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002e38:	a801      	add	r0, sp, #4
1a002e3a:	f7ff ffb1 	bl	1a002da0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002e3e:	9b01      	ldr	r3, [sp, #4]
1a002e40:	bb1b      	cbnz	r3, 1a002e8a <prvProcessTimerOrBlockTask+0x5e>
1a002e42:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002e44:	b90c      	cbnz	r4, 1a002e4a <prvProcessTimerOrBlockTask+0x1e>
1a002e46:	42b0      	cmp	r0, r6
1a002e48:	d218      	bcs.n	1a002e7c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002e4a:	b12c      	cbz	r4, 1a002e58 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002e4c:	4b11      	ldr	r3, [pc, #68]	; (1a002e94 <prvProcessTimerOrBlockTask+0x68>)
1a002e4e:	681b      	ldr	r3, [r3, #0]
1a002e50:	681c      	ldr	r4, [r3, #0]
1a002e52:	fab4 f484 	clz	r4, r4
1a002e56:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002e58:	4622      	mov	r2, r4
1a002e5a:	1b71      	subs	r1, r6, r5
1a002e5c:	4b0e      	ldr	r3, [pc, #56]	; (1a002e98 <prvProcessTimerOrBlockTask+0x6c>)
1a002e5e:	6818      	ldr	r0, [r3, #0]
1a002e60:	f7fe ff8c 	bl	1a001d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002e64:	f7ff faf2 	bl	1a00244c <xTaskResumeAll>
1a002e68:	b988      	cbnz	r0, 1a002e8e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002e6a:	4b0c      	ldr	r3, [pc, #48]	; (1a002e9c <prvProcessTimerOrBlockTask+0x70>)
1a002e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002e70:	601a      	str	r2, [r3, #0]
1a002e72:	f3bf 8f4f 	dsb	sy
1a002e76:	f3bf 8f6f 	isb	sy
1a002e7a:	e008      	b.n	1a002e8e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002e7c:	f7ff fae6 	bl	1a00244c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002e80:	4629      	mov	r1, r5
1a002e82:	4630      	mov	r0, r6
1a002e84:	f7ff ffa2 	bl	1a002dcc <prvProcessExpiredTimer>
1a002e88:	e001      	b.n	1a002e8e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002e8a:	f7ff fadf 	bl	1a00244c <xTaskResumeAll>
}
1a002e8e:	b002      	add	sp, #8
1a002e90:	bd70      	pop	{r4, r5, r6, pc}
1a002e92:	bf00      	nop
1a002e94:	100029bc 	.word	0x100029bc
1a002e98:	10002adc 	.word	0x10002adc
1a002e9c:	e000ed04 	.word	0xe000ed04

1a002ea0 <prvProcessReceivedCommands>:
{
1a002ea0:	b530      	push	{r4, r5, lr}
1a002ea2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002ea4:	e002      	b.n	1a002eac <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002ea6:	9b04      	ldr	r3, [sp, #16]
1a002ea8:	2b00      	cmp	r3, #0
1a002eaa:	da0f      	bge.n	1a002ecc <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002eac:	2200      	movs	r2, #0
1a002eae:	a904      	add	r1, sp, #16
1a002eb0:	4b39      	ldr	r3, [pc, #228]	; (1a002f98 <prvProcessReceivedCommands+0xf8>)
1a002eb2:	6818      	ldr	r0, [r3, #0]
1a002eb4:	f7fe fdd4 	bl	1a001a60 <xQueueReceive>
1a002eb8:	2800      	cmp	r0, #0
1a002eba:	d06a      	beq.n	1a002f92 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002ebc:	9b04      	ldr	r3, [sp, #16]
1a002ebe:	2b00      	cmp	r3, #0
1a002ec0:	daf1      	bge.n	1a002ea6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002ec2:	9907      	ldr	r1, [sp, #28]
1a002ec4:	9806      	ldr	r0, [sp, #24]
1a002ec6:	9b05      	ldr	r3, [sp, #20]
1a002ec8:	4798      	blx	r3
1a002eca:	e7ec      	b.n	1a002ea6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002ecc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002ece:	6963      	ldr	r3, [r4, #20]
1a002ed0:	b113      	cbz	r3, 1a002ed8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002ed2:	1d20      	adds	r0, r4, #4
1a002ed4:	f7fe ffaf 	bl	1a001e36 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002ed8:	a803      	add	r0, sp, #12
1a002eda:	f7ff ff61 	bl	1a002da0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002ede:	9b04      	ldr	r3, [sp, #16]
1a002ee0:	2b09      	cmp	r3, #9
1a002ee2:	d8e3      	bhi.n	1a002eac <prvProcessReceivedCommands+0xc>
1a002ee4:	a201      	add	r2, pc, #4	; (adr r2, 1a002eec <prvProcessReceivedCommands+0x4c>)
1a002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002eea:	bf00      	nop
1a002eec:	1a002f15 	.word	0x1a002f15
1a002ef0:	1a002f15 	.word	0x1a002f15
1a002ef4:	1a002f15 	.word	0x1a002f15
1a002ef8:	1a002ead 	.word	0x1a002ead
1a002efc:	1a002f5d 	.word	0x1a002f5d
1a002f00:	1a002f83 	.word	0x1a002f83
1a002f04:	1a002f15 	.word	0x1a002f15
1a002f08:	1a002f15 	.word	0x1a002f15
1a002f0c:	1a002ead 	.word	0x1a002ead
1a002f10:	1a002f5d 	.word	0x1a002f5d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002f14:	9905      	ldr	r1, [sp, #20]
1a002f16:	69a5      	ldr	r5, [r4, #24]
1a002f18:	460b      	mov	r3, r1
1a002f1a:	4602      	mov	r2, r0
1a002f1c:	4429      	add	r1, r5
1a002f1e:	4620      	mov	r0, r4
1a002f20:	f7ff fdf8 	bl	1a002b14 <prvInsertTimerInActiveList>
1a002f24:	2800      	cmp	r0, #0
1a002f26:	d0c1      	beq.n	1a002eac <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002f2a:	4620      	mov	r0, r4
1a002f2c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002f2e:	69e3      	ldr	r3, [r4, #28]
1a002f30:	2b01      	cmp	r3, #1
1a002f32:	d1bb      	bne.n	1a002eac <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002f34:	69a2      	ldr	r2, [r4, #24]
1a002f36:	2100      	movs	r1, #0
1a002f38:	9100      	str	r1, [sp, #0]
1a002f3a:	460b      	mov	r3, r1
1a002f3c:	9805      	ldr	r0, [sp, #20]
1a002f3e:	4402      	add	r2, r0
1a002f40:	4620      	mov	r0, r4
1a002f42:	f7ff febb 	bl	1a002cbc <xTimerGenericCommand>
							configASSERT( xResult );
1a002f46:	2800      	cmp	r0, #0
1a002f48:	d1b0      	bne.n	1a002eac <prvProcessReceivedCommands+0xc>
1a002f4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f4e:	f383 8811 	msr	BASEPRI, r3
1a002f52:	f3bf 8f6f 	isb	sy
1a002f56:	f3bf 8f4f 	dsb	sy
1a002f5a:	e7fe      	b.n	1a002f5a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002f5c:	9905      	ldr	r1, [sp, #20]
1a002f5e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002f60:	b131      	cbz	r1, 1a002f70 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002f62:	4603      	mov	r3, r0
1a002f64:	4602      	mov	r2, r0
1a002f66:	4401      	add	r1, r0
1a002f68:	4620      	mov	r0, r4
1a002f6a:	f7ff fdd3 	bl	1a002b14 <prvInsertTimerInActiveList>
					break;
1a002f6e:	e79d      	b.n	1a002eac <prvProcessReceivedCommands+0xc>
1a002f70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f74:	f383 8811 	msr	BASEPRI, r3
1a002f78:	f3bf 8f6f 	isb	sy
1a002f7c:	f3bf 8f4f 	dsb	sy
1a002f80:	e7fe      	b.n	1a002f80 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002f82:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002f86:	2b00      	cmp	r3, #0
1a002f88:	d190      	bne.n	1a002eac <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002f8a:	4620      	mov	r0, r4
1a002f8c:	f7fe fa5e 	bl	1a00144c <vPortFree>
1a002f90:	e78c      	b.n	1a002eac <prvProcessReceivedCommands+0xc>
}
1a002f92:	b009      	add	sp, #36	; 0x24
1a002f94:	bd30      	pop	{r4, r5, pc}
1a002f96:	bf00      	nop
1a002f98:	10002adc 	.word	0x10002adc

1a002f9c <prvTimerTask>:
{
1a002f9c:	b500      	push	{lr}
1a002f9e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002fa0:	a801      	add	r0, sp, #4
1a002fa2:	f7ff fda7 	bl	1a002af4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002fa6:	9901      	ldr	r1, [sp, #4]
1a002fa8:	f7ff ff40 	bl	1a002e2c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002fac:	f7ff ff78 	bl	1a002ea0 <prvProcessReceivedCommands>
1a002fb0:	e7f6      	b.n	1a002fa0 <prvTimerTask+0x4>
1a002fb2:	Address 0x000000001a002fb2 is out of bounds.


1a002fb4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002fb4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002fb6:	2300      	movs	r3, #0
1a002fb8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002fba:	4b0d      	ldr	r3, [pc, #52]	; (1a002ff0 <prvTaskExitError+0x3c>)
1a002fbc:	681b      	ldr	r3, [r3, #0]
1a002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002fc2:	d008      	beq.n	1a002fd6 <prvTaskExitError+0x22>
1a002fc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fc8:	f383 8811 	msr	BASEPRI, r3
1a002fcc:	f3bf 8f6f 	isb	sy
1a002fd0:	f3bf 8f4f 	dsb	sy
1a002fd4:	e7fe      	b.n	1a002fd4 <prvTaskExitError+0x20>
1a002fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fda:	f383 8811 	msr	BASEPRI, r3
1a002fde:	f3bf 8f6f 	isb	sy
1a002fe2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002fe6:	9b01      	ldr	r3, [sp, #4]
1a002fe8:	2b00      	cmp	r3, #0
1a002fea:	d0fc      	beq.n	1a002fe6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002fec:	b002      	add	sp, #8
1a002fee:	4770      	bx	lr
1a002ff0:	10000000 	.word	0x10000000

1a002ff4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002ff4:	4808      	ldr	r0, [pc, #32]	; (1a003018 <prvPortStartFirstTask+0x24>)
1a002ff6:	6800      	ldr	r0, [r0, #0]
1a002ff8:	6800      	ldr	r0, [r0, #0]
1a002ffa:	f380 8808 	msr	MSP, r0
1a002ffe:	f04f 0000 	mov.w	r0, #0
1a003002:	f380 8814 	msr	CONTROL, r0
1a003006:	b662      	cpsie	i
1a003008:	b661      	cpsie	f
1a00300a:	f3bf 8f4f 	dsb	sy
1a00300e:	f3bf 8f6f 	isb	sy
1a003012:	df00      	svc	0
1a003014:	bf00      	nop
1a003016:	0000      	.short	0x0000
1a003018:	e000ed08 	.word	0xe000ed08

1a00301c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a00301c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a00302c <vPortEnableVFP+0x10>
1a003020:	6801      	ldr	r1, [r0, #0]
1a003022:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003026:	6001      	str	r1, [r0, #0]
1a003028:	4770      	bx	lr
1a00302a:	0000      	.short	0x0000
1a00302c:	e000ed88 	.word	0xe000ed88

1a003030 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a003030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a003034:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a003038:	f021 0101 	bic.w	r1, r1, #1
1a00303c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a003040:	4b05      	ldr	r3, [pc, #20]	; (1a003058 <pxPortInitialiseStack+0x28>)
1a003042:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a003046:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00304a:	f06f 0302 	mvn.w	r3, #2
1a00304e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a003052:	3844      	subs	r0, #68	; 0x44
1a003054:	4770      	bx	lr
1a003056:	bf00      	nop
1a003058:	1a002fb5 	.word	0x1a002fb5
1a00305c:	ffffffff 	.word	0xffffffff

1a003060 <SVC_Handler>:
	__asm volatile (
1a003060:	4b07      	ldr	r3, [pc, #28]	; (1a003080 <pxCurrentTCBConst2>)
1a003062:	6819      	ldr	r1, [r3, #0]
1a003064:	6808      	ldr	r0, [r1, #0]
1a003066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00306a:	f380 8809 	msr	PSP, r0
1a00306e:	f3bf 8f6f 	isb	sy
1a003072:	f04f 0000 	mov.w	r0, #0
1a003076:	f380 8811 	msr	BASEPRI, r0
1a00307a:	4770      	bx	lr
1a00307c:	f3af 8000 	nop.w

1a003080 <pxCurrentTCBConst2>:
1a003080:	10002890 	.word	0x10002890

1a003084 <vPortEnterCritical>:
1a003084:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003088:	f383 8811 	msr	BASEPRI, r3
1a00308c:	f3bf 8f6f 	isb	sy
1a003090:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a003094:	4a0a      	ldr	r2, [pc, #40]	; (1a0030c0 <vPortEnterCritical+0x3c>)
1a003096:	6813      	ldr	r3, [r2, #0]
1a003098:	3301      	adds	r3, #1
1a00309a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00309c:	2b01      	cmp	r3, #1
1a00309e:	d000      	beq.n	1a0030a2 <vPortEnterCritical+0x1e>
}
1a0030a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0030a2:	4b08      	ldr	r3, [pc, #32]	; (1a0030c4 <vPortEnterCritical+0x40>)
1a0030a4:	681b      	ldr	r3, [r3, #0]
1a0030a6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0030aa:	d0f9      	beq.n	1a0030a0 <vPortEnterCritical+0x1c>
1a0030ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030b0:	f383 8811 	msr	BASEPRI, r3
1a0030b4:	f3bf 8f6f 	isb	sy
1a0030b8:	f3bf 8f4f 	dsb	sy
1a0030bc:	e7fe      	b.n	1a0030bc <vPortEnterCritical+0x38>
1a0030be:	bf00      	nop
1a0030c0:	10000000 	.word	0x10000000
1a0030c4:	e000ed04 	.word	0xe000ed04

1a0030c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0030c8:	4b09      	ldr	r3, [pc, #36]	; (1a0030f0 <vPortExitCritical+0x28>)
1a0030ca:	681b      	ldr	r3, [r3, #0]
1a0030cc:	b943      	cbnz	r3, 1a0030e0 <vPortExitCritical+0x18>
1a0030ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030d2:	f383 8811 	msr	BASEPRI, r3
1a0030d6:	f3bf 8f6f 	isb	sy
1a0030da:	f3bf 8f4f 	dsb	sy
1a0030de:	e7fe      	b.n	1a0030de <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0030e0:	3b01      	subs	r3, #1
1a0030e2:	4a03      	ldr	r2, [pc, #12]	; (1a0030f0 <vPortExitCritical+0x28>)
1a0030e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0030e6:	b90b      	cbnz	r3, 1a0030ec <vPortExitCritical+0x24>
	__asm volatile
1a0030e8:	f383 8811 	msr	BASEPRI, r3
}
1a0030ec:	4770      	bx	lr
1a0030ee:	bf00      	nop
1a0030f0:	10000000 	.word	0x10000000
1a0030f4:	ffffffff 	.word	0xffffffff
1a0030f8:	ffffffff 	.word	0xffffffff
1a0030fc:	ffffffff 	.word	0xffffffff

1a003100 <PendSV_Handler>:
	__asm volatile
1a003100:	f3ef 8009 	mrs	r0, PSP
1a003104:	f3bf 8f6f 	isb	sy
1a003108:	4b15      	ldr	r3, [pc, #84]	; (1a003160 <pxCurrentTCBConst>)
1a00310a:	681a      	ldr	r2, [r3, #0]
1a00310c:	f01e 0f10 	tst.w	lr, #16
1a003110:	bf08      	it	eq
1a003112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a003116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00311a:	6010      	str	r0, [r2, #0]
1a00311c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a003120:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a003124:	f380 8811 	msr	BASEPRI, r0
1a003128:	f3bf 8f4f 	dsb	sy
1a00312c:	f3bf 8f6f 	isb	sy
1a003130:	f7ff fa7e 	bl	1a002630 <vTaskSwitchContext>
1a003134:	f04f 0000 	mov.w	r0, #0
1a003138:	f380 8811 	msr	BASEPRI, r0
1a00313c:	bc09      	pop	{r0, r3}
1a00313e:	6819      	ldr	r1, [r3, #0]
1a003140:	6808      	ldr	r0, [r1, #0]
1a003142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003146:	f01e 0f10 	tst.w	lr, #16
1a00314a:	bf08      	it	eq
1a00314c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a003150:	f380 8809 	msr	PSP, r0
1a003154:	f3bf 8f6f 	isb	sy
1a003158:	4770      	bx	lr
1a00315a:	bf00      	nop
1a00315c:	f3af 8000 	nop.w

1a003160 <pxCurrentTCBConst>:
1a003160:	10002890 	.word	0x10002890

1a003164 <SysTick_Handler>:
{
1a003164:	b508      	push	{r3, lr}
	__asm volatile
1a003166:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00316a:	f383 8811 	msr	BASEPRI, r3
1a00316e:	f3bf 8f6f 	isb	sy
1a003172:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a003176:	f7ff f8dd 	bl	1a002334 <xTaskIncrementTick>
1a00317a:	b118      	cbz	r0, 1a003184 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00317c:	4b03      	ldr	r3, [pc, #12]	; (1a00318c <SysTick_Handler+0x28>)
1a00317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003182:	601a      	str	r2, [r3, #0]
	__asm volatile
1a003184:	2300      	movs	r3, #0
1a003186:	f383 8811 	msr	BASEPRI, r3
}
1a00318a:	bd08      	pop	{r3, pc}
1a00318c:	e000ed04 	.word	0xe000ed04

1a003190 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a003190:	4a08      	ldr	r2, [pc, #32]	; (1a0031b4 <vPortSetupTimerInterrupt+0x24>)
1a003192:	2300      	movs	r3, #0
1a003194:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a003196:	4908      	ldr	r1, [pc, #32]	; (1a0031b8 <vPortSetupTimerInterrupt+0x28>)
1a003198:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00319a:	4b08      	ldr	r3, [pc, #32]	; (1a0031bc <vPortSetupTimerInterrupt+0x2c>)
1a00319c:	681b      	ldr	r3, [r3, #0]
1a00319e:	4908      	ldr	r1, [pc, #32]	; (1a0031c0 <vPortSetupTimerInterrupt+0x30>)
1a0031a0:	fba1 1303 	umull	r1, r3, r1, r3
1a0031a4:	099b      	lsrs	r3, r3, #6
1a0031a6:	3b01      	subs	r3, #1
1a0031a8:	4906      	ldr	r1, [pc, #24]	; (1a0031c4 <vPortSetupTimerInterrupt+0x34>)
1a0031aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0031ac:	2307      	movs	r3, #7
1a0031ae:	6013      	str	r3, [r2, #0]
}
1a0031b0:	4770      	bx	lr
1a0031b2:	bf00      	nop
1a0031b4:	e000e010 	.word	0xe000e010
1a0031b8:	e000e018 	.word	0xe000e018
1a0031bc:	10002bb4 	.word	0x10002bb4
1a0031c0:	10624dd3 	.word	0x10624dd3
1a0031c4:	e000e014 	.word	0xe000e014

1a0031c8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0031c8:	4b3a      	ldr	r3, [pc, #232]	; (1a0032b4 <xPortStartScheduler+0xec>)
1a0031ca:	681a      	ldr	r2, [r3, #0]
1a0031cc:	4b3a      	ldr	r3, [pc, #232]	; (1a0032b8 <xPortStartScheduler+0xf0>)
1a0031ce:	429a      	cmp	r2, r3
1a0031d0:	d00d      	beq.n	1a0031ee <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0031d2:	4b38      	ldr	r3, [pc, #224]	; (1a0032b4 <xPortStartScheduler+0xec>)
1a0031d4:	681a      	ldr	r2, [r3, #0]
1a0031d6:	4b39      	ldr	r3, [pc, #228]	; (1a0032bc <xPortStartScheduler+0xf4>)
1a0031d8:	429a      	cmp	r2, r3
1a0031da:	d111      	bne.n	1a003200 <xPortStartScheduler+0x38>
	__asm volatile
1a0031dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0031e0:	f383 8811 	msr	BASEPRI, r3
1a0031e4:	f3bf 8f6f 	isb	sy
1a0031e8:	f3bf 8f4f 	dsb	sy
1a0031ec:	e7fe      	b.n	1a0031ec <xPortStartScheduler+0x24>
1a0031ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0031f2:	f383 8811 	msr	BASEPRI, r3
1a0031f6:	f3bf 8f6f 	isb	sy
1a0031fa:	f3bf 8f4f 	dsb	sy
1a0031fe:	e7fe      	b.n	1a0031fe <xPortStartScheduler+0x36>
{
1a003200:	b510      	push	{r4, lr}
1a003202:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a003204:	4b2e      	ldr	r3, [pc, #184]	; (1a0032c0 <xPortStartScheduler+0xf8>)
1a003206:	781a      	ldrb	r2, [r3, #0]
1a003208:	b2d2      	uxtb	r2, r2
1a00320a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00320c:	22ff      	movs	r2, #255	; 0xff
1a00320e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a003210:	781b      	ldrb	r3, [r3, #0]
1a003212:	b2db      	uxtb	r3, r3
1a003214:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a003218:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00321c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a003220:	4a28      	ldr	r2, [pc, #160]	; (1a0032c4 <xPortStartScheduler+0xfc>)
1a003222:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a003224:	4b28      	ldr	r3, [pc, #160]	; (1a0032c8 <xPortStartScheduler+0x100>)
1a003226:	2207      	movs	r2, #7
1a003228:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00322a:	e009      	b.n	1a003240 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00322c:	4a26      	ldr	r2, [pc, #152]	; (1a0032c8 <xPortStartScheduler+0x100>)
1a00322e:	6813      	ldr	r3, [r2, #0]
1a003230:	3b01      	subs	r3, #1
1a003232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a003234:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003238:	005b      	lsls	r3, r3, #1
1a00323a:	b2db      	uxtb	r3, r3
1a00323c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a003240:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003244:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003248:	d1f0      	bne.n	1a00322c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00324a:	4b1f      	ldr	r3, [pc, #124]	; (1a0032c8 <xPortStartScheduler+0x100>)
1a00324c:	681b      	ldr	r3, [r3, #0]
1a00324e:	2b04      	cmp	r3, #4
1a003250:	d008      	beq.n	1a003264 <xPortStartScheduler+0x9c>
1a003252:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003256:	f383 8811 	msr	BASEPRI, r3
1a00325a:	f3bf 8f6f 	isb	sy
1a00325e:	f3bf 8f4f 	dsb	sy
1a003262:	e7fe      	b.n	1a003262 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a003264:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a003266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00326a:	4a17      	ldr	r2, [pc, #92]	; (1a0032c8 <xPortStartScheduler+0x100>)
1a00326c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00326e:	9b01      	ldr	r3, [sp, #4]
1a003270:	b2db      	uxtb	r3, r3
1a003272:	4a13      	ldr	r2, [pc, #76]	; (1a0032c0 <xPortStartScheduler+0xf8>)
1a003274:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a003276:	4b15      	ldr	r3, [pc, #84]	; (1a0032cc <xPortStartScheduler+0x104>)
1a003278:	681a      	ldr	r2, [r3, #0]
1a00327a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00327e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a003280:	681a      	ldr	r2, [r3, #0]
1a003282:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a003286:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a003288:	f7ff ff82 	bl	1a003190 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00328c:	2400      	movs	r4, #0
1a00328e:	4b10      	ldr	r3, [pc, #64]	; (1a0032d0 <xPortStartScheduler+0x108>)
1a003290:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a003292:	f7ff fec3 	bl	1a00301c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a003296:	4a0f      	ldr	r2, [pc, #60]	; (1a0032d4 <xPortStartScheduler+0x10c>)
1a003298:	6813      	ldr	r3, [r2, #0]
1a00329a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00329e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0032a0:	f7ff fea8 	bl	1a002ff4 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0032a4:	f7ff f9c4 	bl	1a002630 <vTaskSwitchContext>
	prvTaskExitError();
1a0032a8:	f7ff fe84 	bl	1a002fb4 <prvTaskExitError>
}
1a0032ac:	4620      	mov	r0, r4
1a0032ae:	b002      	add	sp, #8
1a0032b0:	bd10      	pop	{r4, pc}
1a0032b2:	bf00      	nop
1a0032b4:	e000ed00 	.word	0xe000ed00
1a0032b8:	410fc271 	.word	0x410fc271
1a0032bc:	410fc270 	.word	0x410fc270
1a0032c0:	e000e400 	.word	0xe000e400
1a0032c4:	10002ae4 	.word	0x10002ae4
1a0032c8:	10002ae8 	.word	0x10002ae8
1a0032cc:	e000ed20 	.word	0xe000ed20
1a0032d0:	10000000 	.word	0x10000000
1a0032d4:	e000ef34 	.word	0xe000ef34

1a0032d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0032d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0032dc:	2b0f      	cmp	r3, #15
1a0032de:	d90f      	bls.n	1a003300 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0032e0:	4a10      	ldr	r2, [pc, #64]	; (1a003324 <vPortValidateInterruptPriority+0x4c>)
1a0032e2:	5c9b      	ldrb	r3, [r3, r2]
1a0032e4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0032e6:	4a10      	ldr	r2, [pc, #64]	; (1a003328 <vPortValidateInterruptPriority+0x50>)
1a0032e8:	7812      	ldrb	r2, [r2, #0]
1a0032ea:	429a      	cmp	r2, r3
1a0032ec:	d908      	bls.n	1a003300 <vPortValidateInterruptPriority+0x28>
1a0032ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0032f2:	f383 8811 	msr	BASEPRI, r3
1a0032f6:	f3bf 8f6f 	isb	sy
1a0032fa:	f3bf 8f4f 	dsb	sy
1a0032fe:	e7fe      	b.n	1a0032fe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a003300:	4b0a      	ldr	r3, [pc, #40]	; (1a00332c <vPortValidateInterruptPriority+0x54>)
1a003302:	681b      	ldr	r3, [r3, #0]
1a003304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a003308:	4a09      	ldr	r2, [pc, #36]	; (1a003330 <vPortValidateInterruptPriority+0x58>)
1a00330a:	6812      	ldr	r2, [r2, #0]
1a00330c:	4293      	cmp	r3, r2
1a00330e:	d908      	bls.n	1a003322 <vPortValidateInterruptPriority+0x4a>
1a003310:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003314:	f383 8811 	msr	BASEPRI, r3
1a003318:	f3bf 8f6f 	isb	sy
1a00331c:	f3bf 8f4f 	dsb	sy
1a003320:	e7fe      	b.n	1a003320 <vPortValidateInterruptPriority+0x48>
	}
1a003322:	4770      	bx	lr
1a003324:	e000e3f0 	.word	0xe000e3f0
1a003328:	10002ae4 	.word	0x10002ae4
1a00332c:	e000ed0c 	.word	0xe000ed0c
1a003330:	10002ae8 	.word	0x10002ae8

1a003334 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003334:	4b04      	ldr	r3, [pc, #16]	; (1a003348 <cyclesCounterInit+0x14>)
1a003336:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a003338:	4b04      	ldr	r3, [pc, #16]	; (1a00334c <cyclesCounterInit+0x18>)
1a00333a:	681a      	ldr	r2, [r3, #0]
1a00333c:	6813      	ldr	r3, [r2, #0]
1a00333e:	f043 0301 	orr.w	r3, r3, #1
1a003342:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003344:	2001      	movs	r0, #1
1a003346:	4770      	bx	lr
1a003348:	10000004 	.word	0x10000004
1a00334c:	10000008 	.word	0x10000008

1a003350 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003350:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003354:	0083      	lsls	r3, r0, #2
1a003356:	4a03      	ldr	r2, [pc, #12]	; (1a003364 <uartTxReady+0x14>)
1a003358:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00335a:	6958      	ldr	r0, [r3, #20]
}
1a00335c:	f000 0020 	and.w	r0, r0, #32
1a003360:	4770      	bx	lr
1a003362:	bf00      	nop
1a003364:	1a005920 	.word	0x1a005920

1a003368 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003368:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00336c:	0083      	lsls	r3, r0, #2
1a00336e:	4a02      	ldr	r2, [pc, #8]	; (1a003378 <uartTxWrite+0x10>)
1a003370:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a003372:	6019      	str	r1, [r3, #0]
}
1a003374:	4770      	bx	lr
1a003376:	bf00      	nop
1a003378:	1a005920 	.word	0x1a005920

1a00337c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a00337c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003380:	4680      	mov	r8, r0
1a003382:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003384:	4c19      	ldr	r4, [pc, #100]	; (1a0033ec <uartInit+0x70>)
1a003386:	0045      	lsls	r5, r0, #1
1a003388:	182a      	adds	r2, r5, r0
1a00338a:	0093      	lsls	r3, r2, #2
1a00338c:	18e6      	adds	r6, r4, r3
1a00338e:	58e7      	ldr	r7, [r4, r3]
1a003390:	4638      	mov	r0, r7
1a003392:	f000 fcaf 	bl	1a003cf4 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003396:	4649      	mov	r1, r9
1a003398:	4638      	mov	r0, r7
1a00339a:	f000 fcd5 	bl	1a003d48 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00339e:	2307      	movs	r3, #7
1a0033a0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0033a2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0033a4:	2301      	movs	r3, #1
1a0033a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0033a8:	7930      	ldrb	r0, [r6, #4]
1a0033aa:	7973      	ldrb	r3, [r6, #5]
1a0033ac:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0033ae:	f042 0218 	orr.w	r2, r2, #24
1a0033b2:	490f      	ldr	r1, [pc, #60]	; (1a0033f0 <uartInit+0x74>)
1a0033b4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0033b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0033bc:	79f0      	ldrb	r0, [r6, #7]
1a0033be:	7a33      	ldrb	r3, [r6, #8]
1a0033c0:	7a72      	ldrb	r2, [r6, #9]
1a0033c2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0033c6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0033ce:	f1b8 0f01 	cmp.w	r8, #1
1a0033d2:	d001      	beq.n	1a0033d8 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0033d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0033d8:	4a06      	ldr	r2, [pc, #24]	; (1a0033f4 <uartInit+0x78>)
1a0033da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0033dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0033e0:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0033e2:	221a      	movs	r2, #26
1a0033e4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0033e8:	e7f4      	b.n	1a0033d4 <uartInit+0x58>
1a0033ea:	bf00      	nop
1a0033ec:	1a005920 	.word	0x1a005920
1a0033f0:	40086000 	.word	0x40086000
1a0033f4:	40081000 	.word	0x40081000

1a0033f8 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0033f8:	b538      	push	{r3, r4, r5, lr}
1a0033fa:	4604      	mov	r4, r0
1a0033fc:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0033fe:	4620      	mov	r0, r4
1a003400:	f7ff ffa6 	bl	1a003350 <uartTxReady>
1a003404:	2800      	cmp	r0, #0
1a003406:	d0fa      	beq.n	1a0033fe <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a003408:	4629      	mov	r1, r5
1a00340a:	4620      	mov	r0, r4
1a00340c:	f7ff ffac 	bl	1a003368 <uartTxWrite>
}
1a003410:	bd38      	pop	{r3, r4, r5, pc}

1a003412 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a003412:	b538      	push	{r3, r4, r5, lr}
1a003414:	4605      	mov	r5, r0
1a003416:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003418:	e003      	b.n	1a003422 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a00341a:	4628      	mov	r0, r5
1a00341c:	f7ff ffec 	bl	1a0033f8 <uartWriteByte>
      str++;
1a003420:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003422:	7821      	ldrb	r1, [r4, #0]
1a003424:	2900      	cmp	r1, #0
1a003426:	d1f8      	bne.n	1a00341a <uartWriteString+0x8>
   }
}
1a003428:	bd38      	pop	{r3, r4, r5, pc}
1a00342a:	Address 0x000000001a00342a is out of bounds.


1a00342c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00342c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003430:	4908      	ldr	r1, [pc, #32]	; (1a003454 <tickerCallback+0x28>)
1a003432:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003436:	f112 0b01 	adds.w	fp, r2, #1
1a00343a:	f143 0c00 	adc.w	ip, r3, #0
1a00343e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003442:	4b05      	ldr	r3, [pc, #20]	; (1a003458 <tickerCallback+0x2c>)
1a003444:	681b      	ldr	r3, [r3, #0]
1a003446:	b113      	cbz	r3, 1a00344e <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003448:	4a04      	ldr	r2, [pc, #16]	; (1a00345c <tickerCallback+0x30>)
1a00344a:	6810      	ldr	r0, [r2, #0]
1a00344c:	4798      	blx	r3
   }
}
1a00344e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003452:	bf00      	nop
1a003454:	10002af0 	.word	0x10002af0
1a003458:	10002af8 	.word	0x10002af8
1a00345c:	10002aec 	.word	0x10002aec

1a003460 <tickInit>:
{
1a003460:	b510      	push	{r4, lr}
1a003462:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003464:	4b0e      	ldr	r3, [pc, #56]	; (1a0034a0 <tickInit+0x40>)
1a003466:	9301      	str	r3, [sp, #4]
1a003468:	4b0e      	ldr	r3, [pc, #56]	; (1a0034a4 <tickInit+0x44>)
1a00346a:	9300      	str	r3, [sp, #0]
1a00346c:	2300      	movs	r3, #0
1a00346e:	2201      	movs	r2, #1
1a003470:	4601      	mov	r1, r0
1a003472:	480d      	ldr	r0, [pc, #52]	; (1a0034a8 <tickInit+0x48>)
1a003474:	f7ff fbfc 	bl	1a002c70 <xTimerCreateStatic>
         if (h == NULL)
1a003478:	b178      	cbz	r0, 1a00349a <tickInit+0x3a>
1a00347a:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a00347c:	f7fe ff54 	bl	1a002328 <xTaskGetTickCount>
1a003480:	2300      	movs	r3, #0
1a003482:	9300      	str	r3, [sp, #0]
1a003484:	4602      	mov	r2, r0
1a003486:	2101      	movs	r1, #1
1a003488:	4620      	mov	r0, r4
1a00348a:	f7ff fc17 	bl	1a002cbc <xTimerGenericCommand>
1a00348e:	2801      	cmp	r0, #1
1a003490:	bf14      	ite	ne
1a003492:	2000      	movne	r0, #0
1a003494:	2001      	moveq	r0, #1
}
1a003496:	b002      	add	sp, #8
1a003498:	bd10      	pop	{r4, pc}
            return 0;
1a00349a:	2000      	movs	r0, #0
1a00349c:	e7fb      	b.n	1a003496 <tickInit+0x36>
1a00349e:	bf00      	nop
1a0034a0:	10002afc 	.word	0x10002afc
1a0034a4:	1a00342d 	.word	0x1a00342d
1a0034a8:	1a005968 	.word	0x1a005968

1a0034ac <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0034ac:	e7fe      	b.n	1a0034ac <errorOcurred>

1a0034ae <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0034ae:	4770      	bx	lr

1a0034b0 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0034b0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034b2:	2400      	movs	r4, #0
1a0034b4:	e001      	b.n	1a0034ba <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0034b6:	3401      	adds	r4, #1
1a0034b8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034ba:	2c03      	cmp	r4, #3
1a0034bc:	d812      	bhi.n	1a0034e4 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0034be:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0034c0:	4b09      	ldr	r3, [pc, #36]	; (1a0034e8 <TIMER0_IRQHandler+0x38>)
1a0034c2:	681a      	ldr	r2, [r3, #0]
1a0034c4:	f004 010f 	and.w	r1, r4, #15
1a0034c8:	2301      	movs	r3, #1
1a0034ca:	408b      	lsls	r3, r1
1a0034cc:	421a      	tst	r2, r3
1a0034ce:	d0f2      	beq.n	1a0034b6 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0034d0:	4b06      	ldr	r3, [pc, #24]	; (1a0034ec <TIMER0_IRQHandler+0x3c>)
1a0034d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0034d6:	2000      	movs	r0, #0
1a0034d8:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0034da:	2301      	movs	r3, #1
1a0034dc:	40ab      	lsls	r3, r5
1a0034de:	4a02      	ldr	r2, [pc, #8]	; (1a0034e8 <TIMER0_IRQHandler+0x38>)
1a0034e0:	6013      	str	r3, [r2, #0]
1a0034e2:	e7e8      	b.n	1a0034b6 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0034e4:	bd38      	pop	{r3, r4, r5, pc}
1a0034e6:	bf00      	nop
1a0034e8:	40084000 	.word	0x40084000
1a0034ec:	1000000c 	.word	0x1000000c

1a0034f0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0034f0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034f2:	2400      	movs	r4, #0
1a0034f4:	e001      	b.n	1a0034fa <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0034f6:	3401      	adds	r4, #1
1a0034f8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034fa:	2c03      	cmp	r4, #3
1a0034fc:	d813      	bhi.n	1a003526 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0034fe:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003500:	4b09      	ldr	r3, [pc, #36]	; (1a003528 <TIMER1_IRQHandler+0x38>)
1a003502:	681a      	ldr	r2, [r3, #0]
1a003504:	f004 010f 	and.w	r1, r4, #15
1a003508:	2301      	movs	r3, #1
1a00350a:	408b      	lsls	r3, r1
1a00350c:	421a      	tst	r2, r3
1a00350e:	d0f2      	beq.n	1a0034f6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003510:	1d23      	adds	r3, r4, #4
1a003512:	4a06      	ldr	r2, [pc, #24]	; (1a00352c <TIMER1_IRQHandler+0x3c>)
1a003514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003518:	2000      	movs	r0, #0
1a00351a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00351c:	2301      	movs	r3, #1
1a00351e:	40ab      	lsls	r3, r5
1a003520:	4a01      	ldr	r2, [pc, #4]	; (1a003528 <TIMER1_IRQHandler+0x38>)
1a003522:	6013      	str	r3, [r2, #0]
1a003524:	e7e7      	b.n	1a0034f6 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a003526:	bd38      	pop	{r3, r4, r5, pc}
1a003528:	40085000 	.word	0x40085000
1a00352c:	1000000c 	.word	0x1000000c

1a003530 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003530:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003532:	2400      	movs	r4, #0
1a003534:	e001      	b.n	1a00353a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003536:	3401      	adds	r4, #1
1a003538:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00353a:	2c03      	cmp	r4, #3
1a00353c:	d814      	bhi.n	1a003568 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00353e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003540:	4b0a      	ldr	r3, [pc, #40]	; (1a00356c <TIMER2_IRQHandler+0x3c>)
1a003542:	681a      	ldr	r2, [r3, #0]
1a003544:	f004 010f 	and.w	r1, r4, #15
1a003548:	2301      	movs	r3, #1
1a00354a:	408b      	lsls	r3, r1
1a00354c:	421a      	tst	r2, r3
1a00354e:	d0f2      	beq.n	1a003536 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003550:	f104 0308 	add.w	r3, r4, #8
1a003554:	4a06      	ldr	r2, [pc, #24]	; (1a003570 <TIMER2_IRQHandler+0x40>)
1a003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00355a:	2000      	movs	r0, #0
1a00355c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00355e:	2301      	movs	r3, #1
1a003560:	40ab      	lsls	r3, r5
1a003562:	4a02      	ldr	r2, [pc, #8]	; (1a00356c <TIMER2_IRQHandler+0x3c>)
1a003564:	6013      	str	r3, [r2, #0]
1a003566:	e7e6      	b.n	1a003536 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003568:	bd38      	pop	{r3, r4, r5, pc}
1a00356a:	bf00      	nop
1a00356c:	400c3000 	.word	0x400c3000
1a003570:	1000000c 	.word	0x1000000c

1a003574 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003574:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003576:	2400      	movs	r4, #0
1a003578:	e001      	b.n	1a00357e <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00357a:	3401      	adds	r4, #1
1a00357c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00357e:	2c03      	cmp	r4, #3
1a003580:	d814      	bhi.n	1a0035ac <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a003582:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003584:	4b0a      	ldr	r3, [pc, #40]	; (1a0035b0 <TIMER3_IRQHandler+0x3c>)
1a003586:	681a      	ldr	r2, [r3, #0]
1a003588:	f004 010f 	and.w	r1, r4, #15
1a00358c:	2301      	movs	r3, #1
1a00358e:	408b      	lsls	r3, r1
1a003590:	421a      	tst	r2, r3
1a003592:	d0f2      	beq.n	1a00357a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003594:	f104 030c 	add.w	r3, r4, #12
1a003598:	4a06      	ldr	r2, [pc, #24]	; (1a0035b4 <TIMER3_IRQHandler+0x40>)
1a00359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00359e:	2000      	movs	r0, #0
1a0035a0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0035a2:	2301      	movs	r3, #1
1a0035a4:	40ab      	lsls	r3, r5
1a0035a6:	4a02      	ldr	r2, [pc, #8]	; (1a0035b0 <TIMER3_IRQHandler+0x3c>)
1a0035a8:	6013      	str	r3, [r2, #0]
1a0035aa:	e7e6      	b.n	1a00357a <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0035ac:	bd38      	pop	{r3, r4, r5, pc}
1a0035ae:	bf00      	nop
1a0035b0:	400c4000 	.word	0x400c4000
1a0035b4:	1000000c 	.word	0x1000000c

1a0035b8 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a0035b8:	b510      	push	{r4, lr}
1a0035ba:	b082      	sub	sp, #8

   switch(config) {
1a0035bc:	b118      	cbz	r0, 1a0035c6 <adcInit+0xe>
1a0035be:	2801      	cmp	r0, #1
1a0035c0:	d038      	beq.n	1a003634 <adcInit+0x7c>
      /* Disable ADC peripheral */
      Chip_ADC_DeInit( LPC_ADC0 );
      break;
   }

}
1a0035c2:	b002      	add	sp, #8
1a0035c4:	bd10      	pop	{r4, pc}
      Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a0035c6:	4c1d      	ldr	r4, [pc, #116]	; (1a00363c <adcInit+0x84>)
1a0035c8:	4669      	mov	r1, sp
1a0035ca:	4620      	mov	r0, r4
1a0035cc:	f000 fc86 	bl	1a003edc <Chip_ADC_Init>
      Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a0035d0:	2100      	movs	r1, #0
1a0035d2:	4620      	mov	r0, r4
1a0035d4:	f000 fd1f 	bl	1a004016 <Chip_ADC_SetBurstCmd>
      Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a0035d8:	4a19      	ldr	r2, [pc, #100]	; (1a003640 <adcInit+0x88>)
1a0035da:	4669      	mov	r1, sp
1a0035dc:	4620      	mov	r0, r4
1a0035de:	f000 fce7 	bl	1a003fb0 <Chip_ADC_SetSampleRate>
      Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a0035e2:	2200      	movs	r2, #0
1a0035e4:	2101      	movs	r1, #1
1a0035e6:	4620      	mov	r0, r4
1a0035e8:	f000 fd01 	bl	1a003fee <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a0035ec:	2200      	movs	r2, #0
1a0035ee:	2101      	movs	r1, #1
1a0035f0:	4620      	mov	r0, r4
1a0035f2:	f000 fcbd 	bl	1a003f70 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a0035f6:	2200      	movs	r2, #0
1a0035f8:	2102      	movs	r1, #2
1a0035fa:	4620      	mov	r0, r4
1a0035fc:	f000 fcf7 	bl	1a003fee <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a003600:	2200      	movs	r2, #0
1a003602:	2102      	movs	r1, #2
1a003604:	4620      	mov	r0, r4
1a003606:	f000 fcb3 	bl	1a003f70 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a00360a:	2200      	movs	r2, #0
1a00360c:	2103      	movs	r1, #3
1a00360e:	4620      	mov	r0, r4
1a003610:	f000 fced 	bl	1a003fee <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a003614:	2200      	movs	r2, #0
1a003616:	2103      	movs	r1, #3
1a003618:	4620      	mov	r0, r4
1a00361a:	f000 fca9 	bl	1a003f70 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a00361e:	2200      	movs	r2, #0
1a003620:	2104      	movs	r1, #4
1a003622:	4620      	mov	r0, r4
1a003624:	f000 fce3 	bl	1a003fee <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a003628:	2200      	movs	r2, #0
1a00362a:	2104      	movs	r1, #4
1a00362c:	4620      	mov	r0, r4
1a00362e:	f000 fc9f 	bl	1a003f70 <Chip_ADC_Int_SetChannelCmd>
   break;
1a003632:	e7c6      	b.n	1a0035c2 <adcInit+0xa>
      Chip_ADC_DeInit( LPC_ADC0 );
1a003634:	4801      	ldr	r0, [pc, #4]	; (1a00363c <adcInit+0x84>)
1a003636:	f000 fc71 	bl	1a003f1c <Chip_ADC_DeInit>
}
1a00363a:	e7c2      	b.n	1a0035c2 <adcInit+0xa>
1a00363c:	400e3000 	.word	0x400e3000
1a003640:	00030d40 	.word	0x00030d40

1a003644 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a003644:	b570      	push	{r4, r5, r6, lr}
1a003646:	b082      	sub	sp, #8

   uint8_t lpcAdcChannel = 66 - analogInput;
1a003648:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a00364c:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a00364e:	2600      	movs	r6, #0
1a003650:	f8ad 6006 	strh.w	r6, [sp, #6]

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a003654:	4d10      	ldr	r5, [pc, #64]	; (1a003698 <adcRead+0x54>)
1a003656:	2201      	movs	r2, #1
1a003658:	4621      	mov	r1, r4
1a00365a:	4628      	mov	r0, r5
1a00365c:	f000 fcc7 	bl	1a003fee <Chip_ADC_EnableChannel>
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a003660:	4632      	mov	r2, r6
1a003662:	2101      	movs	r1, #1
1a003664:	4628      	mov	r0, r5
1a003666:	f000 fc93 	bl	1a003f90 <Chip_ADC_SetStartMode>

   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a00366a:	2200      	movs	r2, #0
1a00366c:	4621      	mov	r1, r4
1a00366e:	480a      	ldr	r0, [pc, #40]	; (1a003698 <adcRead+0x54>)
1a003670:	f000 fc63 	bl	1a003f3a <Chip_ADC_ReadStatus>
   while(
1a003674:	2801      	cmp	r0, #1
1a003676:	d1f8      	bne.n	1a00366a <adcRead+0x26>
   );
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a003678:	4d07      	ldr	r5, [pc, #28]	; (1a003698 <adcRead+0x54>)
1a00367a:	f10d 0206 	add.w	r2, sp, #6
1a00367e:	4621      	mov	r1, r4
1a003680:	4628      	mov	r0, r5
1a003682:	f000 fc56 	bl	1a003f32 <Chip_ADC_ReadValue>

   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a003686:	2200      	movs	r2, #0
1a003688:	4621      	mov	r1, r4
1a00368a:	4628      	mov	r0, r5
1a00368c:	f000 fcaf 	bl	1a003fee <Chip_ADC_EnableChannel>

   return analogValue;
}
1a003690:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a003694:	b002      	add	sp, #8
1a003696:	bd70      	pop	{r4, r5, r6, pc}
1a003698:	400e3000 	.word	0x400e3000

1a00369c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00369c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00369e:	4d0b      	ldr	r5, [pc, #44]	; (1a0036cc <gpioObtainPinInit+0x30>)
1a0036a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0036a4:	182c      	adds	r4, r5, r0
1a0036a6:	5628      	ldrsb	r0, [r5, r0]
1a0036a8:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0036aa:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0036ae:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0036b0:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0036b4:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0036b6:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0036ba:	9b02      	ldr	r3, [sp, #8]
1a0036bc:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0036be:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0036c2:	9b03      	ldr	r3, [sp, #12]
1a0036c4:	701a      	strb	r2, [r3, #0]
}
1a0036c6:	bc30      	pop	{r4, r5}
1a0036c8:	4770      	bx	lr
1a0036ca:	bf00      	nop
1a0036cc:	1a005974 	.word	0x1a005974

1a0036d0 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0036d0:	b570      	push	{r4, r5, r6, lr}
1a0036d2:	b084      	sub	sp, #16
1a0036d4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0036d6:	2300      	movs	r3, #0
1a0036d8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0036dc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0036e0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0036e4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0036e8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0036ec:	f10d 030b 	add.w	r3, sp, #11
1a0036f0:	9301      	str	r3, [sp, #4]
1a0036f2:	ab03      	add	r3, sp, #12
1a0036f4:	9300      	str	r3, [sp, #0]
1a0036f6:	f10d 030d 	add.w	r3, sp, #13
1a0036fa:	f10d 020e 	add.w	r2, sp, #14
1a0036fe:	f10d 010f 	add.w	r1, sp, #15
1a003702:	f7ff ffcb 	bl	1a00369c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003706:	2c05      	cmp	r4, #5
1a003708:	f200 80a5 	bhi.w	1a003856 <gpioInit+0x186>
1a00370c:	e8df f004 	tbb	[pc, r4]
1a003710:	45278109 	.word	0x45278109
1a003714:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003716:	4851      	ldr	r0, [pc, #324]	; (1a00385c <gpioInit+0x18c>)
1a003718:	f000 ffa4 	bl	1a004664 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00371c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00371e:	b004      	add	sp, #16
1a003720:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003722:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003726:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00372a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00372e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003732:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003736:	494a      	ldr	r1, [pc, #296]	; (1a003860 <gpioInit+0x190>)
1a003738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00373c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003740:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003744:	2001      	movs	r0, #1
1a003746:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00374a:	4c44      	ldr	r4, [pc, #272]	; (1a00385c <gpioInit+0x18c>)
1a00374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003750:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003754:	ea22 0201 	bic.w	r2, r2, r1
1a003758:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00375c:	e7df      	b.n	1a00371e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00375e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003762:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003766:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00376a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00376e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003772:	493b      	ldr	r1, [pc, #236]	; (1a003860 <gpioInit+0x190>)
1a003774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003778:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00377c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003780:	2001      	movs	r0, #1
1a003782:	fa00 f102 	lsl.w	r1, r0, r2
1a003786:	4c35      	ldr	r4, [pc, #212]	; (1a00385c <gpioInit+0x18c>)
1a003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00378c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003790:	ea22 0201 	bic.w	r2, r2, r1
1a003794:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003798:	e7c1      	b.n	1a00371e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00379a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00379e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0037a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0037a6:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0037aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0037ae:	492c      	ldr	r1, [pc, #176]	; (1a003860 <gpioInit+0x190>)
1a0037b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0037b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0037b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0037bc:	2001      	movs	r0, #1
1a0037be:	fa00 f102 	lsl.w	r1, r0, r2
1a0037c2:	4c26      	ldr	r4, [pc, #152]	; (1a00385c <gpioInit+0x18c>)
1a0037c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0037c8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0037cc:	ea22 0201 	bic.w	r2, r2, r1
1a0037d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0037d4:	e7a3      	b.n	1a00371e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0037d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0037da:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0037de:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0037e2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0037e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0037ea:	491d      	ldr	r1, [pc, #116]	; (1a003860 <gpioInit+0x190>)
1a0037ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0037f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0037f4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0037f8:	2001      	movs	r0, #1
1a0037fa:	fa00 f102 	lsl.w	r1, r0, r2
1a0037fe:	4c17      	ldr	r4, [pc, #92]	; (1a00385c <gpioInit+0x18c>)
1a003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003804:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003808:	ea22 0201 	bic.w	r2, r2, r1
1a00380c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003810:	e785      	b.n	1a00371e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003812:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003816:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00381a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00381e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003822:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003826:	490e      	ldr	r1, [pc, #56]	; (1a003860 <gpioInit+0x190>)
1a003828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00382c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003830:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003834:	2001      	movs	r0, #1
1a003836:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00383a:	4b08      	ldr	r3, [pc, #32]	; (1a00385c <gpioInit+0x18c>)
1a00383c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003840:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003844:	4331      	orrs	r1, r6
1a003846:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00384a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00384c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003850:	2100      	movs	r1, #0
1a003852:	5499      	strb	r1, [r3, r2]
1a003854:	e763      	b.n	1a00371e <gpioInit+0x4e>
      ret_val = 0;
1a003856:	2000      	movs	r0, #0
1a003858:	e761      	b.n	1a00371e <gpioInit+0x4e>
1a00385a:	bf00      	nop
1a00385c:	400f4000 	.word	0x400f4000
1a003860:	40086000 	.word	0x40086000

1a003864 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003864:	b510      	push	{r4, lr}
1a003866:	b084      	sub	sp, #16
1a003868:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00386a:	2300      	movs	r3, #0
1a00386c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003870:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003874:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003878:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00387c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003880:	f10d 030b 	add.w	r3, sp, #11
1a003884:	9301      	str	r3, [sp, #4]
1a003886:	ab03      	add	r3, sp, #12
1a003888:	9300      	str	r3, [sp, #0]
1a00388a:	f10d 030d 	add.w	r3, sp, #13
1a00388e:	f10d 020e 	add.w	r2, sp, #14
1a003892:	f10d 010f 	add.w	r1, sp, #15
1a003896:	f7ff ff01 	bl	1a00369c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00389a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00389e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0038a2:	3400      	adds	r4, #0
1a0038a4:	bf18      	it	ne
1a0038a6:	2401      	movne	r4, #1
1a0038a8:	015b      	lsls	r3, r3, #5
1a0038aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0038ae:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0038b2:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0038b4:	2001      	movs	r0, #1
1a0038b6:	b004      	add	sp, #16
1a0038b8:	bd10      	pop	{r4, pc}

1a0038ba <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0038ba:	b500      	push	{lr}
1a0038bc:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0038be:	2300      	movs	r3, #0
1a0038c0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0038c4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0038c8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0038cc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0038d0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0038d4:	f10d 030b 	add.w	r3, sp, #11
1a0038d8:	9301      	str	r3, [sp, #4]
1a0038da:	ab03      	add	r3, sp, #12
1a0038dc:	9300      	str	r3, [sp, #0]
1a0038de:	f10d 030d 	add.w	r3, sp, #13
1a0038e2:	f10d 020e 	add.w	r2, sp, #14
1a0038e6:	f10d 010f 	add.w	r1, sp, #15
1a0038ea:	f7ff fed7 	bl	1a00369c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0038ee:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0038f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0038f6:	015b      	lsls	r3, r3, #5
1a0038f8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0038fc:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003900:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a003902:	3000      	adds	r0, #0
1a003904:	bf18      	it	ne
1a003906:	2001      	movne	r0, #1
1a003908:	b005      	add	sp, #20
1a00390a:	f85d fb04 	ldr.w	pc, [sp], #4

1a00390e <gpioToggle>:
{
1a00390e:	b510      	push	{r4, lr}
1a003910:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a003912:	f7ff ffd2 	bl	1a0038ba <gpioRead>
1a003916:	fab0 f180 	clz	r1, r0
1a00391a:	0949      	lsrs	r1, r1, #5
1a00391c:	4620      	mov	r0, r4
1a00391e:	f7ff ffa1 	bl	1a003864 <gpioWrite>
}
1a003922:	bd10      	pop	{r4, pc}

1a003924 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003924:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003926:	4b04      	ldr	r3, [pc, #16]	; (1a003938 <USB0_IRQHandler+0x14>)
1a003928:	681b      	ldr	r3, [r3, #0]
1a00392a:	681b      	ldr	r3, [r3, #0]
1a00392c:	68db      	ldr	r3, [r3, #12]
1a00392e:	4a03      	ldr	r2, [pc, #12]	; (1a00393c <USB0_IRQHandler+0x18>)
1a003930:	6810      	ldr	r0, [r2, #0]
1a003932:	4798      	blx	r3
}
1a003934:	bd08      	pop	{r3, pc}
1a003936:	bf00      	nop
1a003938:	10002bb0 	.word	0x10002bb0
1a00393c:	10002b2c 	.word	0x10002b2c

1a003940 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003940:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003942:	f000 fb79 	bl	1a004038 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003946:	4b3a      	ldr	r3, [pc, #232]	; (1a003a30 <boardInit+0xf0>)
1a003948:	6818      	ldr	r0, [r3, #0]
1a00394a:	f7ff fcf3 	bl	1a003334 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00394e:	2001      	movs	r0, #1
1a003950:	2100      	movs	r1, #0
1a003952:	f7ff fd85 	bl	1a003460 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a003956:	2105      	movs	r1, #5
1a003958:	2000      	movs	r0, #0
1a00395a:	f7ff feb9 	bl	1a0036d0 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00395e:	2100      	movs	r1, #0
1a003960:	2024      	movs	r0, #36	; 0x24
1a003962:	f7ff feb5 	bl	1a0036d0 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a003966:	2100      	movs	r1, #0
1a003968:	2025      	movs	r0, #37	; 0x25
1a00396a:	f7ff feb1 	bl	1a0036d0 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00396e:	2100      	movs	r1, #0
1a003970:	2026      	movs	r0, #38	; 0x26
1a003972:	f7ff fead 	bl	1a0036d0 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003976:	2100      	movs	r1, #0
1a003978:	2027      	movs	r0, #39	; 0x27
1a00397a:	f7ff fea9 	bl	1a0036d0 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00397e:	2101      	movs	r1, #1
1a003980:	2028      	movs	r0, #40	; 0x28
1a003982:	f7ff fea5 	bl	1a0036d0 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003986:	2101      	movs	r1, #1
1a003988:	2029      	movs	r0, #41	; 0x29
1a00398a:	f7ff fea1 	bl	1a0036d0 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00398e:	2101      	movs	r1, #1
1a003990:	202a      	movs	r0, #42	; 0x2a
1a003992:	f7ff fe9d 	bl	1a0036d0 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003996:	2101      	movs	r1, #1
1a003998:	202b      	movs	r0, #43	; 0x2b
1a00399a:	f7ff fe99 	bl	1a0036d0 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00399e:	2101      	movs	r1, #1
1a0039a0:	202c      	movs	r0, #44	; 0x2c
1a0039a2:	f7ff fe95 	bl	1a0036d0 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0039a6:	2101      	movs	r1, #1
1a0039a8:	202d      	movs	r0, #45	; 0x2d
1a0039aa:	f7ff fe91 	bl	1a0036d0 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0039ae:	2100      	movs	r1, #0
1a0039b0:	202e      	movs	r0, #46	; 0x2e
1a0039b2:	f7ff fe8d 	bl	1a0036d0 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0039b6:	2100      	movs	r1, #0
1a0039b8:	202f      	movs	r0, #47	; 0x2f
1a0039ba:	f7ff fe89 	bl	1a0036d0 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0039be:	2100      	movs	r1, #0
1a0039c0:	2030      	movs	r0, #48	; 0x30
1a0039c2:	f7ff fe85 	bl	1a0036d0 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0039c6:	2100      	movs	r1, #0
1a0039c8:	2031      	movs	r0, #49	; 0x31
1a0039ca:	f7ff fe81 	bl	1a0036d0 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0039ce:	2100      	movs	r1, #0
1a0039d0:	2032      	movs	r0, #50	; 0x32
1a0039d2:	f7ff fe7d 	bl	1a0036d0 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0039d6:	2100      	movs	r1, #0
1a0039d8:	2033      	movs	r0, #51	; 0x33
1a0039da:	f7ff fe79 	bl	1a0036d0 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0039de:	2100      	movs	r1, #0
1a0039e0:	2034      	movs	r0, #52	; 0x34
1a0039e2:	f7ff fe75 	bl	1a0036d0 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0039e6:	2100      	movs	r1, #0
1a0039e8:	2035      	movs	r0, #53	; 0x35
1a0039ea:	f7ff fe71 	bl	1a0036d0 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0039ee:	2101      	movs	r1, #1
1a0039f0:	2036      	movs	r0, #54	; 0x36
1a0039f2:	f7ff fe6d 	bl	1a0036d0 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0039f6:	2101      	movs	r1, #1
1a0039f8:	2037      	movs	r0, #55	; 0x37
1a0039fa:	f7ff fe69 	bl	1a0036d0 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0039fe:	2101      	movs	r1, #1
1a003a00:	2038      	movs	r0, #56	; 0x38
1a003a02:	f7ff fe65 	bl	1a0036d0 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003a06:	2101      	movs	r1, #1
1a003a08:	2039      	movs	r0, #57	; 0x39
1a003a0a:	f7ff fe61 	bl	1a0036d0 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a003a0e:	2101      	movs	r1, #1
1a003a10:	203a      	movs	r0, #58	; 0x3a
1a003a12:	f7ff fe5d 	bl	1a0036d0 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003a16:	2101      	movs	r1, #1
1a003a18:	203b      	movs	r0, #59	; 0x3b
1a003a1a:	f7ff fe59 	bl	1a0036d0 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a003a1e:	2101      	movs	r1, #1
1a003a20:	203c      	movs	r0, #60	; 0x3c
1a003a22:	f7ff fe55 	bl	1a0036d0 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003a26:	2101      	movs	r1, #1
1a003a28:	203d      	movs	r0, #61	; 0x3d
1a003a2a:	f7ff fe51 	bl	1a0036d0 <gpioInit>

}
1a003a2e:	bd08      	pop	{r3, pc}
1a003a30:	10002bb4 	.word	0x10002bb4

1a003a34 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a003a34:	b508      	push	{r3, lr}
1a003a36:	460b      	mov	r3, r1
   *printer = uart;
1a003a38:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a003a3a:	4611      	mov	r1, r2
1a003a3c:	4618      	mov	r0, r3
1a003a3e:	f7ff fc9d 	bl	1a00337c <uartInit>
}
1a003a42:	bd08      	pop	{r3, pc}

1a003a44 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a003a44:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a003a46:	f7ff fce4 	bl	1a003412 <uartWriteString>
}
1a003a4a:	bd08      	pop	{r3, pc}

1a003a4c <printEnter>:

void printEnter( print_t printer )
{
1a003a4c:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a003a4e:	4902      	ldr	r1, [pc, #8]	; (1a003a58 <printEnter+0xc>)
1a003a50:	f7ff fcdf 	bl	1a003412 <uartWriteString>
}
1a003a54:	bd08      	pop	{r3, pc}
1a003a56:	bf00      	nop
1a003a58:	1a005804 	.word	0x1a005804

1a003a5c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003a5c:	2200      	movs	r2, #0
1a003a5e:	2a05      	cmp	r2, #5
1a003a60:	d819      	bhi.n	1a003a96 <Board_LED_Init+0x3a>
{
1a003a62:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003a64:	490c      	ldr	r1, [pc, #48]	; (1a003a98 <Board_LED_Init+0x3c>)
1a003a66:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003a6a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003a6e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a003a70:	4b0a      	ldr	r3, [pc, #40]	; (1a003a9c <Board_LED_Init+0x40>)
1a003a72:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a003a76:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003a7a:	2001      	movs	r0, #1
1a003a7c:	40a0      	lsls	r0, r4
1a003a7e:	4301      	orrs	r1, r0
1a003a80:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a003a84:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003a88:	2100      	movs	r1, #0
1a003a8a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003a8c:	3201      	adds	r2, #1
1a003a8e:	2a05      	cmp	r2, #5
1a003a90:	d9e8      	bls.n	1a003a64 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a003a92:	bc70      	pop	{r4, r5, r6}
1a003a94:	4770      	bx	lr
1a003a96:	4770      	bx	lr
1a003a98:	1a005ab8 	.word	0x1a005ab8
1a003a9c:	400f4000 	.word	0x400f4000

1a003aa0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003aa0:	2300      	movs	r3, #0
1a003aa2:	2b03      	cmp	r3, #3
1a003aa4:	d816      	bhi.n	1a003ad4 <Board_TEC_Init+0x34>
{
1a003aa6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003aa8:	490b      	ldr	r1, [pc, #44]	; (1a003ad8 <Board_TEC_Init+0x38>)
1a003aaa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003aae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003ab2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003ab4:	4c09      	ldr	r4, [pc, #36]	; (1a003adc <Board_TEC_Init+0x3c>)
1a003ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003aba:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003abe:	2001      	movs	r0, #1
1a003ac0:	40a8      	lsls	r0, r5
1a003ac2:	ea21 0100 	bic.w	r1, r1, r0
1a003ac6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003aca:	3301      	adds	r3, #1
1a003acc:	2b03      	cmp	r3, #3
1a003ace:	d9eb      	bls.n	1a003aa8 <Board_TEC_Init+0x8>
    }
}
1a003ad0:	bc30      	pop	{r4, r5}
1a003ad2:	4770      	bx	lr
1a003ad4:	4770      	bx	lr
1a003ad6:	bf00      	nop
1a003ad8:	1a005ab0 	.word	0x1a005ab0
1a003adc:	400f4000 	.word	0x400f4000

1a003ae0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003ae0:	2300      	movs	r3, #0
1a003ae2:	2b08      	cmp	r3, #8
1a003ae4:	d816      	bhi.n	1a003b14 <Board_GPIO_Init+0x34>
{
1a003ae6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003ae8:	490b      	ldr	r1, [pc, #44]	; (1a003b18 <Board_GPIO_Init+0x38>)
1a003aea:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003aee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003af2:	784d      	ldrb	r5, [r1, #1]
1a003af4:	4c09      	ldr	r4, [pc, #36]	; (1a003b1c <Board_GPIO_Init+0x3c>)
1a003af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003afa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003afe:	2001      	movs	r0, #1
1a003b00:	40a8      	lsls	r0, r5
1a003b02:	ea21 0100 	bic.w	r1, r1, r0
1a003b06:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003b0a:	3301      	adds	r3, #1
1a003b0c:	2b08      	cmp	r3, #8
1a003b0e:	d9eb      	bls.n	1a003ae8 <Board_GPIO_Init+0x8>
    }
}
1a003b10:	bc30      	pop	{r4, r5}
1a003b12:	4770      	bx	lr
1a003b14:	4770      	bx	lr
1a003b16:	bf00      	nop
1a003b18:	1a005ac4 	.word	0x1a005ac4
1a003b1c:	400f4000 	.word	0x400f4000

1a003b20 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a003b20:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a003b22:	4c0b      	ldr	r4, [pc, #44]	; (1a003b50 <Board_SPI_Init+0x30>)
1a003b24:	4620      	mov	r0, r4
1a003b26:	f000 fec5 	bl	1a0048b4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003b2a:	6863      	ldr	r3, [r4, #4]
1a003b2c:	f023 0304 	bic.w	r3, r3, #4
1a003b30:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003b32:	6823      	ldr	r3, [r4, #0]
1a003b34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003b38:	f043 0307 	orr.w	r3, r3, #7
1a003b3c:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003b3e:	4905      	ldr	r1, [pc, #20]	; (1a003b54 <Board_SPI_Init+0x34>)
1a003b40:	4620      	mov	r0, r4
1a003b42:	f000 fe98 	bl	1a004876 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003b46:	6863      	ldr	r3, [r4, #4]
1a003b48:	f043 0302 	orr.w	r3, r3, #2
1a003b4c:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a003b4e:	bd10      	pop	{r4, pc}
1a003b50:	400c5000 	.word	0x400c5000
1a003b54:	000186a0 	.word	0x000186a0

1a003b58 <Board_I2C_Init>:
{
1a003b58:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003b5a:	2000      	movs	r0, #0
1a003b5c:	f000 fe3e 	bl	1a0047dc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003b60:	4b04      	ldr	r3, [pc, #16]	; (1a003b74 <Board_I2C_Init+0x1c>)
1a003b62:	f640 0208 	movw	r2, #2056	; 0x808
1a003b66:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003b6a:	4903      	ldr	r1, [pc, #12]	; (1a003b78 <Board_I2C_Init+0x20>)
1a003b6c:	2000      	movs	r0, #0
1a003b6e:	f000 fe47 	bl	1a004800 <Chip_I2C_SetClockRate>
}
1a003b72:	bd08      	pop	{r3, pc}
1a003b74:	40086000 	.word	0x40086000
1a003b78:	000f4240 	.word	0x000f4240

1a003b7c <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a003b7c:	b510      	push	{r4, lr}
1a003b7e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a003b80:	4c08      	ldr	r4, [pc, #32]	; (1a003ba4 <Board_ADC_Init+0x28>)
1a003b82:	4669      	mov	r1, sp
1a003b84:	4620      	mov	r0, r4
1a003b86:	f000 f9a9 	bl	1a003edc <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003b8a:	4a07      	ldr	r2, [pc, #28]	; (1a003ba8 <Board_ADC_Init+0x2c>)
1a003b8c:	4669      	mov	r1, sp
1a003b8e:	4620      	mov	r0, r4
1a003b90:	f000 fa0e 	bl	1a003fb0 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003b94:	2200      	movs	r2, #0
1a003b96:	4669      	mov	r1, sp
1a003b98:	4620      	mov	r0, r4
1a003b9a:	f000 fa22 	bl	1a003fe2 <Chip_ADC_SetResolution>
}
1a003b9e:	b002      	add	sp, #8
1a003ba0:	bd10      	pop	{r4, pc}
1a003ba2:	bf00      	nop
1a003ba4:	400e3000 	.word	0x400e3000
1a003ba8:	00061a80 	.word	0x00061a80

1a003bac <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003bac:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a003bae:	4c07      	ldr	r4, [pc, #28]	; (1a003bcc <Board_Debug_Init+0x20>)
1a003bb0:	4620      	mov	r0, r4
1a003bb2:	f000 f89f 	bl	1a003cf4 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a003bb6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003bba:	4620      	mov	r0, r4
1a003bbc:	f000 f8e4 	bl	1a003d88 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a003bc0:	2303      	movs	r3, #3
1a003bc2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a003bc4:	2301      	movs	r3, #1
1a003bc6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a003bc8:	bd10      	pop	{r4, pc}
1a003bca:	bf00      	nop
1a003bcc:	400c1000 	.word	0x400c1000

1a003bd0 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003bd0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a003bd2:	f7ff ffeb 	bl	1a003bac <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a003bd6:	4808      	ldr	r0, [pc, #32]	; (1a003bf8 <Board_Init+0x28>)
1a003bd8:	f000 fd44 	bl	1a004664 <Chip_GPIO_Init>

   Board_LED_Init();
1a003bdc:	f7ff ff3e 	bl	1a003a5c <Board_LED_Init>
   Board_TEC_Init();
1a003be0:	f7ff ff5e 	bl	1a003aa0 <Board_TEC_Init>
   Board_SPI_Init();
1a003be4:	f7ff ff9c 	bl	1a003b20 <Board_SPI_Init>
   Board_GPIO_Init();
1a003be8:	f7ff ff7a 	bl	1a003ae0 <Board_GPIO_Init>
   Board_I2C_Init();
1a003bec:	f7ff ffb4 	bl	1a003b58 <Board_I2C_Init>
   Board_ADC_Init();
1a003bf0:	f7ff ffc4 	bl	1a003b7c <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a003bf4:	bd08      	pop	{r3, pc}
1a003bf6:	bf00      	nop
1a003bf8:	400f4000 	.word	0x400f4000

1a003bfc <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a003bfc:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a003bfe:	4a04      	ldr	r2, [pc, #16]	; (1a003c10 <SystemInit+0x14>)
1a003c00:	4b04      	ldr	r3, [pc, #16]	; (1a003c14 <SystemInit+0x18>)
1a003c02:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a003c04:	f000 fd04 	bl	1a004610 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a003c08:	f000 f858 	bl	1a003cbc <Board_SystemInit>
}
1a003c0c:	bd08      	pop	{r3, pc}
1a003c0e:	bf00      	nop
1a003c10:	1a000000 	.word	0x1a000000
1a003c14:	e000ed08 	.word	0xe000ed08

1a003c18 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003c18:	2300      	movs	r3, #0
1a003c1a:	2b1c      	cmp	r3, #28
1a003c1c:	d812      	bhi.n	1a003c44 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a003c1e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003c20:	4a09      	ldr	r2, [pc, #36]	; (1a003c48 <Board_SetupMuxing+0x30>)
1a003c22:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003c26:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003c2a:	784a      	ldrb	r2, [r1, #1]
1a003c2c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003c2e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a003c32:	4906      	ldr	r1, [pc, #24]	; (1a003c4c <Board_SetupMuxing+0x34>)
1a003c34:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003c38:	3301      	adds	r3, #1
1a003c3a:	2b1c      	cmp	r3, #28
1a003c3c:	d9f0      	bls.n	1a003c20 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003c42:	4770      	bx	lr
1a003c44:	4770      	bx	lr
1a003c46:	bf00      	nop
1a003c48:	1a005ae0 	.word	0x1a005ae0
1a003c4c:	40086000 	.word	0x40086000

1a003c50 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003c50:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a003c52:	4a17      	ldr	r2, [pc, #92]	; (1a003cb0 <Board_SetupClocking+0x60>)
1a003c54:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003c5c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003c60:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003c64:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003c6c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003c70:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003c74:	2201      	movs	r2, #1
1a003c76:	490f      	ldr	r1, [pc, #60]	; (1a003cb4 <Board_SetupClocking+0x64>)
1a003c78:	2006      	movs	r0, #6
1a003c7a:	f000 fcf5 	bl	1a004668 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003c7e:	2400      	movs	r4, #0
1a003c80:	b14c      	cbz	r4, 1a003c96 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a003c82:	4b0b      	ldr	r3, [pc, #44]	; (1a003cb0 <Board_SetupClocking+0x60>)
1a003c84:	685a      	ldr	r2, [r3, #4]
1a003c86:	f022 020c 	bic.w	r2, r2, #12
1a003c8a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003c8c:	685a      	ldr	r2, [r3, #4]
1a003c8e:	f042 0203 	orr.w	r2, r2, #3
1a003c92:	605a      	str	r2, [r3, #4]
}
1a003c94:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003c96:	4808      	ldr	r0, [pc, #32]	; (1a003cb8 <Board_SetupClocking+0x68>)
1a003c98:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003c9c:	2301      	movs	r3, #1
1a003c9e:	788a      	ldrb	r2, [r1, #2]
1a003ca0:	7849      	ldrb	r1, [r1, #1]
1a003ca2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003ca6:	f000 fbf5 	bl	1a004494 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003caa:	3401      	adds	r4, #1
1a003cac:	e7e8      	b.n	1a003c80 <Board_SetupClocking+0x30>
1a003cae:	bf00      	nop
1a003cb0:	40043000 	.word	0x40043000
1a003cb4:	0c28cb00 	.word	0x0c28cb00
1a003cb8:	1a005adc 	.word	0x1a005adc

1a003cbc <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003cbc:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003cbe:	f7ff ffab 	bl	1a003c18 <Board_SetupMuxing>
    Board_SetupClocking();
1a003cc2:	f7ff ffc5 	bl	1a003c50 <Board_SetupClocking>
}
1a003cc6:	bd08      	pop	{r3, pc}

1a003cc8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003cc8:	4b09      	ldr	r3, [pc, #36]	; (1a003cf0 <Chip_UART_GetIndex+0x28>)
1a003cca:	4298      	cmp	r0, r3
1a003ccc:	d009      	beq.n	1a003ce2 <Chip_UART_GetIndex+0x1a>
1a003cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003cd2:	4298      	cmp	r0, r3
1a003cd4:	d007      	beq.n	1a003ce6 <Chip_UART_GetIndex+0x1e>
1a003cd6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003cda:	4298      	cmp	r0, r3
1a003cdc:	d005      	beq.n	1a003cea <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003cde:	2000      	movs	r0, #0
1a003ce0:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003ce2:	2002      	movs	r0, #2
1a003ce4:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a003ce6:	2003      	movs	r0, #3
1a003ce8:	4770      	bx	lr
			return 1;
1a003cea:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003cec:	4770      	bx	lr
1a003cee:	bf00      	nop
1a003cf0:	400c1000 	.word	0x400c1000

1a003cf4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003cf4:	b530      	push	{r4, r5, lr}
1a003cf6:	b083      	sub	sp, #12
1a003cf8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003cfa:	f7ff ffe5 	bl	1a003cc8 <Chip_UART_GetIndex>
1a003cfe:	2301      	movs	r3, #1
1a003d00:	461a      	mov	r2, r3
1a003d02:	4619      	mov	r1, r3
1a003d04:	4d0e      	ldr	r5, [pc, #56]	; (1a003d40 <Chip_UART_Init+0x4c>)
1a003d06:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003d0a:	f000 fc09 	bl	1a004520 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003d0e:	2307      	movs	r3, #7
1a003d10:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a003d12:	2300      	movs	r3, #0
1a003d14:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003d16:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003d18:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003d1a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003d1c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003d1e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003d20:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003d22:	4b08      	ldr	r3, [pc, #32]	; (1a003d44 <Chip_UART_Init+0x50>)
1a003d24:	429c      	cmp	r4, r3
1a003d26:	d006      	beq.n	1a003d36 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003d28:	2303      	movs	r3, #3
1a003d2a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003d2c:	2310      	movs	r3, #16
1a003d2e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003d30:	9b01      	ldr	r3, [sp, #4]
}
1a003d32:	b003      	add	sp, #12
1a003d34:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003d36:	2300      	movs	r3, #0
1a003d38:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003d3a:	69a3      	ldr	r3, [r4, #24]
1a003d3c:	9301      	str	r3, [sp, #4]
1a003d3e:	e7f3      	b.n	1a003d28 <Chip_UART_Init+0x34>
1a003d40:	1a005b5c 	.word	0x1a005b5c
1a003d44:	40082000 	.word	0x40082000

1a003d48 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003d48:	b538      	push	{r3, r4, r5, lr}
1a003d4a:	4605      	mov	r5, r0
1a003d4c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003d4e:	f7ff ffbb 	bl	1a003cc8 <Chip_UART_GetIndex>
1a003d52:	4b0c      	ldr	r3, [pc, #48]	; (1a003d84 <Chip_UART_SetBaud+0x3c>)
1a003d54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003d58:	f000 fc34 	bl	1a0045c4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003d5c:	0123      	lsls	r3, r4, #4
1a003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
1a003d62:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003d64:	68ea      	ldr	r2, [r5, #12]
1a003d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003d6a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003d6c:	6029      	str	r1, [r5, #0]
1a003d6e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003d72:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003d74:	68ea      	ldr	r2, [r5, #12]
1a003d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003d7a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003d7c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003d80:	0900      	lsrs	r0, r0, #4
1a003d82:	bd38      	pop	{r3, r4, r5, pc}
1a003d84:	1a005b54 	.word	0x1a005b54

1a003d88 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003d8c:	b083      	sub	sp, #12
1a003d8e:	4683      	mov	fp, r0
1a003d90:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003d92:	f7ff ff99 	bl	1a003cc8 <Chip_UART_GetIndex>
1a003d96:	4b35      	ldr	r3, [pc, #212]	; (1a003e6c <Chip_UART_SetBaudFDR+0xe4>)
1a003d98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003d9c:	f000 fc12 	bl	1a0045c4 <Chip_Clock_GetRate>
1a003da0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a003da2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003da6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003da8:	2300      	movs	r3, #0
1a003daa:	9301      	str	r3, [sp, #4]
1a003dac:	46a2      	mov	sl, r4
1a003dae:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003db0:	e02a      	b.n	1a003e08 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a003db2:	4242      	negs	r2, r0
				div ++;
1a003db4:	1c4b      	adds	r3, r1, #1
1a003db6:	e017      	b.n	1a003de8 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003db8:	b30a      	cbz	r2, 1a003dfe <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003dba:	4617      	mov	r7, r2
			sd = d;
1a003dbc:	9501      	str	r5, [sp, #4]
			sm = m;
1a003dbe:	46a2      	mov	sl, r4
			sdiv = div;
1a003dc0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a003dc2:	3501      	adds	r5, #1
1a003dc4:	42ac      	cmp	r4, r5
1a003dc6:	d91e      	bls.n	1a003e06 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003dc8:	0933      	lsrs	r3, r6, #4
1a003dca:	0730      	lsls	r0, r6, #28
1a003dcc:	fba4 0100 	umull	r0, r1, r4, r0
1a003dd0:	fb04 1103 	mla	r1, r4, r3, r1
1a003dd4:	1962      	adds	r2, r4, r5
1a003dd6:	fb08 f202 	mul.w	r2, r8, r2
1a003dda:	2300      	movs	r3, #0
1a003ddc:	f001 fa68 	bl	1a0052b0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003de0:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a003de2:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003de4:	2800      	cmp	r0, #0
1a003de6:	dbe4      	blt.n	1a003db2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003de8:	4297      	cmp	r7, r2
1a003dea:	d3ea      	bcc.n	1a003dc2 <Chip_UART_SetBaudFDR+0x3a>
1a003dec:	2b00      	cmp	r3, #0
1a003dee:	d0e8      	beq.n	1a003dc2 <Chip_UART_SetBaudFDR+0x3a>
1a003df0:	0c19      	lsrs	r1, r3, #16
1a003df2:	d1e6      	bne.n	1a003dc2 <Chip_UART_SetBaudFDR+0x3a>
1a003df4:	2b02      	cmp	r3, #2
1a003df6:	d8df      	bhi.n	1a003db8 <Chip_UART_SetBaudFDR+0x30>
1a003df8:	2d00      	cmp	r5, #0
1a003dfa:	d0dd      	beq.n	1a003db8 <Chip_UART_SetBaudFDR+0x30>
1a003dfc:	e7e1      	b.n	1a003dc2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003dfe:	4617      	mov	r7, r2
			sd = d;
1a003e00:	9501      	str	r5, [sp, #4]
			sm = m;
1a003e02:	46a2      	mov	sl, r4
			sdiv = div;
1a003e04:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003e06:	3401      	adds	r4, #1
1a003e08:	b11f      	cbz	r7, 1a003e12 <Chip_UART_SetBaudFDR+0x8a>
1a003e0a:	2c0f      	cmp	r4, #15
1a003e0c:	d801      	bhi.n	1a003e12 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003e0e:	2500      	movs	r5, #0
1a003e10:	e7d8      	b.n	1a003dc4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003e12:	f1b9 0f00 	cmp.w	r9, #0
1a003e16:	d024      	beq.n	1a003e62 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003e18:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003e20:	f8cb 300c 	str.w	r3, [fp, #12]
1a003e24:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a003e28:	f8cb 3000 	str.w	r3, [fp]
1a003e2c:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003e30:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003e34:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003e3c:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003e40:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003e44:	b2db      	uxtb	r3, r3
1a003e46:	9901      	ldr	r1, [sp, #4]
1a003e48:	f001 020f 	and.w	r2, r1, #15
1a003e4c:	4313      	orrs	r3, r2
1a003e4e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003e52:	0933      	lsrs	r3, r6, #4
1a003e54:	fb0a f303 	mul.w	r3, sl, r3
1a003e58:	448a      	add	sl, r1
1a003e5a:	fb09 f90a 	mul.w	r9, r9, sl
1a003e5e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003e62:	4648      	mov	r0, r9
1a003e64:	b003      	add	sp, #12
1a003e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003e6a:	bf00      	nop
1a003e6c:	1a005b54 	.word	0x1a005b54

1a003e70 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003e70:	4b03      	ldr	r3, [pc, #12]	; (1a003e80 <Chip_ADC_GetClockIndex+0x10>)
1a003e72:	4298      	cmp	r0, r3
1a003e74:	d001      	beq.n	1a003e7a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003e76:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003e78:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003e7a:	2004      	movs	r0, #4
1a003e7c:	4770      	bx	lr
1a003e7e:	bf00      	nop
1a003e80:	400e4000 	.word	0x400e4000

1a003e84 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003e84:	b570      	push	{r4, r5, r6, lr}
1a003e86:	460d      	mov	r5, r1
1a003e88:	4614      	mov	r4, r2
1a003e8a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003e8c:	f7ff fff0 	bl	1a003e70 <Chip_ADC_GetClockIndex>
1a003e90:	f000 fb98 	bl	1a0045c4 <Chip_Clock_GetRate>
	if (burstMode) {
1a003e94:	b965      	cbnz	r5, 1a003eb0 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a003e96:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003e9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003e9e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a003ea2:	0064      	lsls	r4, r4, #1
1a003ea4:	fbb0 f0f4 	udiv	r0, r0, r4
1a003ea8:	b2c0      	uxtb	r0, r0
1a003eaa:	3801      	subs	r0, #1
	return div;
}
1a003eac:	b2c0      	uxtb	r0, r0
1a003eae:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003eb0:	fb04 f406 	mul.w	r4, r4, r6
1a003eb4:	e7f3      	b.n	1a003e9e <getClkDiv+0x1a>

1a003eb6 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a003eb6:	6803      	ldr	r3, [r0, #0]
1a003eb8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a003ebc:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a003ec0:	6001      	str	r1, [r0, #0]
}
1a003ec2:	4770      	bx	lr

1a003ec4 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a003ec4:	3104      	adds	r1, #4
1a003ec6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a003eca:	2b00      	cmp	r3, #0
1a003ecc:	db01      	blt.n	1a003ed2 <readAdcVal+0xe>
		return ERROR;
1a003ece:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a003ed0:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a003ed2:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a003ed6:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a003ed8:	2001      	movs	r0, #1
1a003eda:	4770      	bx	lr

1a003edc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003edc:	b538      	push	{r3, r4, r5, lr}
1a003ede:	4605      	mov	r5, r0
1a003ee0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003ee2:	f7ff ffc5 	bl	1a003e70 <Chip_ADC_GetClockIndex>
1a003ee6:	2301      	movs	r3, #1
1a003ee8:	461a      	mov	r2, r3
1a003eea:	4619      	mov	r1, r3
1a003eec:	f000 fb18 	bl	1a004520 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003ef0:	2100      	movs	r1, #0
1a003ef2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003ef4:	4a08      	ldr	r2, [pc, #32]	; (1a003f18 <Chip_ADC_Init+0x3c>)
1a003ef6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003ef8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003efa:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003efc:	230b      	movs	r3, #11
1a003efe:	4628      	mov	r0, r5
1a003f00:	f7ff ffc0 	bl	1a003e84 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003f04:	0200      	lsls	r0, r0, #8
1a003f06:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003f0a:	7920      	ldrb	r0, [r4, #4]
1a003f0c:	0440      	lsls	r0, r0, #17
1a003f0e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003f12:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003f14:	6028      	str	r0, [r5, #0]
}
1a003f16:	bd38      	pop	{r3, r4, r5, pc}
1a003f18:	00061a80 	.word	0x00061a80

1a003f1c <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a003f1c:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a003f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
1a003f22:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a003f24:	2200      	movs	r2, #0
1a003f26:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a003f28:	f7ff ffa2 	bl	1a003e70 <Chip_ADC_GetClockIndex>
1a003f2c:	f000 fb30 	bl	1a004590 <Chip_Clock_Disable>
}
1a003f30:	bd08      	pop	{r3, pc}

1a003f32 <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a003f32:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a003f34:	f7ff ffc6 	bl	1a003ec4 <readAdcVal>
}
1a003f38:	bd08      	pop	{r3, pc}

1a003f3a <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a003f3a:	2a01      	cmp	r2, #1
1a003f3c:	d00a      	beq.n	1a003f54 <Chip_ADC_ReadStatus+0x1a>
1a003f3e:	b11a      	cbz	r2, 1a003f48 <Chip_ADC_ReadStatus+0xe>
1a003f40:	2a02      	cmp	r2, #2
1a003f42:	d00f      	beq.n	1a003f64 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a003f44:	2000      	movs	r0, #0
}
1a003f46:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a003f48:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003f4a:	40c8      	lsrs	r0, r1
1a003f4c:	f000 0001 	and.w	r0, r0, #1
1a003f50:	b2c0      	uxtb	r0, r0
1a003f52:	4770      	bx	lr
		channel += 8;
1a003f54:	3108      	adds	r1, #8
1a003f56:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a003f58:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003f5a:	40c8      	lsrs	r0, r1
1a003f5c:	f000 0001 	and.w	r0, r0, #1
1a003f60:	b2c0      	uxtb	r0, r0
1a003f62:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a003f64:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a003f66:	0c1b      	lsrs	r3, r3, #16
1a003f68:	bf14      	ite	ne
1a003f6a:	2001      	movne	r0, #1
1a003f6c:	2000      	moveq	r0, #0
1a003f6e:	4770      	bx	lr

1a003f70 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003f70:	2a01      	cmp	r2, #1
1a003f72:	d007      	beq.n	1a003f84 <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a003f74:	68c3      	ldr	r3, [r0, #12]
1a003f76:	2201      	movs	r2, #1
1a003f78:	fa02 f101 	lsl.w	r1, r2, r1
1a003f7c:	ea23 0101 	bic.w	r1, r3, r1
1a003f80:	60c1      	str	r1, [r0, #12]
	}
}
1a003f82:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a003f84:	68c3      	ldr	r3, [r0, #12]
1a003f86:	fa02 f101 	lsl.w	r1, r2, r1
1a003f8a:	4319      	orrs	r1, r3
1a003f8c:	60c1      	str	r1, [r0, #12]
1a003f8e:	4770      	bx	lr

1a003f90 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a003f90:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a003f92:	2901      	cmp	r1, #1
1a003f94:	d904      	bls.n	1a003fa0 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a003f96:	b932      	cbnz	r2, 1a003fa6 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a003f98:	6803      	ldr	r3, [r0, #0]
1a003f9a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a003f9e:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a003fa0:	f7ff ff89 	bl	1a003eb6 <setStartMode>
}
1a003fa4:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a003fa6:	6803      	ldr	r3, [r0, #0]
1a003fa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a003fac:	6003      	str	r3, [r0, #0]
1a003fae:	e7f7      	b.n	1a003fa0 <Chip_ADC_SetStartMode+0x10>

1a003fb0 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003fb0:	b570      	push	{r4, r5, r6, lr}
1a003fb2:	4605      	mov	r5, r0
1a003fb4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003fb6:	6804      	ldr	r4, [r0, #0]
1a003fb8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003fbc:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003fc0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003fc2:	790b      	ldrb	r3, [r1, #4]
1a003fc4:	f1c3 030b 	rsb	r3, r3, #11
1a003fc8:	b2db      	uxtb	r3, r3
1a003fca:	7949      	ldrb	r1, [r1, #5]
1a003fcc:	f7ff ff5a 	bl	1a003e84 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003fd0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003fd4:	7930      	ldrb	r0, [r6, #4]
1a003fd6:	0440      	lsls	r0, r0, #17
1a003fd8:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003fdc:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a003fde:	6028      	str	r0, [r5, #0]
}
1a003fe0:	bd70      	pop	{r4, r5, r6, pc}

1a003fe2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003fe2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003fe4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003fe6:	680a      	ldr	r2, [r1, #0]
1a003fe8:	f7ff ffe2 	bl	1a003fb0 <Chip_ADC_SetSampleRate>
}
1a003fec:	bd08      	pop	{r3, pc}

1a003fee <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003fee:	2a01      	cmp	r2, #1
1a003ff0:	d00b      	beq.n	1a00400a <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a003ff2:	6803      	ldr	r3, [r0, #0]
1a003ff4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a003ff8:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a003ffa:	6803      	ldr	r3, [r0, #0]
1a003ffc:	2201      	movs	r2, #1
1a003ffe:	fa02 f101 	lsl.w	r1, r2, r1
1a004002:	ea23 0101 	bic.w	r1, r3, r1
1a004006:	6001      	str	r1, [r0, #0]
	}
}
1a004008:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a00400a:	6803      	ldr	r3, [r0, #0]
1a00400c:	fa02 f101 	lsl.w	r1, r2, r1
1a004010:	4319      	orrs	r1, r3
1a004012:	6001      	str	r1, [r0, #0]
1a004014:	4770      	bx	lr

1a004016 <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a004016:	b538      	push	{r3, r4, r5, lr}
1a004018:	4604      	mov	r4, r0
1a00401a:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a00401c:	2100      	movs	r1, #0
1a00401e:	f7ff ff4a 	bl	1a003eb6 <setStartMode>
	
    if (NewState == DISABLE) {
1a004022:	b125      	cbz	r5, 1a00402e <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a004024:	6823      	ldr	r3, [r4, #0]
1a004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a00402a:	6023      	str	r3, [r4, #0]
	}
}
1a00402c:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR &= ~ADC_CR_BURST;
1a00402e:	6823      	ldr	r3, [r4, #0]
1a004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a004034:	6023      	str	r3, [r4, #0]
1a004036:	e7f9      	b.n	1a00402c <Chip_ADC_SetBurstCmd+0x16>

1a004038 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a004038:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00403a:	2069      	movs	r0, #105	; 0x69
1a00403c:	f000 fac2 	bl	1a0045c4 <Chip_Clock_GetRate>
1a004040:	4b01      	ldr	r3, [pc, #4]	; (1a004048 <SystemCoreClockUpdate+0x10>)
1a004042:	6018      	str	r0, [r3, #0]
}
1a004044:	bd08      	pop	{r3, pc}
1a004046:	bf00      	nop
1a004048:	10002bb4 	.word	0x10002bb4

1a00404c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00404c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00404e:	680b      	ldr	r3, [r1, #0]
1a004050:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004054:	d002      	beq.n	1a00405c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a004056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00405a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00405c:	4607      	mov	r7, r0
1a00405e:	2501      	movs	r5, #1
1a004060:	e03b      	b.n	1a0040da <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a004062:	694b      	ldr	r3, [r1, #20]
1a004064:	fb03 f302 	mul.w	r3, r3, r2
1a004068:	fbb3 f3f5 	udiv	r3, r3, r5
1a00406c:	e014      	b.n	1a004098 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00406e:	461c      	mov	r4, r3
1a004070:	e020      	b.n	1a0040b4 <pll_calc_divs+0x68>
		return -val;
1a004072:	f1cc 0c00 	rsb	ip, ip, #0
1a004076:	e020      	b.n	1a0040ba <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a004078:	3201      	adds	r2, #1
1a00407a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00407e:	dc26      	bgt.n	1a0040ce <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a004080:	680c      	ldr	r4, [r1, #0]
1a004082:	f014 0f40 	tst.w	r4, #64	; 0x40
1a004086:	d0ec      	beq.n	1a004062 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a004088:	1c73      	adds	r3, r6, #1
1a00408a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00408e:	694b      	ldr	r3, [r1, #20]
1a004090:	fb03 f30c 	mul.w	r3, r3, ip
1a004094:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a004098:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0040e8 <pll_calc_divs+0x9c>
1a00409c:	4563      	cmp	r3, ip
1a00409e:	d9eb      	bls.n	1a004078 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0040a0:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0040ec <pll_calc_divs+0xa0>
1a0040a4:	4563      	cmp	r3, ip
1a0040a6:	d812      	bhi.n	1a0040ce <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0040a8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0040ac:	d1df      	bne.n	1a00406e <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0040ae:	1c74      	adds	r4, r6, #1
1a0040b0:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0040b4:	ebb0 0c04 	subs.w	ip, r0, r4
1a0040b8:	d4db      	bmi.n	1a004072 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0040ba:	4567      	cmp	r7, ip
1a0040bc:	d9dc      	bls.n	1a004078 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0040be:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0040c0:	1c77      	adds	r7, r6, #1
1a0040c2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0040c4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0040c6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0040c8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0040ca:	4667      	mov	r7, ip
1a0040cc:	e7d4      	b.n	1a004078 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0040ce:	3601      	adds	r6, #1
1a0040d0:	2e03      	cmp	r6, #3
1a0040d2:	dc01      	bgt.n	1a0040d8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0040d4:	2201      	movs	r2, #1
1a0040d6:	e7d0      	b.n	1a00407a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0040d8:	3501      	adds	r5, #1
1a0040da:	2d04      	cmp	r5, #4
1a0040dc:	dc01      	bgt.n	1a0040e2 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0040de:	2600      	movs	r6, #0
1a0040e0:	e7f6      	b.n	1a0040d0 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0040e2:	bcf0      	pop	{r4, r5, r6, r7}
1a0040e4:	4770      	bx	lr
1a0040e6:	bf00      	nop
1a0040e8:	094c5eff 	.word	0x094c5eff
1a0040ec:	1312d000 	.word	0x1312d000

1a0040f0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0040f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0040f2:	b099      	sub	sp, #100	; 0x64
1a0040f4:	4605      	mov	r5, r0
1a0040f6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0040f8:	225c      	movs	r2, #92	; 0x5c
1a0040fa:	2100      	movs	r1, #0
1a0040fc:	a801      	add	r0, sp, #4
1a0040fe:	f001 fa86 	bl	1a00560e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a004102:	2380      	movs	r3, #128	; 0x80
1a004104:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a004106:	6963      	ldr	r3, [r4, #20]
1a004108:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00410a:	7923      	ldrb	r3, [r4, #4]
1a00410c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a004110:	4669      	mov	r1, sp
1a004112:	4628      	mov	r0, r5
1a004114:	f7ff ff9a 	bl	1a00404c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a004118:	9b06      	ldr	r3, [sp, #24]
1a00411a:	42ab      	cmp	r3, r5
1a00411c:	d027      	beq.n	1a00416e <pll_get_frac+0x7e>
	if (val < 0)
1a00411e:	1aeb      	subs	r3, r5, r3
1a004120:	d42e      	bmi.n	1a004180 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a004122:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a004124:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00412a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00412c:	6963      	ldr	r3, [r4, #20]
1a00412e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a004130:	7923      	ldrb	r3, [r4, #4]
1a004132:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a004136:	a910      	add	r1, sp, #64	; 0x40
1a004138:	4628      	mov	r0, r5
1a00413a:	f7ff ff87 	bl	1a00404c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00413e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a004140:	42ab      	cmp	r3, r5
1a004142:	d01f      	beq.n	1a004184 <pll_get_frac+0x94>
	if (val < 0)
1a004144:	1aeb      	subs	r3, r5, r3
1a004146:	d425      	bmi.n	1a004194 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a004148:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00414a:	4b2b      	ldr	r3, [pc, #172]	; (1a0041f8 <pll_get_frac+0x108>)
1a00414c:	429d      	cmp	r5, r3
1a00414e:	d923      	bls.n	1a004198 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a004150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a004152:	1aed      	subs	r5, r5, r3
1a004154:	d433      	bmi.n	1a0041be <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a004156:	42ae      	cmp	r6, r5
1a004158:	dc3b      	bgt.n	1a0041d2 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00415a:	42be      	cmp	r6, r7
1a00415c:	dc31      	bgt.n	1a0041c2 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00415e:	466d      	mov	r5, sp
1a004160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004164:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00416c:	e006      	b.n	1a00417c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00416e:	466d      	mov	r5, sp
1a004170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004174:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00417c:	b019      	add	sp, #100	; 0x64
1a00417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a004180:	425b      	negs	r3, r3
1a004182:	e7ce      	b.n	1a004122 <pll_get_frac+0x32>
		*ppll = pll[2];
1a004184:	ad10      	add	r5, sp, #64	; 0x40
1a004186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00418a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00418e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a004192:	e7f3      	b.n	1a00417c <pll_get_frac+0x8c>
		return -val;
1a004194:	425b      	negs	r3, r3
1a004196:	e7d7      	b.n	1a004148 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a004198:	2340      	movs	r3, #64	; 0x40
1a00419a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00419c:	6963      	ldr	r3, [r4, #20]
1a00419e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0041a0:	a908      	add	r1, sp, #32
1a0041a2:	4628      	mov	r0, r5
1a0041a4:	f7ff ff52 	bl	1a00404c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0041a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0041aa:	42ab      	cmp	r3, r5
1a0041ac:	d1d0      	bne.n	1a004150 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0041ae:	ad08      	add	r5, sp, #32
1a0041b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0041bc:	e7de      	b.n	1a00417c <pll_get_frac+0x8c>
		return -val;
1a0041be:	426d      	negs	r5, r5
1a0041c0:	e7c9      	b.n	1a004156 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0041c2:	ad10      	add	r5, sp, #64	; 0x40
1a0041c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0041d0:	e7d4      	b.n	1a00417c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0041d2:	42af      	cmp	r7, r5
1a0041d4:	db07      	blt.n	1a0041e6 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0041d6:	ad08      	add	r5, sp, #32
1a0041d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0041e4:	e7ca      	b.n	1a00417c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0041e6:	ad10      	add	r5, sp, #64	; 0x40
1a0041e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0041f4:	e7c2      	b.n	1a00417c <pll_get_frac+0x8c>
1a0041f6:	bf00      	nop
1a0041f8:	068e7780 	.word	0x068e7780

1a0041fc <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0041fc:	b430      	push	{r4, r5}
1a0041fe:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a004200:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a004202:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a004204:	e000      	b.n	1a004208 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a004206:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a004208:	281c      	cmp	r0, #28
1a00420a:	d118      	bne.n	1a00423e <Chip_Clock_FindBaseClock+0x42>
1a00420c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a004210:	0051      	lsls	r1, r2, #1
1a004212:	4a0c      	ldr	r2, [pc, #48]	; (1a004244 <Chip_Clock_FindBaseClock+0x48>)
1a004214:	440a      	add	r2, r1
1a004216:	7914      	ldrb	r4, [r2, #4]
1a004218:	4284      	cmp	r4, r0
1a00421a:	d010      	beq.n	1a00423e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00421c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a004220:	004a      	lsls	r2, r1, #1
1a004222:	4908      	ldr	r1, [pc, #32]	; (1a004244 <Chip_Clock_FindBaseClock+0x48>)
1a004224:	5a8a      	ldrh	r2, [r1, r2]
1a004226:	42aa      	cmp	r2, r5
1a004228:	d8ed      	bhi.n	1a004206 <Chip_Clock_FindBaseClock+0xa>
1a00422a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00422e:	0051      	lsls	r1, r2, #1
1a004230:	4a04      	ldr	r2, [pc, #16]	; (1a004244 <Chip_Clock_FindBaseClock+0x48>)
1a004232:	440a      	add	r2, r1
1a004234:	8852      	ldrh	r2, [r2, #2]
1a004236:	42aa      	cmp	r2, r5
1a004238:	d3e5      	bcc.n	1a004206 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00423a:	4620      	mov	r0, r4
1a00423c:	e7e4      	b.n	1a004208 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00423e:	bc30      	pop	{r4, r5}
1a004240:	4770      	bx	lr
1a004242:	bf00      	nop
1a004244:	1a005b70 	.word	0x1a005b70

1a004248 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a004248:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00424a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00424e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a004250:	4a0d      	ldr	r2, [pc, #52]	; (1a004288 <Chip_Clock_EnableCrystal+0x40>)
1a004252:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a004254:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a004258:	6992      	ldr	r2, [r2, #24]
1a00425a:	428a      	cmp	r2, r1
1a00425c:	d001      	beq.n	1a004262 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00425e:	4a0a      	ldr	r2, [pc, #40]	; (1a004288 <Chip_Clock_EnableCrystal+0x40>)
1a004260:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a004262:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a004266:	4a09      	ldr	r2, [pc, #36]	; (1a00428c <Chip_Clock_EnableCrystal+0x44>)
1a004268:	6811      	ldr	r1, [r2, #0]
1a00426a:	4a09      	ldr	r2, [pc, #36]	; (1a004290 <Chip_Clock_EnableCrystal+0x48>)
1a00426c:	4291      	cmp	r1, r2
1a00426e:	d901      	bls.n	1a004274 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a004270:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a004274:	4a04      	ldr	r2, [pc, #16]	; (1a004288 <Chip_Clock_EnableCrystal+0x40>)
1a004276:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a004278:	9b01      	ldr	r3, [sp, #4]
1a00427a:	1e5a      	subs	r2, r3, #1
1a00427c:	9201      	str	r2, [sp, #4]
1a00427e:	2b00      	cmp	r3, #0
1a004280:	d1fa      	bne.n	1a004278 <Chip_Clock_EnableCrystal+0x30>
}
1a004282:	b002      	add	sp, #8
1a004284:	4770      	bx	lr
1a004286:	bf00      	nop
1a004288:	40050000 	.word	0x40050000
1a00428c:	1a005ad8 	.word	0x1a005ad8
1a004290:	01312cff 	.word	0x01312cff

1a004294 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a004294:	3012      	adds	r0, #18
1a004296:	4b05      	ldr	r3, [pc, #20]	; (1a0042ac <Chip_Clock_GetDividerSource+0x18>)
1a004298:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a00429c:	f010 0f01 	tst.w	r0, #1
1a0042a0:	d102      	bne.n	1a0042a8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0042a2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0042a6:	4770      	bx	lr
		return CLKINPUT_PD;
1a0042a8:	2011      	movs	r0, #17
}
1a0042aa:	4770      	bx	lr
1a0042ac:	40050000 	.word	0x40050000

1a0042b0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0042b0:	f100 0212 	add.w	r2, r0, #18
1a0042b4:	4b03      	ldr	r3, [pc, #12]	; (1a0042c4 <Chip_Clock_GetDividerDivisor+0x14>)
1a0042b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0042ba:	4b03      	ldr	r3, [pc, #12]	; (1a0042c8 <Chip_Clock_GetDividerDivisor+0x18>)
1a0042bc:	5c18      	ldrb	r0, [r3, r0]
}
1a0042be:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0042c2:	4770      	bx	lr
1a0042c4:	40050000 	.word	0x40050000
1a0042c8:	1a005b68 	.word	0x1a005b68

1a0042cc <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0042cc:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0042ce:	2810      	cmp	r0, #16
1a0042d0:	d80a      	bhi.n	1a0042e8 <Chip_Clock_GetClockInputHz+0x1c>
1a0042d2:	e8df f000 	tbb	[pc, r0]
1a0042d6:	0b42      	.short	0x0b42
1a0042d8:	091f160d 	.word	0x091f160d
1a0042dc:	2b282522 	.word	0x2b282522
1a0042e0:	322e0909 	.word	0x322e0909
1a0042e4:	3a36      	.short	0x3a36
1a0042e6:	3e          	.byte	0x3e
1a0042e7:	00          	.byte	0x00
	uint32_t rate = 0;
1a0042e8:	2000      	movs	r0, #0
1a0042ea:	e038      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0042ec:	481e      	ldr	r0, [pc, #120]	; (1a004368 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0042ee:	e036      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0042f0:	4b1e      	ldr	r3, [pc, #120]	; (1a00436c <Chip_Clock_GetClockInputHz+0xa0>)
1a0042f2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0042f6:	f003 0307 	and.w	r3, r3, #7
1a0042fa:	2b04      	cmp	r3, #4
1a0042fc:	d130      	bne.n	1a004360 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0042fe:	2000      	movs	r0, #0
1a004300:	e02d      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a004302:	4b1a      	ldr	r3, [pc, #104]	; (1a00436c <Chip_Clock_GetClockInputHz+0xa0>)
1a004304:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a004308:	f003 0307 	and.w	r3, r3, #7
1a00430c:	2b04      	cmp	r3, #4
1a00430e:	d029      	beq.n	1a004364 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a004310:	4817      	ldr	r0, [pc, #92]	; (1a004370 <Chip_Clock_GetClockInputHz+0xa4>)
1a004312:	e024      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a004314:	4b17      	ldr	r3, [pc, #92]	; (1a004374 <Chip_Clock_GetClockInputHz+0xa8>)
1a004316:	6818      	ldr	r0, [r3, #0]
		break;
1a004318:	e021      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00431a:	4b17      	ldr	r3, [pc, #92]	; (1a004378 <Chip_Clock_GetClockInputHz+0xac>)
1a00431c:	6818      	ldr	r0, [r3, #0]
		break;
1a00431e:	e01e      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a004320:	4b16      	ldr	r3, [pc, #88]	; (1a00437c <Chip_Clock_GetClockInputHz+0xb0>)
1a004322:	6818      	ldr	r0, [r3, #0]
		break;
1a004324:	e01b      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a004326:	4b15      	ldr	r3, [pc, #84]	; (1a00437c <Chip_Clock_GetClockInputHz+0xb0>)
1a004328:	6858      	ldr	r0, [r3, #4]
		break;
1a00432a:	e018      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00432c:	f000 f86a 	bl	1a004404 <Chip_Clock_GetMainPLLHz>
		break;
1a004330:	e015      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a004332:	2100      	movs	r1, #0
1a004334:	f000 f89c 	bl	1a004470 <Chip_Clock_GetDivRate>
		break;
1a004338:	e011      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00433a:	2101      	movs	r1, #1
1a00433c:	f000 f898 	bl	1a004470 <Chip_Clock_GetDivRate>
		break;
1a004340:	e00d      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a004342:	2102      	movs	r1, #2
1a004344:	f000 f894 	bl	1a004470 <Chip_Clock_GetDivRate>
		break;
1a004348:	e009      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00434a:	2103      	movs	r1, #3
1a00434c:	f000 f890 	bl	1a004470 <Chip_Clock_GetDivRate>
		break;
1a004350:	e005      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a004352:	2104      	movs	r1, #4
1a004354:	f000 f88c 	bl	1a004470 <Chip_Clock_GetDivRate>
		break;
1a004358:	e001      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00435a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00435e:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a004360:	4803      	ldr	r0, [pc, #12]	; (1a004370 <Chip_Clock_GetClockInputHz+0xa4>)
1a004362:	e7fc      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a004364:	4806      	ldr	r0, [pc, #24]	; (1a004380 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a004366:	e7fa      	b.n	1a00435e <Chip_Clock_GetClockInputHz+0x92>
1a004368:	00b71b00 	.word	0x00b71b00
1a00436c:	40043000 	.word	0x40043000
1a004370:	017d7840 	.word	0x017d7840
1a004374:	1a005aac 	.word	0x1a005aac
1a004378:	1a005ad8 	.word	0x1a005ad8
1a00437c:	10002b30 	.word	0x10002b30
1a004380:	02faf080 	.word	0x02faf080

1a004384 <Chip_Clock_CalcMainPLLValue>:
{
1a004384:	b538      	push	{r3, r4, r5, lr}
1a004386:	4605      	mov	r5, r0
1a004388:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00438a:	7908      	ldrb	r0, [r1, #4]
1a00438c:	f7ff ff9e 	bl	1a0042cc <Chip_Clock_GetClockInputHz>
1a004390:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a004392:	4b19      	ldr	r3, [pc, #100]	; (1a0043f8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a004394:	442b      	add	r3, r5
1a004396:	4a19      	ldr	r2, [pc, #100]	; (1a0043fc <Chip_Clock_CalcMainPLLValue+0x78>)
1a004398:	4293      	cmp	r3, r2
1a00439a:	d821      	bhi.n	1a0043e0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00439c:	b318      	cbz	r0, 1a0043e6 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00439e:	2380      	movs	r3, #128	; 0x80
1a0043a0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0043a2:	2300      	movs	r3, #0
1a0043a4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0043a6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0043a8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0043ac:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0043ae:	4a14      	ldr	r2, [pc, #80]	; (1a004400 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0043b0:	4295      	cmp	r5, r2
1a0043b2:	d903      	bls.n	1a0043bc <Chip_Clock_CalcMainPLLValue+0x38>
1a0043b4:	fb03 f000 	mul.w	r0, r3, r0
1a0043b8:	42a8      	cmp	r0, r5
1a0043ba:	d007      	beq.n	1a0043cc <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0043bc:	4621      	mov	r1, r4
1a0043be:	4628      	mov	r0, r5
1a0043c0:	f7ff fe96 	bl	1a0040f0 <pll_get_frac>
		if (!ppll->nsel) {
1a0043c4:	68a3      	ldr	r3, [r4, #8]
1a0043c6:	b18b      	cbz	r3, 1a0043ec <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0043c8:	3b01      	subs	r3, #1
1a0043ca:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0043cc:	6923      	ldr	r3, [r4, #16]
1a0043ce:	b183      	cbz	r3, 1a0043f2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0043d0:	68e2      	ldr	r2, [r4, #12]
1a0043d2:	b10a      	cbz	r2, 1a0043d8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0043d4:	3a01      	subs	r2, #1
1a0043d6:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0043d8:	3b01      	subs	r3, #1
1a0043da:	6123      	str	r3, [r4, #16]
	return 0;
1a0043dc:	2000      	movs	r0, #0
}
1a0043de:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0043e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043e4:	e7fb      	b.n	1a0043de <Chip_Clock_CalcMainPLLValue+0x5a>
1a0043e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043ea:	e7f8      	b.n	1a0043de <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0043ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043f0:	e7f5      	b.n	1a0043de <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0043f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043f6:	e7f2      	b.n	1a0043de <Chip_Clock_CalcMainPLLValue+0x5a>
1a0043f8:	ff6b3a10 	.word	0xff6b3a10
1a0043fc:	0b940510 	.word	0x0b940510
1a004400:	094c5eff 	.word	0x094c5eff

1a004404 <Chip_Clock_GetMainPLLHz>:
{
1a004404:	b530      	push	{r4, r5, lr}
1a004406:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a004408:	4d17      	ldr	r5, [pc, #92]	; (1a004468 <Chip_Clock_GetMainPLLHz+0x64>)
1a00440a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00440c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a004410:	f7ff ff5c 	bl	1a0042cc <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a004414:	4b15      	ldr	r3, [pc, #84]	; (1a00446c <Chip_Clock_GetMainPLLHz+0x68>)
1a004416:	681b      	ldr	r3, [r3, #0]
1a004418:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00441a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00441c:	f013 0f01 	tst.w	r3, #1
1a004420:	d01f      	beq.n	1a004462 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a004422:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a004426:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00442a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00442e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a004432:	3301      	adds	r3, #1
	n = nsel + 1;
1a004434:	3201      	adds	r2, #1
	p = ptab[psel];
1a004436:	f10d 0c08 	add.w	ip, sp, #8
1a00443a:	4461      	add	r1, ip
1a00443c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a004440:	f014 0f80 	tst.w	r4, #128	; 0x80
1a004444:	d108      	bne.n	1a004458 <Chip_Clock_GetMainPLLHz+0x54>
1a004446:	b93d      	cbnz	r5, 1a004458 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a004448:	0049      	lsls	r1, r1, #1
1a00444a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00444e:	fbb0 f0f2 	udiv	r0, r0, r2
1a004452:	fb00 f003 	mul.w	r0, r0, r3
1a004456:	e005      	b.n	1a004464 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a004458:	fbb0 f0f2 	udiv	r0, r0, r2
1a00445c:	fb03 f000 	mul.w	r0, r3, r0
1a004460:	e000      	b.n	1a004464 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a004462:	2000      	movs	r0, #0
}
1a004464:	b003      	add	sp, #12
1a004466:	bd30      	pop	{r4, r5, pc}
1a004468:	40050000 	.word	0x40050000
1a00446c:	1a005b64 	.word	0x1a005b64

1a004470 <Chip_Clock_GetDivRate>:
{
1a004470:	b538      	push	{r3, r4, r5, lr}
1a004472:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a004474:	4608      	mov	r0, r1
1a004476:	f7ff ff0d 	bl	1a004294 <Chip_Clock_GetDividerSource>
1a00447a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00447c:	4620      	mov	r0, r4
1a00447e:	f7ff ff17 	bl	1a0042b0 <Chip_Clock_GetDividerDivisor>
1a004482:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a004484:	4628      	mov	r0, r5
1a004486:	f7ff ff21 	bl	1a0042cc <Chip_Clock_GetClockInputHz>
1a00448a:	3401      	adds	r4, #1
}
1a00448c:	fbb0 f0f4 	udiv	r0, r0, r4
1a004490:	bd38      	pop	{r3, r4, r5, pc}
1a004492:	Address 0x000000001a004492 is out of bounds.


1a004494 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a004494:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a004496:	f100 0416 	add.w	r4, r0, #22
1a00449a:	00a4      	lsls	r4, r4, #2
1a00449c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0044a0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0044a4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0044a6:	281b      	cmp	r0, #27
1a0044a8:	d813      	bhi.n	1a0044d2 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0044aa:	2911      	cmp	r1, #17
1a0044ac:	d01a      	beq.n	1a0044e4 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0044ae:	4d0e      	ldr	r5, [pc, #56]	; (1a0044e8 <Chip_Clock_SetBaseClock+0x54>)
1a0044b0:	4025      	ands	r5, r4

			if (autoblocken) {
1a0044b2:	b10a      	cbz	r2, 1a0044b8 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0044b4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0044b8:	b10b      	cbz	r3, 1a0044be <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0044ba:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0044be:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0044c2:	3016      	adds	r0, #22
1a0044c4:	0080      	lsls	r0, r0, #2
1a0044c6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0044ca:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0044ce:	6045      	str	r5, [r0, #4]
1a0044d0:	e008      	b.n	1a0044e4 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0044d2:	f044 0401 	orr.w	r4, r4, #1
1a0044d6:	3016      	adds	r0, #22
1a0044d8:	0080      	lsls	r0, r0, #2
1a0044da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0044de:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0044e2:	6044      	str	r4, [r0, #4]
	}
}
1a0044e4:	bc30      	pop	{r4, r5}
1a0044e6:	4770      	bx	lr
1a0044e8:	e0fff7fe 	.word	0xe0fff7fe

1a0044ec <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0044ec:	281b      	cmp	r0, #27
1a0044ee:	d80c      	bhi.n	1a00450a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0044f0:	3016      	adds	r0, #22
1a0044f2:	0080      	lsls	r0, r0, #2
1a0044f4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0044f8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0044fc:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0044fe:	f010 0f01 	tst.w	r0, #1
1a004502:	d104      	bne.n	1a00450e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a004504:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a004508:	4770      	bx	lr
		return CLKINPUT_PD;
1a00450a:	2011      	movs	r0, #17
1a00450c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00450e:	2011      	movs	r0, #17
}
1a004510:	4770      	bx	lr

1a004512 <Chip_Clock_GetBaseClocktHz>:
{
1a004512:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a004514:	f7ff ffea 	bl	1a0044ec <Chip_Clock_GetBaseClock>
1a004518:	f7ff fed8 	bl	1a0042cc <Chip_Clock_GetClockInputHz>
}
1a00451c:	bd08      	pop	{r3, pc}
1a00451e:	Address 0x000000001a00451e is out of bounds.


1a004520 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a004520:	b969      	cbnz	r1, 1a00453e <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a004522:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a004524:	b10a      	cbz	r2, 1a00452a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a004526:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00452a:	2b02      	cmp	r3, #2
1a00452c:	d009      	beq.n	1a004542 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00452e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004532:	d209      	bcs.n	1a004548 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a004534:	3020      	adds	r0, #32
1a004536:	4b07      	ldr	r3, [pc, #28]	; (1a004554 <Chip_Clock_EnableOpts+0x34>)
1a004538:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00453c:	4770      	bx	lr
		reg |= (1 << 1);
1a00453e:	2103      	movs	r1, #3
1a004540:	e7f0      	b.n	1a004524 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a004542:	f041 0120 	orr.w	r1, r1, #32
1a004546:	e7f2      	b.n	1a00452e <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a004548:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00454c:	4b02      	ldr	r3, [pc, #8]	; (1a004558 <Chip_Clock_EnableOpts+0x38>)
1a00454e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a004552:	4770      	bx	lr
1a004554:	40051000 	.word	0x40051000
1a004558:	40052000 	.word	0x40052000

1a00455c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00455c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004560:	d208      	bcs.n	1a004574 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a004562:	4a09      	ldr	r2, [pc, #36]	; (1a004588 <Chip_Clock_Enable+0x2c>)
1a004564:	3020      	adds	r0, #32
1a004566:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00456a:	f043 0301 	orr.w	r3, r3, #1
1a00456e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a004572:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a004574:	4a05      	ldr	r2, [pc, #20]	; (1a00458c <Chip_Clock_Enable+0x30>)
1a004576:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00457a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00457e:	f043 0301 	orr.w	r3, r3, #1
1a004582:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a004586:	4770      	bx	lr
1a004588:	40051000 	.word	0x40051000
1a00458c:	40052000 	.word	0x40052000

1a004590 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a004590:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004594:	d208      	bcs.n	1a0045a8 <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a004596:	4a09      	ldr	r2, [pc, #36]	; (1a0045bc <Chip_Clock_Disable+0x2c>)
1a004598:	3020      	adds	r0, #32
1a00459a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00459e:	f023 0301 	bic.w	r3, r3, #1
1a0045a2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0045a6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a0045a8:	4a05      	ldr	r2, [pc, #20]	; (1a0045c0 <Chip_Clock_Disable+0x30>)
1a0045aa:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0045ae:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0045b2:	f023 0301 	bic.w	r3, r3, #1
1a0045b6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0045ba:	4770      	bx	lr
1a0045bc:	40051000 	.word	0x40051000
1a0045c0:	40052000 	.word	0x40052000

1a0045c4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0045c4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0045c6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0045ca:	d309      	bcc.n	1a0045e0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0045cc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0045d0:	4a0d      	ldr	r2, [pc, #52]	; (1a004608 <Chip_Clock_GetRate+0x44>)
1a0045d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0045d6:	f014 0f01 	tst.w	r4, #1
1a0045da:	d107      	bne.n	1a0045ec <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0045dc:	2000      	movs	r0, #0
	}

	return rate;
}
1a0045de:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0045e0:	f100 0320 	add.w	r3, r0, #32
1a0045e4:	4a09      	ldr	r2, [pc, #36]	; (1a00460c <Chip_Clock_GetRate+0x48>)
1a0045e6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0045ea:	e7f4      	b.n	1a0045d6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0045ec:	f7ff fe06 	bl	1a0041fc <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0045f0:	f7ff ff8f 	bl	1a004512 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0045f4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0045f8:	d103      	bne.n	1a004602 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0045fa:	2301      	movs	r3, #1
		rate = rate / div;
1a0045fc:	fbb0 f0f3 	udiv	r0, r0, r3
1a004600:	e7ed      	b.n	1a0045de <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a004602:	2302      	movs	r3, #2
1a004604:	e7fa      	b.n	1a0045fc <Chip_Clock_GetRate+0x38>
1a004606:	bf00      	nop
1a004608:	40052000 	.word	0x40052000
1a00460c:	40051000 	.word	0x40051000

1a004610 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a004610:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a004612:	4b0f      	ldr	r3, [pc, #60]	; (1a004650 <fpuInit+0x40>)
1a004614:	681b      	ldr	r3, [r3, #0]
1a004616:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a004618:	4b0e      	ldr	r3, [pc, #56]	; (1a004654 <fpuInit+0x44>)
1a00461a:	681b      	ldr	r3, [r3, #0]
1a00461c:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00461e:	9a02      	ldr	r2, [sp, #8]
1a004620:	4b0d      	ldr	r3, [pc, #52]	; (1a004658 <fpuInit+0x48>)
1a004622:	429a      	cmp	r2, r3
1a004624:	d00c      	beq.n	1a004640 <fpuInit+0x30>
1a004626:	2300      	movs	r3, #0

	if (vfpPresent) {
1a004628:	b143      	cbz	r3, 1a00463c <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a00462a:	4a0c      	ldr	r2, [pc, #48]	; (1a00465c <fpuInit+0x4c>)
1a00462c:	6813      	ldr	r3, [r2, #0]
1a00462e:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a004630:	9b03      	ldr	r3, [sp, #12]
1a004632:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a004636:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a004638:	9b03      	ldr	r3, [sp, #12]
1a00463a:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a00463c:	b004      	add	sp, #16
1a00463e:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a004640:	9a01      	ldr	r2, [sp, #4]
1a004642:	4b07      	ldr	r3, [pc, #28]	; (1a004660 <fpuInit+0x50>)
1a004644:	429a      	cmp	r2, r3
1a004646:	d001      	beq.n	1a00464c <fpuInit+0x3c>
1a004648:	2300      	movs	r3, #0
1a00464a:	e7ed      	b.n	1a004628 <fpuInit+0x18>
1a00464c:	2301      	movs	r3, #1
1a00464e:	e7eb      	b.n	1a004628 <fpuInit+0x18>
1a004650:	e000ef40 	.word	0xe000ef40
1a004654:	e000ef44 	.word	0xe000ef44
1a004658:	10110021 	.word	0x10110021
1a00465c:	e000ed88 	.word	0xe000ed88
1a004660:	11000011 	.word	0x11000011

1a004664 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a004664:	4770      	bx	lr
1a004666:	Address 0x000000001a004666 is out of bounds.


1a004668 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a004668:	b570      	push	{r4, r5, r6, lr}
1a00466a:	b08a      	sub	sp, #40	; 0x28
1a00466c:	4605      	mov	r5, r0
1a00466e:	460e      	mov	r6, r1
1a004670:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a004672:	f242 7310 	movw	r3, #10000	; 0x2710
1a004676:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a004678:	2806      	cmp	r0, #6
1a00467a:	d018      	beq.n	1a0046ae <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00467c:	2300      	movs	r3, #0
1a00467e:	2201      	movs	r2, #1
1a004680:	4629      	mov	r1, r5
1a004682:	2004      	movs	r0, #4
1a004684:	f7ff ff06 	bl	1a004494 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a004688:	4a49      	ldr	r2, [pc, #292]	; (1a0047b0 <Chip_SetupCoreClock+0x148>)
1a00468a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00468c:	f043 0301 	orr.w	r3, r3, #1
1a004690:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a004692:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a004696:	a901      	add	r1, sp, #4
1a004698:	4630      	mov	r0, r6
1a00469a:	f7ff fe73 	bl	1a004384 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00469e:	4b45      	ldr	r3, [pc, #276]	; (1a0047b4 <Chip_SetupCoreClock+0x14c>)
1a0046a0:	429e      	cmp	r6, r3
1a0046a2:	d916      	bls.n	1a0046d2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0046a4:	9b01      	ldr	r3, [sp, #4]
1a0046a6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0046aa:	d003      	beq.n	1a0046b4 <Chip_SetupCoreClock+0x4c>
1a0046ac:	e7fe      	b.n	1a0046ac <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0046ae:	f7ff fdcb 	bl	1a004248 <Chip_Clock_EnableCrystal>
1a0046b2:	e7e3      	b.n	1a00467c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0046b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0046b8:	d005      	beq.n	1a0046c6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0046ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0046be:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0046c0:	2500      	movs	r5, #0
			direct = 1;
1a0046c2:	2601      	movs	r6, #1
1a0046c4:	e007      	b.n	1a0046d6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0046c6:	9b04      	ldr	r3, [sp, #16]
1a0046c8:	3301      	adds	r3, #1
1a0046ca:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0046cc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0046ce:	2600      	movs	r6, #0
1a0046d0:	e001      	b.n	1a0046d6 <Chip_SetupCoreClock+0x6e>
1a0046d2:	2500      	movs	r5, #0
1a0046d4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0046d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0046da:	9b01      	ldr	r3, [sp, #4]
1a0046dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0046e0:	9a05      	ldr	r2, [sp, #20]
1a0046e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0046e6:	9a03      	ldr	r2, [sp, #12]
1a0046e8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0046ec:	9a04      	ldr	r2, [sp, #16]
1a0046ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0046f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0046f6:	4a2e      	ldr	r2, [pc, #184]	; (1a0047b0 <Chip_SetupCoreClock+0x148>)
1a0046f8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0046fa:	4b2d      	ldr	r3, [pc, #180]	; (1a0047b0 <Chip_SetupCoreClock+0x148>)
1a0046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0046fe:	f013 0f01 	tst.w	r3, #1
1a004702:	d0fa      	beq.n	1a0046fa <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a004704:	2300      	movs	r3, #0
1a004706:	2201      	movs	r2, #1
1a004708:	2109      	movs	r1, #9
1a00470a:	2004      	movs	r0, #4
1a00470c:	f7ff fec2 	bl	1a004494 <Chip_Clock_SetBaseClock>

	if (direct) {
1a004710:	b1fe      	cbz	r6, 1a004752 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004712:	f242 7310 	movw	r3, #10000	; 0x2710
1a004716:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a004718:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00471a:	1e5a      	subs	r2, r3, #1
1a00471c:	9209      	str	r2, [sp, #36]	; 0x24
1a00471e:	2b00      	cmp	r3, #0
1a004720:	d1fa      	bne.n	1a004718 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a004722:	9b01      	ldr	r3, [sp, #4]
1a004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004728:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00472a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00472e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a004732:	9a05      	ldr	r2, [sp, #20]
1a004734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a004738:	9a03      	ldr	r2, [sp, #12]
1a00473a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00473e:	9a04      	ldr	r2, [sp, #16]
1a004740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004748:	4a19      	ldr	r2, [pc, #100]	; (1a0047b0 <Chip_SetupCoreClock+0x148>)
1a00474a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00474c:	b36c      	cbz	r4, 1a0047aa <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00474e:	2400      	movs	r4, #0
1a004750:	e029      	b.n	1a0047a6 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a004752:	2d00      	cmp	r5, #0
1a004754:	d0fa      	beq.n	1a00474c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004756:	f242 7310 	movw	r3, #10000	; 0x2710
1a00475a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00475c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00475e:	1e5a      	subs	r2, r3, #1
1a004760:	9209      	str	r2, [sp, #36]	; 0x24
1a004762:	2b00      	cmp	r3, #0
1a004764:	d1fa      	bne.n	1a00475c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a004766:	9b04      	ldr	r3, [sp, #16]
1a004768:	1e5a      	subs	r2, r3, #1
1a00476a:	9204      	str	r2, [sp, #16]
1a00476c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a004770:	9b01      	ldr	r3, [sp, #4]
1a004772:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a004776:	9905      	ldr	r1, [sp, #20]
1a004778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00477c:	9903      	ldr	r1, [sp, #12]
1a00477e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a004782:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004786:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00478a:	4a09      	ldr	r2, [pc, #36]	; (1a0047b0 <Chip_SetupCoreClock+0x148>)
1a00478c:	6453      	str	r3, [r2, #68]	; 0x44
1a00478e:	e7dd      	b.n	1a00474c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a004790:	4809      	ldr	r0, [pc, #36]	; (1a0047b8 <Chip_SetupCoreClock+0x150>)
1a004792:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004796:	78cb      	ldrb	r3, [r1, #3]
1a004798:	788a      	ldrb	r2, [r1, #2]
1a00479a:	7849      	ldrb	r1, [r1, #1]
1a00479c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0047a0:	f7ff fe78 	bl	1a004494 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0047a4:	3401      	adds	r4, #1
1a0047a6:	2c11      	cmp	r4, #17
1a0047a8:	d9f2      	bls.n	1a004790 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0047aa:	b00a      	add	sp, #40	; 0x28
1a0047ac:	bd70      	pop	{r4, r5, r6, pc}
1a0047ae:	bf00      	nop
1a0047b0:	40050000 	.word	0x40050000
1a0047b4:	068e7780 	.word	0x068e7780
1a0047b8:	1a005bdc 	.word	0x1a005bdc

1a0047bc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0047bc:	2901      	cmp	r1, #1
1a0047be:	d000      	beq.n	1a0047c2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0047c0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0047c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0047c6:	0082      	lsls	r2, r0, #2
1a0047c8:	4b03      	ldr	r3, [pc, #12]	; (1a0047d8 <Chip_I2C_EventHandler+0x1c>)
1a0047ca:	4413      	add	r3, r2
1a0047cc:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0047ce:	7d13      	ldrb	r3, [r2, #20]
1a0047d0:	b2db      	uxtb	r3, r3
1a0047d2:	2b04      	cmp	r3, #4
1a0047d4:	d0fb      	beq.n	1a0047ce <Chip_I2C_EventHandler+0x12>
1a0047d6:	e7f3      	b.n	1a0047c0 <Chip_I2C_EventHandler+0x4>
1a0047d8:	1000004c 	.word	0x1000004c

1a0047dc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0047dc:	b570      	push	{r4, r5, r6, lr}
1a0047de:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0047e0:	4e06      	ldr	r6, [pc, #24]	; (1a0047fc <Chip_I2C_Init+0x20>)
1a0047e2:	00c4      	lsls	r4, r0, #3
1a0047e4:	1a22      	subs	r2, r4, r0
1a0047e6:	0093      	lsls	r3, r2, #2
1a0047e8:	4433      	add	r3, r6
1a0047ea:	8898      	ldrh	r0, [r3, #4]
1a0047ec:	f7ff feb6 	bl	1a00455c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0047f0:	1b64      	subs	r4, r4, r5
1a0047f2:	00a3      	lsls	r3, r4, #2
1a0047f4:	58f3      	ldr	r3, [r6, r3]
1a0047f6:	226c      	movs	r2, #108	; 0x6c
1a0047f8:	619a      	str	r2, [r3, #24]
}
1a0047fa:	bd70      	pop	{r4, r5, r6, pc}
1a0047fc:	1000004c 	.word	0x1000004c

1a004800 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a004800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004804:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a004806:	4e0b      	ldr	r6, [pc, #44]	; (1a004834 <Chip_I2C_SetClockRate+0x34>)
1a004808:	00c5      	lsls	r5, r0, #3
1a00480a:	1a2b      	subs	r3, r5, r0
1a00480c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a004810:	eb06 0308 	add.w	r3, r6, r8
1a004814:	8898      	ldrh	r0, [r3, #4]
1a004816:	f7ff fed5 	bl	1a0045c4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00481a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00481e:	f856 3008 	ldr.w	r3, [r6, r8]
1a004822:	0842      	lsrs	r2, r0, #1
1a004824:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a004826:	f856 3008 	ldr.w	r3, [r6, r8]
1a00482a:	691a      	ldr	r2, [r3, #16]
1a00482c:	1a80      	subs	r0, r0, r2
1a00482e:	6158      	str	r0, [r3, #20]
}
1a004830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004834:	1000004c 	.word	0x1000004c

1a004838 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004838:	4b03      	ldr	r3, [pc, #12]	; (1a004848 <Chip_SSP_GetClockIndex+0x10>)
1a00483a:	4298      	cmp	r0, r3
1a00483c:	d001      	beq.n	1a004842 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00483e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a004840:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a004842:	20a5      	movs	r0, #165	; 0xa5
1a004844:	4770      	bx	lr
1a004846:	bf00      	nop
1a004848:	400c5000 	.word	0x400c5000

1a00484c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00484c:	4b04      	ldr	r3, [pc, #16]	; (1a004860 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00484e:	4298      	cmp	r0, r3
1a004850:	d002      	beq.n	1a004858 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a004852:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a004856:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a004858:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00485c:	4770      	bx	lr
1a00485e:	bf00      	nop
1a004860:	400c5000 	.word	0x400c5000

1a004864 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004864:	6803      	ldr	r3, [r0, #0]
1a004866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00486a:	0209      	lsls	r1, r1, #8
1a00486c:	b289      	uxth	r1, r1
1a00486e:	4319      	orrs	r1, r3
1a004870:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a004872:	6102      	str	r2, [r0, #16]
}
1a004874:	4770      	bx	lr

1a004876 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004876:	b570      	push	{r4, r5, r6, lr}
1a004878:	4606      	mov	r6, r0
1a00487a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00487c:	f7ff ffe6 	bl	1a00484c <Chip_SSP_GetPeriphClockIndex>
1a004880:	f7ff fea0 	bl	1a0045c4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a004884:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a004886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00488a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00488c:	e000      	b.n	1a004890 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00488e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a004890:	42ab      	cmp	r3, r5
1a004892:	d90b      	bls.n	1a0048ac <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004894:	1c4c      	adds	r4, r1, #1
1a004896:	fb02 f304 	mul.w	r3, r2, r4
1a00489a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00489e:	429d      	cmp	r5, r3
1a0048a0:	d2f6      	bcs.n	1a004890 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0048a2:	2cff      	cmp	r4, #255	; 0xff
1a0048a4:	d9f3      	bls.n	1a00488e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0048a6:	3202      	adds	r2, #2
				cr0_div = 0;
1a0048a8:	2100      	movs	r1, #0
1a0048aa:	e7f1      	b.n	1a004890 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0048ac:	4630      	mov	r0, r6
1a0048ae:	f7ff ffd9 	bl	1a004864 <Chip_SSP_SetClockRate>
}
1a0048b2:	bd70      	pop	{r4, r5, r6, pc}

1a0048b4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0048b4:	b510      	push	{r4, lr}
1a0048b6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0048b8:	f7ff ffbe 	bl	1a004838 <Chip_SSP_GetClockIndex>
1a0048bc:	f7ff fe4e 	bl	1a00455c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0048c0:	4620      	mov	r0, r4
1a0048c2:	f7ff ffc3 	bl	1a00484c <Chip_SSP_GetPeriphClockIndex>
1a0048c6:	f7ff fe49 	bl	1a00455c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0048ca:	6863      	ldr	r3, [r4, #4]
1a0048cc:	f023 0304 	bic.w	r3, r3, #4
1a0048d0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0048d2:	6823      	ldr	r3, [r4, #0]
1a0048d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0048d8:	f043 0307 	orr.w	r3, r3, #7
1a0048dc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0048de:	4902      	ldr	r1, [pc, #8]	; (1a0048e8 <Chip_SSP_Init+0x34>)
1a0048e0:	4620      	mov	r0, r4
1a0048e2:	f7ff ffc8 	bl	1a004876 <Chip_SSP_SetBitRate>
}
1a0048e6:	bd10      	pop	{r4, pc}
1a0048e8:	000186a0 	.word	0x000186a0

1a0048ec <ResetISR>:
void ResetISR(void) {
1a0048ec:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a0048ee:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0048f0:	4b18      	ldr	r3, [pc, #96]	; (1a004954 <ResetISR+0x68>)
1a0048f2:	4a19      	ldr	r2, [pc, #100]	; (1a004958 <ResetISR+0x6c>)
1a0048f4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0048f6:	3304      	adds	r3, #4
1a0048f8:	4a18      	ldr	r2, [pc, #96]	; (1a00495c <ResetISR+0x70>)
1a0048fa:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0048fc:	2300      	movs	r3, #0
1a0048fe:	e005      	b.n	1a00490c <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a004900:	4a17      	ldr	r2, [pc, #92]	; (1a004960 <ResetISR+0x74>)
1a004902:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a004906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00490a:	3301      	adds	r3, #1
1a00490c:	2b07      	cmp	r3, #7
1a00490e:	d9f7      	bls.n	1a004900 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a004910:	b662      	cpsie	i
    SystemInit();
1a004912:	f7ff f973 	bl	1a003bfc <SystemInit>
    SectionTableAddr = &__data_section_table;
1a004916:	4b13      	ldr	r3, [pc, #76]	; (1a004964 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a004918:	e007      	b.n	1a00492a <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a00491a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00491e:	689a      	ldr	r2, [r3, #8]
1a004920:	6859      	ldr	r1, [r3, #4]
1a004922:	6818      	ldr	r0, [r3, #0]
1a004924:	f7fb fc32 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a004928:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00492a:	4a0f      	ldr	r2, [pc, #60]	; (1a004968 <ResetISR+0x7c>)
1a00492c:	4293      	cmp	r3, r2
1a00492e:	d3f4      	bcc.n	1a00491a <ResetISR+0x2e>
1a004930:	e006      	b.n	1a004940 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a004932:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a004934:	6859      	ldr	r1, [r3, #4]
1a004936:	f854 0b08 	ldr.w	r0, [r4], #8
1a00493a:	f7fb fc36 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a00493e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a004940:	4a0a      	ldr	r2, [pc, #40]	; (1a00496c <ResetISR+0x80>)
1a004942:	4293      	cmp	r3, r2
1a004944:	d3f5      	bcc.n	1a004932 <ResetISR+0x46>
    __libc_init_array();
1a004946:	f000 fe33 	bl	1a0055b0 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00494a:	f7ff f941 	bl	1a003bd0 <Board_Init>
    main();
1a00494e:	f7fc fbe9 	bl	1a001124 <main>
1a004952:	e7fe      	b.n	1a004952 <ResetISR+0x66>
1a004954:	40053100 	.word	0x40053100
1a004958:	10df1000 	.word	0x10df1000
1a00495c:	01dff7ff 	.word	0x01dff7ff
1a004960:	e000e280 	.word	0xe000e280
1a004964:	1a000114 	.word	0x1a000114
1a004968:	1a000150 	.word	0x1a000150
1a00496c:	1a000178 	.word	0x1a000178

1a004970 <_init>:
void _init(void) {}
1a004970:	4770      	bx	lr
1a004972:	Address 0x000000001a004972 is out of bounds.


1a004974 <modf>:
1a004974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004978:	ec55 4b10 	vmov	r4, r5, d0
1a00497c:	f3c5 520a 	ubfx	r2, r5, #20, #11
1a004980:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
1a004984:	2b13      	cmp	r3, #19
1a004986:	4606      	mov	r6, r0
1a004988:	dc19      	bgt.n	1a0049be <modf+0x4a>
1a00498a:	2b00      	cmp	r3, #0
1a00498c:	db38      	blt.n	1a004a00 <modf+0x8c>
1a00498e:	4a24      	ldr	r2, [pc, #144]	; (1a004a20 <modf+0xac>)
1a004990:	fa42 f303 	asr.w	r3, r2, r3
1a004994:	ea05 0203 	and.w	r2, r5, r3
1a004998:	ea52 0004 	orrs.w	r0, r2, r4
1a00499c:	d027      	beq.n	1a0049ee <modf+0x7a>
1a00499e:	f04f 0800 	mov.w	r8, #0
1a0049a2:	ea25 0903 	bic.w	r9, r5, r3
1a0049a6:	4642      	mov	r2, r8
1a0049a8:	464b      	mov	r3, r9
1a0049aa:	4620      	mov	r0, r4
1a0049ac:	4629      	mov	r1, r5
1a0049ae:	e9c6 2300 	strd	r2, r3, [r6]
1a0049b2:	f000 f83b 	bl	1a004a2c <__aeabi_dsub>
1a0049b6:	ec41 0b10 	vmov	d0, r0, r1
1a0049ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0049be:	2b33      	cmp	r3, #51	; 0x33
1a0049c0:	dc0c      	bgt.n	1a0049dc <modf+0x68>
1a0049c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
1a0049c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0049ca:	fa23 f202 	lsr.w	r2, r3, r2
1a0049ce:	ea12 0704 	ands.w	r7, r2, r4
1a0049d2:	d01c      	beq.n	1a004a0e <modf+0x9a>
1a0049d4:	46a9      	mov	r9, r5
1a0049d6:	ea24 0802 	bic.w	r8, r4, r2
1a0049da:	e7e4      	b.n	1a0049a6 <modf+0x32>
1a0049dc:	2200      	movs	r2, #0
1a0049de:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a0049e2:	ed86 0b00 	vstr	d0, [r6]
1a0049e6:	ec43 2b10 	vmov	d0, r2, r3
1a0049ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0049ee:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a0049f2:	4602      	mov	r2, r0
1a0049f4:	ed86 0b00 	vstr	d0, [r6]
1a0049f8:	ec43 2b10 	vmov	d0, r2, r3
1a0049fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004a00:	2200      	movs	r2, #0
1a004a02:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a004a06:	e9c6 2300 	strd	r2, r3, [r6]
1a004a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004a0e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a004a12:	463a      	mov	r2, r7
1a004a14:	ed86 0b00 	vstr	d0, [r6]
1a004a18:	ec43 2b10 	vmov	d0, r2, r3
1a004a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004a20:	000fffff 	.word	0x000fffff

1a004a24 <__aeabi_drsub>:
1a004a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a004a28:	e002      	b.n	1a004a30 <__adddf3>
1a004a2a:	bf00      	nop

1a004a2c <__aeabi_dsub>:
1a004a2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a004a30 <__adddf3>:
1a004a30:	b530      	push	{r4, r5, lr}
1a004a32:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a004a36:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a004a3a:	ea94 0f05 	teq	r4, r5
1a004a3e:	bf08      	it	eq
1a004a40:	ea90 0f02 	teqeq	r0, r2
1a004a44:	bf1f      	itttt	ne
1a004a46:	ea54 0c00 	orrsne.w	ip, r4, r0
1a004a4a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a004a4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a004a52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004a56:	f000 80e2 	beq.w	1a004c1e <__adddf3+0x1ee>
1a004a5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a004a5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a004a62:	bfb8      	it	lt
1a004a64:	426d      	neglt	r5, r5
1a004a66:	dd0c      	ble.n	1a004a82 <__adddf3+0x52>
1a004a68:	442c      	add	r4, r5
1a004a6a:	ea80 0202 	eor.w	r2, r0, r2
1a004a6e:	ea81 0303 	eor.w	r3, r1, r3
1a004a72:	ea82 0000 	eor.w	r0, r2, r0
1a004a76:	ea83 0101 	eor.w	r1, r3, r1
1a004a7a:	ea80 0202 	eor.w	r2, r0, r2
1a004a7e:	ea81 0303 	eor.w	r3, r1, r3
1a004a82:	2d36      	cmp	r5, #54	; 0x36
1a004a84:	bf88      	it	hi
1a004a86:	bd30      	pophi	{r4, r5, pc}
1a004a88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004a8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004a90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a004a94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a004a98:	d002      	beq.n	1a004aa0 <__adddf3+0x70>
1a004a9a:	4240      	negs	r0, r0
1a004a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004aa0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a004aa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004aa8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a004aac:	d002      	beq.n	1a004ab4 <__adddf3+0x84>
1a004aae:	4252      	negs	r2, r2
1a004ab0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004ab4:	ea94 0f05 	teq	r4, r5
1a004ab8:	f000 80a7 	beq.w	1a004c0a <__adddf3+0x1da>
1a004abc:	f1a4 0401 	sub.w	r4, r4, #1
1a004ac0:	f1d5 0e20 	rsbs	lr, r5, #32
1a004ac4:	db0d      	blt.n	1a004ae2 <__adddf3+0xb2>
1a004ac6:	fa02 fc0e 	lsl.w	ip, r2, lr
1a004aca:	fa22 f205 	lsr.w	r2, r2, r5
1a004ace:	1880      	adds	r0, r0, r2
1a004ad0:	f141 0100 	adc.w	r1, r1, #0
1a004ad4:	fa03 f20e 	lsl.w	r2, r3, lr
1a004ad8:	1880      	adds	r0, r0, r2
1a004ada:	fa43 f305 	asr.w	r3, r3, r5
1a004ade:	4159      	adcs	r1, r3
1a004ae0:	e00e      	b.n	1a004b00 <__adddf3+0xd0>
1a004ae2:	f1a5 0520 	sub.w	r5, r5, #32
1a004ae6:	f10e 0e20 	add.w	lr, lr, #32
1a004aea:	2a01      	cmp	r2, #1
1a004aec:	fa03 fc0e 	lsl.w	ip, r3, lr
1a004af0:	bf28      	it	cs
1a004af2:	f04c 0c02 	orrcs.w	ip, ip, #2
1a004af6:	fa43 f305 	asr.w	r3, r3, r5
1a004afa:	18c0      	adds	r0, r0, r3
1a004afc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a004b00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004b04:	d507      	bpl.n	1a004b16 <__adddf3+0xe6>
1a004b06:	f04f 0e00 	mov.w	lr, #0
1a004b0a:	f1dc 0c00 	rsbs	ip, ip, #0
1a004b0e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a004b12:	eb6e 0101 	sbc.w	r1, lr, r1
1a004b16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a004b1a:	d31b      	bcc.n	1a004b54 <__adddf3+0x124>
1a004b1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a004b20:	d30c      	bcc.n	1a004b3c <__adddf3+0x10c>
1a004b22:	0849      	lsrs	r1, r1, #1
1a004b24:	ea5f 0030 	movs.w	r0, r0, rrx
1a004b28:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a004b2c:	f104 0401 	add.w	r4, r4, #1
1a004b30:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a004b34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a004b38:	f080 809a 	bcs.w	1a004c70 <__adddf3+0x240>
1a004b3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a004b40:	bf08      	it	eq
1a004b42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004b46:	f150 0000 	adcs.w	r0, r0, #0
1a004b4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004b4e:	ea41 0105 	orr.w	r1, r1, r5
1a004b52:	bd30      	pop	{r4, r5, pc}
1a004b54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a004b58:	4140      	adcs	r0, r0
1a004b5a:	eb41 0101 	adc.w	r1, r1, r1
1a004b5e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004b62:	f1a4 0401 	sub.w	r4, r4, #1
1a004b66:	d1e9      	bne.n	1a004b3c <__adddf3+0x10c>
1a004b68:	f091 0f00 	teq	r1, #0
1a004b6c:	bf04      	itt	eq
1a004b6e:	4601      	moveq	r1, r0
1a004b70:	2000      	moveq	r0, #0
1a004b72:	fab1 f381 	clz	r3, r1
1a004b76:	bf08      	it	eq
1a004b78:	3320      	addeq	r3, #32
1a004b7a:	f1a3 030b 	sub.w	r3, r3, #11
1a004b7e:	f1b3 0220 	subs.w	r2, r3, #32
1a004b82:	da0c      	bge.n	1a004b9e <__adddf3+0x16e>
1a004b84:	320c      	adds	r2, #12
1a004b86:	dd08      	ble.n	1a004b9a <__adddf3+0x16a>
1a004b88:	f102 0c14 	add.w	ip, r2, #20
1a004b8c:	f1c2 020c 	rsb	r2, r2, #12
1a004b90:	fa01 f00c 	lsl.w	r0, r1, ip
1a004b94:	fa21 f102 	lsr.w	r1, r1, r2
1a004b98:	e00c      	b.n	1a004bb4 <__adddf3+0x184>
1a004b9a:	f102 0214 	add.w	r2, r2, #20
1a004b9e:	bfd8      	it	le
1a004ba0:	f1c2 0c20 	rsble	ip, r2, #32
1a004ba4:	fa01 f102 	lsl.w	r1, r1, r2
1a004ba8:	fa20 fc0c 	lsr.w	ip, r0, ip
1a004bac:	bfdc      	itt	le
1a004bae:	ea41 010c 	orrle.w	r1, r1, ip
1a004bb2:	4090      	lslle	r0, r2
1a004bb4:	1ae4      	subs	r4, r4, r3
1a004bb6:	bfa2      	ittt	ge
1a004bb8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a004bbc:	4329      	orrge	r1, r5
1a004bbe:	bd30      	popge	{r4, r5, pc}
1a004bc0:	ea6f 0404 	mvn.w	r4, r4
1a004bc4:	3c1f      	subs	r4, #31
1a004bc6:	da1c      	bge.n	1a004c02 <__adddf3+0x1d2>
1a004bc8:	340c      	adds	r4, #12
1a004bca:	dc0e      	bgt.n	1a004bea <__adddf3+0x1ba>
1a004bcc:	f104 0414 	add.w	r4, r4, #20
1a004bd0:	f1c4 0220 	rsb	r2, r4, #32
1a004bd4:	fa20 f004 	lsr.w	r0, r0, r4
1a004bd8:	fa01 f302 	lsl.w	r3, r1, r2
1a004bdc:	ea40 0003 	orr.w	r0, r0, r3
1a004be0:	fa21 f304 	lsr.w	r3, r1, r4
1a004be4:	ea45 0103 	orr.w	r1, r5, r3
1a004be8:	bd30      	pop	{r4, r5, pc}
1a004bea:	f1c4 040c 	rsb	r4, r4, #12
1a004bee:	f1c4 0220 	rsb	r2, r4, #32
1a004bf2:	fa20 f002 	lsr.w	r0, r0, r2
1a004bf6:	fa01 f304 	lsl.w	r3, r1, r4
1a004bfa:	ea40 0003 	orr.w	r0, r0, r3
1a004bfe:	4629      	mov	r1, r5
1a004c00:	bd30      	pop	{r4, r5, pc}
1a004c02:	fa21 f004 	lsr.w	r0, r1, r4
1a004c06:	4629      	mov	r1, r5
1a004c08:	bd30      	pop	{r4, r5, pc}
1a004c0a:	f094 0f00 	teq	r4, #0
1a004c0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a004c12:	bf06      	itte	eq
1a004c14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a004c18:	3401      	addeq	r4, #1
1a004c1a:	3d01      	subne	r5, #1
1a004c1c:	e74e      	b.n	1a004abc <__adddf3+0x8c>
1a004c1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004c22:	bf18      	it	ne
1a004c24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004c28:	d029      	beq.n	1a004c7e <__adddf3+0x24e>
1a004c2a:	ea94 0f05 	teq	r4, r5
1a004c2e:	bf08      	it	eq
1a004c30:	ea90 0f02 	teqeq	r0, r2
1a004c34:	d005      	beq.n	1a004c42 <__adddf3+0x212>
1a004c36:	ea54 0c00 	orrs.w	ip, r4, r0
1a004c3a:	bf04      	itt	eq
1a004c3c:	4619      	moveq	r1, r3
1a004c3e:	4610      	moveq	r0, r2
1a004c40:	bd30      	pop	{r4, r5, pc}
1a004c42:	ea91 0f03 	teq	r1, r3
1a004c46:	bf1e      	ittt	ne
1a004c48:	2100      	movne	r1, #0
1a004c4a:	2000      	movne	r0, #0
1a004c4c:	bd30      	popne	{r4, r5, pc}
1a004c4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a004c52:	d105      	bne.n	1a004c60 <__adddf3+0x230>
1a004c54:	0040      	lsls	r0, r0, #1
1a004c56:	4149      	adcs	r1, r1
1a004c58:	bf28      	it	cs
1a004c5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a004c5e:	bd30      	pop	{r4, r5, pc}
1a004c60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004c64:	bf3c      	itt	cc
1a004c66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004c6a:	bd30      	popcc	{r4, r5, pc}
1a004c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004c70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004c74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004c78:	f04f 0000 	mov.w	r0, #0
1a004c7c:	bd30      	pop	{r4, r5, pc}
1a004c7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004c82:	bf1a      	itte	ne
1a004c84:	4619      	movne	r1, r3
1a004c86:	4610      	movne	r0, r2
1a004c88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004c8c:	bf1c      	itt	ne
1a004c8e:	460b      	movne	r3, r1
1a004c90:	4602      	movne	r2, r0
1a004c92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004c96:	bf06      	itte	eq
1a004c98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004c9c:	ea91 0f03 	teqeq	r1, r3
1a004ca0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a004ca4:	bd30      	pop	{r4, r5, pc}
1a004ca6:	bf00      	nop

1a004ca8 <__aeabi_ui2d>:
1a004ca8:	f090 0f00 	teq	r0, #0
1a004cac:	bf04      	itt	eq
1a004cae:	2100      	moveq	r1, #0
1a004cb0:	4770      	bxeq	lr
1a004cb2:	b530      	push	{r4, r5, lr}
1a004cb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004cb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004cbc:	f04f 0500 	mov.w	r5, #0
1a004cc0:	f04f 0100 	mov.w	r1, #0
1a004cc4:	e750      	b.n	1a004b68 <__adddf3+0x138>
1a004cc6:	bf00      	nop

1a004cc8 <__aeabi_i2d>:
1a004cc8:	f090 0f00 	teq	r0, #0
1a004ccc:	bf04      	itt	eq
1a004cce:	2100      	moveq	r1, #0
1a004cd0:	4770      	bxeq	lr
1a004cd2:	b530      	push	{r4, r5, lr}
1a004cd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004cd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004cdc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004ce0:	bf48      	it	mi
1a004ce2:	4240      	negmi	r0, r0
1a004ce4:	f04f 0100 	mov.w	r1, #0
1a004ce8:	e73e      	b.n	1a004b68 <__adddf3+0x138>
1a004cea:	bf00      	nop

1a004cec <__aeabi_f2d>:
1a004cec:	0042      	lsls	r2, r0, #1
1a004cee:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a004cf2:	ea4f 0131 	mov.w	r1, r1, rrx
1a004cf6:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a004cfa:	bf1f      	itttt	ne
1a004cfc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a004d00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a004d04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004d08:	4770      	bxne	lr
1a004d0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a004d0e:	bf08      	it	eq
1a004d10:	4770      	bxeq	lr
1a004d12:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a004d16:	bf04      	itt	eq
1a004d18:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a004d1c:	4770      	bxeq	lr
1a004d1e:	b530      	push	{r4, r5, lr}
1a004d20:	f44f 7460 	mov.w	r4, #896	; 0x380
1a004d24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004d28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004d2c:	e71c      	b.n	1a004b68 <__adddf3+0x138>
1a004d2e:	bf00      	nop

1a004d30 <__aeabi_ul2d>:
1a004d30:	ea50 0201 	orrs.w	r2, r0, r1
1a004d34:	bf08      	it	eq
1a004d36:	4770      	bxeq	lr
1a004d38:	b530      	push	{r4, r5, lr}
1a004d3a:	f04f 0500 	mov.w	r5, #0
1a004d3e:	e00a      	b.n	1a004d56 <__aeabi_l2d+0x16>

1a004d40 <__aeabi_l2d>:
1a004d40:	ea50 0201 	orrs.w	r2, r0, r1
1a004d44:	bf08      	it	eq
1a004d46:	4770      	bxeq	lr
1a004d48:	b530      	push	{r4, r5, lr}
1a004d4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a004d4e:	d502      	bpl.n	1a004d56 <__aeabi_l2d+0x16>
1a004d50:	4240      	negs	r0, r0
1a004d52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004d56:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004d5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004d5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a004d62:	f43f aed8 	beq.w	1a004b16 <__adddf3+0xe6>
1a004d66:	f04f 0203 	mov.w	r2, #3
1a004d6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004d6e:	bf18      	it	ne
1a004d70:	3203      	addne	r2, #3
1a004d72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004d76:	bf18      	it	ne
1a004d78:	3203      	addne	r2, #3
1a004d7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a004d7e:	f1c2 0320 	rsb	r3, r2, #32
1a004d82:	fa00 fc03 	lsl.w	ip, r0, r3
1a004d86:	fa20 f002 	lsr.w	r0, r0, r2
1a004d8a:	fa01 fe03 	lsl.w	lr, r1, r3
1a004d8e:	ea40 000e 	orr.w	r0, r0, lr
1a004d92:	fa21 f102 	lsr.w	r1, r1, r2
1a004d96:	4414      	add	r4, r2
1a004d98:	e6bd      	b.n	1a004b16 <__adddf3+0xe6>
1a004d9a:	bf00      	nop

1a004d9c <__aeabi_dmul>:
1a004d9c:	b570      	push	{r4, r5, r6, lr}
1a004d9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004da2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004da6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004daa:	bf1d      	ittte	ne
1a004dac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004db0:	ea94 0f0c 	teqne	r4, ip
1a004db4:	ea95 0f0c 	teqne	r5, ip
1a004db8:	f000 f8de 	bleq	1a004f78 <__aeabi_dmul+0x1dc>
1a004dbc:	442c      	add	r4, r5
1a004dbe:	ea81 0603 	eor.w	r6, r1, r3
1a004dc2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004dc6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004dca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a004dce:	bf18      	it	ne
1a004dd0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a004dd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a004ddc:	d038      	beq.n	1a004e50 <__aeabi_dmul+0xb4>
1a004dde:	fba0 ce02 	umull	ip, lr, r0, r2
1a004de2:	f04f 0500 	mov.w	r5, #0
1a004de6:	fbe1 e502 	umlal	lr, r5, r1, r2
1a004dea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a004dee:	fbe0 e503 	umlal	lr, r5, r0, r3
1a004df2:	f04f 0600 	mov.w	r6, #0
1a004df6:	fbe1 5603 	umlal	r5, r6, r1, r3
1a004dfa:	f09c 0f00 	teq	ip, #0
1a004dfe:	bf18      	it	ne
1a004e00:	f04e 0e01 	orrne.w	lr, lr, #1
1a004e04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004e08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004e0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a004e10:	d204      	bcs.n	1a004e1c <__aeabi_dmul+0x80>
1a004e12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a004e16:	416d      	adcs	r5, r5
1a004e18:	eb46 0606 	adc.w	r6, r6, r6
1a004e1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a004e20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a004e24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004e28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004e2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a004e30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004e34:	bf88      	it	hi
1a004e36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004e3a:	d81e      	bhi.n	1a004e7a <__aeabi_dmul+0xde>
1a004e3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a004e40:	bf08      	it	eq
1a004e42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004e46:	f150 0000 	adcs.w	r0, r0, #0
1a004e4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004e4e:	bd70      	pop	{r4, r5, r6, pc}
1a004e50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004e54:	ea46 0101 	orr.w	r1, r6, r1
1a004e58:	ea40 0002 	orr.w	r0, r0, r2
1a004e5c:	ea81 0103 	eor.w	r1, r1, r3
1a004e60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004e64:	bfc2      	ittt	gt
1a004e66:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004e6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004e6e:	bd70      	popgt	{r4, r5, r6, pc}
1a004e70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004e74:	f04f 0e00 	mov.w	lr, #0
1a004e78:	3c01      	subs	r4, #1
1a004e7a:	f300 80ab 	bgt.w	1a004fd4 <__aeabi_dmul+0x238>
1a004e7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a004e82:	bfde      	ittt	le
1a004e84:	2000      	movle	r0, #0
1a004e86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004e8a:	bd70      	pople	{r4, r5, r6, pc}
1a004e8c:	f1c4 0400 	rsb	r4, r4, #0
1a004e90:	3c20      	subs	r4, #32
1a004e92:	da35      	bge.n	1a004f00 <__aeabi_dmul+0x164>
1a004e94:	340c      	adds	r4, #12
1a004e96:	dc1b      	bgt.n	1a004ed0 <__aeabi_dmul+0x134>
1a004e98:	f104 0414 	add.w	r4, r4, #20
1a004e9c:	f1c4 0520 	rsb	r5, r4, #32
1a004ea0:	fa00 f305 	lsl.w	r3, r0, r5
1a004ea4:	fa20 f004 	lsr.w	r0, r0, r4
1a004ea8:	fa01 f205 	lsl.w	r2, r1, r5
1a004eac:	ea40 0002 	orr.w	r0, r0, r2
1a004eb0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a004eb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004eb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004ebc:	fa21 f604 	lsr.w	r6, r1, r4
1a004ec0:	eb42 0106 	adc.w	r1, r2, r6
1a004ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004ec8:	bf08      	it	eq
1a004eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004ece:	bd70      	pop	{r4, r5, r6, pc}
1a004ed0:	f1c4 040c 	rsb	r4, r4, #12
1a004ed4:	f1c4 0520 	rsb	r5, r4, #32
1a004ed8:	fa00 f304 	lsl.w	r3, r0, r4
1a004edc:	fa20 f005 	lsr.w	r0, r0, r5
1a004ee0:	fa01 f204 	lsl.w	r2, r1, r4
1a004ee4:	ea40 0002 	orr.w	r0, r0, r2
1a004ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004eec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004ef0:	f141 0100 	adc.w	r1, r1, #0
1a004ef4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004ef8:	bf08      	it	eq
1a004efa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004efe:	bd70      	pop	{r4, r5, r6, pc}
1a004f00:	f1c4 0520 	rsb	r5, r4, #32
1a004f04:	fa00 f205 	lsl.w	r2, r0, r5
1a004f08:	ea4e 0e02 	orr.w	lr, lr, r2
1a004f0c:	fa20 f304 	lsr.w	r3, r0, r4
1a004f10:	fa01 f205 	lsl.w	r2, r1, r5
1a004f14:	ea43 0302 	orr.w	r3, r3, r2
1a004f18:	fa21 f004 	lsr.w	r0, r1, r4
1a004f1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004f20:	fa21 f204 	lsr.w	r2, r1, r4
1a004f24:	ea20 0002 	bic.w	r0, r0, r2
1a004f28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a004f2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004f30:	bf08      	it	eq
1a004f32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004f36:	bd70      	pop	{r4, r5, r6, pc}
1a004f38:	f094 0f00 	teq	r4, #0
1a004f3c:	d10f      	bne.n	1a004f5e <__aeabi_dmul+0x1c2>
1a004f3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a004f42:	0040      	lsls	r0, r0, #1
1a004f44:	eb41 0101 	adc.w	r1, r1, r1
1a004f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004f4c:	bf08      	it	eq
1a004f4e:	3c01      	subeq	r4, #1
1a004f50:	d0f7      	beq.n	1a004f42 <__aeabi_dmul+0x1a6>
1a004f52:	ea41 0106 	orr.w	r1, r1, r6
1a004f56:	f095 0f00 	teq	r5, #0
1a004f5a:	bf18      	it	ne
1a004f5c:	4770      	bxne	lr
1a004f5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a004f62:	0052      	lsls	r2, r2, #1
1a004f64:	eb43 0303 	adc.w	r3, r3, r3
1a004f68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004f6c:	bf08      	it	eq
1a004f6e:	3d01      	subeq	r5, #1
1a004f70:	d0f7      	beq.n	1a004f62 <__aeabi_dmul+0x1c6>
1a004f72:	ea43 0306 	orr.w	r3, r3, r6
1a004f76:	4770      	bx	lr
1a004f78:	ea94 0f0c 	teq	r4, ip
1a004f7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004f80:	bf18      	it	ne
1a004f82:	ea95 0f0c 	teqne	r5, ip
1a004f86:	d00c      	beq.n	1a004fa2 <__aeabi_dmul+0x206>
1a004f88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004f8c:	bf18      	it	ne
1a004f8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004f92:	d1d1      	bne.n	1a004f38 <__aeabi_dmul+0x19c>
1a004f94:	ea81 0103 	eor.w	r1, r1, r3
1a004f98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004f9c:	f04f 0000 	mov.w	r0, #0
1a004fa0:	bd70      	pop	{r4, r5, r6, pc}
1a004fa2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004fa6:	bf06      	itte	eq
1a004fa8:	4610      	moveq	r0, r2
1a004faa:	4619      	moveq	r1, r3
1a004fac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004fb0:	d019      	beq.n	1a004fe6 <__aeabi_dmul+0x24a>
1a004fb2:	ea94 0f0c 	teq	r4, ip
1a004fb6:	d102      	bne.n	1a004fbe <__aeabi_dmul+0x222>
1a004fb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a004fbc:	d113      	bne.n	1a004fe6 <__aeabi_dmul+0x24a>
1a004fbe:	ea95 0f0c 	teq	r5, ip
1a004fc2:	d105      	bne.n	1a004fd0 <__aeabi_dmul+0x234>
1a004fc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a004fc8:	bf1c      	itt	ne
1a004fca:	4610      	movne	r0, r2
1a004fcc:	4619      	movne	r1, r3
1a004fce:	d10a      	bne.n	1a004fe6 <__aeabi_dmul+0x24a>
1a004fd0:	ea81 0103 	eor.w	r1, r1, r3
1a004fd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004fd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004fdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004fe0:	f04f 0000 	mov.w	r0, #0
1a004fe4:	bd70      	pop	{r4, r5, r6, pc}
1a004fe6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004fea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a004fee:	bd70      	pop	{r4, r5, r6, pc}

1a004ff0 <__aeabi_ddiv>:
1a004ff0:	b570      	push	{r4, r5, r6, lr}
1a004ff2:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004ff6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004ffa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004ffe:	bf1d      	ittte	ne
1a005000:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a005004:	ea94 0f0c 	teqne	r4, ip
1a005008:	ea95 0f0c 	teqne	r5, ip
1a00500c:	f000 f8a7 	bleq	1a00515e <__aeabi_ddiv+0x16e>
1a005010:	eba4 0405 	sub.w	r4, r4, r5
1a005014:	ea81 0e03 	eor.w	lr, r1, r3
1a005018:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00501c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a005020:	f000 8088 	beq.w	1a005134 <__aeabi_ddiv+0x144>
1a005024:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a005028:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a00502c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a005030:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a005034:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a005038:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a00503c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a005040:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a005044:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a005048:	429d      	cmp	r5, r3
1a00504a:	bf08      	it	eq
1a00504c:	4296      	cmpeq	r6, r2
1a00504e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a005052:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a005056:	d202      	bcs.n	1a00505e <__aeabi_ddiv+0x6e>
1a005058:	085b      	lsrs	r3, r3, #1
1a00505a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00505e:	1ab6      	subs	r6, r6, r2
1a005060:	eb65 0503 	sbc.w	r5, r5, r3
1a005064:	085b      	lsrs	r3, r3, #1
1a005066:	ea4f 0232 	mov.w	r2, r2, rrx
1a00506a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a00506e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a005072:	ebb6 0e02 	subs.w	lr, r6, r2
1a005076:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00507a:	bf22      	ittt	cs
1a00507c:	1ab6      	subcs	r6, r6, r2
1a00507e:	4675      	movcs	r5, lr
1a005080:	ea40 000c 	orrcs.w	r0, r0, ip
1a005084:	085b      	lsrs	r3, r3, #1
1a005086:	ea4f 0232 	mov.w	r2, r2, rrx
1a00508a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00508e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005092:	bf22      	ittt	cs
1a005094:	1ab6      	subcs	r6, r6, r2
1a005096:	4675      	movcs	r5, lr
1a005098:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a00509c:	085b      	lsrs	r3, r3, #1
1a00509e:	ea4f 0232 	mov.w	r2, r2, rrx
1a0050a2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0050a6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0050aa:	bf22      	ittt	cs
1a0050ac:	1ab6      	subcs	r6, r6, r2
1a0050ae:	4675      	movcs	r5, lr
1a0050b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0050b4:	085b      	lsrs	r3, r3, #1
1a0050b6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0050ba:	ebb6 0e02 	subs.w	lr, r6, r2
1a0050be:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0050c2:	bf22      	ittt	cs
1a0050c4:	1ab6      	subcs	r6, r6, r2
1a0050c6:	4675      	movcs	r5, lr
1a0050c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0050cc:	ea55 0e06 	orrs.w	lr, r5, r6
1a0050d0:	d018      	beq.n	1a005104 <__aeabi_ddiv+0x114>
1a0050d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0050d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0050da:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0050de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0050e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0050e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0050ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a0050ee:	d1c0      	bne.n	1a005072 <__aeabi_ddiv+0x82>
1a0050f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0050f4:	d10b      	bne.n	1a00510e <__aeabi_ddiv+0x11e>
1a0050f6:	ea41 0100 	orr.w	r1, r1, r0
1a0050fa:	f04f 0000 	mov.w	r0, #0
1a0050fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a005102:	e7b6      	b.n	1a005072 <__aeabi_ddiv+0x82>
1a005104:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005108:	bf04      	itt	eq
1a00510a:	4301      	orreq	r1, r0
1a00510c:	2000      	moveq	r0, #0
1a00510e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a005112:	bf88      	it	hi
1a005114:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a005118:	f63f aeaf 	bhi.w	1a004e7a <__aeabi_dmul+0xde>
1a00511c:	ebb5 0c03 	subs.w	ip, r5, r3
1a005120:	bf04      	itt	eq
1a005122:	ebb6 0c02 	subseq.w	ip, r6, r2
1a005126:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00512a:	f150 0000 	adcs.w	r0, r0, #0
1a00512e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005132:	bd70      	pop	{r4, r5, r6, pc}
1a005134:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a005138:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a00513c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a005140:	bfc2      	ittt	gt
1a005142:	ebd4 050c 	rsbsgt	r5, r4, ip
1a005146:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00514a:	bd70      	popgt	{r4, r5, r6, pc}
1a00514c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005150:	f04f 0e00 	mov.w	lr, #0
1a005154:	3c01      	subs	r4, #1
1a005156:	e690      	b.n	1a004e7a <__aeabi_dmul+0xde>
1a005158:	ea45 0e06 	orr.w	lr, r5, r6
1a00515c:	e68d      	b.n	1a004e7a <__aeabi_dmul+0xde>
1a00515e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a005162:	ea94 0f0c 	teq	r4, ip
1a005166:	bf08      	it	eq
1a005168:	ea95 0f0c 	teqeq	r5, ip
1a00516c:	f43f af3b 	beq.w	1a004fe6 <__aeabi_dmul+0x24a>
1a005170:	ea94 0f0c 	teq	r4, ip
1a005174:	d10a      	bne.n	1a00518c <__aeabi_ddiv+0x19c>
1a005176:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00517a:	f47f af34 	bne.w	1a004fe6 <__aeabi_dmul+0x24a>
1a00517e:	ea95 0f0c 	teq	r5, ip
1a005182:	f47f af25 	bne.w	1a004fd0 <__aeabi_dmul+0x234>
1a005186:	4610      	mov	r0, r2
1a005188:	4619      	mov	r1, r3
1a00518a:	e72c      	b.n	1a004fe6 <__aeabi_dmul+0x24a>
1a00518c:	ea95 0f0c 	teq	r5, ip
1a005190:	d106      	bne.n	1a0051a0 <__aeabi_ddiv+0x1b0>
1a005192:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a005196:	f43f aefd 	beq.w	1a004f94 <__aeabi_dmul+0x1f8>
1a00519a:	4610      	mov	r0, r2
1a00519c:	4619      	mov	r1, r3
1a00519e:	e722      	b.n	1a004fe6 <__aeabi_dmul+0x24a>
1a0051a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0051a4:	bf18      	it	ne
1a0051a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0051aa:	f47f aec5 	bne.w	1a004f38 <__aeabi_dmul+0x19c>
1a0051ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0051b2:	f47f af0d 	bne.w	1a004fd0 <__aeabi_dmul+0x234>
1a0051b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0051ba:	f47f aeeb 	bne.w	1a004f94 <__aeabi_dmul+0x1f8>
1a0051be:	e712      	b.n	1a004fe6 <__aeabi_dmul+0x24a>

1a0051c0 <__aeabi_d2iz>:
1a0051c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0051c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a0051c8:	d215      	bcs.n	1a0051f6 <__aeabi_d2iz+0x36>
1a0051ca:	d511      	bpl.n	1a0051f0 <__aeabi_d2iz+0x30>
1a0051cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a0051d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a0051d4:	d912      	bls.n	1a0051fc <__aeabi_d2iz+0x3c>
1a0051d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0051da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0051de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a0051e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0051e6:	fa23 f002 	lsr.w	r0, r3, r2
1a0051ea:	bf18      	it	ne
1a0051ec:	4240      	negne	r0, r0
1a0051ee:	4770      	bx	lr
1a0051f0:	f04f 0000 	mov.w	r0, #0
1a0051f4:	4770      	bx	lr
1a0051f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a0051fa:	d105      	bne.n	1a005208 <__aeabi_d2iz+0x48>
1a0051fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a005200:	bf08      	it	eq
1a005202:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a005206:	4770      	bx	lr
1a005208:	f04f 0000 	mov.w	r0, #0
1a00520c:	4770      	bx	lr
1a00520e:	bf00      	nop

1a005210 <__aeabi_d2f>:
1a005210:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005214:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a005218:	bf24      	itt	cs
1a00521a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a00521e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a005222:	d90d      	bls.n	1a005240 <__aeabi_d2f+0x30>
1a005224:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a005228:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a00522c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a005230:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a005234:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a005238:	bf08      	it	eq
1a00523a:	f020 0001 	biceq.w	r0, r0, #1
1a00523e:	4770      	bx	lr
1a005240:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a005244:	d121      	bne.n	1a00528a <__aeabi_d2f+0x7a>
1a005246:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a00524a:	bfbc      	itt	lt
1a00524c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a005250:	4770      	bxlt	lr
1a005252:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005256:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a00525a:	f1c2 0218 	rsb	r2, r2, #24
1a00525e:	f1c2 0c20 	rsb	ip, r2, #32
1a005262:	fa10 f30c 	lsls.w	r3, r0, ip
1a005266:	fa20 f002 	lsr.w	r0, r0, r2
1a00526a:	bf18      	it	ne
1a00526c:	f040 0001 	orrne.w	r0, r0, #1
1a005270:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a005274:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a005278:	fa03 fc0c 	lsl.w	ip, r3, ip
1a00527c:	ea40 000c 	orr.w	r0, r0, ip
1a005280:	fa23 f302 	lsr.w	r3, r3, r2
1a005284:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a005288:	e7cc      	b.n	1a005224 <__aeabi_d2f+0x14>
1a00528a:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a00528e:	d107      	bne.n	1a0052a0 <__aeabi_d2f+0x90>
1a005290:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a005294:	bf1e      	ittt	ne
1a005296:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a00529a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a00529e:	4770      	bxne	lr
1a0052a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a0052a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a0052a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a0052ac:	4770      	bx	lr
1a0052ae:	bf00      	nop

1a0052b0 <__aeabi_uldivmod>:
1a0052b0:	b953      	cbnz	r3, 1a0052c8 <__aeabi_uldivmod+0x18>
1a0052b2:	b94a      	cbnz	r2, 1a0052c8 <__aeabi_uldivmod+0x18>
1a0052b4:	2900      	cmp	r1, #0
1a0052b6:	bf08      	it	eq
1a0052b8:	2800      	cmpeq	r0, #0
1a0052ba:	bf1c      	itt	ne
1a0052bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0052c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0052c4:	f000 b972 	b.w	1a0055ac <__aeabi_idiv0>
1a0052c8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0052cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0052d0:	f000 f806 	bl	1a0052e0 <__udivmoddi4>
1a0052d4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0052d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0052dc:	b004      	add	sp, #16
1a0052de:	4770      	bx	lr

1a0052e0 <__udivmoddi4>:
1a0052e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0052e4:	9e08      	ldr	r6, [sp, #32]
1a0052e6:	4604      	mov	r4, r0
1a0052e8:	4688      	mov	r8, r1
1a0052ea:	2b00      	cmp	r3, #0
1a0052ec:	d14b      	bne.n	1a005386 <__udivmoddi4+0xa6>
1a0052ee:	428a      	cmp	r2, r1
1a0052f0:	4615      	mov	r5, r2
1a0052f2:	d967      	bls.n	1a0053c4 <__udivmoddi4+0xe4>
1a0052f4:	fab2 f282 	clz	r2, r2
1a0052f8:	b14a      	cbz	r2, 1a00530e <__udivmoddi4+0x2e>
1a0052fa:	f1c2 0720 	rsb	r7, r2, #32
1a0052fe:	fa01 f302 	lsl.w	r3, r1, r2
1a005302:	fa20 f707 	lsr.w	r7, r0, r7
1a005306:	4095      	lsls	r5, r2
1a005308:	ea47 0803 	orr.w	r8, r7, r3
1a00530c:	4094      	lsls	r4, r2
1a00530e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005312:	0c23      	lsrs	r3, r4, #16
1a005314:	fbb8 f7fe 	udiv	r7, r8, lr
1a005318:	fa1f fc85 	uxth.w	ip, r5
1a00531c:	fb0e 8817 	mls	r8, lr, r7, r8
1a005320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a005324:	fb07 f10c 	mul.w	r1, r7, ip
1a005328:	4299      	cmp	r1, r3
1a00532a:	d909      	bls.n	1a005340 <__udivmoddi4+0x60>
1a00532c:	18eb      	adds	r3, r5, r3
1a00532e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a005332:	f080 811b 	bcs.w	1a00556c <__udivmoddi4+0x28c>
1a005336:	4299      	cmp	r1, r3
1a005338:	f240 8118 	bls.w	1a00556c <__udivmoddi4+0x28c>
1a00533c:	3f02      	subs	r7, #2
1a00533e:	442b      	add	r3, r5
1a005340:	1a5b      	subs	r3, r3, r1
1a005342:	b2a4      	uxth	r4, r4
1a005344:	fbb3 f0fe 	udiv	r0, r3, lr
1a005348:	fb0e 3310 	mls	r3, lr, r0, r3
1a00534c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005350:	fb00 fc0c 	mul.w	ip, r0, ip
1a005354:	45a4      	cmp	ip, r4
1a005356:	d909      	bls.n	1a00536c <__udivmoddi4+0x8c>
1a005358:	192c      	adds	r4, r5, r4
1a00535a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00535e:	f080 8107 	bcs.w	1a005570 <__udivmoddi4+0x290>
1a005362:	45a4      	cmp	ip, r4
1a005364:	f240 8104 	bls.w	1a005570 <__udivmoddi4+0x290>
1a005368:	3802      	subs	r0, #2
1a00536a:	442c      	add	r4, r5
1a00536c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a005370:	eba4 040c 	sub.w	r4, r4, ip
1a005374:	2700      	movs	r7, #0
1a005376:	b11e      	cbz	r6, 1a005380 <__udivmoddi4+0xa0>
1a005378:	40d4      	lsrs	r4, r2
1a00537a:	2300      	movs	r3, #0
1a00537c:	e9c6 4300 	strd	r4, r3, [r6]
1a005380:	4639      	mov	r1, r7
1a005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005386:	428b      	cmp	r3, r1
1a005388:	d909      	bls.n	1a00539e <__udivmoddi4+0xbe>
1a00538a:	2e00      	cmp	r6, #0
1a00538c:	f000 80eb 	beq.w	1a005566 <__udivmoddi4+0x286>
1a005390:	2700      	movs	r7, #0
1a005392:	e9c6 0100 	strd	r0, r1, [r6]
1a005396:	4638      	mov	r0, r7
1a005398:	4639      	mov	r1, r7
1a00539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00539e:	fab3 f783 	clz	r7, r3
1a0053a2:	2f00      	cmp	r7, #0
1a0053a4:	d147      	bne.n	1a005436 <__udivmoddi4+0x156>
1a0053a6:	428b      	cmp	r3, r1
1a0053a8:	d302      	bcc.n	1a0053b0 <__udivmoddi4+0xd0>
1a0053aa:	4282      	cmp	r2, r0
1a0053ac:	f200 80fa 	bhi.w	1a0055a4 <__udivmoddi4+0x2c4>
1a0053b0:	1a84      	subs	r4, r0, r2
1a0053b2:	eb61 0303 	sbc.w	r3, r1, r3
1a0053b6:	2001      	movs	r0, #1
1a0053b8:	4698      	mov	r8, r3
1a0053ba:	2e00      	cmp	r6, #0
1a0053bc:	d0e0      	beq.n	1a005380 <__udivmoddi4+0xa0>
1a0053be:	e9c6 4800 	strd	r4, r8, [r6]
1a0053c2:	e7dd      	b.n	1a005380 <__udivmoddi4+0xa0>
1a0053c4:	b902      	cbnz	r2, 1a0053c8 <__udivmoddi4+0xe8>
1a0053c6:	deff      	udf	#255	; 0xff
1a0053c8:	fab2 f282 	clz	r2, r2
1a0053cc:	2a00      	cmp	r2, #0
1a0053ce:	f040 808f 	bne.w	1a0054f0 <__udivmoddi4+0x210>
1a0053d2:	1b49      	subs	r1, r1, r5
1a0053d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0053d8:	fa1f f885 	uxth.w	r8, r5
1a0053dc:	2701      	movs	r7, #1
1a0053de:	fbb1 fcfe 	udiv	ip, r1, lr
1a0053e2:	0c23      	lsrs	r3, r4, #16
1a0053e4:	fb0e 111c 	mls	r1, lr, ip, r1
1a0053e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0053ec:	fb08 f10c 	mul.w	r1, r8, ip
1a0053f0:	4299      	cmp	r1, r3
1a0053f2:	d907      	bls.n	1a005404 <__udivmoddi4+0x124>
1a0053f4:	18eb      	adds	r3, r5, r3
1a0053f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0053fa:	d202      	bcs.n	1a005402 <__udivmoddi4+0x122>
1a0053fc:	4299      	cmp	r1, r3
1a0053fe:	f200 80cd 	bhi.w	1a00559c <__udivmoddi4+0x2bc>
1a005402:	4684      	mov	ip, r0
1a005404:	1a59      	subs	r1, r3, r1
1a005406:	b2a3      	uxth	r3, r4
1a005408:	fbb1 f0fe 	udiv	r0, r1, lr
1a00540c:	fb0e 1410 	mls	r4, lr, r0, r1
1a005410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a005414:	fb08 f800 	mul.w	r8, r8, r0
1a005418:	45a0      	cmp	r8, r4
1a00541a:	d907      	bls.n	1a00542c <__udivmoddi4+0x14c>
1a00541c:	192c      	adds	r4, r5, r4
1a00541e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005422:	d202      	bcs.n	1a00542a <__udivmoddi4+0x14a>
1a005424:	45a0      	cmp	r8, r4
1a005426:	f200 80b6 	bhi.w	1a005596 <__udivmoddi4+0x2b6>
1a00542a:	4618      	mov	r0, r3
1a00542c:	eba4 0408 	sub.w	r4, r4, r8
1a005430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a005434:	e79f      	b.n	1a005376 <__udivmoddi4+0x96>
1a005436:	f1c7 0c20 	rsb	ip, r7, #32
1a00543a:	40bb      	lsls	r3, r7
1a00543c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a005440:	ea4e 0e03 	orr.w	lr, lr, r3
1a005444:	fa01 f407 	lsl.w	r4, r1, r7
1a005448:	fa20 f50c 	lsr.w	r5, r0, ip
1a00544c:	fa21 f30c 	lsr.w	r3, r1, ip
1a005450:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a005454:	4325      	orrs	r5, r4
1a005456:	fbb3 f9f8 	udiv	r9, r3, r8
1a00545a:	0c2c      	lsrs	r4, r5, #16
1a00545c:	fb08 3319 	mls	r3, r8, r9, r3
1a005460:	fa1f fa8e 	uxth.w	sl, lr
1a005464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a005468:	fb09 f40a 	mul.w	r4, r9, sl
1a00546c:	429c      	cmp	r4, r3
1a00546e:	fa02 f207 	lsl.w	r2, r2, r7
1a005472:	fa00 f107 	lsl.w	r1, r0, r7
1a005476:	d90b      	bls.n	1a005490 <__udivmoddi4+0x1b0>
1a005478:	eb1e 0303 	adds.w	r3, lr, r3
1a00547c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005480:	f080 8087 	bcs.w	1a005592 <__udivmoddi4+0x2b2>
1a005484:	429c      	cmp	r4, r3
1a005486:	f240 8084 	bls.w	1a005592 <__udivmoddi4+0x2b2>
1a00548a:	f1a9 0902 	sub.w	r9, r9, #2
1a00548e:	4473      	add	r3, lr
1a005490:	1b1b      	subs	r3, r3, r4
1a005492:	b2ad      	uxth	r5, r5
1a005494:	fbb3 f0f8 	udiv	r0, r3, r8
1a005498:	fb08 3310 	mls	r3, r8, r0, r3
1a00549c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0054a0:	fb00 fa0a 	mul.w	sl, r0, sl
1a0054a4:	45a2      	cmp	sl, r4
1a0054a6:	d908      	bls.n	1a0054ba <__udivmoddi4+0x1da>
1a0054a8:	eb1e 0404 	adds.w	r4, lr, r4
1a0054ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0054b0:	d26b      	bcs.n	1a00558a <__udivmoddi4+0x2aa>
1a0054b2:	45a2      	cmp	sl, r4
1a0054b4:	d969      	bls.n	1a00558a <__udivmoddi4+0x2aa>
1a0054b6:	3802      	subs	r0, #2
1a0054b8:	4474      	add	r4, lr
1a0054ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0054be:	fba0 8902 	umull	r8, r9, r0, r2
1a0054c2:	eba4 040a 	sub.w	r4, r4, sl
1a0054c6:	454c      	cmp	r4, r9
1a0054c8:	46c2      	mov	sl, r8
1a0054ca:	464b      	mov	r3, r9
1a0054cc:	d354      	bcc.n	1a005578 <__udivmoddi4+0x298>
1a0054ce:	d051      	beq.n	1a005574 <__udivmoddi4+0x294>
1a0054d0:	2e00      	cmp	r6, #0
1a0054d2:	d069      	beq.n	1a0055a8 <__udivmoddi4+0x2c8>
1a0054d4:	ebb1 050a 	subs.w	r5, r1, sl
1a0054d8:	eb64 0403 	sbc.w	r4, r4, r3
1a0054dc:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0054e0:	40fd      	lsrs	r5, r7
1a0054e2:	40fc      	lsrs	r4, r7
1a0054e4:	ea4c 0505 	orr.w	r5, ip, r5
1a0054e8:	e9c6 5400 	strd	r5, r4, [r6]
1a0054ec:	2700      	movs	r7, #0
1a0054ee:	e747      	b.n	1a005380 <__udivmoddi4+0xa0>
1a0054f0:	f1c2 0320 	rsb	r3, r2, #32
1a0054f4:	fa20 f703 	lsr.w	r7, r0, r3
1a0054f8:	4095      	lsls	r5, r2
1a0054fa:	fa01 f002 	lsl.w	r0, r1, r2
1a0054fe:	fa21 f303 	lsr.w	r3, r1, r3
1a005502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005506:	4338      	orrs	r0, r7
1a005508:	0c01      	lsrs	r1, r0, #16
1a00550a:	fbb3 f7fe 	udiv	r7, r3, lr
1a00550e:	fa1f f885 	uxth.w	r8, r5
1a005512:	fb0e 3317 	mls	r3, lr, r7, r3
1a005516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00551a:	fb07 f308 	mul.w	r3, r7, r8
1a00551e:	428b      	cmp	r3, r1
1a005520:	fa04 f402 	lsl.w	r4, r4, r2
1a005524:	d907      	bls.n	1a005536 <__udivmoddi4+0x256>
1a005526:	1869      	adds	r1, r5, r1
1a005528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00552c:	d22f      	bcs.n	1a00558e <__udivmoddi4+0x2ae>
1a00552e:	428b      	cmp	r3, r1
1a005530:	d92d      	bls.n	1a00558e <__udivmoddi4+0x2ae>
1a005532:	3f02      	subs	r7, #2
1a005534:	4429      	add	r1, r5
1a005536:	1acb      	subs	r3, r1, r3
1a005538:	b281      	uxth	r1, r0
1a00553a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00553e:	fb0e 3310 	mls	r3, lr, r0, r3
1a005542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005546:	fb00 f308 	mul.w	r3, r0, r8
1a00554a:	428b      	cmp	r3, r1
1a00554c:	d907      	bls.n	1a00555e <__udivmoddi4+0x27e>
1a00554e:	1869      	adds	r1, r5, r1
1a005550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a005554:	d217      	bcs.n	1a005586 <__udivmoddi4+0x2a6>
1a005556:	428b      	cmp	r3, r1
1a005558:	d915      	bls.n	1a005586 <__udivmoddi4+0x2a6>
1a00555a:	3802      	subs	r0, #2
1a00555c:	4429      	add	r1, r5
1a00555e:	1ac9      	subs	r1, r1, r3
1a005560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a005564:	e73b      	b.n	1a0053de <__udivmoddi4+0xfe>
1a005566:	4637      	mov	r7, r6
1a005568:	4630      	mov	r0, r6
1a00556a:	e709      	b.n	1a005380 <__udivmoddi4+0xa0>
1a00556c:	4607      	mov	r7, r0
1a00556e:	e6e7      	b.n	1a005340 <__udivmoddi4+0x60>
1a005570:	4618      	mov	r0, r3
1a005572:	e6fb      	b.n	1a00536c <__udivmoddi4+0x8c>
1a005574:	4541      	cmp	r1, r8
1a005576:	d2ab      	bcs.n	1a0054d0 <__udivmoddi4+0x1f0>
1a005578:	ebb8 0a02 	subs.w	sl, r8, r2
1a00557c:	eb69 020e 	sbc.w	r2, r9, lr
1a005580:	3801      	subs	r0, #1
1a005582:	4613      	mov	r3, r2
1a005584:	e7a4      	b.n	1a0054d0 <__udivmoddi4+0x1f0>
1a005586:	4660      	mov	r0, ip
1a005588:	e7e9      	b.n	1a00555e <__udivmoddi4+0x27e>
1a00558a:	4618      	mov	r0, r3
1a00558c:	e795      	b.n	1a0054ba <__udivmoddi4+0x1da>
1a00558e:	4667      	mov	r7, ip
1a005590:	e7d1      	b.n	1a005536 <__udivmoddi4+0x256>
1a005592:	4681      	mov	r9, r0
1a005594:	e77c      	b.n	1a005490 <__udivmoddi4+0x1b0>
1a005596:	3802      	subs	r0, #2
1a005598:	442c      	add	r4, r5
1a00559a:	e747      	b.n	1a00542c <__udivmoddi4+0x14c>
1a00559c:	f1ac 0c02 	sub.w	ip, ip, #2
1a0055a0:	442b      	add	r3, r5
1a0055a2:	e72f      	b.n	1a005404 <__udivmoddi4+0x124>
1a0055a4:	4638      	mov	r0, r7
1a0055a6:	e708      	b.n	1a0053ba <__udivmoddi4+0xda>
1a0055a8:	4637      	mov	r7, r6
1a0055aa:	e6e9      	b.n	1a005380 <__udivmoddi4+0xa0>

1a0055ac <__aeabi_idiv0>:
1a0055ac:	4770      	bx	lr
1a0055ae:	bf00      	nop

1a0055b0 <__libc_init_array>:
1a0055b0:	b570      	push	{r4, r5, r6, lr}
1a0055b2:	4e0d      	ldr	r6, [pc, #52]	; (1a0055e8 <__libc_init_array+0x38>)
1a0055b4:	4c0d      	ldr	r4, [pc, #52]	; (1a0055ec <__libc_init_array+0x3c>)
1a0055b6:	1ba4      	subs	r4, r4, r6
1a0055b8:	10a4      	asrs	r4, r4, #2
1a0055ba:	2500      	movs	r5, #0
1a0055bc:	42a5      	cmp	r5, r4
1a0055be:	d109      	bne.n	1a0055d4 <__libc_init_array+0x24>
1a0055c0:	4e0b      	ldr	r6, [pc, #44]	; (1a0055f0 <__libc_init_array+0x40>)
1a0055c2:	4c0c      	ldr	r4, [pc, #48]	; (1a0055f4 <__libc_init_array+0x44>)
1a0055c4:	f7ff f9d4 	bl	1a004970 <_init>
1a0055c8:	1ba4      	subs	r4, r4, r6
1a0055ca:	10a4      	asrs	r4, r4, #2
1a0055cc:	2500      	movs	r5, #0
1a0055ce:	42a5      	cmp	r5, r4
1a0055d0:	d105      	bne.n	1a0055de <__libc_init_array+0x2e>
1a0055d2:	bd70      	pop	{r4, r5, r6, pc}
1a0055d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0055d8:	4798      	blx	r3
1a0055da:	3501      	adds	r5, #1
1a0055dc:	e7ee      	b.n	1a0055bc <__libc_init_array+0xc>
1a0055de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0055e2:	4798      	blx	r3
1a0055e4:	3501      	adds	r5, #1
1a0055e6:	e7f2      	b.n	1a0055ce <__libc_init_array+0x1e>
1a0055e8:	1a005c24 	.word	0x1a005c24
1a0055ec:	1a005c24 	.word	0x1a005c24
1a0055f0:	1a005c24 	.word	0x1a005c24
1a0055f4:	1a005c24 	.word	0x1a005c24

1a0055f8 <memcpy>:
1a0055f8:	b510      	push	{r4, lr}
1a0055fa:	1e43      	subs	r3, r0, #1
1a0055fc:	440a      	add	r2, r1
1a0055fe:	4291      	cmp	r1, r2
1a005600:	d100      	bne.n	1a005604 <memcpy+0xc>
1a005602:	bd10      	pop	{r4, pc}
1a005604:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005608:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00560c:	e7f7      	b.n	1a0055fe <memcpy+0x6>

1a00560e <memset>:
1a00560e:	4402      	add	r2, r0
1a005610:	4603      	mov	r3, r0
1a005612:	4293      	cmp	r3, r2
1a005614:	d100      	bne.n	1a005618 <memset+0xa>
1a005616:	4770      	bx	lr
1a005618:	f803 1b01 	strb.w	r1, [r3], #1
1a00561c:	e7f9      	b.n	1a005612 <memset+0x4>

1a00561e <strcat>:
1a00561e:	b510      	push	{r4, lr}
1a005620:	4603      	mov	r3, r0
1a005622:	781a      	ldrb	r2, [r3, #0]
1a005624:	1c5c      	adds	r4, r3, #1
1a005626:	b93a      	cbnz	r2, 1a005638 <strcat+0x1a>
1a005628:	3b01      	subs	r3, #1
1a00562a:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00562e:	f803 2f01 	strb.w	r2, [r3, #1]!
1a005632:	2a00      	cmp	r2, #0
1a005634:	d1f9      	bne.n	1a00562a <strcat+0xc>
1a005636:	bd10      	pop	{r4, pc}
1a005638:	4623      	mov	r3, r4
1a00563a:	e7f2      	b.n	1a005622 <strcat+0x4>

1a00563c <strcpy>:
1a00563c:	4603      	mov	r3, r0
1a00563e:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005642:	f803 2b01 	strb.w	r2, [r3], #1
1a005646:	2a00      	cmp	r2, #0
1a005648:	d1f9      	bne.n	1a00563e <strcpy+0x2>
1a00564a:	4770      	bx	lr

1a00564c <strlen>:
1a00564c:	4603      	mov	r3, r0
1a00564e:	f813 2b01 	ldrb.w	r2, [r3], #1
1a005652:	2a00      	cmp	r2, #0
1a005654:	d1fb      	bne.n	1a00564e <strlen+0x2>
1a005656:	1a18      	subs	r0, r3, r0
1a005658:	3801      	subs	r0, #1
1a00565a:	4770      	bx	lr
1a00565c:	ffff002e 	.word	0xffff002e
1a005660:	7778797a 	.word	0x7778797a
1a005664:	73747576 	.word	0x73747576
1a005668:	6f707172 	.word	0x6f707172
1a00566c:	6b6c6d6e 	.word	0x6b6c6d6e
1a005670:	6768696a 	.word	0x6768696a
1a005674:	63646566 	.word	0x63646566
1a005678:	38396162 	.word	0x38396162
1a00567c:	34353637 	.word	0x34353637
1a005680:	30313233 	.word	0x30313233
1a005684:	34333231 	.word	0x34333231
1a005688:	38373635 	.word	0x38373635
1a00568c:	63626139 	.word	0x63626139
1a005690:	67666564 	.word	0x67666564
1a005694:	6b6a6968 	.word	0x6b6a6968
1a005698:	6f6e6d6c 	.word	0x6f6e6d6c
1a00569c:	73727170 	.word	0x73727170
1a0056a0:	77767574 	.word	0x77767574
1a0056a4:	007a7978 	.word	0x007a7978
1a0056a8:	6b736174 	.word	0x6b736174
1a0056ac:	5664654c 	.word	0x5664654c
1a0056b0:	61697261 	.word	0x61697261
1a0056b4:	00656c62 	.word	0x00656c62
1a0056b8:	6b736174 	.word	0x6b736174
1a0056bc:	636f7250 	.word	0x636f7250
1a0056c0:	6f737365 	.word	0x6f737365
1a0056c4:	00000072 	.word	0x00000072
1a0056c8:	6b736174 	.word	0x6b736174
1a0056cc:	6c656341 	.word	0x6c656341
1a0056d0:	64617265 	.word	0x64617265
1a0056d4:	7246726f 	.word	0x7246726f
1a0056d8:	006f6e65 	.word	0x006f6e65
1a0056dc:	6b736174 	.word	0x6b736174
1a0056e0:	69766e45 	.word	0x69766e45
1a0056e4:	7461446f 	.word	0x7461446f
1a0056e8:	0000736f 	.word	0x0000736f
1a0056ec:	6b736174 	.word	0x6b736174
1a0056f0:	74726155 	.word	0x74726155
1a0056f4:	6e6e6f43 	.word	0x6e6e6f43
1a0056f8:	69746365 	.word	0x69746365
1a0056fc:	00006e6f 	.word	0x00006e6f
1a005700:	6b736174 	.word	0x6b736174
1a005704:	69746e41 	.word	0x69746e41
1a005708:	62657272 	.word	0x62657272
1a00570c:	5465746f 	.word	0x5465746f
1a005710:	00316365 	.word	0x00316365
1a005714:	6b736174 	.word	0x6b736174
1a005718:	69746e41 	.word	0x69746e41
1a00571c:	62657272 	.word	0x62657272
1a005720:	5465746f 	.word	0x5465746f
1a005724:	00326365 	.word	0x00326365
1a005728:	6b736174 	.word	0x6b736174
1a00572c:	69746e41 	.word	0x69746e41
1a005730:	62657272 	.word	0x62657272
1a005734:	5465746f 	.word	0x5465746f
1a005738:	00336365 	.word	0x00336365
1a00573c:	6b736174 	.word	0x6b736174
1a005740:	69746e41 	.word	0x69746e41
1a005744:	62657272 	.word	0x62657272
1a005748:	5465746f 	.word	0x5465746f
1a00574c:	00346365 	.word	0x00346365
1a005750:	6c656361 	.word	0x6c656361
1a005754:	64617265 	.word	0x64617265
1a005758:	6e49726f 	.word	0x6e49726f
1a00575c:	0000003a 	.word	0x0000003a
1a005760:	6c656361 	.word	0x6c656361
1a005764:	64617265 	.word	0x64617265
1a005768:	754f726f 	.word	0x754f726f
1a00576c:	3a444d74 	.word	0x3a444d74
1a005770:	00000000 	.word	0x00000000
1a005774:	6c656361 	.word	0x6c656361
1a005778:	64617265 	.word	0x64617265
1a00577c:	754f726f 	.word	0x754f726f
1a005780:	3a494d74 	.word	0x3a494d74
1a005784:	00000000 	.word	0x00000000
1a005788:	72616c61 	.word	0x72616c61
1a00578c:	003a616d 	.word	0x003a616d
1a005790:	61747365 	.word	0x61747365
1a005794:	003a6f64 	.word	0x003a6f64
1a005798:	6e657266 	.word	0x6e657266
1a00579c:	3a6e496f 	.word	0x3a6e496f
1a0057a0:	00000000 	.word	0x00000000
1a0057a4:	6e657266 	.word	0x6e657266
1a0057a8:	74754f6f 	.word	0x74754f6f
1a0057ac:	003a444d 	.word	0x003a444d
1a0057b0:	6e657266 	.word	0x6e657266
1a0057b4:	74754f6f 	.word	0x74754f6f
1a0057b8:	003a494d 	.word	0x003a494d
1a0057bc:	6f726967 	.word	0x6f726967
1a0057c0:	706f6373 	.word	0x706f6373
1a0057c4:	003a586f 	.word	0x003a586f
1a0057c8:	6f726967 	.word	0x6f726967
1a0057cc:	706f6373 	.word	0x706f6373
1a0057d0:	003a596f 	.word	0x003a596f
1a0057d4:	6f726967 	.word	0x6f726967
1a0057d8:	706f6373 	.word	0x706f6373
1a0057dc:	003a5a6f 	.word	0x003a5a6f
1a0057e0:	72617473 	.word	0x72617473
1a0057e4:	00003a74 	.word	0x00003a74
1a0057e8:	706d6574 	.word	0x706d6574
1a0057ec:	3a534d42 	.word	0x3a534d42
1a0057f0:	00000000 	.word	0x00000000
1a0057f4:	706d6574 	.word	0x706d6574
1a0057f8:	003a444d 	.word	0x003a444d
1a0057fc:	706d6574 	.word	0x706d6574
1a005800:	003a494d 	.word	0x003a494d
1a005804:	ff000a0d 	.word	0xff000a0d
1a005808:	202d2d2d 	.word	0x202d2d2d
1a00580c:	52414c41 	.word	0x52414c41
1a005810:	2d20414d 	.word	0x2d20414d
1a005814:	45202d2d 	.word	0x45202d2d
1a005818:	6170206c 	.word	0x6170206c
1a00581c:	64206b63 	.word	0x64206b63
1a005820:	61622065 	.word	0x61622065
1a005824:	69726574 	.word	0x69726574
1a005828:	73207361 	.word	0x73207361
1a00582c:	6572626f 	.word	0x6572626f
1a005830:	6f736170 	.word	0x6f736170
1a005834:	20616c20 	.word	0x20616c20
1a005838:	706d6574 	.word	0x706d6574
1a00583c:	74617265 	.word	0x74617265
1a005840:	20617275 	.word	0x20617275
1a005844:	696d696c 	.word	0x696d696c
1a005848:	00006574 	.word	0x00006574
1a00584c:	202d2d2d 	.word	0x202d2d2d
1a005850:	52414c41 	.word	0x52414c41
1a005854:	2d20414d 	.word	0x2d20414d
1a005858:	45202d2d 	.word	0x45202d2d
1a00585c:	6f6d206c 	.word	0x6f6d206c
1a005860:	20726f74 	.word	0x20726f74
1a005864:	75717a69 	.word	0x75717a69
1a005868:	64726569 	.word	0x64726569
1a00586c:	6f73206f 	.word	0x6f73206f
1a005870:	70657262 	.word	0x70657262
1a005874:	206f7361 	.word	0x206f7361
1a005878:	7420616c 	.word	0x7420616c
1a00587c:	65706d65 	.word	0x65706d65
1a005880:	75746172 	.word	0x75746172
1a005884:	6c206172 	.word	0x6c206172
1a005888:	74696d69 	.word	0x74696d69
1a00588c:	00000065 	.word	0x00000065
1a005890:	202d2d2d 	.word	0x202d2d2d
1a005894:	52414c41 	.word	0x52414c41
1a005898:	2d20414d 	.word	0x2d20414d
1a00589c:	45202d2d 	.word	0x45202d2d
1a0058a0:	6f6d206c 	.word	0x6f6d206c
1a0058a4:	20726f74 	.word	0x20726f74
1a0058a8:	65726564 	.word	0x65726564
1a0058ac:	206f6863 	.word	0x206f6863
1a0058b0:	72626f73 	.word	0x72626f73
1a0058b4:	73617065 	.word	0x73617065
1a0058b8:	616c206f 	.word	0x616c206f
1a0058bc:	6d657420 	.word	0x6d657420
1a0058c0:	61726570 	.word	0x61726570
1a0058c4:	61727574 	.word	0x61727574
1a0058c8:	6d696c20 	.word	0x6d696c20
1a0058cc:	00657469 	.word	0x00657469
1a0058d0:	65686353 	.word	0x65686353
1a0058d4:	656c7564 	.word	0x656c7564
1a0058d8:	6e692072 	.word	0x6e692072
1a0058dc:	61696369 	.word	0x61696369
1a0058e0:	617a696c 	.word	0x617a696c
1a0058e4:	31206f64 	.word	0x31206f64
1a0058e8:	000a0d31 	.word	0x000a0d31
1a0058ec:	6164614e 	.word	0x6164614e
1a0058f0:	63657220 	.word	0x63657220
1a0058f4:	64696269 	.word	0x64696269
1a0058f8:	6564206f 	.word	0x6564206f
1a0058fc:	20656473 	.word	0x20656473
1a005900:	6320616c 	.word	0x6320616c
1a005904:	00616c6f 	.word	0x00616c6f
1a005908:	454c4449 	.word	0x454c4449
1a00590c:	ffffff00 	.word	0xffffff00
1a005910:	51726d54 	.word	0x51726d54
1a005914:	ffffff00 	.word	0xffffff00
1a005918:	20726d54 	.word	0x20726d54
1a00591c:	00637653 	.word	0x00637653

1a005920 <lpcUarts>:
1a005920:	40081000 06020406 00180205 40081000     ...@...........@
1a005930:	09070509 00180706 40082000 00000000     ......... .@....
1a005940:	00190000 400c1000 07060107 001a0602     .......@........
1a005950:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a005960:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a005970:	0072656d                                mer.

1a005974 <gpioPinsInit>:
1a005974:	02000104 00050701 05010d03 04080100     ................
1a005984:	02020002 02000304 00000403 04070002     ................
1a005994:	030c0300 09050402 05040103 04030208     ................
1a0059a4:	04020305 06040504 0802000c 03000b06     ................
1a0059b4:	00090607 07060503 060f0504 03030004     ................
1a0059c4:	02000404 00050404 06040502 04060200     ................
1a0059d4:	0c050408 05040a04 0003010e 14010a00     ................
1a0059e4:	010f0000 0d000012 00001101 0010010c     ................
1a0059f4:	07070300 000f0300 01000001 00000000     ................
1a005a04:	000a0600 08060603 06100504 04030005     ................
1a005a14:	03000106 04090400 04010d05 010b0000     ................
1a005a24:	0200000f 00000001 00010104 02010800     ................
1a005a34:	01090000 09010006 05040002 04010200     ................
1a005a44:	02020105 02020504 0e00000a 01000b02     ................
1a005a54:	000c020b 00040c01 04000200 01020001     ................
1a005a64:	02000204 00030402 03070302 070b0300     ................
1a005a74:	0c030004 03000507 0006070d 01020e03     ................
1a005a84:	04010504 06020006 02000504 00040405     ................
1a005a94:	08040402 040c0504 0d050409 05040a04     ................
1a005aa4:	0005010e ffff0801                       ........

1a005aac <ExtRateIn>:
1a005aac:	00000000                                ....

1a005ab0 <GpioButtons>:
1a005ab0:	08000400 09010900                       ........

1a005ab8 <GpioLeds>:
1a005ab8:	01050005 0e000205 0c010b01              ............

1a005ac4 <GpioPorts>:
1a005ac4:	03030003 0f050403 05031005 07030603     ................
1a005ad4:	ffff0802                                ....

1a005ad8 <OscRateIn>:
1a005ad8:	00b71b00                                ....

1a005adc <InitClkStates>:
1a005adc:	01010f01                                ....

1a005ae0 <pinmuxing>:
1a005ae0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005af0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005b00:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005b10:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005b20:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005b30:	00d50301 00d50401 00160107 00560207     ..............V.
1a005b40:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005b50:	00570206                                ..W.

1a005b54 <UART_BClock>:
1a005b54:	01a201c2 01620182                       ......b.

1a005b5c <UART_PClock>:
1a005b5c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005b6c:	000000ff                                ....

1a005b70 <periph_to_base>:
1a005b70:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005b80:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005b90:	000100e0 01000100 01200003 00060120     .......... . ...
1a005ba0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005bb0:	01820013 00120182 01a201a2 01c20011     ................
1a005bc0:	001001c2 01e201e2 0202000f 000e0202     ................
1a005bd0:	02220222 0223000d 001c0223              "."...#.#...

1a005bdc <InitClkStates>:
1a005bdc:	00010100 00010909 0001090a 01010701     ................
1a005bec:	00010902 00010906 0101090c 0001090d     ................
1a005bfc:	0001090e 0001090f 00010910 00010911     ................
1a005c0c:	00010912 00010913 00011114 00011119     ................
1a005c1c:	0001111a 0001111b                       ........
