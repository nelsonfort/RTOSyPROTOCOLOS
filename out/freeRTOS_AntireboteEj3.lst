
mis_proyectos/freeRTOS_AntireboteEj3/out/freeRTOS_AntireboteEj3.elf:     file format elf32-littlearm
mis_proyectos/freeRTOS_AntireboteEj3/out/freeRTOS_AntireboteEj3.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a003b51

Program Header:
0x70000001 off    0x00014400 vaddr 0x1a004400 paddr 0x1a004400 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002bf8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004408 memsz 0x00004408 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004408 align 2**16
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004400  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  10000000  1a004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
  6 .bss          00002b28  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a004400  1a004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200d0  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
 17 .noinit       00000000  10002bf8  10002bf8  000200d0  2**2
                  CONTENTS
 18 .debug_info   0002a031  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000057dc  00000000  00000000  0004a101  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000aecc  00000000  00000000  0004f8dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000f10  00000000  00000000  0005a7a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00001028  00000000  00000000  0005b6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000f350  00000000  00000000  0005c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000127eb  00000000  00000000  0006ba31  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002d7a6  00000000  00000000  0007e21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000ab9c2  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000aba41  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002798  00000000  00000000  000aba78  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004400 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002bf8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOSxAntirrebote.c
100000d0 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 heap_1.c
100000d8 l     O .bss	00002000 ucHeap
100000d4 l     O .bss	00000004 pucAlignedHeap.11323
100020d8 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a00088e l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a0008a0 l     F .text	0000001e prvIsQueueFull
1a0008be l     F .text	0000001a prvIsQueueEmpty
1a0008d8 l     F .text	00000076 prvCopyDataToQueue
1a00094e l     F .text	00000024 prvCopyDataFromQueue
1a000972 l     F .text	0000006e prvUnlockQueue
1a000a64 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020dc l     O .bss	00000168 uxIdleTaskStack.10613
10002244 l     O .bss	000005a0 uxTimerTaskStack.10620
100027e4 l     O .bss	00000060 xIdleTaskTCB.10612
10002844 l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0011e0 l     F .text	0000002c prvResetNextTaskUnblockTime
1a00120c l     F .text	00000092 prvInitialiseNewTask
1a0012a0 l     F .text	00000068 prvInitialiseTaskLists
1a001308 l     F .text	000000ac prvAddNewTaskToReadyList
1a0013b4 l     F .text	00000038 prvDeleteTCB
1a0013ec l     F .text	0000004c prvCheckTasksWaitingTermination
1a001438 l     F .text	00000028 prvIdleTask
1a001460 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100028a8 l     O .bss	00000004 pxDelayedTaskList
100028ac l     O .bss	00000004 pxOverflowDelayedTaskList
100028b0 l     O .bss	0000008c pxReadyTasksLists
1000293c l     O .bss	00000004 uxCurrentNumberOfTasks
10002940 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002944 l     O .bss	00000004 uxPendedTicks
10002948 l     O .bss	00000004 uxSchedulerSuspended
1000294c l     O .bss	00000004 uxTaskNumber
10002950 l     O .bss	00000004 uxTopReadyPriority
10002954 l     O .bss	00000014 xDelayedTaskList1
10002968 l     O .bss	00000014 xDelayedTaskList2
1000297c l     O .bss	00000004 xNextTaskUnblockTime
10002980 l     O .bss	00000004 xNumOfOverflows
10002984 l     O .bss	00000014 xPendingReadyList
10002998 l     O .bss	00000004 xSchedulerRunning
1000299c l     O .bss	00000014 xSuspendedTaskList
100029b0 l     O .bss	00000014 xTasksWaitingTermination
100029c4 l     O .bss	00000004 xTickCount
100029c8 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001e40 l     F .text	00000020 prvGetNextExpireTime
1a001e60 l     F .text	00000048 prvInsertTimerInActiveList
1a001ea8 l     F .text	00000070 prvCheckForValidListAndQueue
1a001f18 l     F .text	00000040 prvInitialiseNewTimer
1a0022e8 l     F .text	00000016 prvTimerTask
1a002074 l     F .text	00000078 prvSwitchTimerLists
1a0020ec l     F .text	0000002c prvSampleTimeNow
1a002118 l     F .text	00000060 prvProcessExpiredTimer
1a002178 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0021ec l     F .text	000000fc prvProcessReceivedCommands
100029cc l     O .bss	00000004 pxCurrentTimerList
100029d0 l     O .bss	00000004 pxOverflowTimerList
100029d4 l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002a74 l     O .bss	00000014 xActiveTimerList1
10002a88 l     O .bss	00000014 xActiveTimerList2
10002a9c l     O .bss	00000004 xLastTime.11662
10002aa0 l     O .bss	00000050 xStaticTimerQueue.11712
10002af0 l     O .bss	00000004 xTimerQueue
10002af4 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002300 l     F .text	00000040 prvTaskExitError
1a002340 l     F .text	00000022 prvPortStartFirstTask
1a002368 l     F .text	0000000e vPortEnableVFP
1a0023d0 l       .text	00000000 pxCurrentTCBConst2
1a0024b0 l       .text	00000000 pxCurrentTCBConst
10002af8 l     O .bss	00000001 ucMaxSysCallPriority
10002afc l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000008 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0040ac l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002b00 l     O .bss	00000004 callBackFuncParams
10002b08 l     O .bss	00000008 tickCounter
10002b10 l     O .bss	00000004 tickHookFunction
10002b14 l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0027fc l     F .text	00000002 errorOcurred
1a0027fe l     F .text	00000002 doNothing
10000010 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002908 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b44 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_convert.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002d68 l     F .text	00000010 clearInterrupt
1a002d78 l     F .text	0000005c serveInterrupt
10000050 l     O .data	00000048 ultrasonicSensors
1a004284 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 board.c
1a002df4 l     F .text	00000044 Board_LED_Init
1a002e38 l     F .text	00000040 Board_TEC_Init
1a002e78 l     F .text	00000040 Board_GPIO_Init
1a002eb8 l     F .text	00000038 Board_SPI_Init
1a002ef0 l     F .text	00000024 Board_I2C_Init
1a002f14 l     F .text	00000030 Board_ADC_Init
1a00428c l     O .text	00000008 GpioButtons
1a004294 l     O .text	0000000c GpioLeds
1a0042a0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0042b8 l     O .text	00000004 InitClkStates
1a0042bc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003060 l     F .text	0000002c Chip_UART_GetIndex
1a004330 l     O .text	00000008 UART_BClock
1a004338 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003208 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00321c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0032e4 l     F .text	000000a4 pll_calc_divs
1a003388 l     F .text	0000010c pll_get_frac
1a003494 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003708 l     F .text	00000022 Chip_Clock_GetDivRate
10002b48 l     O .bss	00000008 audio_usb_pll_freq
1a00434c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0043b8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000098 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003a9c l     F .text	00000014 Chip_SSP_GetClockIndex
1a003ab0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a004400 l       .bss_RAM5	00000000 __init_array_end
1a004400 l       .bss_RAM5	00000000 __preinit_array_end
1a004400 l       .bss_RAM5	00000000 __init_array_start
1a004400 l       .bss_RAM5	00000000 __preinit_array_start
1a00352c g     F .text	0000001c Chip_Clock_GetDividerSource
1a002880 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002cd8 g     F .text	00000090 int64ToString
1a002418 g     F .text	0000002c vPortExitCritical
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a0010c8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a0032c2 g     F .text	0000000c Chip_ADC_SetResolution
1a0024b4 g     F .text	0000002c SysTick_Handler
1a0030e0 g     F .text	00000040 Chip_UART_SetBaud
1a002c9c g     F .text	00000008 printString
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a002450 g     F .text	00000064 PendSV_Handler
1a000ce0 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004408 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
100028a4 g     O .bss	00000004 pxCurrentTCB
1a0006ac g     F .text	00000094 taskSenialTecla4
53ff3d3e g       *ABS*	00000000 __valid_user_code_checksum
1a004408 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a001b38 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0028c4 g     F .text	00000044 TIMER3_IRQHandler
1a0037aa g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a002518 g     F .text	00000110 xPortStartScheduler
1a003fc0 g     F .text	00000016 memcpy
1a001a44 g     F .text	00000030 vTaskPlaceOnEventList
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a0024e0  w    F .text	00000038 vPortSetupTimerInterrupt
1a000300 g     F .text	00000032 taskLedVariable
1a003c78 g     F .text	00000000 .hidden __aeabi_uldivmod
10002bf8 g       .noinit	00000000 _noinit
1a000878 g     F .text	00000016 vPortFree
1a002762 g     F .text	00000018 uartWriteString
10002bf4 g     O .bss	00000004 SystemCoreClock
1a00308c g     F .text	00000054 Chip_UART_Init
1a000f04 g     F .text	0000019c xQueueSemaphoreTake
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a00277c g     F .text	00000034 tickerCallback
1a002628 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003828 g     F .text	0000004c Chip_Clock_GetRate
1a001136 g     F .text	00000018 vListInsertEnd
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a002c8c g     F .text	00000010 printInitUart
1a002fe8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003ca8 g     F .text	000002cc .hidden __udivmoddi4
1a004288 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001130 g     F .text	00000006 vListInitialiseItem
1a002dde g     F .text	0000000a GPIO1_IRQHandler
1a000dac g     F .text	00000158 xQueueReceive
10002bb0 g     O .bss	00000040 xQueueRegistry
1a0011c4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a004400 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a003f78 g     F .text	00000048 __libc_init_array
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a000808 g     F .text	00000070 pvPortMalloc
1a002f68 g     F .text	0000002c Board_Init
1a003bd4 g     F .text	00000002 _init
1a00111a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001674 g     F .text	0000000c xTaskGetTickCount
1a000b64 g     F .text	0000017c xQueueGenericSend
1a00018a  w    F .text	00000002 RTC_IRQHandler
1a000584 g     F .text	00000094 taskSenialTecla2
10002bf8 g       .bss	00000000 _ebss
1a002800 g     F .text	00000040 TIMER0_IRQHandler
1a0027b0 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a003a64 g     F .text	00000038 Chip_I2C_SetClockRate
1a001cb4 g     F .text	000000b0 xTaskPriorityDisinherit
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a0034e0 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001aac g     F .text	0000008c xTaskRemoveFromEventList
1a0011de g     F .text	00000002 vApplicationMallocFailedHook
1a00018c g     F .text	0000001e data_init
1a002840 g     F .text	00000040 TIMER1_IRQHandler
1a003a40 g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a002ca4 g     F .text	00000010 printEnter
1a00369c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004100 g     O .text	00000136 gpioPinsInit
1a000618 g     F .text	00000094 taskSenialTecla3
1a002748 g     F .text	0000001a uartWriteByte
1a001e24 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003ac8 g     F .text	00000012 Chip_SSP_SetClockRate
1a002de8 g     F .text	0000000a GPIO2_IRQHandler
1a001b50 g     F .text	00000080 xTaskCheckForTimeOut
1a003784 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001bfc g     F .text	000000b8 xTaskPriorityInherit
100000d0 g       .bss	00000000 _bss
1a003290 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001664 g     F .text	00000010 vTaskSuspendAll
10002b50 g     O .bss	00000010 SemBin
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a003ada g     F .text	0000003e Chip_SSP_SetBitRate
1a001182 g     F .text	00000028 uxListRemove
1a0038c8 g     F .text	00000002 Chip_GPIO_Init
1a0042b4 g     O .text	00000004 OscRateIn
1a0026cc g     F .text	0000007c uartInit
1a0014f8 g     F .text	00000072 xTaskCreateStatic
10002bf8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00197c g     F .text	000000c8 vTaskSwitchContext
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000a86 g     F .text	00000090 xQueueGenericCreateStatic
1a001a74 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00293c g     F .text	00000194 gpioInit
1a0011ac g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002008 g     F .text	0000006c xTimerGenericCommand
1a0011dc g     F .text	00000002 vApplicationStackOverflowHook
1a003f74  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002b7c g     F .text	0000001c USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a003548 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003fd6 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000740 g     F .text	000000c8 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
1a00114e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0023b0 g     F .text	00000024 SVC_Handler
1000000c g     O .data	00000004 DWT_CTRL
1a001f58 g     F .text	00000064 xTimerCreateTimerTask
1a0026a0 g     F .text	00000018 uartTxReady
1a00188c g     F .text	000000a4 vTaskDelayUntil
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a0037b8 g     F .text	0000003c Chip_Clock_EnableOpts
1a000b16 g     F .text	0000004e xQueueGenericCreate
1a003564 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003874 g     F .text	00000054 fpuInit
1a00361c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002f94 g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a0004f0 g     F .text	00000094 taskSenialTecla1
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002ad0 g     F .text	00000056 gpioWrite
1a001798 g     F .text	000000f4 xTaskResumeAll
1a0015d0 g     F .text	00000094 vTaskStartScheduler
1a003250 g     F .text	00000040 Chip_ADC_Init
10002bf0 g     O .bss	00000004 g_pUsbApi
1a002fb0 g     F .text	00000038 Board_SetupMuxing
1a003120 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000000 g     O .data	00000001 delayInicial
1a0026b8 g     F .text	00000014 uartTxWrite
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001bd0 g     F .text	0000000c vTaskMissedYield
10002bf8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003b18 g     F .text	00000038 Chip_SSP_Init
1a002cb4 g     F .text	00000024 printIntFormat
1a0010a0 g     F .text	00000028 vQueueAddToRegistry
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a001680 g     F .text	00000118 xTaskIncrementTick
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a002f44 g     F .text	00000024 Board_Debug_Init
1a0009e0 g     F .text	00000084 xQueueGenericReset
100000d0 g       .data	00000000 _edata
1a003a20 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a00156a g     F .text	00000066 xTaskCreate
1a0038cc g     F .text	00000154 Chip_SetupCoreClock
1a002dd4 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a003b50 g     F .text	00000084 ResetISR
1a0032d0 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a001930 g     F .text	0000004c vTaskDelay
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001bdc g     F .text	00000020 xTaskGetSchedulerState
1a001d64 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a003f74  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a00237c g     F .text	0000002c pxPortInitialiseStack
1a0037f4 g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a001fbc g     F .text	0000004c xTimerCreateStatic
10002b60 g     O .bss	00000050 datosAntirrebote
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a002b26 g     F .text	00000054 gpioRead
1a002b98 g     F .text	000000f4 boardInit
1a0023d4 g     F .text	00000044 vPortEnterCritical
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a003bd8 g     F .text	00000000 .hidden __aeabi_ldivmod
1a000334 g     F .text	000001bc taskMefAntirrebote
1a00372c g     F .text	00000058 Chip_Clock_SetBaseClock
1a002684 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a003054 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 51 3b 00 1a 79 01 00 1a 7b 01 00 1a     ....Q;..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 3e 3d ff 53     }...........>=.S
	...
1a00002c:	b1 23 00 1a 85 01 00 1a 00 00 00 00 51 24 00 1a     .#..........Q$..
1a00003c:	b5 24 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     .$..............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 7d 2b 00 1a 8b 01 00 1a 8b 01 00 1a     ....}+..........
1a00006c:	8b 01 00 1a 01 28 00 1a 41 28 00 1a 81 28 00 1a     .....(..A(...(..
1a00007c:	c5 28 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     .(..............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a d5 2d 00 1a df 2d 00 1a e9 2d 00 1a     .....-...-...-..
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a004408 	.word	0x1a004408
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000d0 	.word	0x000000d0
1a000120:	1a004408 	.word	0x1a004408
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004408 	.word	0x1a004408
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004408 	.word	0x1a004408
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004408 	.word	0x1a004408
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	00002b28 	.word	0x00002b28
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <taskLedVariable>:

/*==================[definiciones de funciones externas]=====================*/

// ----------------- CON vTaskDelayUntil----------------------------
void taskLedVariable( void* taskParmPtr )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b082      	sub	sp, #8
   // ---------- CONFIGURACIONES ------------------------------
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a000304:	f001 f9b6 	bl	1a001674 <xTaskGetTickCount>
1a000308:	9001      	str	r0, [sp, #4]
	uint8_t delay_on =100;
1a00030a:	2464      	movs	r4, #100	; 0x64

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      // Intercambia el estado del LEDB
      gpioWrite( LED1, HIGH );
1a00030c:	2101      	movs	r1, #1
1a00030e:	202b      	movs	r0, #43	; 0x2b
1a000310:	f002 fbde 	bl	1a002ad0 <gpioWrite>

      // Envia la tarea al estado bloqueado duranta el tiempo delay_on
      vTaskDelay( delay_on / portTICK_RATE_MS );
1a000314:	4620      	mov	r0, r4
1a000316:	f001 fb0b 	bl	1a001930 <vTaskDelay>
      gpioWrite( LED1, LOW);
1a00031a:	2100      	movs	r1, #0
1a00031c:	202b      	movs	r0, #43	; 0x2b
1a00031e:	f002 fbd7 	bl	1a002ad0 <gpioWrite>
      delay_on += 100;
1a000322:	3464      	adds	r4, #100	; 0x64
1a000324:	b2e4      	uxtb	r4, r4
      if( delay_on == 1000) delay_on = 0;

      vTaskDelayUntil(&tiempo_inicio_ciclo,1000/ portTICK_RATE_MS);
1a000326:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a00032a:	a801      	add	r0, sp, #4
1a00032c:	f001 faae 	bl	1a00188c <vTaskDelayUntil>
1a000330:	e7ec      	b.n	1a00030c <taskLedVariable+0xc>
1a000332:	Address 0x000000001a000332 is out of bounds.


1a000334 <taskMefAntirrebote>:

   }
}

void taskMefAntirrebote( void* taskParmPtr )
{
1a000334:	b570      	push	{r4, r5, r6, lr}
1a000336:	b082      	sub	sp, #8
   // ---------- CONFIGURACIONES ------------------------------
	int index = 0; //Recorre y analiza el estado de cada tecla
	uint8_t giveRealizado[4]; //Avisa que tarea fue liberada para poder tomarla nuevamente
	// --- Inicializando datos antirrebote
	datosAntirrebote[0].tecla = TEC1;
1a000338:	4b69      	ldr	r3, [pc, #420]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a00033a:	2224      	movs	r2, #36	; 0x24
1a00033c:	701a      	strb	r2, [r3, #0]
	datosAntirrebote[0].state = BUTTON_UP;
1a00033e:	2400      	movs	r4, #0
1a000340:	705c      	strb	r4, [r3, #1]
	datosAntirrebote[0].delay = 50;
1a000342:	2232      	movs	r2, #50	; 0x32
1a000344:	605a      	str	r2, [r3, #4]

	datosAntirrebote[1].tecla = TEC2;
1a000346:	2125      	movs	r1, #37	; 0x25
1a000348:	7519      	strb	r1, [r3, #20]
	datosAntirrebote[1].state = BUTTON_UP;
1a00034a:	755c      	strb	r4, [r3, #21]
	datosAntirrebote[1].delay = 50;
1a00034c:	619a      	str	r2, [r3, #24]

	datosAntirrebote[2].tecla = TEC3;
1a00034e:	2126      	movs	r1, #38	; 0x26
1a000350:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
	datosAntirrebote[2].state = BUTTON_UP;
1a000354:	f883 4029 	strb.w	r4, [r3, #41]	; 0x29
	datosAntirrebote[2].delay = 50;
1a000358:	62da      	str	r2, [r3, #44]	; 0x2c

	datosAntirrebote[3].tecla = TEC4;
1a00035a:	2127      	movs	r1, #39	; 0x27
1a00035c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	datosAntirrebote[3].state = BUTTON_UP;
1a000360:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
	datosAntirrebote[3].delay = 50;
1a000364:	641a      	str	r2, [r3, #64]	; 0x40

	//debugPrintlnString( "Creando semaforo...\r\n" );
	SemBin[0] = xSemaphoreCreateBinary();
1a000366:	2203      	movs	r2, #3
1a000368:	4621      	mov	r1, r4
1a00036a:	2001      	movs	r0, #1
1a00036c:	f000 fbd3 	bl	1a000b16 <xQueueGenericCreate>
1a000370:	4d5c      	ldr	r5, [pc, #368]	; (1a0004e4 <taskMefAntirrebote+0x1b0>)
1a000372:	6028      	str	r0, [r5, #0]
	SemBin[1] = xSemaphoreCreateBinary();
1a000374:	2203      	movs	r2, #3
1a000376:	4621      	mov	r1, r4
1a000378:	2001      	movs	r0, #1
1a00037a:	f000 fbcc 	bl	1a000b16 <xQueueGenericCreate>
1a00037e:	6068      	str	r0, [r5, #4]
	SemBin[2] = xSemaphoreCreateBinary();
1a000380:	2203      	movs	r2, #3
1a000382:	4621      	mov	r1, r4
1a000384:	2001      	movs	r0, #1
1a000386:	f000 fbc6 	bl	1a000b16 <xQueueGenericCreate>
1a00038a:	60a8      	str	r0, [r5, #8]
	SemBin[3] = xSemaphoreCreateBinary();
1a00038c:	2203      	movs	r2, #3
1a00038e:	4621      	mov	r1, r4
1a000390:	2001      	movs	r0, #1
1a000392:	f000 fbc0 	bl	1a000b16 <xQueueGenericCreate>
1a000396:	60e8      	str	r0, [r5, #12]
{
1a000398:	2400      	movs	r4, #0
1a00039a:	e072      	b.n	1a000482 <taskMefAntirrebote+0x14e>
   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
	   switch(datosAntirrebote[index].state){
	   	   case BUTTON_UP:
	   		   	   //-- Si la tecla es presionada se pasa al estado BUTTON_FALLING
	   		   	   if(!gpioRead(datosAntirrebote[index].tecla)){
1a00039c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0003a0:	0093      	lsls	r3, r2, #2
1a0003a2:	4a4f      	ldr	r2, [pc, #316]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a0003a4:	5cd0      	ldrb	r0, [r2, r3]
1a0003a6:	f002 fbbe 	bl	1a002b26 <gpioRead>
1a0003aa:	2800      	cmp	r0, #0
1a0003ac:	d166      	bne.n	1a00047c <taskMefAntirrebote+0x148>
	   		   		   //debugPrintlnString( "Se detecto tecla presionada/r/n" );
	   		   		   datosAntirrebote[index].state = BUTTON_FALLING;
1a0003ae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0003b2:	009a      	lsls	r2, r3, #2
1a0003b4:	4b4a      	ldr	r3, [pc, #296]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a0003b6:	4413      	add	r3, r2
1a0003b8:	2201      	movs	r2, #1
1a0003ba:	705a      	strb	r2, [r3, #1]
1a0003bc:	e05e      	b.n	1a00047c <taskMefAntirrebote+0x148>
	   		   	   }
	   		   	   break;

	   	   case BUTTON_FALLING:
	   		   	   //-- Bloqueamos el estado hasta que se cumpla el tiempo del antirebote
	   		   	   vTaskDelay( datosAntirrebote[index].delay / portTICK_RATE_MS );
1a0003be:	4e48      	ldr	r6, [pc, #288]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a0003c0:	00a3      	lsls	r3, r4, #2
1a0003c2:	4423      	add	r3, r4
1a0003c4:	009d      	lsls	r5, r3, #2
1a0003c6:	1973      	adds	r3, r6, r5
1a0003c8:	6858      	ldr	r0, [r3, #4]
1a0003ca:	f001 fab1 	bl	1a001930 <vTaskDelay>

	   		   	   if(!gpioRead(datosAntirrebote[index].tecla)) {
1a0003ce:	5d70      	ldrb	r0, [r6, r5]
1a0003d0:	f002 fba9 	bl	1a002b26 <gpioRead>
1a0003d4:	b138      	cbz	r0, 1a0003e6 <taskMefAntirrebote+0xb2>
	   		   		   datosAntirrebote[index].state = BUTTON_DOWN;
	   		   	   }
	   		   	   else{
	   		   		   //-- El BOTON NO ESTA PRESIONADO --
	   		   		   //-- Se vuelve al estado UP
	   		   		   datosAntirrebote[index].state = BUTTON_UP;
1a0003d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0003da:	009a      	lsls	r2, r3, #2
1a0003dc:	4b40      	ldr	r3, [pc, #256]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a0003de:	4413      	add	r3, r2
1a0003e0:	2200      	movs	r2, #0
1a0003e2:	705a      	strb	r2, [r3, #1]
1a0003e4:	e04a      	b.n	1a00047c <taskMefAntirrebote+0x148>
	   		   		   datosAntirrebote[index].tiempo_inicio_ciclo = xTaskGetTickCount();
1a0003e6:	f001 f945 	bl	1a001674 <xTaskGetTickCount>
1a0003ea:	4633      	mov	r3, r6
1a0003ec:	442b      	add	r3, r5
1a0003ee:	6098      	str	r0, [r3, #8]
	   		   		   datosAntirrebote[index].state = BUTTON_DOWN;
1a0003f0:	2202      	movs	r2, #2
1a0003f2:	705a      	strb	r2, [r3, #1]
1a0003f4:	e042      	b.n	1a00047c <taskMefAntirrebote+0x148>

	   		   	   break;

	   	   case BUTTON_DOWN:
	   		   	   //-- Se encuentra en este estado hasta que se deje de presionar la tecla
	   		   	   if(gpioRead(datosAntirrebote[index].tecla))
1a0003f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0003fa:	0093      	lsls	r3, r2, #2
1a0003fc:	4a38      	ldr	r2, [pc, #224]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a0003fe:	5cd0      	ldrb	r0, [r2, r3]
1a000400:	f002 fb91 	bl	1a002b26 <gpioRead>
1a000404:	2800      	cmp	r0, #0
1a000406:	d039      	beq.n	1a00047c <taskMefAntirrebote+0x148>
	   		   		   datosAntirrebote[index].state = BUTTON_RAISING;
1a000408:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00040c:	009a      	lsls	r2, r3, #2
1a00040e:	4b34      	ldr	r3, [pc, #208]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a000410:	4413      	add	r3, r2
1a000412:	2203      	movs	r2, #3
1a000414:	705a      	strb	r2, [r3, #1]
1a000416:	e031      	b.n	1a00047c <taskMefAntirrebote+0x148>
	   		   	   break;

	   	   case BUTTON_RAISING:

	   		   	   if(gpioRead(datosAntirrebote[index].tecla)) {
1a000418:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00041c:	0093      	lsls	r3, r2, #2
1a00041e:	4a30      	ldr	r2, [pc, #192]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a000420:	5cd0      	ldrb	r0, [r2, r3]
1a000422:	f002 fb80 	bl	1a002b26 <gpioRead>
1a000426:	b938      	cbnz	r0, 1a000438 <taskMefAntirrebote+0x104>
					   //xSemaphoreTake(SemBin[index],portMAX_DELAY);

					   datosAntirrebote[index].state = BUTTON_UP;
	   		   	   }
	   		   	   else
	   		   		datosAntirrebote[index].state = BUTTON_DOWN;
1a000428:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00042c:	009a      	lsls	r2, r3, #2
1a00042e:	4b2c      	ldr	r3, [pc, #176]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a000430:	4413      	add	r3, r2
1a000432:	2202      	movs	r2, #2
1a000434:	705a      	strb	r2, [r3, #1]
1a000436:	e021      	b.n	1a00047c <taskMefAntirrebote+0x148>
					   datosAntirrebote[index].tiempo_presionado = xTaskGetTickCount() - datosAntirrebote[index].tiempo_inicio_ciclo;
1a000438:	f001 f91c 	bl	1a001674 <xTaskGetTickCount>
1a00043c:	00a3      	lsls	r3, r4, #2
1a00043e:	4423      	add	r3, r4
1a000440:	009a      	lsls	r2, r3, #2
1a000442:	4d27      	ldr	r5, [pc, #156]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a000444:	4415      	add	r5, r2
1a000446:	68ab      	ldr	r3, [r5, #8]
1a000448:	1ac0      	subs	r0, r0, r3
1a00044a:	6128      	str	r0, [r5, #16]
					   xSemaphoreGive(SemBin[index]);
1a00044c:	2300      	movs	r3, #0
1a00044e:	461a      	mov	r2, r3
1a000450:	4619      	mov	r1, r3
1a000452:	4824      	ldr	r0, [pc, #144]	; (1a0004e4 <taskMefAntirrebote+0x1b0>)
1a000454:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
1a000458:	f000 fb84 	bl	1a000b64 <xQueueGenericSend>
					   giveRealizado[index] = 1;
1a00045c:	2201      	movs	r2, #1
1a00045e:	ab02      	add	r3, sp, #8
1a000460:	4423      	add	r3, r4
1a000462:	f803 2c04 	strb.w	r2, [r3, #-4]
					   datosAntirrebote[index].state = BUTTON_UP;
1a000466:	2300      	movs	r3, #0
1a000468:	706b      	strb	r3, [r5, #1]
1a00046a:	e007      	b.n	1a00047c <taskMefAntirrebote+0x148>
	   		   	   break;

	   	   default:
	   		   	   debugPrintlnString( "MEF Default\r\n" );
1a00046c:	4d1e      	ldr	r5, [pc, #120]	; (1a0004e8 <taskMefAntirrebote+0x1b4>)
1a00046e:	491f      	ldr	r1, [pc, #124]	; (1a0004ec <taskMefAntirrebote+0x1b8>)
1a000470:	7828      	ldrb	r0, [r5, #0]
1a000472:	f002 fc13 	bl	1a002c9c <printString>
1a000476:	7828      	ldrb	r0, [r5, #0]
1a000478:	f002 fc14 	bl	1a002ca4 <printEnter>
	   		   	   break;
	   }
	   index++;
1a00047c:	3401      	adds	r4, #1
	   if (index ==4){
1a00047e:	2c04      	cmp	r4, #4
1a000480:	d02c      	beq.n	1a0004dc <taskMefAntirrebote+0x1a8>
	   switch(datosAntirrebote[index].state){
1a000482:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000486:	009a      	lsls	r2, r3, #2
1a000488:	4b15      	ldr	r3, [pc, #84]	; (1a0004e0 <taskMefAntirrebote+0x1ac>)
1a00048a:	4413      	add	r3, r2
1a00048c:	785b      	ldrb	r3, [r3, #1]
1a00048e:	2b03      	cmp	r3, #3
1a000490:	d8ec      	bhi.n	1a00046c <taskMefAntirrebote+0x138>
1a000492:	a201      	add	r2, pc, #4	; (adr r2, 1a000498 <taskMefAntirrebote+0x164>)
1a000494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000498:	1a00039d 	.word	0x1a00039d
1a00049c:	1a0003bf 	.word	0x1a0003bf
1a0004a0:	1a0003f7 	.word	0x1a0003f7
1a0004a4:	1a000419 	.word	0x1a000419
		   index =0;
		   int i;
		   for(i=0;i<4;i++){
1a0004a8:	3401      	adds	r4, #1
1a0004aa:	2c03      	cmp	r4, #3
1a0004ac:	f73f af74 	bgt.w	1a000398 <taskMefAntirrebote+0x64>
			   if(giveRealizado[i] ==1){
1a0004b0:	ab02      	add	r3, sp, #8
1a0004b2:	4423      	add	r3, r4
1a0004b4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
1a0004b8:	2b01      	cmp	r3, #1
1a0004ba:	d1f5      	bne.n	1a0004a8 <taskMefAntirrebote+0x174>
				   vTaskDelay( 1/ portTICK_RATE_MS );
1a0004bc:	2001      	movs	r0, #1
1a0004be:	f001 fa37 	bl	1a001930 <vTaskDelay>
				   xSemaphoreTake(SemBin[i],portMAX_DELAY);
1a0004c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0004c6:	4b07      	ldr	r3, [pc, #28]	; (1a0004e4 <taskMefAntirrebote+0x1b0>)
1a0004c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a0004cc:	f000 fd1a 	bl	1a000f04 <xQueueSemaphoreTake>
				   giveRealizado[i] = 0;
1a0004d0:	2200      	movs	r2, #0
1a0004d2:	ab02      	add	r3, sp, #8
1a0004d4:	4423      	add	r3, r4
1a0004d6:	f803 2c04 	strb.w	r2, [r3, #-4]
1a0004da:	e7e5      	b.n	1a0004a8 <taskMefAntirrebote+0x174>
		   for(i=0;i<4;i++){
1a0004dc:	2400      	movs	r4, #0
1a0004de:	e7e4      	b.n	1a0004aa <taskMefAntirrebote+0x176>
1a0004e0:	10002b60 	.word	0x10002b60
1a0004e4:	10002b50 	.word	0x10002b50
1a0004e8:	100000d0 	.word	0x100000d0
1a0004ec:	1a004070 	.word	0x1a004070

1a0004f0 <taskSenialTecla1>:
	   }
   }
}

void taskSenialTecla1( void* taskParmPtr )
{
1a0004f0:	b500      	push	{lr}
1a0004f2:	b083      	sub	sp, #12
      // ---------- CONFIGURACIONES ------------------------------
	   gpioWrite( LEDG, LOW);
1a0004f4:	2100      	movs	r1, #0
1a0004f6:	2029      	movs	r0, #41	; 0x29
1a0004f8:	f002 faea 	bl	1a002ad0 <gpioWrite>
	   vTaskDelay( delayInicial / portTICK_RATE_MS );
1a0004fc:	4b1c      	ldr	r3, [pc, #112]	; (1a000570 <taskSenialTecla1+0x80>)
1a0004fe:	7818      	ldrb	r0, [r3, #0]
1a000500:	f001 fa16 	bl	1a001930 <vTaskDelay>
1a000504:	e028      	b.n	1a000558 <taskSenialTecla1+0x68>
      while(TRUE) {
    	  //debugPrintlnString( "Tarea led retardado\r\n" );
          // Intercambia el estado del LEDB
    	  if( xSemaphoreTake(SemBin[0] ,portMAX_DELAY ) == pdTRUE){
    		  //debugPrintlnString( "Se toma el semaforo por parte del LED!!\r\n" );
    		  gpioWrite( LEDG, HIGH );
1a000506:	2101      	movs	r1, #1
1a000508:	2029      	movs	r0, #41	; 0x29
1a00050a:	f002 fae1 	bl	1a002ad0 <gpioWrite>
    	  	  //debugPrintlnString( "Blink!" );
    	  	  // Envia la tarea al estado bloqueado durante 500ms
    	  	  vTaskDelay( datosAntirrebote[0].tiempo_presionado / portTICK_RATE_MS );
1a00050e:	4c19      	ldr	r4, [pc, #100]	; (1a000574 <taskSenialTecla1+0x84>)
1a000510:	6920      	ldr	r0, [r4, #16]
1a000512:	f001 fa0d 	bl	1a001930 <vTaskDelay>
    	  	  gpioWrite( LEDG, LOW);
1a000516:	2100      	movs	r1, #0
1a000518:	2029      	movs	r0, #41	; 0x29
1a00051a:	f002 fad9 	bl	1a002ad0 <gpioWrite>
    	  	  debugPrintlnString( "Tiempo encendido:  ");
1a00051e:	4d16      	ldr	r5, [pc, #88]	; (1a000578 <taskSenialTecla1+0x88>)
1a000520:	4916      	ldr	r1, [pc, #88]	; (1a00057c <taskSenialTecla1+0x8c>)
1a000522:	7828      	ldrb	r0, [r5, #0]
1a000524:	f002 fbba 	bl	1a002c9c <printString>
1a000528:	7828      	ldrb	r0, [r5, #0]
1a00052a:	f002 fbbb 	bl	1a002ca4 <printEnter>
    	  	  debugPrintlnInt( datosAntirrebote[0].tiempo_presionado );
1a00052e:	6922      	ldr	r2, [r4, #16]
1a000530:	2400      	movs	r4, #0
1a000532:	7828      	ldrb	r0, [r5, #0]
1a000534:	260a      	movs	r6, #10
1a000536:	9600      	str	r6, [sp, #0]
1a000538:	4623      	mov	r3, r4
1a00053a:	f002 fbbb 	bl	1a002cb4 <printIntFormat>
1a00053e:	7828      	ldrb	r0, [r5, #0]
1a000540:	f002 fbb0 	bl	1a002ca4 <printEnter>
    	  	  //debugPrintlnString( "\r\nTiempo tics\n");
    	  	  //debugPrintlnInt( xTaskGetTickCount() );

    	  	  xSemaphoreGive(SemBin[0]);
1a000544:	4623      	mov	r3, r4
1a000546:	4622      	mov	r2, r4
1a000548:	4621      	mov	r1, r4
1a00054a:	480d      	ldr	r0, [pc, #52]	; (1a000580 <taskSenialTecla1+0x90>)
1a00054c:	6800      	ldr	r0, [r0, #0]
1a00054e:	f000 fb09 	bl	1a000b64 <xQueueGenericSend>
    	  	  vTaskDelay( 10 / portTICK_RATE_MS );
1a000552:	4630      	mov	r0, r6
1a000554:	f001 f9ec 	bl	1a001930 <vTaskDelay>
    	  if( xSemaphoreTake(SemBin[0] ,portMAX_DELAY ) == pdTRUE){
1a000558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00055c:	4b08      	ldr	r3, [pc, #32]	; (1a000580 <taskSenialTecla1+0x90>)
1a00055e:	6818      	ldr	r0, [r3, #0]
1a000560:	f000 fcd0 	bl	1a000f04 <xQueueSemaphoreTake>
1a000564:	2801      	cmp	r0, #1
1a000566:	d0ce      	beq.n	1a000506 <taskSenialTecla1+0x16>
    	  }
    	  else
    		  vTaskDelay( 50 / portTICK_RATE_MS );
1a000568:	2032      	movs	r0, #50	; 0x32
1a00056a:	f001 f9e1 	bl	1a001930 <vTaskDelay>
1a00056e:	e7f3      	b.n	1a000558 <taskSenialTecla1+0x68>
1a000570:	10000000 	.word	0x10000000
1a000574:	10002b60 	.word	0x10002b60
1a000578:	100000d0 	.word	0x100000d0
1a00057c:	1a004080 	.word	0x1a004080
1a000580:	10002b50 	.word	0x10002b50

1a000584 <taskSenialTecla2>:

      }

}
void taskSenialTecla2( void* taskParmPtr )
{
1a000584:	b500      	push	{lr}
1a000586:	b083      	sub	sp, #12
      // ---------- CONFIGURACIONES ------------------------------
	   gpioWrite( LEDB, LOW);
1a000588:	2100      	movs	r1, #0
1a00058a:	202a      	movs	r0, #42	; 0x2a
1a00058c:	f002 faa0 	bl	1a002ad0 <gpioWrite>
	   vTaskDelay( delayInicial / portTICK_RATE_MS );
1a000590:	4b1c      	ldr	r3, [pc, #112]	; (1a000604 <taskSenialTecla2+0x80>)
1a000592:	7818      	ldrb	r0, [r3, #0]
1a000594:	f001 f9cc 	bl	1a001930 <vTaskDelay>
1a000598:	e028      	b.n	1a0005ec <taskSenialTecla2+0x68>
      while(TRUE) {
    	  //debugPrintlnString( "Tarea led retardado\r\n" );
          // Intercambia el estado del LEDB
    	  if( xSemaphoreTake(SemBin[1] ,portMAX_DELAY ) == pdTRUE){
    		  //debugPrintlnString( "Se toma el semaforo por parte del LED!!\r\n" );
    		  gpioWrite( LEDB, HIGH );
1a00059a:	2101      	movs	r1, #1
1a00059c:	202a      	movs	r0, #42	; 0x2a
1a00059e:	f002 fa97 	bl	1a002ad0 <gpioWrite>
    	  	  //debugPrintlnString( "Blink!" );
    	  	  // Envia la tarea al estado bloqueado durante 500ms
    	  	  vTaskDelay( datosAntirrebote[1].tiempo_presionado / portTICK_RATE_MS );
1a0005a2:	4c19      	ldr	r4, [pc, #100]	; (1a000608 <taskSenialTecla2+0x84>)
1a0005a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
1a0005a6:	f001 f9c3 	bl	1a001930 <vTaskDelay>
    	  	  gpioWrite( LEDB, LOW);
1a0005aa:	2100      	movs	r1, #0
1a0005ac:	202a      	movs	r0, #42	; 0x2a
1a0005ae:	f002 fa8f 	bl	1a002ad0 <gpioWrite>
    	  	  debugPrintlnString( "Tiempo encendido:  ");
1a0005b2:	4d16      	ldr	r5, [pc, #88]	; (1a00060c <taskSenialTecla2+0x88>)
1a0005b4:	4916      	ldr	r1, [pc, #88]	; (1a000610 <taskSenialTecla2+0x8c>)
1a0005b6:	7828      	ldrb	r0, [r5, #0]
1a0005b8:	f002 fb70 	bl	1a002c9c <printString>
1a0005bc:	7828      	ldrb	r0, [r5, #0]
1a0005be:	f002 fb71 	bl	1a002ca4 <printEnter>
    	  	  debugPrintlnInt( datosAntirrebote[1].tiempo_presionado );
1a0005c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a0005c4:	2400      	movs	r4, #0
1a0005c6:	7828      	ldrb	r0, [r5, #0]
1a0005c8:	260a      	movs	r6, #10
1a0005ca:	9600      	str	r6, [sp, #0]
1a0005cc:	4623      	mov	r3, r4
1a0005ce:	f002 fb71 	bl	1a002cb4 <printIntFormat>
1a0005d2:	7828      	ldrb	r0, [r5, #0]
1a0005d4:	f002 fb66 	bl	1a002ca4 <printEnter>
    	  	  //debugPrintlnString( "\r\nTiempo tics\n");
    	  	  //debugPrintlnInt( xTaskGetTickCount() );

    	  	  xSemaphoreGive(SemBin[1]);
1a0005d8:	4623      	mov	r3, r4
1a0005da:	4622      	mov	r2, r4
1a0005dc:	4621      	mov	r1, r4
1a0005de:	480d      	ldr	r0, [pc, #52]	; (1a000614 <taskSenialTecla2+0x90>)
1a0005e0:	6840      	ldr	r0, [r0, #4]
1a0005e2:	f000 fabf 	bl	1a000b64 <xQueueGenericSend>
    	  	  vTaskDelay( 10 / portTICK_RATE_MS );
1a0005e6:	4630      	mov	r0, r6
1a0005e8:	f001 f9a2 	bl	1a001930 <vTaskDelay>
    	  if( xSemaphoreTake(SemBin[1] ,portMAX_DELAY ) == pdTRUE){
1a0005ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0005f0:	4b08      	ldr	r3, [pc, #32]	; (1a000614 <taskSenialTecla2+0x90>)
1a0005f2:	6858      	ldr	r0, [r3, #4]
1a0005f4:	f000 fc86 	bl	1a000f04 <xQueueSemaphoreTake>
1a0005f8:	2801      	cmp	r0, #1
1a0005fa:	d0ce      	beq.n	1a00059a <taskSenialTecla2+0x16>
    	  }
    	  else
    		  vTaskDelay( 50 / portTICK_RATE_MS );
1a0005fc:	2032      	movs	r0, #50	; 0x32
1a0005fe:	f001 f997 	bl	1a001930 <vTaskDelay>
1a000602:	e7f3      	b.n	1a0005ec <taskSenialTecla2+0x68>
1a000604:	10000000 	.word	0x10000000
1a000608:	10002b60 	.word	0x10002b60
1a00060c:	100000d0 	.word	0x100000d0
1a000610:	1a004080 	.word	0x1a004080
1a000614:	10002b50 	.word	0x10002b50

1a000618 <taskSenialTecla3>:

      }

}
void taskSenialTecla3( void* taskParmPtr )
{
1a000618:	b500      	push	{lr}
1a00061a:	b083      	sub	sp, #12
      // ---------- CONFIGURACIONES ------------------------------
	   gpioWrite( LEDR, LOW);
1a00061c:	2100      	movs	r1, #0
1a00061e:	2028      	movs	r0, #40	; 0x28
1a000620:	f002 fa56 	bl	1a002ad0 <gpioWrite>
	   vTaskDelay( delayInicial / portTICK_RATE_MS );
1a000624:	4b1c      	ldr	r3, [pc, #112]	; (1a000698 <taskSenialTecla3+0x80>)
1a000626:	7818      	ldrb	r0, [r3, #0]
1a000628:	f001 f982 	bl	1a001930 <vTaskDelay>
1a00062c:	e028      	b.n	1a000680 <taskSenialTecla3+0x68>
      while(TRUE) {
    	  //debugPrintlnString( "Tarea led retardado\r\n" );
          // Intercambia el estado del LEDB
    	  if( xSemaphoreTake(SemBin[2] ,portMAX_DELAY ) == pdTRUE){
    		  //debugPrintlnString( "Se toma el semaforo por parte del LED!!\r\n" );
    		  gpioWrite( LEDR, HIGH );
1a00062e:	2101      	movs	r1, #1
1a000630:	2028      	movs	r0, #40	; 0x28
1a000632:	f002 fa4d 	bl	1a002ad0 <gpioWrite>
    	  	  //debugPrintlnString( "Blink!" );
    	  	  // Envia la tarea al estado bloqueado durante 500ms
    	  	  vTaskDelay( datosAntirrebote[2].tiempo_presionado / portTICK_RATE_MS );
1a000636:	4c19      	ldr	r4, [pc, #100]	; (1a00069c <taskSenialTecla3+0x84>)
1a000638:	6ba0      	ldr	r0, [r4, #56]	; 0x38
1a00063a:	f001 f979 	bl	1a001930 <vTaskDelay>
    	  	  gpioWrite( LEDR, LOW);
1a00063e:	2100      	movs	r1, #0
1a000640:	2028      	movs	r0, #40	; 0x28
1a000642:	f002 fa45 	bl	1a002ad0 <gpioWrite>
    	  	  debugPrintlnString( "Tiempo encendido:  ");
1a000646:	4d16      	ldr	r5, [pc, #88]	; (1a0006a0 <taskSenialTecla3+0x88>)
1a000648:	4916      	ldr	r1, [pc, #88]	; (1a0006a4 <taskSenialTecla3+0x8c>)
1a00064a:	7828      	ldrb	r0, [r5, #0]
1a00064c:	f002 fb26 	bl	1a002c9c <printString>
1a000650:	7828      	ldrb	r0, [r5, #0]
1a000652:	f002 fb27 	bl	1a002ca4 <printEnter>
    	  	  debugPrintlnInt( datosAntirrebote[2].tiempo_presionado );
1a000656:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000658:	2400      	movs	r4, #0
1a00065a:	7828      	ldrb	r0, [r5, #0]
1a00065c:	260a      	movs	r6, #10
1a00065e:	9600      	str	r6, [sp, #0]
1a000660:	4623      	mov	r3, r4
1a000662:	f002 fb27 	bl	1a002cb4 <printIntFormat>
1a000666:	7828      	ldrb	r0, [r5, #0]
1a000668:	f002 fb1c 	bl	1a002ca4 <printEnter>
    	  	  //debugPrintlnString( "\r\nTiempo tics\n");
    	  	  //debugPrintlnInt( xTaskGetTickCount() );

    	  	  xSemaphoreGive(SemBin[2]);
1a00066c:	4623      	mov	r3, r4
1a00066e:	4622      	mov	r2, r4
1a000670:	4621      	mov	r1, r4
1a000672:	480d      	ldr	r0, [pc, #52]	; (1a0006a8 <taskSenialTecla3+0x90>)
1a000674:	6880      	ldr	r0, [r0, #8]
1a000676:	f000 fa75 	bl	1a000b64 <xQueueGenericSend>
    	  	  vTaskDelay( 10 / portTICK_RATE_MS );
1a00067a:	4630      	mov	r0, r6
1a00067c:	f001 f958 	bl	1a001930 <vTaskDelay>
    	  if( xSemaphoreTake(SemBin[2] ,portMAX_DELAY ) == pdTRUE){
1a000680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000684:	4b08      	ldr	r3, [pc, #32]	; (1a0006a8 <taskSenialTecla3+0x90>)
1a000686:	6898      	ldr	r0, [r3, #8]
1a000688:	f000 fc3c 	bl	1a000f04 <xQueueSemaphoreTake>
1a00068c:	2801      	cmp	r0, #1
1a00068e:	d0ce      	beq.n	1a00062e <taskSenialTecla3+0x16>
    	  }
    	  else
    		  vTaskDelay( 50 / portTICK_RATE_MS );
1a000690:	2032      	movs	r0, #50	; 0x32
1a000692:	f001 f94d 	bl	1a001930 <vTaskDelay>
1a000696:	e7f3      	b.n	1a000680 <taskSenialTecla3+0x68>
1a000698:	10000000 	.word	0x10000000
1a00069c:	10002b60 	.word	0x10002b60
1a0006a0:	100000d0 	.word	0x100000d0
1a0006a4:	1a004080 	.word	0x1a004080
1a0006a8:	10002b50 	.word	0x10002b50

1a0006ac <taskSenialTecla4>:

      }

}
void taskSenialTecla4( void* taskParmPtr )
{
1a0006ac:	b500      	push	{lr}
1a0006ae:	b083      	sub	sp, #12
      // ---------- CONFIGURACIONES ------------------------------
	   gpioWrite( LED2, LOW);
1a0006b0:	2100      	movs	r1, #0
1a0006b2:	202c      	movs	r0, #44	; 0x2c
1a0006b4:	f002 fa0c 	bl	1a002ad0 <gpioWrite>
	   vTaskDelay( delayInicial / portTICK_RATE_MS );
1a0006b8:	4b1c      	ldr	r3, [pc, #112]	; (1a00072c <taskSenialTecla4+0x80>)
1a0006ba:	7818      	ldrb	r0, [r3, #0]
1a0006bc:	f001 f938 	bl	1a001930 <vTaskDelay>
1a0006c0:	e028      	b.n	1a000714 <taskSenialTecla4+0x68>
      while(TRUE) {
    	  //debugPrintlnString( "Tarea led retardado\r\n" );
          // Intercambia el estado del LEDB
    	  if( xSemaphoreTake(SemBin[3] ,portMAX_DELAY ) == pdTRUE){
    		  //debugPrintlnString( "Se toma el semaforo por parte del LED!!\r\n" );
    		  gpioWrite( LED2, HIGH );
1a0006c2:	2101      	movs	r1, #1
1a0006c4:	202c      	movs	r0, #44	; 0x2c
1a0006c6:	f002 fa03 	bl	1a002ad0 <gpioWrite>
    	  	  //debugPrintlnString( "Blink!" );
    	  	  // Envia la tarea al estado bloqueado durante 500ms
    	  	  vTaskDelay( datosAntirrebote[3].tiempo_presionado / portTICK_RATE_MS );
1a0006ca:	4c19      	ldr	r4, [pc, #100]	; (1a000730 <taskSenialTecla4+0x84>)
1a0006cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
1a0006ce:	f001 f92f 	bl	1a001930 <vTaskDelay>
    	  	  gpioWrite( LED2, LOW);
1a0006d2:	2100      	movs	r1, #0
1a0006d4:	202c      	movs	r0, #44	; 0x2c
1a0006d6:	f002 f9fb 	bl	1a002ad0 <gpioWrite>
    	  	  debugPrintlnString( "Tiempo encendido:  ");
1a0006da:	4d16      	ldr	r5, [pc, #88]	; (1a000734 <taskSenialTecla4+0x88>)
1a0006dc:	4916      	ldr	r1, [pc, #88]	; (1a000738 <taskSenialTecla4+0x8c>)
1a0006de:	7828      	ldrb	r0, [r5, #0]
1a0006e0:	f002 fadc 	bl	1a002c9c <printString>
1a0006e4:	7828      	ldrb	r0, [r5, #0]
1a0006e6:	f002 fadd 	bl	1a002ca4 <printEnter>
    	  	  debugPrintlnInt( datosAntirrebote[3].tiempo_presionado );
1a0006ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
1a0006ec:	2400      	movs	r4, #0
1a0006ee:	7828      	ldrb	r0, [r5, #0]
1a0006f0:	260a      	movs	r6, #10
1a0006f2:	9600      	str	r6, [sp, #0]
1a0006f4:	4623      	mov	r3, r4
1a0006f6:	f002 fadd 	bl	1a002cb4 <printIntFormat>
1a0006fa:	7828      	ldrb	r0, [r5, #0]
1a0006fc:	f002 fad2 	bl	1a002ca4 <printEnter>
    	  	  //debugPrintlnString( "\r\nTiempo tics\n");
    	  	  //debugPrintlnInt( xTaskGetTickCount() );

    	  	  xSemaphoreGive(SemBin[3]);
1a000700:	4623      	mov	r3, r4
1a000702:	4622      	mov	r2, r4
1a000704:	4621      	mov	r1, r4
1a000706:	480d      	ldr	r0, [pc, #52]	; (1a00073c <taskSenialTecla4+0x90>)
1a000708:	68c0      	ldr	r0, [r0, #12]
1a00070a:	f000 fa2b 	bl	1a000b64 <xQueueGenericSend>
    	  	  vTaskDelay( 10 / portTICK_RATE_MS );
1a00070e:	4630      	mov	r0, r6
1a000710:	f001 f90e 	bl	1a001930 <vTaskDelay>
    	  if( xSemaphoreTake(SemBin[3] ,portMAX_DELAY ) == pdTRUE){
1a000714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000718:	4b08      	ldr	r3, [pc, #32]	; (1a00073c <taskSenialTecla4+0x90>)
1a00071a:	68d8      	ldr	r0, [r3, #12]
1a00071c:	f000 fbf2 	bl	1a000f04 <xQueueSemaphoreTake>
1a000720:	2801      	cmp	r0, #1
1a000722:	d0ce      	beq.n	1a0006c2 <taskSenialTecla4+0x16>
    	  }
    	  else
    		  vTaskDelay( 50 / portTICK_RATE_MS );
1a000724:	2032      	movs	r0, #50	; 0x32
1a000726:	f001 f903 	bl	1a001930 <vTaskDelay>
1a00072a:	e7f3      	b.n	1a000714 <taskSenialTecla4+0x68>
1a00072c:	10000000 	.word	0x10000000
1a000730:	10002b60 	.word	0x10002b60
1a000734:	100000d0 	.word	0x100000d0
1a000738:	1a004080 	.word	0x1a004080
1a00073c:	10002b50 	.word	0x10002b50

1a000740 <main>:
{
1a000740:	b500      	push	{lr}
1a000742:	b083      	sub	sp, #12
   boardConfig();
1a000744:	f002 fa28 	bl	1a002b98 <boardInit>
   debugPrintConfigUart( UART_USB, 115200 );
1a000748:	4e21      	ldr	r6, [pc, #132]	; (1a0007d0 <main+0x90>)
1a00074a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00074e:	2103      	movs	r1, #3
1a000750:	4630      	mov	r0, r6
1a000752:	f002 fa9b 	bl	1a002c8c <printInitUart>
   xTaskCreate(
1a000756:	2400      	movs	r4, #0
1a000758:	9401      	str	r4, [sp, #4]
1a00075a:	2501      	movs	r5, #1
1a00075c:	9500      	str	r5, [sp, #0]
1a00075e:	4623      	mov	r3, r4
1a000760:	22b4      	movs	r2, #180	; 0xb4
1a000762:	491c      	ldr	r1, [pc, #112]	; (1a0007d4 <main+0x94>)
1a000764:	481c      	ldr	r0, [pc, #112]	; (1a0007d8 <main+0x98>)
1a000766:	f000 ff00 	bl	1a00156a <xTaskCreate>
   xTaskCreate(
1a00076a:	9401      	str	r4, [sp, #4]
1a00076c:	9500      	str	r5, [sp, #0]
1a00076e:	4623      	mov	r3, r4
1a000770:	22b4      	movs	r2, #180	; 0xb4
1a000772:	491a      	ldr	r1, [pc, #104]	; (1a0007dc <main+0x9c>)
1a000774:	481a      	ldr	r0, [pc, #104]	; (1a0007e0 <main+0xa0>)
1a000776:	f000 fef8 	bl	1a00156a <xTaskCreate>
   xTaskCreate(
1a00077a:	9401      	str	r4, [sp, #4]
1a00077c:	9500      	str	r5, [sp, #0]
1a00077e:	4623      	mov	r3, r4
1a000780:	22b4      	movs	r2, #180	; 0xb4
1a000782:	4918      	ldr	r1, [pc, #96]	; (1a0007e4 <main+0xa4>)
1a000784:	4818      	ldr	r0, [pc, #96]	; (1a0007e8 <main+0xa8>)
1a000786:	f000 fef0 	bl	1a00156a <xTaskCreate>
   xTaskCreate(
1a00078a:	9401      	str	r4, [sp, #4]
1a00078c:	9500      	str	r5, [sp, #0]
1a00078e:	4623      	mov	r3, r4
1a000790:	22b4      	movs	r2, #180	; 0xb4
1a000792:	4916      	ldr	r1, [pc, #88]	; (1a0007ec <main+0xac>)
1a000794:	4816      	ldr	r0, [pc, #88]	; (1a0007f0 <main+0xb0>)
1a000796:	f000 fee8 	bl	1a00156a <xTaskCreate>
   xTaskCreate(
1a00079a:	9401      	str	r4, [sp, #4]
1a00079c:	9500      	str	r5, [sp, #0]
1a00079e:	4623      	mov	r3, r4
1a0007a0:	22b4      	movs	r2, #180	; 0xb4
1a0007a2:	4914      	ldr	r1, [pc, #80]	; (1a0007f4 <main+0xb4>)
1a0007a4:	4814      	ldr	r0, [pc, #80]	; (1a0007f8 <main+0xb8>)
1a0007a6:	f000 fee0 	bl	1a00156a <xTaskCreate>
   xTaskCreate(
1a0007aa:	9401      	str	r4, [sp, #4]
1a0007ac:	9500      	str	r5, [sp, #0]
1a0007ae:	4623      	mov	r3, r4
1a0007b0:	22b4      	movs	r2, #180	; 0xb4
1a0007b2:	4912      	ldr	r1, [pc, #72]	; (1a0007fc <main+0xbc>)
1a0007b4:	4812      	ldr	r0, [pc, #72]	; (1a000800 <main+0xc0>)
1a0007b6:	f000 fed8 	bl	1a00156a <xTaskCreate>
   debugPrintlnString( "Iniciando scheduler" );
1a0007ba:	4912      	ldr	r1, [pc, #72]	; (1a000804 <main+0xc4>)
1a0007bc:	7830      	ldrb	r0, [r6, #0]
1a0007be:	f002 fa6d 	bl	1a002c9c <printString>
1a0007c2:	7830      	ldrb	r0, [r6, #0]
1a0007c4:	f002 fa6e 	bl	1a002ca4 <printEnter>
   vTaskStartScheduler();
1a0007c8:	f000 ff02 	bl	1a0015d0 <vTaskStartScheduler>
1a0007cc:	e7fe      	b.n	1a0007cc <main+0x8c>
1a0007ce:	bf00      	nop
1a0007d0:	100000d0 	.word	0x100000d0
1a0007d4:	1a003fe8 	.word	0x1a003fe8
1a0007d8:	1a000301 	.word	0x1a000301
1a0007dc:	1a003ff8 	.word	0x1a003ff8
1a0007e0:	1a000335 	.word	0x1a000335
1a0007e4:	1a00400c 	.word	0x1a00400c
1a0007e8:	1a0004f1 	.word	0x1a0004f1
1a0007ec:	1a004020 	.word	0x1a004020
1a0007f0:	1a000585 	.word	0x1a000585
1a0007f4:	1a004034 	.word	0x1a004034
1a0007f8:	1a000619 	.word	0x1a000619
1a0007fc:	1a004048 	.word	0x1a004048
1a000800:	1a0006ad 	.word	0x1a0006ad
1a000804:	1a00405c 	.word	0x1a00405c

1a000808 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000808:	b538      	push	{r3, r4, r5, lr}
1a00080a:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a00080c:	f010 0f07 	tst.w	r0, #7
1a000810:	d002      	beq.n	1a000818 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000812:	f020 0407 	bic.w	r4, r0, #7
1a000816:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000818:	f000 ff24 	bl	1a001664 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a00081c:	4b13      	ldr	r3, [pc, #76]	; (1a00086c <pvPortMalloc+0x64>)
1a00081e:	681b      	ldr	r3, [r3, #0]
1a000820:	b17b      	cbz	r3, 1a000842 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000822:	4b13      	ldr	r3, [pc, #76]	; (1a000870 <pvPortMalloc+0x68>)
1a000824:	681b      	ldr	r3, [r3, #0]
1a000826:	441c      	add	r4, r3
1a000828:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a00082c:	4294      	cmp	r4, r2
1a00082e:	d80e      	bhi.n	1a00084e <pvPortMalloc+0x46>
1a000830:	42a3      	cmp	r3, r4
1a000832:	d310      	bcc.n	1a000856 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000834:	f000 ffb0 	bl	1a001798 <xTaskResumeAll>
void *pvReturn = NULL;
1a000838:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a00083a:	f000 fcd0 	bl	1a0011de <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a00083e:	4628      	mov	r0, r5
1a000840:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000842:	4b0c      	ldr	r3, [pc, #48]	; (1a000874 <pvPortMalloc+0x6c>)
1a000844:	f023 0307 	bic.w	r3, r3, #7
1a000848:	4a08      	ldr	r2, [pc, #32]	; (1a00086c <pvPortMalloc+0x64>)
1a00084a:	6013      	str	r3, [r2, #0]
1a00084c:	e7e9      	b.n	1a000822 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a00084e:	f000 ffa3 	bl	1a001798 <xTaskResumeAll>
void *pvReturn = NULL;
1a000852:	2500      	movs	r5, #0
1a000854:	e7f1      	b.n	1a00083a <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000856:	4a05      	ldr	r2, [pc, #20]	; (1a00086c <pvPortMalloc+0x64>)
1a000858:	6815      	ldr	r5, [r2, #0]
1a00085a:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a00085c:	4b04      	ldr	r3, [pc, #16]	; (1a000870 <pvPortMalloc+0x68>)
1a00085e:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000860:	f000 ff9a 	bl	1a001798 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000864:	2d00      	cmp	r5, #0
1a000866:	d1ea      	bne.n	1a00083e <pvPortMalloc+0x36>
1a000868:	e7e7      	b.n	1a00083a <pvPortMalloc+0x32>
1a00086a:	bf00      	nop
1a00086c:	100000d4 	.word	0x100000d4
1a000870:	100020d8 	.word	0x100020d8
1a000874:	100000e0 	.word	0x100000e0

1a000878 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000878:	b140      	cbz	r0, 1a00088c <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00087a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00087e:	f383 8811 	msr	BASEPRI, r3
1a000882:	f3bf 8f6f 	isb	sy
1a000886:	f3bf 8f4f 	dsb	sy
1a00088a:	e7fe      	b.n	1a00088a <vPortFree+0x12>
}
1a00088c:	4770      	bx	lr

1a00088e <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a00088e:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000890:	b123      	cbz	r3, 1a00089c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000892:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000894:	6818      	ldr	r0, [r3, #0]
1a000896:	f1c0 0007 	rsb	r0, r0, #7
1a00089a:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a00089c:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a00089e:	4770      	bx	lr

1a0008a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0008a0:	b510      	push	{r4, lr}
1a0008a2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0008a4:	f001 fd96 	bl	1a0023d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0008a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0008aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0008ac:	429a      	cmp	r2, r3
1a0008ae:	d004      	beq.n	1a0008ba <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0008b0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0008b2:	f001 fdb1 	bl	1a002418 <vPortExitCritical>

	return xReturn;
}
1a0008b6:	4620      	mov	r0, r4
1a0008b8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0008ba:	2401      	movs	r4, #1
1a0008bc:	e7f9      	b.n	1a0008b2 <prvIsQueueFull+0x12>

1a0008be <prvIsQueueEmpty>:
{
1a0008be:	b510      	push	{r4, lr}
1a0008c0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0008c2:	f001 fd87 	bl	1a0023d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0008c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0008c8:	b123      	cbz	r3, 1a0008d4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0008ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0008cc:	f001 fda4 	bl	1a002418 <vPortExitCritical>
}
1a0008d0:	4620      	mov	r0, r4
1a0008d2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0008d4:	2401      	movs	r4, #1
1a0008d6:	e7f9      	b.n	1a0008cc <prvIsQueueEmpty+0xe>

1a0008d8 <prvCopyDataToQueue>:
{
1a0008d8:	b570      	push	{r4, r5, r6, lr}
1a0008da:	4604      	mov	r4, r0
1a0008dc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0008de:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0008e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0008e2:	b95a      	cbnz	r2, 1a0008fc <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0008e4:	6803      	ldr	r3, [r0, #0]
1a0008e6:	b11b      	cbz	r3, 1a0008f0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0008e8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0008ea:	3501      	adds	r5, #1
1a0008ec:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0008ee:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0008f0:	6840      	ldr	r0, [r0, #4]
1a0008f2:	f001 f9df 	bl	1a001cb4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0008f6:	2300      	movs	r3, #0
1a0008f8:	6063      	str	r3, [r4, #4]
1a0008fa:	e7f6      	b.n	1a0008ea <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0008fc:	b96e      	cbnz	r6, 1a00091a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0008fe:	6880      	ldr	r0, [r0, #8]
1a000900:	f003 fb5e 	bl	1a003fc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000904:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000906:	68a3      	ldr	r3, [r4, #8]
1a000908:	4413      	add	r3, r2
1a00090a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00090c:	6862      	ldr	r2, [r4, #4]
1a00090e:	4293      	cmp	r3, r2
1a000910:	d319      	bcc.n	1a000946 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000912:	6823      	ldr	r3, [r4, #0]
1a000914:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000916:	2000      	movs	r0, #0
1a000918:	e7e7      	b.n	1a0008ea <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00091a:	68c0      	ldr	r0, [r0, #12]
1a00091c:	f003 fb50 	bl	1a003fc0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000920:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000922:	4252      	negs	r2, r2
1a000924:	68e3      	ldr	r3, [r4, #12]
1a000926:	4413      	add	r3, r2
1a000928:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00092a:	6821      	ldr	r1, [r4, #0]
1a00092c:	428b      	cmp	r3, r1
1a00092e:	d202      	bcs.n	1a000936 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000930:	6863      	ldr	r3, [r4, #4]
1a000932:	441a      	add	r2, r3
1a000934:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000936:	2e02      	cmp	r6, #2
1a000938:	d001      	beq.n	1a00093e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00093a:	2000      	movs	r0, #0
1a00093c:	e7d5      	b.n	1a0008ea <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00093e:	b125      	cbz	r5, 1a00094a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000940:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000942:	2000      	movs	r0, #0
1a000944:	e7d1      	b.n	1a0008ea <prvCopyDataToQueue+0x12>
1a000946:	2000      	movs	r0, #0
1a000948:	e7cf      	b.n	1a0008ea <prvCopyDataToQueue+0x12>
1a00094a:	2000      	movs	r0, #0
1a00094c:	e7cd      	b.n	1a0008ea <prvCopyDataToQueue+0x12>

1a00094e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00094e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000950:	b172      	cbz	r2, 1a000970 <prvCopyDataFromQueue+0x22>
{
1a000952:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000954:	68c3      	ldr	r3, [r0, #12]
1a000956:	4413      	add	r3, r2
1a000958:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00095a:	6844      	ldr	r4, [r0, #4]
1a00095c:	42a3      	cmp	r3, r4
1a00095e:	d301      	bcc.n	1a000964 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000960:	6803      	ldr	r3, [r0, #0]
1a000962:	60c3      	str	r3, [r0, #12]
1a000964:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000966:	68c1      	ldr	r1, [r0, #12]
1a000968:	4620      	mov	r0, r4
1a00096a:	f003 fb29 	bl	1a003fc0 <memcpy>
}
1a00096e:	bd10      	pop	{r4, pc}
1a000970:	4770      	bx	lr

1a000972 <prvUnlockQueue>:
{
1a000972:	b538      	push	{r3, r4, r5, lr}
1a000974:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000976:	f001 fd2d 	bl	1a0023d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00097a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00097e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000980:	e003      	b.n	1a00098a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000982:	f001 f925 	bl	1a001bd0 <vTaskMissedYield>
			--cTxLock;
1a000986:	3c01      	subs	r4, #1
1a000988:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00098a:	2c00      	cmp	r4, #0
1a00098c:	dd08      	ble.n	1a0009a0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00098e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000990:	b133      	cbz	r3, 1a0009a0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000992:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000996:	f001 f889 	bl	1a001aac <xTaskRemoveFromEventList>
1a00099a:	2800      	cmp	r0, #0
1a00099c:	d0f3      	beq.n	1a000986 <prvUnlockQueue+0x14>
1a00099e:	e7f0      	b.n	1a000982 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0009a0:	23ff      	movs	r3, #255	; 0xff
1a0009a2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0009a6:	f001 fd37 	bl	1a002418 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0009aa:	f001 fd13 	bl	1a0023d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0009ae:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0009b2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0009b4:	e003      	b.n	1a0009be <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0009b6:	f001 f90b 	bl	1a001bd0 <vTaskMissedYield>
				--cRxLock;
1a0009ba:	3c01      	subs	r4, #1
1a0009bc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0009be:	2c00      	cmp	r4, #0
1a0009c0:	dd08      	ble.n	1a0009d4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0009c2:	692b      	ldr	r3, [r5, #16]
1a0009c4:	b133      	cbz	r3, 1a0009d4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0009c6:	f105 0010 	add.w	r0, r5, #16
1a0009ca:	f001 f86f 	bl	1a001aac <xTaskRemoveFromEventList>
1a0009ce:	2800      	cmp	r0, #0
1a0009d0:	d0f3      	beq.n	1a0009ba <prvUnlockQueue+0x48>
1a0009d2:	e7f0      	b.n	1a0009b6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0009d4:	23ff      	movs	r3, #255	; 0xff
1a0009d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0009da:	f001 fd1d 	bl	1a002418 <vPortExitCritical>
}
1a0009de:	bd38      	pop	{r3, r4, r5, pc}

1a0009e0 <xQueueGenericReset>:
{
1a0009e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0009e2:	b940      	cbnz	r0, 1a0009f6 <xQueueGenericReset+0x16>
1a0009e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009e8:	f383 8811 	msr	BASEPRI, r3
1a0009ec:	f3bf 8f6f 	isb	sy
1a0009f0:	f3bf 8f4f 	dsb	sy
1a0009f4:	e7fe      	b.n	1a0009f4 <xQueueGenericReset+0x14>
1a0009f6:	4604      	mov	r4, r0
1a0009f8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0009fa:	f001 fceb 	bl	1a0023d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0009fe:	6821      	ldr	r1, [r4, #0]
1a000a00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000a04:	fb03 1002 	mla	r0, r3, r2, r1
1a000a08:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000a0a:	2000      	movs	r0, #0
1a000a0c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000a0e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000a10:	3a01      	subs	r2, #1
1a000a12:	fb02 1303 	mla	r3, r2, r3, r1
1a000a16:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000a18:	23ff      	movs	r3, #255	; 0xff
1a000a1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000a22:	b9a5      	cbnz	r5, 1a000a4e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000a24:	6923      	ldr	r3, [r4, #16]
1a000a26:	b91b      	cbnz	r3, 1a000a30 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000a28:	f001 fcf6 	bl	1a002418 <vPortExitCritical>
}
1a000a2c:	2001      	movs	r0, #1
1a000a2e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000a30:	f104 0010 	add.w	r0, r4, #16
1a000a34:	f001 f83a 	bl	1a001aac <xTaskRemoveFromEventList>
1a000a38:	2800      	cmp	r0, #0
1a000a3a:	d0f5      	beq.n	1a000a28 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000a3c:	4b08      	ldr	r3, [pc, #32]	; (1a000a60 <xQueueGenericReset+0x80>)
1a000a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a42:	601a      	str	r2, [r3, #0]
1a000a44:	f3bf 8f4f 	dsb	sy
1a000a48:	f3bf 8f6f 	isb	sy
1a000a4c:	e7ec      	b.n	1a000a28 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000a4e:	f104 0010 	add.w	r0, r4, #16
1a000a52:	f000 fb62 	bl	1a00111a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000a56:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a5a:	f000 fb5e 	bl	1a00111a <vListInitialise>
1a000a5e:	e7e3      	b.n	1a000a28 <xQueueGenericReset+0x48>
1a000a60:	e000ed04 	.word	0xe000ed04

1a000a64 <prvInitialiseNewQueue>:
{
1a000a64:	b538      	push	{r3, r4, r5, lr}
1a000a66:	461d      	mov	r5, r3
1a000a68:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000a6a:	460b      	mov	r3, r1
1a000a6c:	b149      	cbz	r1, 1a000a82 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000a6e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000a70:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000a72:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000a74:	2101      	movs	r1, #1
1a000a76:	4620      	mov	r0, r4
1a000a78:	f7ff ffb2 	bl	1a0009e0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000a7c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000a80:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000a82:	6024      	str	r4, [r4, #0]
1a000a84:	e7f4      	b.n	1a000a70 <prvInitialiseNewQueue+0xc>

1a000a86 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a86:	b940      	cbnz	r0, 1a000a9a <xQueueGenericCreateStatic+0x14>
1a000a88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a8c:	f383 8811 	msr	BASEPRI, r3
1a000a90:	f3bf 8f6f 	isb	sy
1a000a94:	f3bf 8f4f 	dsb	sy
1a000a98:	e7fe      	b.n	1a000a98 <xQueueGenericCreateStatic+0x12>
	{
1a000a9a:	b510      	push	{r4, lr}
1a000a9c:	b084      	sub	sp, #16
1a000a9e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000aa0:	b153      	cbz	r3, 1a000ab8 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000aa2:	b192      	cbz	r2, 1a000aca <xQueueGenericCreateStatic+0x44>
1a000aa4:	b989      	cbnz	r1, 1a000aca <xQueueGenericCreateStatic+0x44>
1a000aa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aaa:	f383 8811 	msr	BASEPRI, r3
1a000aae:	f3bf 8f6f 	isb	sy
1a000ab2:	f3bf 8f4f 	dsb	sy
1a000ab6:	e7fe      	b.n	1a000ab6 <xQueueGenericCreateStatic+0x30>
1a000ab8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000abc:	f383 8811 	msr	BASEPRI, r3
1a000ac0:	f3bf 8f6f 	isb	sy
1a000ac4:	f3bf 8f4f 	dsb	sy
1a000ac8:	e7fe      	b.n	1a000ac8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000aca:	b94a      	cbnz	r2, 1a000ae0 <xQueueGenericCreateStatic+0x5a>
1a000acc:	b141      	cbz	r1, 1a000ae0 <xQueueGenericCreateStatic+0x5a>
1a000ace:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ad2:	f383 8811 	msr	BASEPRI, r3
1a000ad6:	f3bf 8f6f 	isb	sy
1a000ada:	f3bf 8f4f 	dsb	sy
1a000ade:	e7fe      	b.n	1a000ade <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000ae0:	2050      	movs	r0, #80	; 0x50
1a000ae2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000ae4:	9803      	ldr	r0, [sp, #12]
1a000ae6:	2850      	cmp	r0, #80	; 0x50
1a000ae8:	d008      	beq.n	1a000afc <xQueueGenericCreateStatic+0x76>
1a000aea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aee:	f383 8811 	msr	BASEPRI, r3
1a000af2:	f3bf 8f6f 	isb	sy
1a000af6:	f3bf 8f4f 	dsb	sy
1a000afa:	e7fe      	b.n	1a000afa <xQueueGenericCreateStatic+0x74>
1a000afc:	4620      	mov	r0, r4
1a000afe:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000b00:	2301      	movs	r3, #1
1a000b02:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000b06:	9400      	str	r4, [sp, #0]
1a000b08:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000b0c:	f7ff ffaa 	bl	1a000a64 <prvInitialiseNewQueue>
	}
1a000b10:	4620      	mov	r0, r4
1a000b12:	b004      	add	sp, #16
1a000b14:	bd10      	pop	{r4, pc}

1a000b16 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000b16:	b940      	cbnz	r0, 1a000b2a <xQueueGenericCreate+0x14>
1a000b18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b1c:	f383 8811 	msr	BASEPRI, r3
1a000b20:	f3bf 8f6f 	isb	sy
1a000b24:	f3bf 8f4f 	dsb	sy
1a000b28:	e7fe      	b.n	1a000b28 <xQueueGenericCreate+0x12>
	{
1a000b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b2c:	b083      	sub	sp, #12
1a000b2e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000b30:	b111      	cbz	r1, 1a000b38 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000b32:	fb01 f000 	mul.w	r0, r1, r0
1a000b36:	e000      	b.n	1a000b3a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000b38:	2000      	movs	r0, #0
1a000b3a:	4617      	mov	r7, r2
1a000b3c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000b3e:	3050      	adds	r0, #80	; 0x50
1a000b40:	f7ff fe62 	bl	1a000808 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000b44:	4605      	mov	r5, r0
1a000b46:	b150      	cbz	r0, 1a000b5e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000b48:	2300      	movs	r3, #0
1a000b4a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000b4e:	9000      	str	r0, [sp, #0]
1a000b50:	463b      	mov	r3, r7
1a000b52:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000b56:	4621      	mov	r1, r4
1a000b58:	4630      	mov	r0, r6
1a000b5a:	f7ff ff83 	bl	1a000a64 <prvInitialiseNewQueue>
	}
1a000b5e:	4628      	mov	r0, r5
1a000b60:	b003      	add	sp, #12
1a000b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000b64 <xQueueGenericSend>:
{
1a000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b66:	b085      	sub	sp, #20
1a000b68:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000b6a:	b160      	cbz	r0, 1a000b86 <xQueueGenericSend+0x22>
1a000b6c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b6e:	b999      	cbnz	r1, 1a000b98 <xQueueGenericSend+0x34>
1a000b70:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b72:	b18a      	cbz	r2, 1a000b98 <xQueueGenericSend+0x34>
1a000b74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b78:	f383 8811 	msr	BASEPRI, r3
1a000b7c:	f3bf 8f6f 	isb	sy
1a000b80:	f3bf 8f4f 	dsb	sy
1a000b84:	e7fe      	b.n	1a000b84 <xQueueGenericSend+0x20>
1a000b86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b8a:	f383 8811 	msr	BASEPRI, r3
1a000b8e:	f3bf 8f6f 	isb	sy
1a000b92:	f3bf 8f4f 	dsb	sy
1a000b96:	e7fe      	b.n	1a000b96 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000b98:	2b02      	cmp	r3, #2
1a000b9a:	d10b      	bne.n	1a000bb4 <xQueueGenericSend+0x50>
1a000b9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000b9e:	2a01      	cmp	r2, #1
1a000ba0:	d008      	beq.n	1a000bb4 <xQueueGenericSend+0x50>
1a000ba2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ba6:	f383 8811 	msr	BASEPRI, r3
1a000baa:	f3bf 8f6f 	isb	sy
1a000bae:	f3bf 8f4f 	dsb	sy
1a000bb2:	e7fe      	b.n	1a000bb2 <xQueueGenericSend+0x4e>
1a000bb4:	461e      	mov	r6, r3
1a000bb6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000bb8:	f001 f810 	bl	1a001bdc <xTaskGetSchedulerState>
1a000bbc:	b950      	cbnz	r0, 1a000bd4 <xQueueGenericSend+0x70>
1a000bbe:	9b01      	ldr	r3, [sp, #4]
1a000bc0:	b153      	cbz	r3, 1a000bd8 <xQueueGenericSend+0x74>
1a000bc2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bc6:	f383 8811 	msr	BASEPRI, r3
1a000bca:	f3bf 8f6f 	isb	sy
1a000bce:	f3bf 8f4f 	dsb	sy
1a000bd2:	e7fe      	b.n	1a000bd2 <xQueueGenericSend+0x6e>
1a000bd4:	2500      	movs	r5, #0
1a000bd6:	e03a      	b.n	1a000c4e <xQueueGenericSend+0xea>
1a000bd8:	2500      	movs	r5, #0
1a000bda:	e038      	b.n	1a000c4e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000bdc:	4632      	mov	r2, r6
1a000bde:	4639      	mov	r1, r7
1a000be0:	4620      	mov	r0, r4
1a000be2:	f7ff fe79 	bl	1a0008d8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000be8:	b94b      	cbnz	r3, 1a000bfe <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000bea:	b1a8      	cbz	r0, 1a000c18 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000bec:	4b3b      	ldr	r3, [pc, #236]	; (1a000cdc <xQueueGenericSend+0x178>)
1a000bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bf2:	601a      	str	r2, [r3, #0]
1a000bf4:	f3bf 8f4f 	dsb	sy
1a000bf8:	f3bf 8f6f 	isb	sy
1a000bfc:	e00c      	b.n	1a000c18 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000bfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c02:	f000 ff53 	bl	1a001aac <xTaskRemoveFromEventList>
1a000c06:	b138      	cbz	r0, 1a000c18 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000c08:	4b34      	ldr	r3, [pc, #208]	; (1a000cdc <xQueueGenericSend+0x178>)
1a000c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c0e:	601a      	str	r2, [r3, #0]
1a000c10:	f3bf 8f4f 	dsb	sy
1a000c14:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000c18:	f001 fbfe 	bl	1a002418 <vPortExitCritical>
				return pdPASS;
1a000c1c:	2001      	movs	r0, #1
}
1a000c1e:	b005      	add	sp, #20
1a000c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000c22:	f001 fbf9 	bl	1a002418 <vPortExitCritical>
					return errQUEUE_FULL;
1a000c26:	2000      	movs	r0, #0
1a000c28:	e7f9      	b.n	1a000c1e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000c2a:	a802      	add	r0, sp, #8
1a000c2c:	f000 ff84 	bl	1a001b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000c30:	2501      	movs	r5, #1
1a000c32:	e019      	b.n	1a000c68 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000c34:	2300      	movs	r3, #0
1a000c36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000c3a:	e021      	b.n	1a000c80 <xQueueGenericSend+0x11c>
1a000c3c:	2300      	movs	r3, #0
1a000c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000c42:	e023      	b.n	1a000c8c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000c44:	4620      	mov	r0, r4
1a000c46:	f7ff fe94 	bl	1a000972 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000c4a:	f000 fda5 	bl	1a001798 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000c4e:	f001 fbc1 	bl	1a0023d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000c52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c56:	429a      	cmp	r2, r3
1a000c58:	d3c0      	bcc.n	1a000bdc <xQueueGenericSend+0x78>
1a000c5a:	2e02      	cmp	r6, #2
1a000c5c:	d0be      	beq.n	1a000bdc <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000c5e:	9b01      	ldr	r3, [sp, #4]
1a000c60:	2b00      	cmp	r3, #0
1a000c62:	d0de      	beq.n	1a000c22 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000c64:	2d00      	cmp	r5, #0
1a000c66:	d0e0      	beq.n	1a000c2a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000c68:	f001 fbd6 	bl	1a002418 <vPortExitCritical>
		vTaskSuspendAll();
1a000c6c:	f000 fcfa 	bl	1a001664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000c70:	f001 fbb0 	bl	1a0023d4 <vPortEnterCritical>
1a000c74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000c78:	b25b      	sxtb	r3, r3
1a000c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000c7e:	d0d9      	beq.n	1a000c34 <xQueueGenericSend+0xd0>
1a000c80:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000c84:	b25b      	sxtb	r3, r3
1a000c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000c8a:	d0d7      	beq.n	1a000c3c <xQueueGenericSend+0xd8>
1a000c8c:	f001 fbc4 	bl	1a002418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000c90:	a901      	add	r1, sp, #4
1a000c92:	a802      	add	r0, sp, #8
1a000c94:	f000 ff5c 	bl	1a001b50 <xTaskCheckForTimeOut>
1a000c98:	b9c8      	cbnz	r0, 1a000cce <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000c9a:	4620      	mov	r0, r4
1a000c9c:	f7ff fe00 	bl	1a0008a0 <prvIsQueueFull>
1a000ca0:	2800      	cmp	r0, #0
1a000ca2:	d0cf      	beq.n	1a000c44 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000ca4:	9901      	ldr	r1, [sp, #4]
1a000ca6:	f104 0010 	add.w	r0, r4, #16
1a000caa:	f000 fecb 	bl	1a001a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000cae:	4620      	mov	r0, r4
1a000cb0:	f7ff fe5f 	bl	1a000972 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000cb4:	f000 fd70 	bl	1a001798 <xTaskResumeAll>
1a000cb8:	2800      	cmp	r0, #0
1a000cba:	d1c8      	bne.n	1a000c4e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000cbc:	4b07      	ldr	r3, [pc, #28]	; (1a000cdc <xQueueGenericSend+0x178>)
1a000cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cc2:	601a      	str	r2, [r3, #0]
1a000cc4:	f3bf 8f4f 	dsb	sy
1a000cc8:	f3bf 8f6f 	isb	sy
1a000ccc:	e7bf      	b.n	1a000c4e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000cce:	4620      	mov	r0, r4
1a000cd0:	f7ff fe4f 	bl	1a000972 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000cd4:	f000 fd60 	bl	1a001798 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000cd8:	2000      	movs	r0, #0
1a000cda:	e7a0      	b.n	1a000c1e <xQueueGenericSend+0xba>
1a000cdc:	e000ed04 	.word	0xe000ed04

1a000ce0 <xQueueGenericSendFromISR>:
{
1a000ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000ce4:	b160      	cbz	r0, 1a000d00 <xQueueGenericSendFromISR+0x20>
1a000ce6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000ce8:	b999      	cbnz	r1, 1a000d12 <xQueueGenericSendFromISR+0x32>
1a000cea:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000cec:	b188      	cbz	r0, 1a000d12 <xQueueGenericSendFromISR+0x32>
1a000cee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cf2:	f383 8811 	msr	BASEPRI, r3
1a000cf6:	f3bf 8f6f 	isb	sy
1a000cfa:	f3bf 8f4f 	dsb	sy
1a000cfe:	e7fe      	b.n	1a000cfe <xQueueGenericSendFromISR+0x1e>
1a000d00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d04:	f383 8811 	msr	BASEPRI, r3
1a000d08:	f3bf 8f6f 	isb	sy
1a000d0c:	f3bf 8f4f 	dsb	sy
1a000d10:	e7fe      	b.n	1a000d10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000d12:	2b02      	cmp	r3, #2
1a000d14:	d10b      	bne.n	1a000d2e <xQueueGenericSendFromISR+0x4e>
1a000d16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000d18:	2801      	cmp	r0, #1
1a000d1a:	d008      	beq.n	1a000d2e <xQueueGenericSendFromISR+0x4e>
1a000d1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d20:	f383 8811 	msr	BASEPRI, r3
1a000d24:	f3bf 8f6f 	isb	sy
1a000d28:	f3bf 8f4f 	dsb	sy
1a000d2c:	e7fe      	b.n	1a000d2c <xQueueGenericSendFromISR+0x4c>
1a000d2e:	461f      	mov	r7, r3
1a000d30:	4690      	mov	r8, r2
1a000d32:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000d34:	f001 fc78 	bl	1a002628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000d38:	f3ef 8611 	mrs	r6, BASEPRI
1a000d3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d40:	f383 8811 	msr	BASEPRI, r3
1a000d44:	f3bf 8f6f 	isb	sy
1a000d48:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000d4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000d4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000d50:	429a      	cmp	r2, r3
1a000d52:	d303      	bcc.n	1a000d5c <xQueueGenericSendFromISR+0x7c>
1a000d54:	2f02      	cmp	r7, #2
1a000d56:	d001      	beq.n	1a000d5c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000d58:	2000      	movs	r0, #0
1a000d5a:	e00f      	b.n	1a000d7c <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000d5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000d60:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000d62:	463a      	mov	r2, r7
1a000d64:	4649      	mov	r1, r9
1a000d66:	4620      	mov	r0, r4
1a000d68:	f7ff fdb6 	bl	1a0008d8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000d6c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000d70:	d008      	beq.n	1a000d84 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000d72:	1c6b      	adds	r3, r5, #1
1a000d74:	b25b      	sxtb	r3, r3
1a000d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000d7a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000d7c:	f386 8811 	msr	BASEPRI, r6
}
1a000d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000d86:	b15b      	cbz	r3, 1a000da0 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000d88:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d8c:	f000 fe8e 	bl	1a001aac <xTaskRemoveFromEventList>
1a000d90:	b140      	cbz	r0, 1a000da4 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000d92:	f1b8 0f00 	cmp.w	r8, #0
1a000d96:	d007      	beq.n	1a000da8 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000d98:	2001      	movs	r0, #1
1a000d9a:	f8c8 0000 	str.w	r0, [r8]
1a000d9e:	e7ed      	b.n	1a000d7c <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000da0:	2001      	movs	r0, #1
1a000da2:	e7eb      	b.n	1a000d7c <xQueueGenericSendFromISR+0x9c>
1a000da4:	2001      	movs	r0, #1
1a000da6:	e7e9      	b.n	1a000d7c <xQueueGenericSendFromISR+0x9c>
1a000da8:	2001      	movs	r0, #1
1a000daa:	e7e7      	b.n	1a000d7c <xQueueGenericSendFromISR+0x9c>

1a000dac <xQueueReceive>:
{
1a000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000dae:	b085      	sub	sp, #20
1a000db0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000db2:	b160      	cbz	r0, 1a000dce <xQueueReceive+0x22>
1a000db4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000db6:	b999      	cbnz	r1, 1a000de0 <xQueueReceive+0x34>
1a000db8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000dba:	b18b      	cbz	r3, 1a000de0 <xQueueReceive+0x34>
	__asm volatile
1a000dbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dc0:	f383 8811 	msr	BASEPRI, r3
1a000dc4:	f3bf 8f6f 	isb	sy
1a000dc8:	f3bf 8f4f 	dsb	sy
1a000dcc:	e7fe      	b.n	1a000dcc <xQueueReceive+0x20>
1a000dce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dd2:	f383 8811 	msr	BASEPRI, r3
1a000dd6:	f3bf 8f6f 	isb	sy
1a000dda:	f3bf 8f4f 	dsb	sy
1a000dde:	e7fe      	b.n	1a000dde <xQueueReceive+0x32>
1a000de0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000de2:	f000 fefb 	bl	1a001bdc <xTaskGetSchedulerState>
1a000de6:	b950      	cbnz	r0, 1a000dfe <xQueueReceive+0x52>
1a000de8:	9b01      	ldr	r3, [sp, #4]
1a000dea:	b153      	cbz	r3, 1a000e02 <xQueueReceive+0x56>
1a000dec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000df0:	f383 8811 	msr	BASEPRI, r3
1a000df4:	f3bf 8f6f 	isb	sy
1a000df8:	f3bf 8f4f 	dsb	sy
1a000dfc:	e7fe      	b.n	1a000dfc <xQueueReceive+0x50>
1a000dfe:	2600      	movs	r6, #0
1a000e00:	e03e      	b.n	1a000e80 <xQueueReceive+0xd4>
1a000e02:	2600      	movs	r6, #0
1a000e04:	e03c      	b.n	1a000e80 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000e06:	4639      	mov	r1, r7
1a000e08:	4620      	mov	r0, r4
1a000e0a:	f7ff fda0 	bl	1a00094e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000e0e:	3d01      	subs	r5, #1
1a000e10:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000e12:	6923      	ldr	r3, [r4, #16]
1a000e14:	b923      	cbnz	r3, 1a000e20 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000e16:	f001 faff 	bl	1a002418 <vPortExitCritical>
				return pdPASS;
1a000e1a:	2001      	movs	r0, #1
}
1a000e1c:	b005      	add	sp, #20
1a000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000e20:	f104 0010 	add.w	r0, r4, #16
1a000e24:	f000 fe42 	bl	1a001aac <xTaskRemoveFromEventList>
1a000e28:	2800      	cmp	r0, #0
1a000e2a:	d0f4      	beq.n	1a000e16 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000e2c:	4b34      	ldr	r3, [pc, #208]	; (1a000f00 <xQueueReceive+0x154>)
1a000e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e32:	601a      	str	r2, [r3, #0]
1a000e34:	f3bf 8f4f 	dsb	sy
1a000e38:	f3bf 8f6f 	isb	sy
1a000e3c:	e7eb      	b.n	1a000e16 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000e3e:	f001 faeb 	bl	1a002418 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000e42:	2000      	movs	r0, #0
1a000e44:	e7ea      	b.n	1a000e1c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000e46:	a802      	add	r0, sp, #8
1a000e48:	f000 fe76 	bl	1a001b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000e4c:	2601      	movs	r6, #1
1a000e4e:	e021      	b.n	1a000e94 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000e50:	2300      	movs	r3, #0
1a000e52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000e56:	e029      	b.n	1a000eac <xQueueReceive+0x100>
1a000e58:	2300      	movs	r3, #0
1a000e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000e5e:	e02b      	b.n	1a000eb8 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000e60:	4620      	mov	r0, r4
1a000e62:	f7ff fd86 	bl	1a000972 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000e66:	f000 fc97 	bl	1a001798 <xTaskResumeAll>
1a000e6a:	e009      	b.n	1a000e80 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000e6c:	4620      	mov	r0, r4
1a000e6e:	f7ff fd80 	bl	1a000972 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e72:	f000 fc91 	bl	1a001798 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e76:	4620      	mov	r0, r4
1a000e78:	f7ff fd21 	bl	1a0008be <prvIsQueueEmpty>
1a000e7c:	2800      	cmp	r0, #0
1a000e7e:	d13d      	bne.n	1a000efc <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000e80:	f001 faa8 	bl	1a0023d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000e84:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000e86:	2d00      	cmp	r5, #0
1a000e88:	d1bd      	bne.n	1a000e06 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000e8a:	9b01      	ldr	r3, [sp, #4]
1a000e8c:	2b00      	cmp	r3, #0
1a000e8e:	d0d6      	beq.n	1a000e3e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000e90:	2e00      	cmp	r6, #0
1a000e92:	d0d8      	beq.n	1a000e46 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000e94:	f001 fac0 	bl	1a002418 <vPortExitCritical>
		vTaskSuspendAll();
1a000e98:	f000 fbe4 	bl	1a001664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000e9c:	f001 fa9a 	bl	1a0023d4 <vPortEnterCritical>
1a000ea0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ea4:	b25b      	sxtb	r3, r3
1a000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000eaa:	d0d1      	beq.n	1a000e50 <xQueueReceive+0xa4>
1a000eac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000eb0:	b25b      	sxtb	r3, r3
1a000eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000eb6:	d0cf      	beq.n	1a000e58 <xQueueReceive+0xac>
1a000eb8:	f001 faae 	bl	1a002418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000ebc:	a901      	add	r1, sp, #4
1a000ebe:	a802      	add	r0, sp, #8
1a000ec0:	f000 fe46 	bl	1a001b50 <xTaskCheckForTimeOut>
1a000ec4:	2800      	cmp	r0, #0
1a000ec6:	d1d1      	bne.n	1a000e6c <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000ec8:	4620      	mov	r0, r4
1a000eca:	f7ff fcf8 	bl	1a0008be <prvIsQueueEmpty>
1a000ece:	2800      	cmp	r0, #0
1a000ed0:	d0c6      	beq.n	1a000e60 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000ed2:	9901      	ldr	r1, [sp, #4]
1a000ed4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ed8:	f000 fdb4 	bl	1a001a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000edc:	4620      	mov	r0, r4
1a000ede:	f7ff fd48 	bl	1a000972 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000ee2:	f000 fc59 	bl	1a001798 <xTaskResumeAll>
1a000ee6:	2800      	cmp	r0, #0
1a000ee8:	d1ca      	bne.n	1a000e80 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000eea:	4b05      	ldr	r3, [pc, #20]	; (1a000f00 <xQueueReceive+0x154>)
1a000eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ef0:	601a      	str	r2, [r3, #0]
1a000ef2:	f3bf 8f4f 	dsb	sy
1a000ef6:	f3bf 8f6f 	isb	sy
1a000efa:	e7c1      	b.n	1a000e80 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000efc:	2000      	movs	r0, #0
1a000efe:	e78d      	b.n	1a000e1c <xQueueReceive+0x70>
1a000f00:	e000ed04 	.word	0xe000ed04

1a000f04 <xQueueSemaphoreTake>:
{
1a000f04:	b570      	push	{r4, r5, r6, lr}
1a000f06:	b084      	sub	sp, #16
1a000f08:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000f0a:	b940      	cbnz	r0, 1a000f1e <xQueueSemaphoreTake+0x1a>
1a000f0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f10:	f383 8811 	msr	BASEPRI, r3
1a000f14:	f3bf 8f6f 	isb	sy
1a000f18:	f3bf 8f4f 	dsb	sy
1a000f1c:	e7fe      	b.n	1a000f1c <xQueueSemaphoreTake+0x18>
1a000f1e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000f20:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000f22:	b143      	cbz	r3, 1a000f36 <xQueueSemaphoreTake+0x32>
1a000f24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f28:	f383 8811 	msr	BASEPRI, r3
1a000f2c:	f3bf 8f6f 	isb	sy
1a000f30:	f3bf 8f4f 	dsb	sy
1a000f34:	e7fe      	b.n	1a000f34 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000f36:	f000 fe51 	bl	1a001bdc <xTaskGetSchedulerState>
1a000f3a:	b950      	cbnz	r0, 1a000f52 <xQueueSemaphoreTake+0x4e>
1a000f3c:	9b01      	ldr	r3, [sp, #4]
1a000f3e:	b15b      	cbz	r3, 1a000f58 <xQueueSemaphoreTake+0x54>
1a000f40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f44:	f383 8811 	msr	BASEPRI, r3
1a000f48:	f3bf 8f6f 	isb	sy
1a000f4c:	f3bf 8f4f 	dsb	sy
1a000f50:	e7fe      	b.n	1a000f50 <xQueueSemaphoreTake+0x4c>
1a000f52:	2500      	movs	r5, #0
1a000f54:	462e      	mov	r6, r5
1a000f56:	e051      	b.n	1a000ffc <xQueueSemaphoreTake+0xf8>
1a000f58:	2500      	movs	r5, #0
1a000f5a:	462e      	mov	r6, r5
1a000f5c:	e04e      	b.n	1a000ffc <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000f5e:	3b01      	subs	r3, #1
1a000f60:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000f62:	6823      	ldr	r3, [r4, #0]
1a000f64:	b913      	cbnz	r3, 1a000f6c <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a000f66:	f000 ff5d 	bl	1a001e24 <pvTaskIncrementMutexHeldCount>
1a000f6a:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000f6c:	6923      	ldr	r3, [r4, #16]
1a000f6e:	b163      	cbz	r3, 1a000f8a <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000f70:	f104 0010 	add.w	r0, r4, #16
1a000f74:	f000 fd9a 	bl	1a001aac <xTaskRemoveFromEventList>
1a000f78:	b138      	cbz	r0, 1a000f8a <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a000f7a:	4b48      	ldr	r3, [pc, #288]	; (1a00109c <xQueueSemaphoreTake+0x198>)
1a000f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f80:	601a      	str	r2, [r3, #0]
1a000f82:	f3bf 8f4f 	dsb	sy
1a000f86:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000f8a:	f001 fa45 	bl	1a002418 <vPortExitCritical>
				return pdPASS;
1a000f8e:	2501      	movs	r5, #1
}
1a000f90:	4628      	mov	r0, r5
1a000f92:	b004      	add	sp, #16
1a000f94:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a000f96:	b145      	cbz	r5, 1a000faa <xQueueSemaphoreTake+0xa6>
1a000f98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f9c:	f383 8811 	msr	BASEPRI, r3
1a000fa0:	f3bf 8f6f 	isb	sy
1a000fa4:	f3bf 8f4f 	dsb	sy
1a000fa8:	e7fe      	b.n	1a000fa8 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a000faa:	f001 fa35 	bl	1a002418 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000fae:	e7ef      	b.n	1a000f90 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000fb0:	a802      	add	r0, sp, #8
1a000fb2:	f000 fdc1 	bl	1a001b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000fb6:	2601      	movs	r6, #1
1a000fb8:	e02a      	b.n	1a001010 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a000fba:	2300      	movs	r3, #0
1a000fbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000fc0:	e032      	b.n	1a001028 <xQueueSemaphoreTake+0x124>
1a000fc2:	2300      	movs	r3, #0
1a000fc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000fc8:	e034      	b.n	1a001034 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a000fca:	f001 fa03 	bl	1a0023d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a000fce:	6860      	ldr	r0, [r4, #4]
1a000fd0:	f000 fe14 	bl	1a001bfc <xTaskPriorityInherit>
1a000fd4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a000fd6:	f001 fa1f 	bl	1a002418 <vPortExitCritical>
1a000fda:	e03b      	b.n	1a001054 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a000fdc:	4620      	mov	r0, r4
1a000fde:	f7ff fcc8 	bl	1a000972 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000fe2:	f000 fbd9 	bl	1a001798 <xTaskResumeAll>
1a000fe6:	e009      	b.n	1a000ffc <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a000fe8:	4620      	mov	r0, r4
1a000fea:	f7ff fcc2 	bl	1a000972 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000fee:	f000 fbd3 	bl	1a001798 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000ff2:	4620      	mov	r0, r4
1a000ff4:	f7ff fc63 	bl	1a0008be <prvIsQueueEmpty>
1a000ff8:	2800      	cmp	r0, #0
1a000ffa:	d140      	bne.n	1a00107e <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a000ffc:	f001 f9ea 	bl	1a0023d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001002:	2b00      	cmp	r3, #0
1a001004:	d1ab      	bne.n	1a000f5e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001006:	9b01      	ldr	r3, [sp, #4]
1a001008:	2b00      	cmp	r3, #0
1a00100a:	d0c4      	beq.n	1a000f96 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a00100c:	2e00      	cmp	r6, #0
1a00100e:	d0cf      	beq.n	1a000fb0 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001010:	f001 fa02 	bl	1a002418 <vPortExitCritical>
		vTaskSuspendAll();
1a001014:	f000 fb26 	bl	1a001664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001018:	f001 f9dc 	bl	1a0023d4 <vPortEnterCritical>
1a00101c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001020:	b25b      	sxtb	r3, r3
1a001022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001026:	d0c8      	beq.n	1a000fba <xQueueSemaphoreTake+0xb6>
1a001028:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00102c:	b25b      	sxtb	r3, r3
1a00102e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001032:	d0c6      	beq.n	1a000fc2 <xQueueSemaphoreTake+0xbe>
1a001034:	f001 f9f0 	bl	1a002418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001038:	a901      	add	r1, sp, #4
1a00103a:	a802      	add	r0, sp, #8
1a00103c:	f000 fd88 	bl	1a001b50 <xTaskCheckForTimeOut>
1a001040:	2800      	cmp	r0, #0
1a001042:	d1d1      	bne.n	1a000fe8 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001044:	4620      	mov	r0, r4
1a001046:	f7ff fc3a 	bl	1a0008be <prvIsQueueEmpty>
1a00104a:	2800      	cmp	r0, #0
1a00104c:	d0c6      	beq.n	1a000fdc <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00104e:	6823      	ldr	r3, [r4, #0]
1a001050:	2b00      	cmp	r3, #0
1a001052:	d0ba      	beq.n	1a000fca <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001054:	9901      	ldr	r1, [sp, #4]
1a001056:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00105a:	f000 fcf3 	bl	1a001a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00105e:	4620      	mov	r0, r4
1a001060:	f7ff fc87 	bl	1a000972 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001064:	f000 fb98 	bl	1a001798 <xTaskResumeAll>
1a001068:	2800      	cmp	r0, #0
1a00106a:	d1c7      	bne.n	1a000ffc <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a00106c:	4b0b      	ldr	r3, [pc, #44]	; (1a00109c <xQueueSemaphoreTake+0x198>)
1a00106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001072:	601a      	str	r2, [r3, #0]
1a001074:	f3bf 8f4f 	dsb	sy
1a001078:	f3bf 8f6f 	isb	sy
1a00107c:	e7be      	b.n	1a000ffc <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a00107e:	2d00      	cmp	r5, #0
1a001080:	d086      	beq.n	1a000f90 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a001082:	f001 f9a7 	bl	1a0023d4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001086:	4620      	mov	r0, r4
1a001088:	f7ff fc01 	bl	1a00088e <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a00108c:	4601      	mov	r1, r0
1a00108e:	6860      	ldr	r0, [r4, #4]
1a001090:	f000 fe68 	bl	1a001d64 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001094:	f001 f9c0 	bl	1a002418 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001098:	2500      	movs	r5, #0
1a00109a:	e779      	b.n	1a000f90 <xQueueSemaphoreTake+0x8c>
1a00109c:	e000ed04 	.word	0xe000ed04

1a0010a0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0010a0:	2300      	movs	r3, #0
1a0010a2:	2b07      	cmp	r3, #7
1a0010a4:	d80c      	bhi.n	1a0010c0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0010a6:	4a07      	ldr	r2, [pc, #28]	; (1a0010c4 <vQueueAddToRegistry+0x24>)
1a0010a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0010ac:	b10a      	cbz	r2, 1a0010b2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0010ae:	3301      	adds	r3, #1
1a0010b0:	e7f7      	b.n	1a0010a2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0010b2:	4a04      	ldr	r2, [pc, #16]	; (1a0010c4 <vQueueAddToRegistry+0x24>)
1a0010b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0010b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0010bc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0010be:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0010c0:	4770      	bx	lr
1a0010c2:	bf00      	nop
1a0010c4:	10002bb0 	.word	0x10002bb0

1a0010c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0010c8:	b570      	push	{r4, r5, r6, lr}
1a0010ca:	4604      	mov	r4, r0
1a0010cc:	460d      	mov	r5, r1
1a0010ce:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0010d0:	f001 f980 	bl	1a0023d4 <vPortEnterCritical>
1a0010d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0010d8:	b25b      	sxtb	r3, r3
1a0010da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010de:	d00d      	beq.n	1a0010fc <vQueueWaitForMessageRestricted+0x34>
1a0010e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0010e4:	b25b      	sxtb	r3, r3
1a0010e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010ea:	d00b      	beq.n	1a001104 <vQueueWaitForMessageRestricted+0x3c>
1a0010ec:	f001 f994 	bl	1a002418 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0010f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0010f2:	b15b      	cbz	r3, 1a00110c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0010f4:	4620      	mov	r0, r4
1a0010f6:	f7ff fc3c 	bl	1a000972 <prvUnlockQueue>
	}
1a0010fa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0010fc:	2300      	movs	r3, #0
1a0010fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001102:	e7ed      	b.n	1a0010e0 <vQueueWaitForMessageRestricted+0x18>
1a001104:	2300      	movs	r3, #0
1a001106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00110a:	e7ef      	b.n	1a0010ec <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a00110c:	4632      	mov	r2, r6
1a00110e:	4629      	mov	r1, r5
1a001110:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001114:	f000 fcae 	bl	1a001a74 <vTaskPlaceOnEventListRestricted>
1a001118:	e7ec      	b.n	1a0010f4 <vQueueWaitForMessageRestricted+0x2c>

1a00111a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00111a:	f100 0308 	add.w	r3, r0, #8
1a00111e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001124:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001126:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001128:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00112a:	2300      	movs	r3, #0
1a00112c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00112e:	4770      	bx	lr

1a001130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001130:	2300      	movs	r3, #0
1a001132:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001134:	4770      	bx	lr

1a001136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001136:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001138:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00113a:	689a      	ldr	r2, [r3, #8]
1a00113c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00113e:	689a      	ldr	r2, [r3, #8]
1a001140:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001142:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001144:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001146:	6803      	ldr	r3, [r0, #0]
1a001148:	3301      	adds	r3, #1
1a00114a:	6003      	str	r3, [r0, #0]
}
1a00114c:	4770      	bx	lr

1a00114e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00114e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001150:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001152:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001156:	d002      	beq.n	1a00115e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001158:	f100 0208 	add.w	r2, r0, #8
1a00115c:	e002      	b.n	1a001164 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00115e:	6902      	ldr	r2, [r0, #16]
1a001160:	e004      	b.n	1a00116c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001162:	461a      	mov	r2, r3
1a001164:	6853      	ldr	r3, [r2, #4]
1a001166:	681c      	ldr	r4, [r3, #0]
1a001168:	42ac      	cmp	r4, r5
1a00116a:	d9fa      	bls.n	1a001162 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00116c:	6853      	ldr	r3, [r2, #4]
1a00116e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001170:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001172:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001174:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001176:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001178:	6803      	ldr	r3, [r0, #0]
1a00117a:	3301      	adds	r3, #1
1a00117c:	6003      	str	r3, [r0, #0]
}
1a00117e:	bc30      	pop	{r4, r5}
1a001180:	4770      	bx	lr

1a001182 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001182:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001184:	6842      	ldr	r2, [r0, #4]
1a001186:	6881      	ldr	r1, [r0, #8]
1a001188:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00118a:	6882      	ldr	r2, [r0, #8]
1a00118c:	6841      	ldr	r1, [r0, #4]
1a00118e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001190:	685a      	ldr	r2, [r3, #4]
1a001192:	4282      	cmp	r2, r0
1a001194:	d006      	beq.n	1a0011a4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001196:	2200      	movs	r2, #0
1a001198:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00119a:	681a      	ldr	r2, [r3, #0]
1a00119c:	3a01      	subs	r2, #1
1a00119e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0011a0:	6818      	ldr	r0, [r3, #0]
}
1a0011a2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0011a4:	6882      	ldr	r2, [r0, #8]
1a0011a6:	605a      	str	r2, [r3, #4]
1a0011a8:	e7f5      	b.n	1a001196 <uxListRemove+0x14>
1a0011aa:	Address 0x000000001a0011aa is out of bounds.


1a0011ac <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0011ac:	4b03      	ldr	r3, [pc, #12]	; (1a0011bc <vApplicationGetIdleTaskMemory+0x10>)
1a0011ae:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0011b0:	4b03      	ldr	r3, [pc, #12]	; (1a0011c0 <vApplicationGetIdleTaskMemory+0x14>)
1a0011b2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0011b4:	235a      	movs	r3, #90	; 0x5a
1a0011b6:	6013      	str	r3, [r2, #0]
}
1a0011b8:	4770      	bx	lr
1a0011ba:	bf00      	nop
1a0011bc:	100027e4 	.word	0x100027e4
1a0011c0:	100020dc 	.word	0x100020dc

1a0011c4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0011c4:	4b03      	ldr	r3, [pc, #12]	; (1a0011d4 <vApplicationGetTimerTaskMemory+0x10>)
1a0011c6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0011c8:	4b03      	ldr	r3, [pc, #12]	; (1a0011d8 <vApplicationGetTimerTaskMemory+0x14>)
1a0011ca:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0011cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0011d0:	6013      	str	r3, [r2, #0]
1a0011d2:	4770      	bx	lr
1a0011d4:	10002844 	.word	0x10002844
1a0011d8:	10002244 	.word	0x10002244

1a0011dc <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a0011dc:	e7fe      	b.n	1a0011dc <vApplicationStackOverflowHook>

1a0011de <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a0011de:	e7fe      	b.n	1a0011de <vApplicationMallocFailedHook>

1a0011e0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0011e0:	4b08      	ldr	r3, [pc, #32]	; (1a001204 <prvResetNextTaskUnblockTime+0x24>)
1a0011e2:	681b      	ldr	r3, [r3, #0]
1a0011e4:	681b      	ldr	r3, [r3, #0]
1a0011e6:	b13b      	cbz	r3, 1a0011f8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0011e8:	4b06      	ldr	r3, [pc, #24]	; (1a001204 <prvResetNextTaskUnblockTime+0x24>)
1a0011ea:	681b      	ldr	r3, [r3, #0]
1a0011ec:	68db      	ldr	r3, [r3, #12]
1a0011ee:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0011f0:	685a      	ldr	r2, [r3, #4]
1a0011f2:	4b05      	ldr	r3, [pc, #20]	; (1a001208 <prvResetNextTaskUnblockTime+0x28>)
1a0011f4:	601a      	str	r2, [r3, #0]
	}
}
1a0011f6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0011f8:	4b03      	ldr	r3, [pc, #12]	; (1a001208 <prvResetNextTaskUnblockTime+0x28>)
1a0011fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0011fe:	601a      	str	r2, [r3, #0]
1a001200:	4770      	bx	lr
1a001202:	bf00      	nop
1a001204:	100028a8 	.word	0x100028a8
1a001208:	1000297c 	.word	0x1000297c

1a00120c <prvInitialiseNewTask>:
{
1a00120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001210:	4681      	mov	r9, r0
1a001212:	460d      	mov	r5, r1
1a001214:	4617      	mov	r7, r2
1a001216:	469a      	mov	sl, r3
1a001218:	9e08      	ldr	r6, [sp, #32]
1a00121a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00121e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001220:	0092      	lsls	r2, r2, #2
1a001222:	21a5      	movs	r1, #165	; 0xa5
1a001224:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001226:	f002 fed6 	bl	1a003fd6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00122a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00122c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001230:	3a01      	subs	r2, #1
1a001232:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001236:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00123a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00123c:	2300      	movs	r3, #0
1a00123e:	2b0f      	cmp	r3, #15
1a001240:	d807      	bhi.n	1a001252 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001242:	5ce9      	ldrb	r1, [r5, r3]
1a001244:	18e2      	adds	r2, r4, r3
1a001246:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00124a:	5cea      	ldrb	r2, [r5, r3]
1a00124c:	b10a      	cbz	r2, 1a001252 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00124e:	3301      	adds	r3, #1
1a001250:	e7f5      	b.n	1a00123e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001252:	2300      	movs	r3, #0
1a001254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001258:	2e06      	cmp	r6, #6
1a00125a:	d900      	bls.n	1a00125e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a00125c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a00125e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001260:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001262:	2500      	movs	r5, #0
1a001264:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001266:	1d20      	adds	r0, r4, #4
1a001268:	f7ff ff62 	bl	1a001130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a00126c:	f104 0018 	add.w	r0, r4, #24
1a001270:	f7ff ff5e 	bl	1a001130 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001274:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001276:	f1c6 0607 	rsb	r6, r6, #7
1a00127a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a00127c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a00127e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001280:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001284:	4652      	mov	r2, sl
1a001286:	4649      	mov	r1, r9
1a001288:	4638      	mov	r0, r7
1a00128a:	f001 f877 	bl	1a00237c <pxPortInitialiseStack>
1a00128e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001290:	f1b8 0f00 	cmp.w	r8, #0
1a001294:	d001      	beq.n	1a00129a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001296:	f8c8 4000 	str.w	r4, [r8]
}
1a00129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00129e:	Address 0x000000001a00129e is out of bounds.


1a0012a0 <prvInitialiseTaskLists>:
{
1a0012a0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0012a2:	2400      	movs	r4, #0
1a0012a4:	e007      	b.n	1a0012b6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0012a6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0012aa:	0093      	lsls	r3, r2, #2
1a0012ac:	480e      	ldr	r0, [pc, #56]	; (1a0012e8 <prvInitialiseTaskLists+0x48>)
1a0012ae:	4418      	add	r0, r3
1a0012b0:	f7ff ff33 	bl	1a00111a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0012b4:	3401      	adds	r4, #1
1a0012b6:	2c06      	cmp	r4, #6
1a0012b8:	d9f5      	bls.n	1a0012a6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0012ba:	4d0c      	ldr	r5, [pc, #48]	; (1a0012ec <prvInitialiseTaskLists+0x4c>)
1a0012bc:	4628      	mov	r0, r5
1a0012be:	f7ff ff2c 	bl	1a00111a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0012c2:	4c0b      	ldr	r4, [pc, #44]	; (1a0012f0 <prvInitialiseTaskLists+0x50>)
1a0012c4:	4620      	mov	r0, r4
1a0012c6:	f7ff ff28 	bl	1a00111a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0012ca:	480a      	ldr	r0, [pc, #40]	; (1a0012f4 <prvInitialiseTaskLists+0x54>)
1a0012cc:	f7ff ff25 	bl	1a00111a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0012d0:	4809      	ldr	r0, [pc, #36]	; (1a0012f8 <prvInitialiseTaskLists+0x58>)
1a0012d2:	f7ff ff22 	bl	1a00111a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0012d6:	4809      	ldr	r0, [pc, #36]	; (1a0012fc <prvInitialiseTaskLists+0x5c>)
1a0012d8:	f7ff ff1f 	bl	1a00111a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0012dc:	4b08      	ldr	r3, [pc, #32]	; (1a001300 <prvInitialiseTaskLists+0x60>)
1a0012de:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0012e0:	4b08      	ldr	r3, [pc, #32]	; (1a001304 <prvInitialiseTaskLists+0x64>)
1a0012e2:	601c      	str	r4, [r3, #0]
}
1a0012e4:	bd38      	pop	{r3, r4, r5, pc}
1a0012e6:	bf00      	nop
1a0012e8:	100028b0 	.word	0x100028b0
1a0012ec:	10002954 	.word	0x10002954
1a0012f0:	10002968 	.word	0x10002968
1a0012f4:	10002984 	.word	0x10002984
1a0012f8:	100029b0 	.word	0x100029b0
1a0012fc:	1000299c 	.word	0x1000299c
1a001300:	100028a8 	.word	0x100028a8
1a001304:	100028ac 	.word	0x100028ac

1a001308 <prvAddNewTaskToReadyList>:
{
1a001308:	b510      	push	{r4, lr}
1a00130a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00130c:	f001 f862 	bl	1a0023d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001310:	4a21      	ldr	r2, [pc, #132]	; (1a001398 <prvAddNewTaskToReadyList+0x90>)
1a001312:	6813      	ldr	r3, [r2, #0]
1a001314:	3301      	adds	r3, #1
1a001316:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001318:	4b20      	ldr	r3, [pc, #128]	; (1a00139c <prvAddNewTaskToReadyList+0x94>)
1a00131a:	681b      	ldr	r3, [r3, #0]
1a00131c:	b15b      	cbz	r3, 1a001336 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00131e:	4b20      	ldr	r3, [pc, #128]	; (1a0013a0 <prvAddNewTaskToReadyList+0x98>)
1a001320:	681b      	ldr	r3, [r3, #0]
1a001322:	b96b      	cbnz	r3, 1a001340 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001324:	4b1d      	ldr	r3, [pc, #116]	; (1a00139c <prvAddNewTaskToReadyList+0x94>)
1a001326:	681b      	ldr	r3, [r3, #0]
1a001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00132a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00132c:	429a      	cmp	r2, r3
1a00132e:	d807      	bhi.n	1a001340 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001330:	4b1a      	ldr	r3, [pc, #104]	; (1a00139c <prvAddNewTaskToReadyList+0x94>)
1a001332:	601c      	str	r4, [r3, #0]
1a001334:	e004      	b.n	1a001340 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001336:	4b19      	ldr	r3, [pc, #100]	; (1a00139c <prvAddNewTaskToReadyList+0x94>)
1a001338:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00133a:	6813      	ldr	r3, [r2, #0]
1a00133c:	2b01      	cmp	r3, #1
1a00133e:	d027      	beq.n	1a001390 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001340:	4a18      	ldr	r2, [pc, #96]	; (1a0013a4 <prvAddNewTaskToReadyList+0x9c>)
1a001342:	6813      	ldr	r3, [r2, #0]
1a001344:	3301      	adds	r3, #1
1a001346:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001348:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00134a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00134c:	2201      	movs	r2, #1
1a00134e:	409a      	lsls	r2, r3
1a001350:	4915      	ldr	r1, [pc, #84]	; (1a0013a8 <prvAddNewTaskToReadyList+0xa0>)
1a001352:	6808      	ldr	r0, [r1, #0]
1a001354:	4302      	orrs	r2, r0
1a001356:	600a      	str	r2, [r1, #0]
1a001358:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00135c:	009a      	lsls	r2, r3, #2
1a00135e:	1d21      	adds	r1, r4, #4
1a001360:	4812      	ldr	r0, [pc, #72]	; (1a0013ac <prvAddNewTaskToReadyList+0xa4>)
1a001362:	4410      	add	r0, r2
1a001364:	f7ff fee7 	bl	1a001136 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001368:	f001 f856 	bl	1a002418 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a00136c:	4b0c      	ldr	r3, [pc, #48]	; (1a0013a0 <prvAddNewTaskToReadyList+0x98>)
1a00136e:	681b      	ldr	r3, [r3, #0]
1a001370:	b16b      	cbz	r3, 1a00138e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001372:	4b0a      	ldr	r3, [pc, #40]	; (1a00139c <prvAddNewTaskToReadyList+0x94>)
1a001374:	681b      	ldr	r3, [r3, #0]
1a001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001378:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00137a:	429a      	cmp	r2, r3
1a00137c:	d207      	bcs.n	1a00138e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a00137e:	4b0c      	ldr	r3, [pc, #48]	; (1a0013b0 <prvAddNewTaskToReadyList+0xa8>)
1a001380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001384:	601a      	str	r2, [r3, #0]
1a001386:	f3bf 8f4f 	dsb	sy
1a00138a:	f3bf 8f6f 	isb	sy
}
1a00138e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001390:	f7ff ff86 	bl	1a0012a0 <prvInitialiseTaskLists>
1a001394:	e7d4      	b.n	1a001340 <prvAddNewTaskToReadyList+0x38>
1a001396:	bf00      	nop
1a001398:	1000293c 	.word	0x1000293c
1a00139c:	100028a4 	.word	0x100028a4
1a0013a0:	10002998 	.word	0x10002998
1a0013a4:	1000294c 	.word	0x1000294c
1a0013a8:	10002950 	.word	0x10002950
1a0013ac:	100028b0 	.word	0x100028b0
1a0013b0:	e000ed04 	.word	0xe000ed04

1a0013b4 <prvDeleteTCB>:
	{
1a0013b4:	b510      	push	{r4, lr}
1a0013b6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0013b8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0013bc:	b933      	cbnz	r3, 1a0013cc <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0013be:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0013c0:	f7ff fa5a 	bl	1a000878 <vPortFree>
				vPortFree( pxTCB );
1a0013c4:	4620      	mov	r0, r4
1a0013c6:	f7ff fa57 	bl	1a000878 <vPortFree>
	}
1a0013ca:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0013cc:	2b01      	cmp	r3, #1
1a0013ce:	d00a      	beq.n	1a0013e6 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0013d0:	2b02      	cmp	r3, #2
1a0013d2:	d0fa      	beq.n	1a0013ca <prvDeleteTCB+0x16>
1a0013d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013d8:	f383 8811 	msr	BASEPRI, r3
1a0013dc:	f3bf 8f6f 	isb	sy
1a0013e0:	f3bf 8f4f 	dsb	sy
1a0013e4:	e7fe      	b.n	1a0013e4 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a0013e6:	f7ff fa47 	bl	1a000878 <vPortFree>
1a0013ea:	e7ee      	b.n	1a0013ca <prvDeleteTCB+0x16>

1a0013ec <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0013ec:	4b0f      	ldr	r3, [pc, #60]	; (1a00142c <prvCheckTasksWaitingTermination+0x40>)
1a0013ee:	681b      	ldr	r3, [r3, #0]
1a0013f0:	b1d3      	cbz	r3, 1a001428 <prvCheckTasksWaitingTermination+0x3c>
{
1a0013f2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0013f4:	f000 ffee 	bl	1a0023d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0013f8:	4b0d      	ldr	r3, [pc, #52]	; (1a001430 <prvCheckTasksWaitingTermination+0x44>)
1a0013fa:	68db      	ldr	r3, [r3, #12]
1a0013fc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0013fe:	1d20      	adds	r0, r4, #4
1a001400:	f7ff febf 	bl	1a001182 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001404:	4a0b      	ldr	r2, [pc, #44]	; (1a001434 <prvCheckTasksWaitingTermination+0x48>)
1a001406:	6813      	ldr	r3, [r2, #0]
1a001408:	3b01      	subs	r3, #1
1a00140a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00140c:	4a07      	ldr	r2, [pc, #28]	; (1a00142c <prvCheckTasksWaitingTermination+0x40>)
1a00140e:	6813      	ldr	r3, [r2, #0]
1a001410:	3b01      	subs	r3, #1
1a001412:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001414:	f001 f800 	bl	1a002418 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001418:	4620      	mov	r0, r4
1a00141a:	f7ff ffcb 	bl	1a0013b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00141e:	4b03      	ldr	r3, [pc, #12]	; (1a00142c <prvCheckTasksWaitingTermination+0x40>)
1a001420:	681b      	ldr	r3, [r3, #0]
1a001422:	2b00      	cmp	r3, #0
1a001424:	d1e6      	bne.n	1a0013f4 <prvCheckTasksWaitingTermination+0x8>
}
1a001426:	bd10      	pop	{r4, pc}
1a001428:	4770      	bx	lr
1a00142a:	bf00      	nop
1a00142c:	10002940 	.word	0x10002940
1a001430:	100029b0 	.word	0x100029b0
1a001434:	1000293c 	.word	0x1000293c

1a001438 <prvIdleTask>:
{
1a001438:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00143a:	f7ff ffd7 	bl	1a0013ec <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00143e:	4b06      	ldr	r3, [pc, #24]	; (1a001458 <prvIdleTask+0x20>)
1a001440:	681b      	ldr	r3, [r3, #0]
1a001442:	2b01      	cmp	r3, #1
1a001444:	d9f9      	bls.n	1a00143a <prvIdleTask+0x2>
				taskYIELD();
1a001446:	4b05      	ldr	r3, [pc, #20]	; (1a00145c <prvIdleTask+0x24>)
1a001448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00144c:	601a      	str	r2, [r3, #0]
1a00144e:	f3bf 8f4f 	dsb	sy
1a001452:	f3bf 8f6f 	isb	sy
1a001456:	e7f0      	b.n	1a00143a <prvIdleTask+0x2>
1a001458:	100028b0 	.word	0x100028b0
1a00145c:	e000ed04 	.word	0xe000ed04

1a001460 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001460:	b570      	push	{r4, r5, r6, lr}
1a001462:	4604      	mov	r4, r0
1a001464:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001466:	4b1d      	ldr	r3, [pc, #116]	; (1a0014dc <prvAddCurrentTaskToDelayedList+0x7c>)
1a001468:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00146a:	4b1d      	ldr	r3, [pc, #116]	; (1a0014e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a00146c:	6818      	ldr	r0, [r3, #0]
1a00146e:	3004      	adds	r0, #4
1a001470:	f7ff fe87 	bl	1a001182 <uxListRemove>
1a001474:	b950      	cbnz	r0, 1a00148c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001476:	4b1a      	ldr	r3, [pc, #104]	; (1a0014e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001478:	681b      	ldr	r3, [r3, #0]
1a00147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00147c:	2301      	movs	r3, #1
1a00147e:	fa03 f202 	lsl.w	r2, r3, r2
1a001482:	4918      	ldr	r1, [pc, #96]	; (1a0014e4 <prvAddCurrentTaskToDelayedList+0x84>)
1a001484:	680b      	ldr	r3, [r1, #0]
1a001486:	ea23 0302 	bic.w	r3, r3, r2
1a00148a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00148c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001490:	d013      	beq.n	1a0014ba <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001492:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001494:	4b12      	ldr	r3, [pc, #72]	; (1a0014e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001496:	681b      	ldr	r3, [r3, #0]
1a001498:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00149a:	42a5      	cmp	r5, r4
1a00149c:	d816      	bhi.n	1a0014cc <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00149e:	4b12      	ldr	r3, [pc, #72]	; (1a0014e8 <prvAddCurrentTaskToDelayedList+0x88>)
1a0014a0:	6818      	ldr	r0, [r3, #0]
1a0014a2:	4b0f      	ldr	r3, [pc, #60]	; (1a0014e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014a4:	6819      	ldr	r1, [r3, #0]
1a0014a6:	3104      	adds	r1, #4
1a0014a8:	f7ff fe51 	bl	1a00114e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0014ac:	4b0f      	ldr	r3, [pc, #60]	; (1a0014ec <prvAddCurrentTaskToDelayedList+0x8c>)
1a0014ae:	681b      	ldr	r3, [r3, #0]
1a0014b0:	42a3      	cmp	r3, r4
1a0014b2:	d912      	bls.n	1a0014da <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0014b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0014ec <prvAddCurrentTaskToDelayedList+0x8c>)
1a0014b6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0014b8:	e00f      	b.n	1a0014da <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0014ba:	2e00      	cmp	r6, #0
1a0014bc:	d0e9      	beq.n	1a001492 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014be:	4b08      	ldr	r3, [pc, #32]	; (1a0014e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014c0:	6819      	ldr	r1, [r3, #0]
1a0014c2:	3104      	adds	r1, #4
1a0014c4:	480a      	ldr	r0, [pc, #40]	; (1a0014f0 <prvAddCurrentTaskToDelayedList+0x90>)
1a0014c6:	f7ff fe36 	bl	1a001136 <vListInsertEnd>
1a0014ca:	e006      	b.n	1a0014da <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014cc:	4b09      	ldr	r3, [pc, #36]	; (1a0014f4 <prvAddCurrentTaskToDelayedList+0x94>)
1a0014ce:	6818      	ldr	r0, [r3, #0]
1a0014d0:	4b03      	ldr	r3, [pc, #12]	; (1a0014e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014d2:	6819      	ldr	r1, [r3, #0]
1a0014d4:	3104      	adds	r1, #4
1a0014d6:	f7ff fe3a 	bl	1a00114e <vListInsert>
}
1a0014da:	bd70      	pop	{r4, r5, r6, pc}
1a0014dc:	100029c4 	.word	0x100029c4
1a0014e0:	100028a4 	.word	0x100028a4
1a0014e4:	10002950 	.word	0x10002950
1a0014e8:	100028a8 	.word	0x100028a8
1a0014ec:	1000297c 	.word	0x1000297c
1a0014f0:	1000299c 	.word	0x1000299c
1a0014f4:	100028ac 	.word	0x100028ac

1a0014f8 <xTaskCreateStatic>:
	{
1a0014f8:	b570      	push	{r4, r5, r6, lr}
1a0014fa:	b086      	sub	sp, #24
1a0014fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0014fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001500:	b945      	cbnz	r5, 1a001514 <xTaskCreateStatic+0x1c>
1a001502:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001506:	f383 8811 	msr	BASEPRI, r3
1a00150a:	f3bf 8f6f 	isb	sy
1a00150e:	f3bf 8f4f 	dsb	sy
1a001512:	e7fe      	b.n	1a001512 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001514:	b944      	cbnz	r4, 1a001528 <xTaskCreateStatic+0x30>
1a001516:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00151a:	f383 8811 	msr	BASEPRI, r3
1a00151e:	f3bf 8f6f 	isb	sy
1a001522:	f3bf 8f4f 	dsb	sy
1a001526:	e7fe      	b.n	1a001526 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001528:	2660      	movs	r6, #96	; 0x60
1a00152a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00152c:	9e04      	ldr	r6, [sp, #16]
1a00152e:	2e60      	cmp	r6, #96	; 0x60
1a001530:	d008      	beq.n	1a001544 <xTaskCreateStatic+0x4c>
1a001532:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001536:	f383 8811 	msr	BASEPRI, r3
1a00153a:	f3bf 8f6f 	isb	sy
1a00153e:	f3bf 8f4f 	dsb	sy
1a001542:	e7fe      	b.n	1a001542 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001544:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001546:	2502      	movs	r5, #2
1a001548:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a00154c:	2500      	movs	r5, #0
1a00154e:	9503      	str	r5, [sp, #12]
1a001550:	9402      	str	r4, [sp, #8]
1a001552:	ad05      	add	r5, sp, #20
1a001554:	9501      	str	r5, [sp, #4]
1a001556:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001558:	9500      	str	r5, [sp, #0]
1a00155a:	f7ff fe57 	bl	1a00120c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00155e:	4620      	mov	r0, r4
1a001560:	f7ff fed2 	bl	1a001308 <prvAddNewTaskToReadyList>
	}
1a001564:	9805      	ldr	r0, [sp, #20]
1a001566:	b006      	add	sp, #24
1a001568:	bd70      	pop	{r4, r5, r6, pc}

1a00156a <xTaskCreate>:
	{
1a00156a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00156e:	b085      	sub	sp, #20
1a001570:	4607      	mov	r7, r0
1a001572:	4688      	mov	r8, r1
1a001574:	4615      	mov	r5, r2
1a001576:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001578:	0090      	lsls	r0, r2, #2
1a00157a:	f7ff f945 	bl	1a000808 <pvPortMalloc>
			if( pxStack != NULL )
1a00157e:	b308      	cbz	r0, 1a0015c4 <xTaskCreate+0x5a>
1a001580:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001582:	2060      	movs	r0, #96	; 0x60
1a001584:	f7ff f940 	bl	1a000808 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001588:	4604      	mov	r4, r0
1a00158a:	b1b8      	cbz	r0, 1a0015bc <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a00158c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a00158e:	b1e4      	cbz	r4, 1a0015ca <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001590:	2300      	movs	r3, #0
1a001592:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001596:	9303      	str	r3, [sp, #12]
1a001598:	9402      	str	r4, [sp, #8]
1a00159a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00159c:	9301      	str	r3, [sp, #4]
1a00159e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0015a0:	9300      	str	r3, [sp, #0]
1a0015a2:	464b      	mov	r3, r9
1a0015a4:	462a      	mov	r2, r5
1a0015a6:	4641      	mov	r1, r8
1a0015a8:	4638      	mov	r0, r7
1a0015aa:	f7ff fe2f 	bl	1a00120c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0015ae:	4620      	mov	r0, r4
1a0015b0:	f7ff feaa 	bl	1a001308 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0015b4:	2001      	movs	r0, #1
	}
1a0015b6:	b005      	add	sp, #20
1a0015b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0015bc:	4630      	mov	r0, r6
1a0015be:	f7ff f95b 	bl	1a000878 <vPortFree>
1a0015c2:	e7e4      	b.n	1a00158e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0015c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0015c8:	e7f5      	b.n	1a0015b6 <xTaskCreate+0x4c>
1a0015ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0015ce:	e7f2      	b.n	1a0015b6 <xTaskCreate+0x4c>

1a0015d0 <vTaskStartScheduler>:
{
1a0015d0:	b510      	push	{r4, lr}
1a0015d2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0015d4:	2400      	movs	r4, #0
1a0015d6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0015d8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0015da:	aa07      	add	r2, sp, #28
1a0015dc:	a906      	add	r1, sp, #24
1a0015de:	a805      	add	r0, sp, #20
1a0015e0:	f7ff fde4 	bl	1a0011ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0015e4:	9b05      	ldr	r3, [sp, #20]
1a0015e6:	9302      	str	r3, [sp, #8]
1a0015e8:	9b06      	ldr	r3, [sp, #24]
1a0015ea:	9301      	str	r3, [sp, #4]
1a0015ec:	9400      	str	r4, [sp, #0]
1a0015ee:	4623      	mov	r3, r4
1a0015f0:	9a07      	ldr	r2, [sp, #28]
1a0015f2:	4917      	ldr	r1, [pc, #92]	; (1a001650 <vTaskStartScheduler+0x80>)
1a0015f4:	4817      	ldr	r0, [pc, #92]	; (1a001654 <vTaskStartScheduler+0x84>)
1a0015f6:	f7ff ff7f 	bl	1a0014f8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0015fa:	b140      	cbz	r0, 1a00160e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0015fc:	f000 fcac 	bl	1a001f58 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001600:	2801      	cmp	r0, #1
1a001602:	d006      	beq.n	1a001612 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001604:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001608:	d018      	beq.n	1a00163c <vTaskStartScheduler+0x6c>
}
1a00160a:	b008      	add	sp, #32
1a00160c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00160e:	2000      	movs	r0, #0
1a001610:	e7f6      	b.n	1a001600 <vTaskStartScheduler+0x30>
1a001612:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001616:	f383 8811 	msr	BASEPRI, r3
1a00161a:	f3bf 8f6f 	isb	sy
1a00161e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001622:	4b0d      	ldr	r3, [pc, #52]	; (1a001658 <vTaskStartScheduler+0x88>)
1a001624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001628:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00162a:	4b0c      	ldr	r3, [pc, #48]	; (1a00165c <vTaskStartScheduler+0x8c>)
1a00162c:	2201      	movs	r2, #1
1a00162e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001630:	4b0b      	ldr	r3, [pc, #44]	; (1a001660 <vTaskStartScheduler+0x90>)
1a001632:	2200      	movs	r2, #0
1a001634:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001636:	f000 ff6f 	bl	1a002518 <xPortStartScheduler>
1a00163a:	e7e6      	b.n	1a00160a <vTaskStartScheduler+0x3a>
1a00163c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001640:	f383 8811 	msr	BASEPRI, r3
1a001644:	f3bf 8f6f 	isb	sy
1a001648:	f3bf 8f4f 	dsb	sy
1a00164c:	e7fe      	b.n	1a00164c <vTaskStartScheduler+0x7c>
1a00164e:	bf00      	nop
1a001650:	1a004094 	.word	0x1a004094
1a001654:	1a001439 	.word	0x1a001439
1a001658:	1000297c 	.word	0x1000297c
1a00165c:	10002998 	.word	0x10002998
1a001660:	100029c4 	.word	0x100029c4

1a001664 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001664:	4a02      	ldr	r2, [pc, #8]	; (1a001670 <vTaskSuspendAll+0xc>)
1a001666:	6813      	ldr	r3, [r2, #0]
1a001668:	3301      	adds	r3, #1
1a00166a:	6013      	str	r3, [r2, #0]
}
1a00166c:	4770      	bx	lr
1a00166e:	bf00      	nop
1a001670:	10002948 	.word	0x10002948

1a001674 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001674:	4b01      	ldr	r3, [pc, #4]	; (1a00167c <xTaskGetTickCount+0x8>)
1a001676:	6818      	ldr	r0, [r3, #0]
}
1a001678:	4770      	bx	lr
1a00167a:	bf00      	nop
1a00167c:	100029c4 	.word	0x100029c4

1a001680 <xTaskIncrementTick>:
{
1a001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001682:	4b3a      	ldr	r3, [pc, #232]	; (1a00176c <xTaskIncrementTick+0xec>)
1a001684:	681b      	ldr	r3, [r3, #0]
1a001686:	2b00      	cmp	r3, #0
1a001688:	d164      	bne.n	1a001754 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00168a:	4b39      	ldr	r3, [pc, #228]	; (1a001770 <xTaskIncrementTick+0xf0>)
1a00168c:	681d      	ldr	r5, [r3, #0]
1a00168e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001690:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001692:	b9c5      	cbnz	r5, 1a0016c6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001694:	4b37      	ldr	r3, [pc, #220]	; (1a001774 <xTaskIncrementTick+0xf4>)
1a001696:	681b      	ldr	r3, [r3, #0]
1a001698:	681b      	ldr	r3, [r3, #0]
1a00169a:	b143      	cbz	r3, 1a0016ae <xTaskIncrementTick+0x2e>
1a00169c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016a0:	f383 8811 	msr	BASEPRI, r3
1a0016a4:	f3bf 8f6f 	isb	sy
1a0016a8:	f3bf 8f4f 	dsb	sy
1a0016ac:	e7fe      	b.n	1a0016ac <xTaskIncrementTick+0x2c>
1a0016ae:	4a31      	ldr	r2, [pc, #196]	; (1a001774 <xTaskIncrementTick+0xf4>)
1a0016b0:	6811      	ldr	r1, [r2, #0]
1a0016b2:	4b31      	ldr	r3, [pc, #196]	; (1a001778 <xTaskIncrementTick+0xf8>)
1a0016b4:	6818      	ldr	r0, [r3, #0]
1a0016b6:	6010      	str	r0, [r2, #0]
1a0016b8:	6019      	str	r1, [r3, #0]
1a0016ba:	4a30      	ldr	r2, [pc, #192]	; (1a00177c <xTaskIncrementTick+0xfc>)
1a0016bc:	6813      	ldr	r3, [r2, #0]
1a0016be:	3301      	adds	r3, #1
1a0016c0:	6013      	str	r3, [r2, #0]
1a0016c2:	f7ff fd8d 	bl	1a0011e0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0016c6:	4b2e      	ldr	r3, [pc, #184]	; (1a001780 <xTaskIncrementTick+0x100>)
1a0016c8:	681b      	ldr	r3, [r3, #0]
1a0016ca:	42ab      	cmp	r3, r5
1a0016cc:	d938      	bls.n	1a001740 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0016ce:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0016d0:	4b2c      	ldr	r3, [pc, #176]	; (1a001784 <xTaskIncrementTick+0x104>)
1a0016d2:	681b      	ldr	r3, [r3, #0]
1a0016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0016d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016da:	009a      	lsls	r2, r3, #2
1a0016dc:	4b2a      	ldr	r3, [pc, #168]	; (1a001788 <xTaskIncrementTick+0x108>)
1a0016de:	589b      	ldr	r3, [r3, r2]
1a0016e0:	2b01      	cmp	r3, #1
1a0016e2:	d93c      	bls.n	1a00175e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0016e4:	2401      	movs	r4, #1
1a0016e6:	e03a      	b.n	1a00175e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0016e8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0016ea:	4b22      	ldr	r3, [pc, #136]	; (1a001774 <xTaskIncrementTick+0xf4>)
1a0016ec:	681b      	ldr	r3, [r3, #0]
1a0016ee:	681b      	ldr	r3, [r3, #0]
1a0016f0:	b343      	cbz	r3, 1a001744 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0016f2:	4b20      	ldr	r3, [pc, #128]	; (1a001774 <xTaskIncrementTick+0xf4>)
1a0016f4:	681b      	ldr	r3, [r3, #0]
1a0016f6:	68db      	ldr	r3, [r3, #12]
1a0016f8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0016fa:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0016fc:	429d      	cmp	r5, r3
1a0016fe:	d326      	bcc.n	1a00174e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001700:	1d37      	adds	r7, r6, #4
1a001702:	4638      	mov	r0, r7
1a001704:	f7ff fd3d 	bl	1a001182 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001708:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00170a:	b11b      	cbz	r3, 1a001714 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00170c:	f106 0018 	add.w	r0, r6, #24
1a001710:	f7ff fd37 	bl	1a001182 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001714:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001716:	2201      	movs	r2, #1
1a001718:	409a      	lsls	r2, r3
1a00171a:	491c      	ldr	r1, [pc, #112]	; (1a00178c <xTaskIncrementTick+0x10c>)
1a00171c:	6808      	ldr	r0, [r1, #0]
1a00171e:	4302      	orrs	r2, r0
1a001720:	600a      	str	r2, [r1, #0]
1a001722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001726:	009a      	lsls	r2, r3, #2
1a001728:	4639      	mov	r1, r7
1a00172a:	4817      	ldr	r0, [pc, #92]	; (1a001788 <xTaskIncrementTick+0x108>)
1a00172c:	4410      	add	r0, r2
1a00172e:	f7ff fd02 	bl	1a001136 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001732:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001734:	4b13      	ldr	r3, [pc, #76]	; (1a001784 <xTaskIncrementTick+0x104>)
1a001736:	681b      	ldr	r3, [r3, #0]
1a001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00173a:	429a      	cmp	r2, r3
1a00173c:	d2d4      	bcs.n	1a0016e8 <xTaskIncrementTick+0x68>
1a00173e:	e7d4      	b.n	1a0016ea <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001740:	2400      	movs	r4, #0
1a001742:	e7d2      	b.n	1a0016ea <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001744:	4b0e      	ldr	r3, [pc, #56]	; (1a001780 <xTaskIncrementTick+0x100>)
1a001746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00174a:	601a      	str	r2, [r3, #0]
					break;
1a00174c:	e7c0      	b.n	1a0016d0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00174e:	4a0c      	ldr	r2, [pc, #48]	; (1a001780 <xTaskIncrementTick+0x100>)
1a001750:	6013      	str	r3, [r2, #0]
						break;
1a001752:	e7bd      	b.n	1a0016d0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001754:	4a0e      	ldr	r2, [pc, #56]	; (1a001790 <xTaskIncrementTick+0x110>)
1a001756:	6813      	ldr	r3, [r2, #0]
1a001758:	3301      	adds	r3, #1
1a00175a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00175c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00175e:	4b0d      	ldr	r3, [pc, #52]	; (1a001794 <xTaskIncrementTick+0x114>)
1a001760:	681b      	ldr	r3, [r3, #0]
1a001762:	b103      	cbz	r3, 1a001766 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001764:	2401      	movs	r4, #1
}
1a001766:	4620      	mov	r0, r4
1a001768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00176a:	bf00      	nop
1a00176c:	10002948 	.word	0x10002948
1a001770:	100029c4 	.word	0x100029c4
1a001774:	100028a8 	.word	0x100028a8
1a001778:	100028ac 	.word	0x100028ac
1a00177c:	10002980 	.word	0x10002980
1a001780:	1000297c 	.word	0x1000297c
1a001784:	100028a4 	.word	0x100028a4
1a001788:	100028b0 	.word	0x100028b0
1a00178c:	10002950 	.word	0x10002950
1a001790:	10002944 	.word	0x10002944
1a001794:	100029c8 	.word	0x100029c8

1a001798 <xTaskResumeAll>:
{
1a001798:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00179a:	4b33      	ldr	r3, [pc, #204]	; (1a001868 <xTaskResumeAll+0xd0>)
1a00179c:	681b      	ldr	r3, [r3, #0]
1a00179e:	b943      	cbnz	r3, 1a0017b2 <xTaskResumeAll+0x1a>
1a0017a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017a4:	f383 8811 	msr	BASEPRI, r3
1a0017a8:	f3bf 8f6f 	isb	sy
1a0017ac:	f3bf 8f4f 	dsb	sy
1a0017b0:	e7fe      	b.n	1a0017b0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0017b2:	f000 fe0f 	bl	1a0023d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0017b6:	4b2c      	ldr	r3, [pc, #176]	; (1a001868 <xTaskResumeAll+0xd0>)
1a0017b8:	681a      	ldr	r2, [r3, #0]
1a0017ba:	3a01      	subs	r2, #1
1a0017bc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0017be:	681b      	ldr	r3, [r3, #0]
1a0017c0:	2b00      	cmp	r3, #0
1a0017c2:	d14d      	bne.n	1a001860 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0017c4:	4b29      	ldr	r3, [pc, #164]	; (1a00186c <xTaskResumeAll+0xd4>)
1a0017c6:	681b      	ldr	r3, [r3, #0]
1a0017c8:	b923      	cbnz	r3, 1a0017d4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0017ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0017cc:	f000 fe24 	bl	1a002418 <vPortExitCritical>
}
1a0017d0:	4620      	mov	r0, r4
1a0017d2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0017d4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0017d6:	4b26      	ldr	r3, [pc, #152]	; (1a001870 <xTaskResumeAll+0xd8>)
1a0017d8:	681b      	ldr	r3, [r3, #0]
1a0017da:	b31b      	cbz	r3, 1a001824 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0017dc:	4b24      	ldr	r3, [pc, #144]	; (1a001870 <xTaskResumeAll+0xd8>)
1a0017de:	68db      	ldr	r3, [r3, #12]
1a0017e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0017e2:	f104 0018 	add.w	r0, r4, #24
1a0017e6:	f7ff fccc 	bl	1a001182 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0017ea:	1d25      	adds	r5, r4, #4
1a0017ec:	4628      	mov	r0, r5
1a0017ee:	f7ff fcc8 	bl	1a001182 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0017f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0017f4:	2201      	movs	r2, #1
1a0017f6:	409a      	lsls	r2, r3
1a0017f8:	491e      	ldr	r1, [pc, #120]	; (1a001874 <xTaskResumeAll+0xdc>)
1a0017fa:	6808      	ldr	r0, [r1, #0]
1a0017fc:	4302      	orrs	r2, r0
1a0017fe:	600a      	str	r2, [r1, #0]
1a001800:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001804:	009a      	lsls	r2, r3, #2
1a001806:	4629      	mov	r1, r5
1a001808:	481b      	ldr	r0, [pc, #108]	; (1a001878 <xTaskResumeAll+0xe0>)
1a00180a:	4410      	add	r0, r2
1a00180c:	f7ff fc93 	bl	1a001136 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001810:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001812:	4b1a      	ldr	r3, [pc, #104]	; (1a00187c <xTaskResumeAll+0xe4>)
1a001814:	681b      	ldr	r3, [r3, #0]
1a001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001818:	429a      	cmp	r2, r3
1a00181a:	d3dc      	bcc.n	1a0017d6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a00181c:	4b18      	ldr	r3, [pc, #96]	; (1a001880 <xTaskResumeAll+0xe8>)
1a00181e:	2201      	movs	r2, #1
1a001820:	601a      	str	r2, [r3, #0]
1a001822:	e7d8      	b.n	1a0017d6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001824:	b10c      	cbz	r4, 1a00182a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001826:	f7ff fcdb 	bl	1a0011e0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00182a:	4b16      	ldr	r3, [pc, #88]	; (1a001884 <xTaskResumeAll+0xec>)
1a00182c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00182e:	b154      	cbz	r4, 1a001846 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001830:	f7ff ff26 	bl	1a001680 <xTaskIncrementTick>
1a001834:	b110      	cbz	r0, 1a00183c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001836:	4b12      	ldr	r3, [pc, #72]	; (1a001880 <xTaskResumeAll+0xe8>)
1a001838:	2201      	movs	r2, #1
1a00183a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00183c:	3c01      	subs	r4, #1
1a00183e:	d1f7      	bne.n	1a001830 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001840:	4b10      	ldr	r3, [pc, #64]	; (1a001884 <xTaskResumeAll+0xec>)
1a001842:	2200      	movs	r2, #0
1a001844:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001846:	4b0e      	ldr	r3, [pc, #56]	; (1a001880 <xTaskResumeAll+0xe8>)
1a001848:	681b      	ldr	r3, [r3, #0]
1a00184a:	b15b      	cbz	r3, 1a001864 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a00184c:	4b0e      	ldr	r3, [pc, #56]	; (1a001888 <xTaskResumeAll+0xf0>)
1a00184e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001852:	601a      	str	r2, [r3, #0]
1a001854:	f3bf 8f4f 	dsb	sy
1a001858:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00185c:	2401      	movs	r4, #1
1a00185e:	e7b5      	b.n	1a0017cc <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001860:	2400      	movs	r4, #0
1a001862:	e7b3      	b.n	1a0017cc <xTaskResumeAll+0x34>
1a001864:	2400      	movs	r4, #0
1a001866:	e7b1      	b.n	1a0017cc <xTaskResumeAll+0x34>
1a001868:	10002948 	.word	0x10002948
1a00186c:	1000293c 	.word	0x1000293c
1a001870:	10002984 	.word	0x10002984
1a001874:	10002950 	.word	0x10002950
1a001878:	100028b0 	.word	0x100028b0
1a00187c:	100028a4 	.word	0x100028a4
1a001880:	100029c8 	.word	0x100029c8
1a001884:	10002944 	.word	0x10002944
1a001888:	e000ed04 	.word	0xe000ed04

1a00188c <vTaskDelayUntil>:
	{
1a00188c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a00188e:	b150      	cbz	r0, 1a0018a6 <vTaskDelayUntil+0x1a>
1a001890:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001892:	b989      	cbnz	r1, 1a0018b8 <vTaskDelayUntil+0x2c>
1a001894:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001898:	f383 8811 	msr	BASEPRI, r3
1a00189c:	f3bf 8f6f 	isb	sy
1a0018a0:	f3bf 8f4f 	dsb	sy
1a0018a4:	e7fe      	b.n	1a0018a4 <vTaskDelayUntil+0x18>
1a0018a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018aa:	f383 8811 	msr	BASEPRI, r3
1a0018ae:	f3bf 8f6f 	isb	sy
1a0018b2:	f3bf 8f4f 	dsb	sy
1a0018b6:	e7fe      	b.n	1a0018b6 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a0018b8:	4b1a      	ldr	r3, [pc, #104]	; (1a001924 <vTaskDelayUntil+0x98>)
1a0018ba:	681b      	ldr	r3, [r3, #0]
1a0018bc:	b143      	cbz	r3, 1a0018d0 <vTaskDelayUntil+0x44>
1a0018be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018c2:	f383 8811 	msr	BASEPRI, r3
1a0018c6:	f3bf 8f6f 	isb	sy
1a0018ca:	f3bf 8f4f 	dsb	sy
1a0018ce:	e7fe      	b.n	1a0018ce <vTaskDelayUntil+0x42>
1a0018d0:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a0018d2:	f7ff fec7 	bl	1a001664 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a0018d6:	4b14      	ldr	r3, [pc, #80]	; (1a001928 <vTaskDelayUntil+0x9c>)
1a0018d8:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a0018da:	682a      	ldr	r2, [r5, #0]
1a0018dc:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a0018de:	4282      	cmp	r2, r0
1a0018e0:	d918      	bls.n	1a001914 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0018e2:	42a2      	cmp	r2, r4
1a0018e4:	d80c      	bhi.n	1a001900 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a0018e6:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a0018e8:	f7ff ff56 	bl	1a001798 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0018ec:	b938      	cbnz	r0, 1a0018fe <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a0018ee:	4b0f      	ldr	r3, [pc, #60]	; (1a00192c <vTaskDelayUntil+0xa0>)
1a0018f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018f4:	601a      	str	r2, [r3, #0]
1a0018f6:	f3bf 8f4f 	dsb	sy
1a0018fa:	f3bf 8f6f 	isb	sy
	}
1a0018fe:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001900:	42a0      	cmp	r0, r4
1a001902:	d301      	bcc.n	1a001908 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001904:	602c      	str	r4, [r5, #0]
1a001906:	e7ef      	b.n	1a0018e8 <vTaskDelayUntil+0x5c>
1a001908:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a00190a:	2100      	movs	r1, #0
1a00190c:	1a20      	subs	r0, r4, r0
1a00190e:	f7ff fda7 	bl	1a001460 <prvAddCurrentTaskToDelayedList>
1a001912:	e7e9      	b.n	1a0018e8 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001914:	42a2      	cmp	r2, r4
1a001916:	d801      	bhi.n	1a00191c <vTaskDelayUntil+0x90>
1a001918:	42a0      	cmp	r0, r4
1a00191a:	d201      	bcs.n	1a001920 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a00191c:	602c      	str	r4, [r5, #0]
1a00191e:	e7f4      	b.n	1a00190a <vTaskDelayUntil+0x7e>
1a001920:	602c      	str	r4, [r5, #0]
1a001922:	e7e1      	b.n	1a0018e8 <vTaskDelayUntil+0x5c>
1a001924:	10002948 	.word	0x10002948
1a001928:	100029c4 	.word	0x100029c4
1a00192c:	e000ed04 	.word	0xe000ed04

1a001930 <vTaskDelay>:
	{
1a001930:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001932:	b1a8      	cbz	r0, 1a001960 <vTaskDelay+0x30>
1a001934:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001936:	4b0f      	ldr	r3, [pc, #60]	; (1a001974 <vTaskDelay+0x44>)
1a001938:	681b      	ldr	r3, [r3, #0]
1a00193a:	b143      	cbz	r3, 1a00194e <vTaskDelay+0x1e>
1a00193c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001940:	f383 8811 	msr	BASEPRI, r3
1a001944:	f3bf 8f6f 	isb	sy
1a001948:	f3bf 8f4f 	dsb	sy
1a00194c:	e7fe      	b.n	1a00194c <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00194e:	f7ff fe89 	bl	1a001664 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001952:	2100      	movs	r1, #0
1a001954:	4620      	mov	r0, r4
1a001956:	f7ff fd83 	bl	1a001460 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00195a:	f7ff ff1d 	bl	1a001798 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00195e:	b938      	cbnz	r0, 1a001970 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001960:	4b05      	ldr	r3, [pc, #20]	; (1a001978 <vTaskDelay+0x48>)
1a001962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001966:	601a      	str	r2, [r3, #0]
1a001968:	f3bf 8f4f 	dsb	sy
1a00196c:	f3bf 8f6f 	isb	sy
	}
1a001970:	bd10      	pop	{r4, pc}
1a001972:	bf00      	nop
1a001974:	10002948 	.word	0x10002948
1a001978:	e000ed04 	.word	0xe000ed04

1a00197c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00197c:	4b2c      	ldr	r3, [pc, #176]	; (1a001a30 <vTaskSwitchContext+0xb4>)
1a00197e:	681b      	ldr	r3, [r3, #0]
1a001980:	b11b      	cbz	r3, 1a00198a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001982:	4b2c      	ldr	r3, [pc, #176]	; (1a001a34 <vTaskSwitchContext+0xb8>)
1a001984:	2201      	movs	r2, #1
1a001986:	601a      	str	r2, [r3, #0]
1a001988:	4770      	bx	lr
{
1a00198a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00198c:	4b29      	ldr	r3, [pc, #164]	; (1a001a34 <vTaskSwitchContext+0xb8>)
1a00198e:	2200      	movs	r2, #0
1a001990:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001992:	4b29      	ldr	r3, [pc, #164]	; (1a001a38 <vTaskSwitchContext+0xbc>)
1a001994:	681b      	ldr	r3, [r3, #0]
1a001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001998:	681a      	ldr	r2, [r3, #0]
1a00199a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00199e:	d103      	bne.n	1a0019a8 <vTaskSwitchContext+0x2c>
1a0019a0:	685a      	ldr	r2, [r3, #4]
1a0019a2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0019a6:	d01b      	beq.n	1a0019e0 <vTaskSwitchContext+0x64>
1a0019a8:	4b23      	ldr	r3, [pc, #140]	; (1a001a38 <vTaskSwitchContext+0xbc>)
1a0019aa:	6818      	ldr	r0, [r3, #0]
1a0019ac:	6819      	ldr	r1, [r3, #0]
1a0019ae:	3134      	adds	r1, #52	; 0x34
1a0019b0:	f7ff fc14 	bl	1a0011dc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0019b4:	4b21      	ldr	r3, [pc, #132]	; (1a001a3c <vTaskSwitchContext+0xc0>)
1a0019b6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0019b8:	fab3 f383 	clz	r3, r3
1a0019bc:	b2db      	uxtb	r3, r3
1a0019be:	f1c3 031f 	rsb	r3, r3, #31
1a0019c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0019c6:	008a      	lsls	r2, r1, #2
1a0019c8:	491d      	ldr	r1, [pc, #116]	; (1a001a40 <vTaskSwitchContext+0xc4>)
1a0019ca:	588a      	ldr	r2, [r1, r2]
1a0019cc:	b98a      	cbnz	r2, 1a0019f2 <vTaskSwitchContext+0x76>
	__asm volatile
1a0019ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019d2:	f383 8811 	msr	BASEPRI, r3
1a0019d6:	f3bf 8f6f 	isb	sy
1a0019da:	f3bf 8f4f 	dsb	sy
1a0019de:	e7fe      	b.n	1a0019de <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0019e0:	689a      	ldr	r2, [r3, #8]
1a0019e2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0019e6:	d1df      	bne.n	1a0019a8 <vTaskSwitchContext+0x2c>
1a0019e8:	68db      	ldr	r3, [r3, #12]
1a0019ea:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0019ee:	d1db      	bne.n	1a0019a8 <vTaskSwitchContext+0x2c>
1a0019f0:	e7e0      	b.n	1a0019b4 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0019f2:	4813      	ldr	r0, [pc, #76]	; (1a001a40 <vTaskSwitchContext+0xc4>)
1a0019f4:	009a      	lsls	r2, r3, #2
1a0019f6:	18d4      	adds	r4, r2, r3
1a0019f8:	00a1      	lsls	r1, r4, #2
1a0019fa:	4401      	add	r1, r0
1a0019fc:	684c      	ldr	r4, [r1, #4]
1a0019fe:	6864      	ldr	r4, [r4, #4]
1a001a00:	604c      	str	r4, [r1, #4]
1a001a02:	441a      	add	r2, r3
1a001a04:	0091      	lsls	r1, r2, #2
1a001a06:	3108      	adds	r1, #8
1a001a08:	4408      	add	r0, r1
1a001a0a:	4284      	cmp	r4, r0
1a001a0c:	d009      	beq.n	1a001a22 <vTaskSwitchContext+0xa6>
1a001a0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a12:	009a      	lsls	r2, r3, #2
1a001a14:	4b0a      	ldr	r3, [pc, #40]	; (1a001a40 <vTaskSwitchContext+0xc4>)
1a001a16:	4413      	add	r3, r2
1a001a18:	685b      	ldr	r3, [r3, #4]
1a001a1a:	68da      	ldr	r2, [r3, #12]
1a001a1c:	4b06      	ldr	r3, [pc, #24]	; (1a001a38 <vTaskSwitchContext+0xbc>)
1a001a1e:	601a      	str	r2, [r3, #0]
}
1a001a20:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a22:	6861      	ldr	r1, [r4, #4]
1a001a24:	4806      	ldr	r0, [pc, #24]	; (1a001a40 <vTaskSwitchContext+0xc4>)
1a001a26:	2214      	movs	r2, #20
1a001a28:	fb02 0203 	mla	r2, r2, r3, r0
1a001a2c:	6051      	str	r1, [r2, #4]
1a001a2e:	e7ee      	b.n	1a001a0e <vTaskSwitchContext+0x92>
1a001a30:	10002948 	.word	0x10002948
1a001a34:	100029c8 	.word	0x100029c8
1a001a38:	100028a4 	.word	0x100028a4
1a001a3c:	10002950 	.word	0x10002950
1a001a40:	100028b0 	.word	0x100028b0

1a001a44 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001a44:	b940      	cbnz	r0, 1a001a58 <vTaskPlaceOnEventList+0x14>
1a001a46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a4a:	f383 8811 	msr	BASEPRI, r3
1a001a4e:	f3bf 8f6f 	isb	sy
1a001a52:	f3bf 8f4f 	dsb	sy
1a001a56:	e7fe      	b.n	1a001a56 <vTaskPlaceOnEventList+0x12>
{
1a001a58:	b510      	push	{r4, lr}
1a001a5a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001a5c:	4b04      	ldr	r3, [pc, #16]	; (1a001a70 <vTaskPlaceOnEventList+0x2c>)
1a001a5e:	6819      	ldr	r1, [r3, #0]
1a001a60:	3118      	adds	r1, #24
1a001a62:	f7ff fb74 	bl	1a00114e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001a66:	2101      	movs	r1, #1
1a001a68:	4620      	mov	r0, r4
1a001a6a:	f7ff fcf9 	bl	1a001460 <prvAddCurrentTaskToDelayedList>
}
1a001a6e:	bd10      	pop	{r4, pc}
1a001a70:	100028a4 	.word	0x100028a4

1a001a74 <vTaskPlaceOnEventListRestricted>:
	{
1a001a74:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001a76:	b940      	cbnz	r0, 1a001a8a <vTaskPlaceOnEventListRestricted+0x16>
1a001a78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a7c:	f383 8811 	msr	BASEPRI, r3
1a001a80:	f3bf 8f6f 	isb	sy
1a001a84:	f3bf 8f4f 	dsb	sy
1a001a88:	e7fe      	b.n	1a001a88 <vTaskPlaceOnEventListRestricted+0x14>
1a001a8a:	460c      	mov	r4, r1
1a001a8c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001a8e:	4a06      	ldr	r2, [pc, #24]	; (1a001aa8 <vTaskPlaceOnEventListRestricted+0x34>)
1a001a90:	6811      	ldr	r1, [r2, #0]
1a001a92:	3118      	adds	r1, #24
1a001a94:	f7ff fb4f 	bl	1a001136 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001a98:	b10d      	cbz	r5, 1a001a9e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001a9a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001a9e:	4629      	mov	r1, r5
1a001aa0:	4620      	mov	r0, r4
1a001aa2:	f7ff fcdd 	bl	1a001460 <prvAddCurrentTaskToDelayedList>
	}
1a001aa6:	bd38      	pop	{r3, r4, r5, pc}
1a001aa8:	100028a4 	.word	0x100028a4

1a001aac <xTaskRemoveFromEventList>:
{
1a001aac:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001aae:	68c3      	ldr	r3, [r0, #12]
1a001ab0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001ab2:	b944      	cbnz	r4, 1a001ac6 <xTaskRemoveFromEventList+0x1a>
1a001ab4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ab8:	f383 8811 	msr	BASEPRI, r3
1a001abc:	f3bf 8f6f 	isb	sy
1a001ac0:	f3bf 8f4f 	dsb	sy
1a001ac4:	e7fe      	b.n	1a001ac4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001ac6:	f104 0518 	add.w	r5, r4, #24
1a001aca:	4628      	mov	r0, r5
1a001acc:	f7ff fb59 	bl	1a001182 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001ad0:	4b13      	ldr	r3, [pc, #76]	; (1a001b20 <xTaskRemoveFromEventList+0x74>)
1a001ad2:	681b      	ldr	r3, [r3, #0]
1a001ad4:	b9e3      	cbnz	r3, 1a001b10 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001ad6:	1d25      	adds	r5, r4, #4
1a001ad8:	4628      	mov	r0, r5
1a001ada:	f7ff fb52 	bl	1a001182 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001ade:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ae0:	2201      	movs	r2, #1
1a001ae2:	409a      	lsls	r2, r3
1a001ae4:	490f      	ldr	r1, [pc, #60]	; (1a001b24 <xTaskRemoveFromEventList+0x78>)
1a001ae6:	6808      	ldr	r0, [r1, #0]
1a001ae8:	4302      	orrs	r2, r0
1a001aea:	600a      	str	r2, [r1, #0]
1a001aec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001af0:	009a      	lsls	r2, r3, #2
1a001af2:	4629      	mov	r1, r5
1a001af4:	480c      	ldr	r0, [pc, #48]	; (1a001b28 <xTaskRemoveFromEventList+0x7c>)
1a001af6:	4410      	add	r0, r2
1a001af8:	f7ff fb1d 	bl	1a001136 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001afe:	4b0b      	ldr	r3, [pc, #44]	; (1a001b2c <xTaskRemoveFromEventList+0x80>)
1a001b00:	681b      	ldr	r3, [r3, #0]
1a001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b04:	429a      	cmp	r2, r3
1a001b06:	d908      	bls.n	1a001b1a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001b08:	2001      	movs	r0, #1
1a001b0a:	4b09      	ldr	r3, [pc, #36]	; (1a001b30 <xTaskRemoveFromEventList+0x84>)
1a001b0c:	6018      	str	r0, [r3, #0]
}
1a001b0e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001b10:	4629      	mov	r1, r5
1a001b12:	4808      	ldr	r0, [pc, #32]	; (1a001b34 <xTaskRemoveFromEventList+0x88>)
1a001b14:	f7ff fb0f 	bl	1a001136 <vListInsertEnd>
1a001b18:	e7f0      	b.n	1a001afc <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001b1a:	2000      	movs	r0, #0
	return xReturn;
1a001b1c:	e7f7      	b.n	1a001b0e <xTaskRemoveFromEventList+0x62>
1a001b1e:	bf00      	nop
1a001b20:	10002948 	.word	0x10002948
1a001b24:	10002950 	.word	0x10002950
1a001b28:	100028b0 	.word	0x100028b0
1a001b2c:	100028a4 	.word	0x100028a4
1a001b30:	100029c8 	.word	0x100029c8
1a001b34:	10002984 	.word	0x10002984

1a001b38 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001b38:	4b03      	ldr	r3, [pc, #12]	; (1a001b48 <vTaskInternalSetTimeOutState+0x10>)
1a001b3a:	681b      	ldr	r3, [r3, #0]
1a001b3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001b3e:	4b03      	ldr	r3, [pc, #12]	; (1a001b4c <vTaskInternalSetTimeOutState+0x14>)
1a001b40:	681b      	ldr	r3, [r3, #0]
1a001b42:	6043      	str	r3, [r0, #4]
}
1a001b44:	4770      	bx	lr
1a001b46:	bf00      	nop
1a001b48:	10002980 	.word	0x10002980
1a001b4c:	100029c4 	.word	0x100029c4

1a001b50 <xTaskCheckForTimeOut>:
{
1a001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001b52:	b150      	cbz	r0, 1a001b6a <xTaskCheckForTimeOut+0x1a>
1a001b54:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001b56:	b989      	cbnz	r1, 1a001b7c <xTaskCheckForTimeOut+0x2c>
1a001b58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b5c:	f383 8811 	msr	BASEPRI, r3
1a001b60:	f3bf 8f6f 	isb	sy
1a001b64:	f3bf 8f4f 	dsb	sy
1a001b68:	e7fe      	b.n	1a001b68 <xTaskCheckForTimeOut+0x18>
1a001b6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b6e:	f383 8811 	msr	BASEPRI, r3
1a001b72:	f3bf 8f6f 	isb	sy
1a001b76:	f3bf 8f4f 	dsb	sy
1a001b7a:	e7fe      	b.n	1a001b7a <xTaskCheckForTimeOut+0x2a>
1a001b7c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001b7e:	f000 fc29 	bl	1a0023d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001b82:	4b11      	ldr	r3, [pc, #68]	; (1a001bc8 <xTaskCheckForTimeOut+0x78>)
1a001b84:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001b86:	6868      	ldr	r0, [r5, #4]
1a001b88:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001b8a:	6823      	ldr	r3, [r4, #0]
1a001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b90:	d016      	beq.n	1a001bc0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001b92:	682f      	ldr	r7, [r5, #0]
1a001b94:	4e0d      	ldr	r6, [pc, #52]	; (1a001bcc <xTaskCheckForTimeOut+0x7c>)
1a001b96:	6836      	ldr	r6, [r6, #0]
1a001b98:	42b7      	cmp	r7, r6
1a001b9a:	d001      	beq.n	1a001ba0 <xTaskCheckForTimeOut+0x50>
1a001b9c:	4288      	cmp	r0, r1
1a001b9e:	d911      	bls.n	1a001bc4 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001ba0:	4293      	cmp	r3, r2
1a001ba2:	d803      	bhi.n	1a001bac <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001ba4:	2300      	movs	r3, #0
1a001ba6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001ba8:	2401      	movs	r4, #1
1a001baa:	e005      	b.n	1a001bb8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001bac:	1a9b      	subs	r3, r3, r2
1a001bae:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001bb0:	4628      	mov	r0, r5
1a001bb2:	f7ff ffc1 	bl	1a001b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001bb6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001bb8:	f000 fc2e 	bl	1a002418 <vPortExitCritical>
}
1a001bbc:	4620      	mov	r0, r4
1a001bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001bc0:	2400      	movs	r4, #0
1a001bc2:	e7f9      	b.n	1a001bb8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001bc4:	2401      	movs	r4, #1
1a001bc6:	e7f7      	b.n	1a001bb8 <xTaskCheckForTimeOut+0x68>
1a001bc8:	100029c4 	.word	0x100029c4
1a001bcc:	10002980 	.word	0x10002980

1a001bd0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001bd0:	4b01      	ldr	r3, [pc, #4]	; (1a001bd8 <vTaskMissedYield+0x8>)
1a001bd2:	2201      	movs	r2, #1
1a001bd4:	601a      	str	r2, [r3, #0]
}
1a001bd6:	4770      	bx	lr
1a001bd8:	100029c8 	.word	0x100029c8

1a001bdc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001bdc:	4b05      	ldr	r3, [pc, #20]	; (1a001bf4 <xTaskGetSchedulerState+0x18>)
1a001bde:	681b      	ldr	r3, [r3, #0]
1a001be0:	b133      	cbz	r3, 1a001bf0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001be2:	4b05      	ldr	r3, [pc, #20]	; (1a001bf8 <xTaskGetSchedulerState+0x1c>)
1a001be4:	681b      	ldr	r3, [r3, #0]
1a001be6:	b10b      	cbz	r3, 1a001bec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001be8:	2000      	movs	r0, #0
	}
1a001bea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001bec:	2002      	movs	r0, #2
1a001bee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001bf0:	2001      	movs	r0, #1
1a001bf2:	4770      	bx	lr
1a001bf4:	10002998 	.word	0x10002998
1a001bf8:	10002948 	.word	0x10002948

1a001bfc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001bfc:	2800      	cmp	r0, #0
1a001bfe:	d050      	beq.n	1a001ca2 <xTaskPriorityInherit+0xa6>
	{
1a001c00:	b538      	push	{r3, r4, r5, lr}
1a001c02:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001c04:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001c06:	4928      	ldr	r1, [pc, #160]	; (1a001ca8 <xTaskPriorityInherit+0xac>)
1a001c08:	6809      	ldr	r1, [r1, #0]
1a001c0a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001c0c:	428a      	cmp	r2, r1
1a001c0e:	d23e      	bcs.n	1a001c8e <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001c10:	6981      	ldr	r1, [r0, #24]
1a001c12:	2900      	cmp	r1, #0
1a001c14:	db05      	blt.n	1a001c22 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c16:	4924      	ldr	r1, [pc, #144]	; (1a001ca8 <xTaskPriorityInherit+0xac>)
1a001c18:	6809      	ldr	r1, [r1, #0]
1a001c1a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001c1c:	f1c1 0107 	rsb	r1, r1, #7
1a001c20:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001c22:	6960      	ldr	r0, [r4, #20]
1a001c24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001c28:	0091      	lsls	r1, r2, #2
1a001c2a:	4a20      	ldr	r2, [pc, #128]	; (1a001cac <xTaskPriorityInherit+0xb0>)
1a001c2c:	440a      	add	r2, r1
1a001c2e:	4290      	cmp	r0, r2
1a001c30:	d005      	beq.n	1a001c3e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001c32:	4a1d      	ldr	r2, [pc, #116]	; (1a001ca8 <xTaskPriorityInherit+0xac>)
1a001c34:	6812      	ldr	r2, [r2, #0]
1a001c36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001c38:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001c3a:	2001      	movs	r0, #1
	}
1a001c3c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c3e:	1d25      	adds	r5, r4, #4
1a001c40:	4628      	mov	r0, r5
1a001c42:	f7ff fa9e 	bl	1a001182 <uxListRemove>
1a001c46:	b968      	cbnz	r0, 1a001c64 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001c4a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001c4e:	008a      	lsls	r2, r1, #2
1a001c50:	4916      	ldr	r1, [pc, #88]	; (1a001cac <xTaskPriorityInherit+0xb0>)
1a001c52:	588a      	ldr	r2, [r1, r2]
1a001c54:	b932      	cbnz	r2, 1a001c64 <xTaskPriorityInherit+0x68>
1a001c56:	2201      	movs	r2, #1
1a001c58:	409a      	lsls	r2, r3
1a001c5a:	4915      	ldr	r1, [pc, #84]	; (1a001cb0 <xTaskPriorityInherit+0xb4>)
1a001c5c:	680b      	ldr	r3, [r1, #0]
1a001c5e:	ea23 0302 	bic.w	r3, r3, r2
1a001c62:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001c64:	4b10      	ldr	r3, [pc, #64]	; (1a001ca8 <xTaskPriorityInherit+0xac>)
1a001c66:	681b      	ldr	r3, [r3, #0]
1a001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001c6c:	2401      	movs	r4, #1
1a001c6e:	fa04 f203 	lsl.w	r2, r4, r3
1a001c72:	490f      	ldr	r1, [pc, #60]	; (1a001cb0 <xTaskPriorityInherit+0xb4>)
1a001c74:	6808      	ldr	r0, [r1, #0]
1a001c76:	4302      	orrs	r2, r0
1a001c78:	600a      	str	r2, [r1, #0]
1a001c7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c7e:	009a      	lsls	r2, r3, #2
1a001c80:	4629      	mov	r1, r5
1a001c82:	480a      	ldr	r0, [pc, #40]	; (1a001cac <xTaskPriorityInherit+0xb0>)
1a001c84:	4410      	add	r0, r2
1a001c86:	f7ff fa56 	bl	1a001136 <vListInsertEnd>
				xReturn = pdTRUE;
1a001c8a:	4620      	mov	r0, r4
1a001c8c:	e7d6      	b.n	1a001c3c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001c8e:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001c90:	4b05      	ldr	r3, [pc, #20]	; (1a001ca8 <xTaskPriorityInherit+0xac>)
1a001c92:	681b      	ldr	r3, [r3, #0]
1a001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c96:	429a      	cmp	r2, r3
1a001c98:	d201      	bcs.n	1a001c9e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a001c9a:	2001      	movs	r0, #1
		return xReturn;
1a001c9c:	e7ce      	b.n	1a001c3c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a001c9e:	2000      	movs	r0, #0
1a001ca0:	e7cc      	b.n	1a001c3c <xTaskPriorityInherit+0x40>
1a001ca2:	2000      	movs	r0, #0
	}
1a001ca4:	4770      	bx	lr
1a001ca6:	bf00      	nop
1a001ca8:	100028a4 	.word	0x100028a4
1a001cac:	100028b0 	.word	0x100028b0
1a001cb0:	10002950 	.word	0x10002950

1a001cb4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001cb4:	2800      	cmp	r0, #0
1a001cb6:	d049      	beq.n	1a001d4c <xTaskPriorityDisinherit+0x98>
	{
1a001cb8:	b538      	push	{r3, r4, r5, lr}
1a001cba:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001cbc:	4a26      	ldr	r2, [pc, #152]	; (1a001d58 <xTaskPriorityDisinherit+0xa4>)
1a001cbe:	6812      	ldr	r2, [r2, #0]
1a001cc0:	4282      	cmp	r2, r0
1a001cc2:	d008      	beq.n	1a001cd6 <xTaskPriorityDisinherit+0x22>
1a001cc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cc8:	f383 8811 	msr	BASEPRI, r3
1a001ccc:	f3bf 8f6f 	isb	sy
1a001cd0:	f3bf 8f4f 	dsb	sy
1a001cd4:	e7fe      	b.n	1a001cd4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001cd6:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001cd8:	b942      	cbnz	r2, 1a001cec <xTaskPriorityDisinherit+0x38>
1a001cda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cde:	f383 8811 	msr	BASEPRI, r3
1a001ce2:	f3bf 8f6f 	isb	sy
1a001ce6:	f3bf 8f4f 	dsb	sy
1a001cea:	e7fe      	b.n	1a001cea <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001cec:	3a01      	subs	r2, #1
1a001cee:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001cf0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001cf2:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001cf4:	4288      	cmp	r0, r1
1a001cf6:	d02b      	beq.n	1a001d50 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001cf8:	bb62      	cbnz	r2, 1a001d54 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001cfa:	1d25      	adds	r5, r4, #4
1a001cfc:	4628      	mov	r0, r5
1a001cfe:	f7ff fa40 	bl	1a001182 <uxListRemove>
1a001d02:	b970      	cbnz	r0, 1a001d22 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001d04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d06:	2314      	movs	r3, #20
1a001d08:	fb03 f302 	mul.w	r3, r3, r2
1a001d0c:	4913      	ldr	r1, [pc, #76]	; (1a001d5c <xTaskPriorityDisinherit+0xa8>)
1a001d0e:	58cb      	ldr	r3, [r1, r3]
1a001d10:	b93b      	cbnz	r3, 1a001d22 <xTaskPriorityDisinherit+0x6e>
1a001d12:	2301      	movs	r3, #1
1a001d14:	fa03 f202 	lsl.w	r2, r3, r2
1a001d18:	4911      	ldr	r1, [pc, #68]	; (1a001d60 <xTaskPriorityDisinherit+0xac>)
1a001d1a:	680b      	ldr	r3, [r1, #0]
1a001d1c:	ea23 0302 	bic.w	r3, r3, r2
1a001d20:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001d22:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001d24:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d26:	f1c3 0207 	rsb	r2, r3, #7
1a001d2a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001d2c:	2401      	movs	r4, #1
1a001d2e:	fa04 f203 	lsl.w	r2, r4, r3
1a001d32:	490b      	ldr	r1, [pc, #44]	; (1a001d60 <xTaskPriorityDisinherit+0xac>)
1a001d34:	6808      	ldr	r0, [r1, #0]
1a001d36:	4302      	orrs	r2, r0
1a001d38:	600a      	str	r2, [r1, #0]
1a001d3a:	4629      	mov	r1, r5
1a001d3c:	4a07      	ldr	r2, [pc, #28]	; (1a001d5c <xTaskPriorityDisinherit+0xa8>)
1a001d3e:	2014      	movs	r0, #20
1a001d40:	fb00 2003 	mla	r0, r0, r3, r2
1a001d44:	f7ff f9f7 	bl	1a001136 <vListInsertEnd>
					xReturn = pdTRUE;
1a001d48:	4620      	mov	r0, r4
	}
1a001d4a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001d4c:	2000      	movs	r0, #0
	}
1a001d4e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001d50:	2000      	movs	r0, #0
1a001d52:	e7fa      	b.n	1a001d4a <xTaskPriorityDisinherit+0x96>
1a001d54:	2000      	movs	r0, #0
		return xReturn;
1a001d56:	e7f8      	b.n	1a001d4a <xTaskPriorityDisinherit+0x96>
1a001d58:	100028a4 	.word	0x100028a4
1a001d5c:	100028b0 	.word	0x100028b0
1a001d60:	10002950 	.word	0x10002950

1a001d64 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001d64:	2800      	cmp	r0, #0
1a001d66:	d055      	beq.n	1a001e14 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a001d68:	b538      	push	{r3, r4, r5, lr}
1a001d6a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001d6c:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001d6e:	b940      	cbnz	r0, 1a001d82 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001d70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d74:	f383 8811 	msr	BASEPRI, r3
1a001d78:	f3bf 8f6f 	isb	sy
1a001d7c:	f3bf 8f4f 	dsb	sy
1a001d80:	e7fe      	b.n	1a001d80 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a001d84:	428a      	cmp	r2, r1
1a001d86:	d200      	bcs.n	1a001d8a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001d88:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001d8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a001d8c:	4291      	cmp	r1, r2
1a001d8e:	d001      	beq.n	1a001d94 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001d90:	2801      	cmp	r0, #1
1a001d92:	d000      	beq.n	1a001d96 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a001d94:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001d96:	4820      	ldr	r0, [pc, #128]	; (1a001e18 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001d98:	6800      	ldr	r0, [r0, #0]
1a001d9a:	4298      	cmp	r0, r3
1a001d9c:	d108      	bne.n	1a001db0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001d9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da2:	f383 8811 	msr	BASEPRI, r3
1a001da6:	f3bf 8f6f 	isb	sy
1a001daa:	f3bf 8f4f 	dsb	sy
1a001dae:	e7fe      	b.n	1a001dae <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a001db0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001db2:	6998      	ldr	r0, [r3, #24]
1a001db4:	2800      	cmp	r0, #0
1a001db6:	db02      	blt.n	1a001dbe <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001db8:	f1c2 0207 	rsb	r2, r2, #7
1a001dbc:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001dbe:	695a      	ldr	r2, [r3, #20]
1a001dc0:	4816      	ldr	r0, [pc, #88]	; (1a001e1c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001dc2:	2414      	movs	r4, #20
1a001dc4:	fb04 0101 	mla	r1, r4, r1, r0
1a001dc8:	428a      	cmp	r2, r1
1a001dca:	d1e3      	bne.n	1a001d94 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001dcc:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001dce:	1d1d      	adds	r5, r3, #4
1a001dd0:	4628      	mov	r0, r5
1a001dd2:	f7ff f9d6 	bl	1a001182 <uxListRemove>
1a001dd6:	b970      	cbnz	r0, 1a001df6 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001dd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001dda:	2314      	movs	r3, #20
1a001ddc:	fb03 f302 	mul.w	r3, r3, r2
1a001de0:	490e      	ldr	r1, [pc, #56]	; (1a001e1c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001de2:	58cb      	ldr	r3, [r1, r3]
1a001de4:	b93b      	cbnz	r3, 1a001df6 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a001de6:	2301      	movs	r3, #1
1a001de8:	fa03 f202 	lsl.w	r2, r3, r2
1a001dec:	490c      	ldr	r1, [pc, #48]	; (1a001e20 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001dee:	680b      	ldr	r3, [r1, #0]
1a001df0:	ea23 0302 	bic.w	r3, r3, r2
1a001df4:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001df6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001df8:	2301      	movs	r3, #1
1a001dfa:	4093      	lsls	r3, r2
1a001dfc:	4908      	ldr	r1, [pc, #32]	; (1a001e20 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001dfe:	6808      	ldr	r0, [r1, #0]
1a001e00:	4303      	orrs	r3, r0
1a001e02:	600b      	str	r3, [r1, #0]
1a001e04:	4629      	mov	r1, r5
1a001e06:	4b05      	ldr	r3, [pc, #20]	; (1a001e1c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001e08:	2014      	movs	r0, #20
1a001e0a:	fb00 3002 	mla	r0, r0, r2, r3
1a001e0e:	f7ff f992 	bl	1a001136 <vListInsertEnd>
	}
1a001e12:	e7bf      	b.n	1a001d94 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001e14:	4770      	bx	lr
1a001e16:	bf00      	nop
1a001e18:	100028a4 	.word	0x100028a4
1a001e1c:	100028b0 	.word	0x100028b0
1a001e20:	10002950 	.word	0x10002950

1a001e24 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001e24:	4b05      	ldr	r3, [pc, #20]	; (1a001e3c <pvTaskIncrementMutexHeldCount+0x18>)
1a001e26:	681b      	ldr	r3, [r3, #0]
1a001e28:	b123      	cbz	r3, 1a001e34 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001e2a:	4b04      	ldr	r3, [pc, #16]	; (1a001e3c <pvTaskIncrementMutexHeldCount+0x18>)
1a001e2c:	681a      	ldr	r2, [r3, #0]
1a001e2e:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001e30:	3301      	adds	r3, #1
1a001e32:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001e34:	4b01      	ldr	r3, [pc, #4]	; (1a001e3c <pvTaskIncrementMutexHeldCount+0x18>)
1a001e36:	6818      	ldr	r0, [r3, #0]
	}
1a001e38:	4770      	bx	lr
1a001e3a:	bf00      	nop
1a001e3c:	100028a4 	.word	0x100028a4

1a001e40 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001e40:	4b06      	ldr	r3, [pc, #24]	; (1a001e5c <prvGetNextExpireTime+0x1c>)
1a001e42:	681a      	ldr	r2, [r3, #0]
1a001e44:	6813      	ldr	r3, [r2, #0]
1a001e46:	fab3 f383 	clz	r3, r3
1a001e4a:	095b      	lsrs	r3, r3, #5
1a001e4c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001e4e:	b913      	cbnz	r3, 1a001e56 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001e50:	68d3      	ldr	r3, [r2, #12]
1a001e52:	6818      	ldr	r0, [r3, #0]
1a001e54:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001e56:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001e58:	4770      	bx	lr
1a001e5a:	bf00      	nop
1a001e5c:	100029cc 	.word	0x100029cc

1a001e60 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001e60:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001e62:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001e64:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001e66:	4291      	cmp	r1, r2
1a001e68:	d80c      	bhi.n	1a001e84 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001e6a:	1ad2      	subs	r2, r2, r3
1a001e6c:	6983      	ldr	r3, [r0, #24]
1a001e6e:	429a      	cmp	r2, r3
1a001e70:	d301      	bcc.n	1a001e76 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001e72:	2001      	movs	r0, #1
1a001e74:	e010      	b.n	1a001e98 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001e76:	1d01      	adds	r1, r0, #4
1a001e78:	4b09      	ldr	r3, [pc, #36]	; (1a001ea0 <prvInsertTimerInActiveList+0x40>)
1a001e7a:	6818      	ldr	r0, [r3, #0]
1a001e7c:	f7ff f967 	bl	1a00114e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001e80:	2000      	movs	r0, #0
1a001e82:	e009      	b.n	1a001e98 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001e84:	429a      	cmp	r2, r3
1a001e86:	d201      	bcs.n	1a001e8c <prvInsertTimerInActiveList+0x2c>
1a001e88:	4299      	cmp	r1, r3
1a001e8a:	d206      	bcs.n	1a001e9a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001e8c:	1d01      	adds	r1, r0, #4
1a001e8e:	4b05      	ldr	r3, [pc, #20]	; (1a001ea4 <prvInsertTimerInActiveList+0x44>)
1a001e90:	6818      	ldr	r0, [r3, #0]
1a001e92:	f7ff f95c 	bl	1a00114e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001e96:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001e98:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001e9a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001e9c:	e7fc      	b.n	1a001e98 <prvInsertTimerInActiveList+0x38>
1a001e9e:	bf00      	nop
1a001ea0:	100029d0 	.word	0x100029d0
1a001ea4:	100029cc 	.word	0x100029cc

1a001ea8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001ea8:	b530      	push	{r4, r5, lr}
1a001eaa:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001eac:	f000 fa92 	bl	1a0023d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001eb0:	4b11      	ldr	r3, [pc, #68]	; (1a001ef8 <prvCheckForValidListAndQueue+0x50>)
1a001eb2:	681b      	ldr	r3, [r3, #0]
1a001eb4:	b11b      	cbz	r3, 1a001ebe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001eb6:	f000 faaf 	bl	1a002418 <vPortExitCritical>
}
1a001eba:	b003      	add	sp, #12
1a001ebc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001ebe:	4d0f      	ldr	r5, [pc, #60]	; (1a001efc <prvCheckForValidListAndQueue+0x54>)
1a001ec0:	4628      	mov	r0, r5
1a001ec2:	f7ff f92a 	bl	1a00111a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001ec6:	4c0e      	ldr	r4, [pc, #56]	; (1a001f00 <prvCheckForValidListAndQueue+0x58>)
1a001ec8:	4620      	mov	r0, r4
1a001eca:	f7ff f926 	bl	1a00111a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001ece:	4b0d      	ldr	r3, [pc, #52]	; (1a001f04 <prvCheckForValidListAndQueue+0x5c>)
1a001ed0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001ed2:	4b0d      	ldr	r3, [pc, #52]	; (1a001f08 <prvCheckForValidListAndQueue+0x60>)
1a001ed4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001ed6:	2300      	movs	r3, #0
1a001ed8:	9300      	str	r3, [sp, #0]
1a001eda:	4b0c      	ldr	r3, [pc, #48]	; (1a001f0c <prvCheckForValidListAndQueue+0x64>)
1a001edc:	4a0c      	ldr	r2, [pc, #48]	; (1a001f10 <prvCheckForValidListAndQueue+0x68>)
1a001ede:	2110      	movs	r1, #16
1a001ee0:	200a      	movs	r0, #10
1a001ee2:	f7fe fdd0 	bl	1a000a86 <xQueueGenericCreateStatic>
1a001ee6:	4b04      	ldr	r3, [pc, #16]	; (1a001ef8 <prvCheckForValidListAndQueue+0x50>)
1a001ee8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001eea:	2800      	cmp	r0, #0
1a001eec:	d0e3      	beq.n	1a001eb6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001eee:	4909      	ldr	r1, [pc, #36]	; (1a001f14 <prvCheckForValidListAndQueue+0x6c>)
1a001ef0:	f7ff f8d6 	bl	1a0010a0 <vQueueAddToRegistry>
1a001ef4:	e7df      	b.n	1a001eb6 <prvCheckForValidListAndQueue+0xe>
1a001ef6:	bf00      	nop
1a001ef8:	10002af0 	.word	0x10002af0
1a001efc:	10002a74 	.word	0x10002a74
1a001f00:	10002a88 	.word	0x10002a88
1a001f04:	100029cc 	.word	0x100029cc
1a001f08:	100029d0 	.word	0x100029d0
1a001f0c:	10002aa0 	.word	0x10002aa0
1a001f10:	100029d4 	.word	0x100029d4
1a001f14:	1a00409c 	.word	0x1a00409c

1a001f18 <prvInitialiseNewTimer>:
{
1a001f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001f1c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001f1e:	b941      	cbnz	r1, 1a001f32 <prvInitialiseNewTimer+0x1a>
1a001f20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f24:	f383 8811 	msr	BASEPRI, r3
1a001f28:	f3bf 8f6f 	isb	sy
1a001f2c:	f3bf 8f4f 	dsb	sy
1a001f30:	e7fe      	b.n	1a001f30 <prvInitialiseNewTimer+0x18>
1a001f32:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a001f34:	b174      	cbz	r4, 1a001f54 <prvInitialiseNewTimer+0x3c>
1a001f36:	461d      	mov	r5, r3
1a001f38:	4616      	mov	r6, r2
1a001f3a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001f3c:	f7ff ffb4 	bl	1a001ea8 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a001f40:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001f44:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001f46:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001f48:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001f4a:	9b06      	ldr	r3, [sp, #24]
1a001f4c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001f4e:	1d20      	adds	r0, r4, #4
1a001f50:	f7ff f8ee 	bl	1a001130 <vListInitialiseItem>
}
1a001f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001f58 <xTimerCreateTimerTask>:
{
1a001f58:	b510      	push	{r4, lr}
1a001f5a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001f5c:	f7ff ffa4 	bl	1a001ea8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001f60:	4b12      	ldr	r3, [pc, #72]	; (1a001fac <xTimerCreateTimerTask+0x54>)
1a001f62:	681b      	ldr	r3, [r3, #0]
1a001f64:	b1cb      	cbz	r3, 1a001f9a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001f66:	2400      	movs	r4, #0
1a001f68:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001f6a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001f6c:	aa07      	add	r2, sp, #28
1a001f6e:	a906      	add	r1, sp, #24
1a001f70:	a805      	add	r0, sp, #20
1a001f72:	f7ff f927 	bl	1a0011c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001f76:	9b05      	ldr	r3, [sp, #20]
1a001f78:	9302      	str	r3, [sp, #8]
1a001f7a:	9b06      	ldr	r3, [sp, #24]
1a001f7c:	9301      	str	r3, [sp, #4]
1a001f7e:	2304      	movs	r3, #4
1a001f80:	9300      	str	r3, [sp, #0]
1a001f82:	4623      	mov	r3, r4
1a001f84:	9a07      	ldr	r2, [sp, #28]
1a001f86:	490a      	ldr	r1, [pc, #40]	; (1a001fb0 <xTimerCreateTimerTask+0x58>)
1a001f88:	480a      	ldr	r0, [pc, #40]	; (1a001fb4 <xTimerCreateTimerTask+0x5c>)
1a001f8a:	f7ff fab5 	bl	1a0014f8 <xTaskCreateStatic>
1a001f8e:	4b0a      	ldr	r3, [pc, #40]	; (1a001fb8 <xTimerCreateTimerTask+0x60>)
1a001f90:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001f92:	b110      	cbz	r0, 1a001f9a <xTimerCreateTimerTask+0x42>
}
1a001f94:	2001      	movs	r0, #1
1a001f96:	b008      	add	sp, #32
1a001f98:	bd10      	pop	{r4, pc}
1a001f9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f9e:	f383 8811 	msr	BASEPRI, r3
1a001fa2:	f3bf 8f6f 	isb	sy
1a001fa6:	f3bf 8f4f 	dsb	sy
1a001faa:	e7fe      	b.n	1a001faa <xTimerCreateTimerTask+0x52>
1a001fac:	10002af0 	.word	0x10002af0
1a001fb0:	1a0040a4 	.word	0x1a0040a4
1a001fb4:	1a0022e9 	.word	0x1a0022e9
1a001fb8:	10002af4 	.word	0x10002af4

1a001fbc <xTimerCreateStatic>:
	{
1a001fbc:	b530      	push	{r4, r5, lr}
1a001fbe:	b085      	sub	sp, #20
1a001fc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a001fc2:	2530      	movs	r5, #48	; 0x30
1a001fc4:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a001fc6:	9d03      	ldr	r5, [sp, #12]
1a001fc8:	2d30      	cmp	r5, #48	; 0x30
1a001fca:	d008      	beq.n	1a001fde <xTimerCreateStatic+0x22>
1a001fcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fd0:	f383 8811 	msr	BASEPRI, r3
1a001fd4:	f3bf 8f6f 	isb	sy
1a001fd8:	f3bf 8f4f 	dsb	sy
1a001fdc:	e7fe      	b.n	1a001fdc <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a001fde:	b944      	cbnz	r4, 1a001ff2 <xTimerCreateStatic+0x36>
1a001fe0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fe4:	f383 8811 	msr	BASEPRI, r3
1a001fe8:	f3bf 8f6f 	isb	sy
1a001fec:	f3bf 8f4f 	dsb	sy
1a001ff0:	e7fe      	b.n	1a001ff0 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001ff2:	9401      	str	r4, [sp, #4]
1a001ff4:	9d08      	ldr	r5, [sp, #32]
1a001ff6:	9500      	str	r5, [sp, #0]
1a001ff8:	f7ff ff8e 	bl	1a001f18 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a001ffc:	2301      	movs	r3, #1
1a001ffe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002002:	4620      	mov	r0, r4
1a002004:	b005      	add	sp, #20
1a002006:	bd30      	pop	{r4, r5, pc}

1a002008 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002008:	b1c8      	cbz	r0, 1a00203e <xTimerGenericCommand+0x36>
{
1a00200a:	b530      	push	{r4, r5, lr}
1a00200c:	b085      	sub	sp, #20
1a00200e:	4615      	mov	r5, r2
1a002010:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002012:	4a17      	ldr	r2, [pc, #92]	; (1a002070 <xTimerGenericCommand+0x68>)
1a002014:	6810      	ldr	r0, [r2, #0]
1a002016:	b340      	cbz	r0, 1a00206a <xTimerGenericCommand+0x62>
1a002018:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00201a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a00201c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00201e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002020:	2905      	cmp	r1, #5
1a002022:	dc1d      	bgt.n	1a002060 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002024:	f7ff fdda 	bl	1a001bdc <xTaskGetSchedulerState>
1a002028:	2802      	cmp	r0, #2
1a00202a:	d011      	beq.n	1a002050 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a00202c:	2300      	movs	r3, #0
1a00202e:	461a      	mov	r2, r3
1a002030:	4669      	mov	r1, sp
1a002032:	480f      	ldr	r0, [pc, #60]	; (1a002070 <xTimerGenericCommand+0x68>)
1a002034:	6800      	ldr	r0, [r0, #0]
1a002036:	f7fe fd95 	bl	1a000b64 <xQueueGenericSend>
}
1a00203a:	b005      	add	sp, #20
1a00203c:	bd30      	pop	{r4, r5, pc}
1a00203e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002042:	f383 8811 	msr	BASEPRI, r3
1a002046:	f3bf 8f6f 	isb	sy
1a00204a:	f3bf 8f4f 	dsb	sy
1a00204e:	e7fe      	b.n	1a00204e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002050:	2300      	movs	r3, #0
1a002052:	9a08      	ldr	r2, [sp, #32]
1a002054:	4669      	mov	r1, sp
1a002056:	4806      	ldr	r0, [pc, #24]	; (1a002070 <xTimerGenericCommand+0x68>)
1a002058:	6800      	ldr	r0, [r0, #0]
1a00205a:	f7fe fd83 	bl	1a000b64 <xQueueGenericSend>
1a00205e:	e7ec      	b.n	1a00203a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002060:	2300      	movs	r3, #0
1a002062:	4669      	mov	r1, sp
1a002064:	f7fe fe3c 	bl	1a000ce0 <xQueueGenericSendFromISR>
1a002068:	e7e7      	b.n	1a00203a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a00206a:	2000      	movs	r0, #0
	return xReturn;
1a00206c:	e7e5      	b.n	1a00203a <xTimerGenericCommand+0x32>
1a00206e:	bf00      	nop
1a002070:	10002af0 	.word	0x10002af0

1a002074 <prvSwitchTimerLists>:
{
1a002074:	b570      	push	{r4, r5, r6, lr}
1a002076:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002078:	4b1a      	ldr	r3, [pc, #104]	; (1a0020e4 <prvSwitchTimerLists+0x70>)
1a00207a:	681b      	ldr	r3, [r3, #0]
1a00207c:	681a      	ldr	r2, [r3, #0]
1a00207e:	b352      	cbz	r2, 1a0020d6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002080:	68db      	ldr	r3, [r3, #12]
1a002082:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002084:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002086:	1d25      	adds	r5, r4, #4
1a002088:	4628      	mov	r0, r5
1a00208a:	f7ff f87a 	bl	1a001182 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00208e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002090:	4620      	mov	r0, r4
1a002092:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002094:	69e3      	ldr	r3, [r4, #28]
1a002096:	2b01      	cmp	r3, #1
1a002098:	d1ee      	bne.n	1a002078 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00209a:	69a3      	ldr	r3, [r4, #24]
1a00209c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00209e:	429e      	cmp	r6, r3
1a0020a0:	d207      	bcs.n	1a0020b2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0020a2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0020a4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0020a6:	4629      	mov	r1, r5
1a0020a8:	4b0e      	ldr	r3, [pc, #56]	; (1a0020e4 <prvSwitchTimerLists+0x70>)
1a0020aa:	6818      	ldr	r0, [r3, #0]
1a0020ac:	f7ff f84f 	bl	1a00114e <vListInsert>
1a0020b0:	e7e2      	b.n	1a002078 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0020b2:	2100      	movs	r1, #0
1a0020b4:	9100      	str	r1, [sp, #0]
1a0020b6:	460b      	mov	r3, r1
1a0020b8:	4632      	mov	r2, r6
1a0020ba:	4620      	mov	r0, r4
1a0020bc:	f7ff ffa4 	bl	1a002008 <xTimerGenericCommand>
				configASSERT( xResult );
1a0020c0:	2800      	cmp	r0, #0
1a0020c2:	d1d9      	bne.n	1a002078 <prvSwitchTimerLists+0x4>
1a0020c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020c8:	f383 8811 	msr	BASEPRI, r3
1a0020cc:	f3bf 8f6f 	isb	sy
1a0020d0:	f3bf 8f4f 	dsb	sy
1a0020d4:	e7fe      	b.n	1a0020d4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0020d6:	4a04      	ldr	r2, [pc, #16]	; (1a0020e8 <prvSwitchTimerLists+0x74>)
1a0020d8:	6810      	ldr	r0, [r2, #0]
1a0020da:	4902      	ldr	r1, [pc, #8]	; (1a0020e4 <prvSwitchTimerLists+0x70>)
1a0020dc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0020de:	6013      	str	r3, [r2, #0]
}
1a0020e0:	b002      	add	sp, #8
1a0020e2:	bd70      	pop	{r4, r5, r6, pc}
1a0020e4:	100029cc 	.word	0x100029cc
1a0020e8:	100029d0 	.word	0x100029d0

1a0020ec <prvSampleTimeNow>:
{
1a0020ec:	b538      	push	{r3, r4, r5, lr}
1a0020ee:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0020f0:	f7ff fac0 	bl	1a001674 <xTaskGetTickCount>
1a0020f4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0020f6:	4b07      	ldr	r3, [pc, #28]	; (1a002114 <prvSampleTimeNow+0x28>)
1a0020f8:	681b      	ldr	r3, [r3, #0]
1a0020fa:	4283      	cmp	r3, r0
1a0020fc:	d805      	bhi.n	1a00210a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0020fe:	2300      	movs	r3, #0
1a002100:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002102:	4b04      	ldr	r3, [pc, #16]	; (1a002114 <prvSampleTimeNow+0x28>)
1a002104:	601c      	str	r4, [r3, #0]
}
1a002106:	4620      	mov	r0, r4
1a002108:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00210a:	f7ff ffb3 	bl	1a002074 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00210e:	2301      	movs	r3, #1
1a002110:	602b      	str	r3, [r5, #0]
1a002112:	e7f6      	b.n	1a002102 <prvSampleTimeNow+0x16>
1a002114:	10002a9c 	.word	0x10002a9c

1a002118 <prvProcessExpiredTimer>:
{
1a002118:	b570      	push	{r4, r5, r6, lr}
1a00211a:	b082      	sub	sp, #8
1a00211c:	4605      	mov	r5, r0
1a00211e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002120:	4b14      	ldr	r3, [pc, #80]	; (1a002174 <prvProcessExpiredTimer+0x5c>)
1a002122:	681b      	ldr	r3, [r3, #0]
1a002124:	68db      	ldr	r3, [r3, #12]
1a002126:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002128:	1d20      	adds	r0, r4, #4
1a00212a:	f7ff f82a 	bl	1a001182 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00212e:	69e3      	ldr	r3, [r4, #28]
1a002130:	2b01      	cmp	r3, #1
1a002132:	d004      	beq.n	1a00213e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002134:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002136:	4620      	mov	r0, r4
1a002138:	4798      	blx	r3
}
1a00213a:	b002      	add	sp, #8
1a00213c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00213e:	69a1      	ldr	r1, [r4, #24]
1a002140:	462b      	mov	r3, r5
1a002142:	4632      	mov	r2, r6
1a002144:	4429      	add	r1, r5
1a002146:	4620      	mov	r0, r4
1a002148:	f7ff fe8a 	bl	1a001e60 <prvInsertTimerInActiveList>
1a00214c:	2800      	cmp	r0, #0
1a00214e:	d0f1      	beq.n	1a002134 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002150:	2100      	movs	r1, #0
1a002152:	9100      	str	r1, [sp, #0]
1a002154:	460b      	mov	r3, r1
1a002156:	462a      	mov	r2, r5
1a002158:	4620      	mov	r0, r4
1a00215a:	f7ff ff55 	bl	1a002008 <xTimerGenericCommand>
			configASSERT( xResult );
1a00215e:	2800      	cmp	r0, #0
1a002160:	d1e8      	bne.n	1a002134 <prvProcessExpiredTimer+0x1c>
1a002162:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002166:	f383 8811 	msr	BASEPRI, r3
1a00216a:	f3bf 8f6f 	isb	sy
1a00216e:	f3bf 8f4f 	dsb	sy
1a002172:	e7fe      	b.n	1a002172 <prvProcessExpiredTimer+0x5a>
1a002174:	100029cc 	.word	0x100029cc

1a002178 <prvProcessTimerOrBlockTask>:
{
1a002178:	b570      	push	{r4, r5, r6, lr}
1a00217a:	b082      	sub	sp, #8
1a00217c:	4606      	mov	r6, r0
1a00217e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002180:	f7ff fa70 	bl	1a001664 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002184:	a801      	add	r0, sp, #4
1a002186:	f7ff ffb1 	bl	1a0020ec <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00218a:	9b01      	ldr	r3, [sp, #4]
1a00218c:	bb1b      	cbnz	r3, 1a0021d6 <prvProcessTimerOrBlockTask+0x5e>
1a00218e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002190:	b90c      	cbnz	r4, 1a002196 <prvProcessTimerOrBlockTask+0x1e>
1a002192:	42b0      	cmp	r0, r6
1a002194:	d218      	bcs.n	1a0021c8 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002196:	b12c      	cbz	r4, 1a0021a4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002198:	4b11      	ldr	r3, [pc, #68]	; (1a0021e0 <prvProcessTimerOrBlockTask+0x68>)
1a00219a:	681b      	ldr	r3, [r3, #0]
1a00219c:	681c      	ldr	r4, [r3, #0]
1a00219e:	fab4 f484 	clz	r4, r4
1a0021a2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a0021a4:	4622      	mov	r2, r4
1a0021a6:	1b71      	subs	r1, r6, r5
1a0021a8:	4b0e      	ldr	r3, [pc, #56]	; (1a0021e4 <prvProcessTimerOrBlockTask+0x6c>)
1a0021aa:	6818      	ldr	r0, [r3, #0]
1a0021ac:	f7fe ff8c 	bl	1a0010c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a0021b0:	f7ff faf2 	bl	1a001798 <xTaskResumeAll>
1a0021b4:	b988      	cbnz	r0, 1a0021da <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a0021b6:	4b0c      	ldr	r3, [pc, #48]	; (1a0021e8 <prvProcessTimerOrBlockTask+0x70>)
1a0021b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0021bc:	601a      	str	r2, [r3, #0]
1a0021be:	f3bf 8f4f 	dsb	sy
1a0021c2:	f3bf 8f6f 	isb	sy
1a0021c6:	e008      	b.n	1a0021da <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0021c8:	f7ff fae6 	bl	1a001798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0021cc:	4629      	mov	r1, r5
1a0021ce:	4630      	mov	r0, r6
1a0021d0:	f7ff ffa2 	bl	1a002118 <prvProcessExpiredTimer>
1a0021d4:	e001      	b.n	1a0021da <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0021d6:	f7ff fadf 	bl	1a001798 <xTaskResumeAll>
}
1a0021da:	b002      	add	sp, #8
1a0021dc:	bd70      	pop	{r4, r5, r6, pc}
1a0021de:	bf00      	nop
1a0021e0:	100029d0 	.word	0x100029d0
1a0021e4:	10002af0 	.word	0x10002af0
1a0021e8:	e000ed04 	.word	0xe000ed04

1a0021ec <prvProcessReceivedCommands>:
{
1a0021ec:	b530      	push	{r4, r5, lr}
1a0021ee:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0021f0:	e002      	b.n	1a0021f8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0021f2:	9b04      	ldr	r3, [sp, #16]
1a0021f4:	2b00      	cmp	r3, #0
1a0021f6:	da0f      	bge.n	1a002218 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0021f8:	2200      	movs	r2, #0
1a0021fa:	a904      	add	r1, sp, #16
1a0021fc:	4b39      	ldr	r3, [pc, #228]	; (1a0022e4 <prvProcessReceivedCommands+0xf8>)
1a0021fe:	6818      	ldr	r0, [r3, #0]
1a002200:	f7fe fdd4 	bl	1a000dac <xQueueReceive>
1a002204:	2800      	cmp	r0, #0
1a002206:	d06a      	beq.n	1a0022de <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002208:	9b04      	ldr	r3, [sp, #16]
1a00220a:	2b00      	cmp	r3, #0
1a00220c:	daf1      	bge.n	1a0021f2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00220e:	9907      	ldr	r1, [sp, #28]
1a002210:	9806      	ldr	r0, [sp, #24]
1a002212:	9b05      	ldr	r3, [sp, #20]
1a002214:	4798      	blx	r3
1a002216:	e7ec      	b.n	1a0021f2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002218:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00221a:	6963      	ldr	r3, [r4, #20]
1a00221c:	b113      	cbz	r3, 1a002224 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00221e:	1d20      	adds	r0, r4, #4
1a002220:	f7fe ffaf 	bl	1a001182 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002224:	a803      	add	r0, sp, #12
1a002226:	f7ff ff61 	bl	1a0020ec <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a00222a:	9b04      	ldr	r3, [sp, #16]
1a00222c:	2b09      	cmp	r3, #9
1a00222e:	d8e3      	bhi.n	1a0021f8 <prvProcessReceivedCommands+0xc>
1a002230:	a201      	add	r2, pc, #4	; (adr r2, 1a002238 <prvProcessReceivedCommands+0x4c>)
1a002232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002236:	bf00      	nop
1a002238:	1a002261 	.word	0x1a002261
1a00223c:	1a002261 	.word	0x1a002261
1a002240:	1a002261 	.word	0x1a002261
1a002244:	1a0021f9 	.word	0x1a0021f9
1a002248:	1a0022a9 	.word	0x1a0022a9
1a00224c:	1a0022cf 	.word	0x1a0022cf
1a002250:	1a002261 	.word	0x1a002261
1a002254:	1a002261 	.word	0x1a002261
1a002258:	1a0021f9 	.word	0x1a0021f9
1a00225c:	1a0022a9 	.word	0x1a0022a9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002260:	9905      	ldr	r1, [sp, #20]
1a002262:	69a5      	ldr	r5, [r4, #24]
1a002264:	460b      	mov	r3, r1
1a002266:	4602      	mov	r2, r0
1a002268:	4429      	add	r1, r5
1a00226a:	4620      	mov	r0, r4
1a00226c:	f7ff fdf8 	bl	1a001e60 <prvInsertTimerInActiveList>
1a002270:	2800      	cmp	r0, #0
1a002272:	d0c1      	beq.n	1a0021f8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002274:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002276:	4620      	mov	r0, r4
1a002278:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00227a:	69e3      	ldr	r3, [r4, #28]
1a00227c:	2b01      	cmp	r3, #1
1a00227e:	d1bb      	bne.n	1a0021f8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002280:	69a2      	ldr	r2, [r4, #24]
1a002282:	2100      	movs	r1, #0
1a002284:	9100      	str	r1, [sp, #0]
1a002286:	460b      	mov	r3, r1
1a002288:	9805      	ldr	r0, [sp, #20]
1a00228a:	4402      	add	r2, r0
1a00228c:	4620      	mov	r0, r4
1a00228e:	f7ff febb 	bl	1a002008 <xTimerGenericCommand>
							configASSERT( xResult );
1a002292:	2800      	cmp	r0, #0
1a002294:	d1b0      	bne.n	1a0021f8 <prvProcessReceivedCommands+0xc>
1a002296:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00229a:	f383 8811 	msr	BASEPRI, r3
1a00229e:	f3bf 8f6f 	isb	sy
1a0022a2:	f3bf 8f4f 	dsb	sy
1a0022a6:	e7fe      	b.n	1a0022a6 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a0022a8:	9905      	ldr	r1, [sp, #20]
1a0022aa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a0022ac:	b131      	cbz	r1, 1a0022bc <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a0022ae:	4603      	mov	r3, r0
1a0022b0:	4602      	mov	r2, r0
1a0022b2:	4401      	add	r1, r0
1a0022b4:	4620      	mov	r0, r4
1a0022b6:	f7ff fdd3 	bl	1a001e60 <prvInsertTimerInActiveList>
					break;
1a0022ba:	e79d      	b.n	1a0021f8 <prvProcessReceivedCommands+0xc>
1a0022bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022c0:	f383 8811 	msr	BASEPRI, r3
1a0022c4:	f3bf 8f6f 	isb	sy
1a0022c8:	f3bf 8f4f 	dsb	sy
1a0022cc:	e7fe      	b.n	1a0022cc <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0022ce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0022d2:	2b00      	cmp	r3, #0
1a0022d4:	d190      	bne.n	1a0021f8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a0022d6:	4620      	mov	r0, r4
1a0022d8:	f7fe face 	bl	1a000878 <vPortFree>
1a0022dc:	e78c      	b.n	1a0021f8 <prvProcessReceivedCommands+0xc>
}
1a0022de:	b009      	add	sp, #36	; 0x24
1a0022e0:	bd30      	pop	{r4, r5, pc}
1a0022e2:	bf00      	nop
1a0022e4:	10002af0 	.word	0x10002af0

1a0022e8 <prvTimerTask>:
{
1a0022e8:	b500      	push	{lr}
1a0022ea:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0022ec:	a801      	add	r0, sp, #4
1a0022ee:	f7ff fda7 	bl	1a001e40 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0022f2:	9901      	ldr	r1, [sp, #4]
1a0022f4:	f7ff ff40 	bl	1a002178 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0022f8:	f7ff ff78 	bl	1a0021ec <prvProcessReceivedCommands>
1a0022fc:	e7f6      	b.n	1a0022ec <prvTimerTask+0x4>
1a0022fe:	Address 0x000000001a0022fe is out of bounds.


1a002300 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002300:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002302:	2300      	movs	r3, #0
1a002304:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002306:	4b0d      	ldr	r3, [pc, #52]	; (1a00233c <prvTaskExitError+0x3c>)
1a002308:	681b      	ldr	r3, [r3, #0]
1a00230a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00230e:	d008      	beq.n	1a002322 <prvTaskExitError+0x22>
1a002310:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002314:	f383 8811 	msr	BASEPRI, r3
1a002318:	f3bf 8f6f 	isb	sy
1a00231c:	f3bf 8f4f 	dsb	sy
1a002320:	e7fe      	b.n	1a002320 <prvTaskExitError+0x20>
1a002322:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002326:	f383 8811 	msr	BASEPRI, r3
1a00232a:	f3bf 8f6f 	isb	sy
1a00232e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002332:	9b01      	ldr	r3, [sp, #4]
1a002334:	2b00      	cmp	r3, #0
1a002336:	d0fc      	beq.n	1a002332 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002338:	b002      	add	sp, #8
1a00233a:	4770      	bx	lr
1a00233c:	10000004 	.word	0x10000004

1a002340 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002340:	4808      	ldr	r0, [pc, #32]	; (1a002364 <prvPortStartFirstTask+0x24>)
1a002342:	6800      	ldr	r0, [r0, #0]
1a002344:	6800      	ldr	r0, [r0, #0]
1a002346:	f380 8808 	msr	MSP, r0
1a00234a:	f04f 0000 	mov.w	r0, #0
1a00234e:	f380 8814 	msr	CONTROL, r0
1a002352:	b662      	cpsie	i
1a002354:	b661      	cpsie	f
1a002356:	f3bf 8f4f 	dsb	sy
1a00235a:	f3bf 8f6f 	isb	sy
1a00235e:	df00      	svc	0
1a002360:	bf00      	nop
1a002362:	0000      	.short	0x0000
1a002364:	e000ed08 	.word	0xe000ed08

1a002368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002368:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002378 <vPortEnableVFP+0x10>
1a00236c:	6801      	ldr	r1, [r0, #0]
1a00236e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002372:	6001      	str	r1, [r0, #0]
1a002374:	4770      	bx	lr
1a002376:	0000      	.short	0x0000
1a002378:	e000ed88 	.word	0xe000ed88

1a00237c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a00237c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002380:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002384:	f021 0101 	bic.w	r1, r1, #1
1a002388:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00238c:	4b05      	ldr	r3, [pc, #20]	; (1a0023a4 <pxPortInitialiseStack+0x28>)
1a00238e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002392:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002396:	f06f 0302 	mvn.w	r3, #2
1a00239a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00239e:	3844      	subs	r0, #68	; 0x44
1a0023a0:	4770      	bx	lr
1a0023a2:	bf00      	nop
1a0023a4:	1a002301 	.word	0x1a002301
1a0023a8:	ffffffff 	.word	0xffffffff
1a0023ac:	ffffffff 	.word	0xffffffff

1a0023b0 <SVC_Handler>:
	__asm volatile (
1a0023b0:	4b07      	ldr	r3, [pc, #28]	; (1a0023d0 <pxCurrentTCBConst2>)
1a0023b2:	6819      	ldr	r1, [r3, #0]
1a0023b4:	6808      	ldr	r0, [r1, #0]
1a0023b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0023ba:	f380 8809 	msr	PSP, r0
1a0023be:	f3bf 8f6f 	isb	sy
1a0023c2:	f04f 0000 	mov.w	r0, #0
1a0023c6:	f380 8811 	msr	BASEPRI, r0
1a0023ca:	4770      	bx	lr
1a0023cc:	f3af 8000 	nop.w

1a0023d0 <pxCurrentTCBConst2>:
1a0023d0:	100028a4 	.word	0x100028a4

1a0023d4 <vPortEnterCritical>:
1a0023d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023d8:	f383 8811 	msr	BASEPRI, r3
1a0023dc:	f3bf 8f6f 	isb	sy
1a0023e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0023e4:	4a0a      	ldr	r2, [pc, #40]	; (1a002410 <vPortEnterCritical+0x3c>)
1a0023e6:	6813      	ldr	r3, [r2, #0]
1a0023e8:	3301      	adds	r3, #1
1a0023ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0023ec:	2b01      	cmp	r3, #1
1a0023ee:	d000      	beq.n	1a0023f2 <vPortEnterCritical+0x1e>
}
1a0023f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0023f2:	4b08      	ldr	r3, [pc, #32]	; (1a002414 <vPortEnterCritical+0x40>)
1a0023f4:	681b      	ldr	r3, [r3, #0]
1a0023f6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0023fa:	d0f9      	beq.n	1a0023f0 <vPortEnterCritical+0x1c>
1a0023fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002400:	f383 8811 	msr	BASEPRI, r3
1a002404:	f3bf 8f6f 	isb	sy
1a002408:	f3bf 8f4f 	dsb	sy
1a00240c:	e7fe      	b.n	1a00240c <vPortEnterCritical+0x38>
1a00240e:	bf00      	nop
1a002410:	10000004 	.word	0x10000004
1a002414:	e000ed04 	.word	0xe000ed04

1a002418 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002418:	4b09      	ldr	r3, [pc, #36]	; (1a002440 <vPortExitCritical+0x28>)
1a00241a:	681b      	ldr	r3, [r3, #0]
1a00241c:	b943      	cbnz	r3, 1a002430 <vPortExitCritical+0x18>
1a00241e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002422:	f383 8811 	msr	BASEPRI, r3
1a002426:	f3bf 8f6f 	isb	sy
1a00242a:	f3bf 8f4f 	dsb	sy
1a00242e:	e7fe      	b.n	1a00242e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002430:	3b01      	subs	r3, #1
1a002432:	4a03      	ldr	r2, [pc, #12]	; (1a002440 <vPortExitCritical+0x28>)
1a002434:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002436:	b90b      	cbnz	r3, 1a00243c <vPortExitCritical+0x24>
	__asm volatile
1a002438:	f383 8811 	msr	BASEPRI, r3
}
1a00243c:	4770      	bx	lr
1a00243e:	bf00      	nop
1a002440:	10000004 	.word	0x10000004
1a002444:	ffffffff 	.word	0xffffffff
1a002448:	ffffffff 	.word	0xffffffff
1a00244c:	ffffffff 	.word	0xffffffff

1a002450 <PendSV_Handler>:
	__asm volatile
1a002450:	f3ef 8009 	mrs	r0, PSP
1a002454:	f3bf 8f6f 	isb	sy
1a002458:	4b15      	ldr	r3, [pc, #84]	; (1a0024b0 <pxCurrentTCBConst>)
1a00245a:	681a      	ldr	r2, [r3, #0]
1a00245c:	f01e 0f10 	tst.w	lr, #16
1a002460:	bf08      	it	eq
1a002462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00246a:	6010      	str	r0, [r2, #0]
1a00246c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002470:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002474:	f380 8811 	msr	BASEPRI, r0
1a002478:	f3bf 8f4f 	dsb	sy
1a00247c:	f3bf 8f6f 	isb	sy
1a002480:	f7ff fa7c 	bl	1a00197c <vTaskSwitchContext>
1a002484:	f04f 0000 	mov.w	r0, #0
1a002488:	f380 8811 	msr	BASEPRI, r0
1a00248c:	bc09      	pop	{r0, r3}
1a00248e:	6819      	ldr	r1, [r3, #0]
1a002490:	6808      	ldr	r0, [r1, #0]
1a002492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002496:	f01e 0f10 	tst.w	lr, #16
1a00249a:	bf08      	it	eq
1a00249c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0024a0:	f380 8809 	msr	PSP, r0
1a0024a4:	f3bf 8f6f 	isb	sy
1a0024a8:	4770      	bx	lr
1a0024aa:	bf00      	nop
1a0024ac:	f3af 8000 	nop.w

1a0024b0 <pxCurrentTCBConst>:
1a0024b0:	100028a4 	.word	0x100028a4

1a0024b4 <SysTick_Handler>:
{
1a0024b4:	b508      	push	{r3, lr}
	__asm volatile
1a0024b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024ba:	f383 8811 	msr	BASEPRI, r3
1a0024be:	f3bf 8f6f 	isb	sy
1a0024c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0024c6:	f7ff f8db 	bl	1a001680 <xTaskIncrementTick>
1a0024ca:	b118      	cbz	r0, 1a0024d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0024cc:	4b03      	ldr	r3, [pc, #12]	; (1a0024dc <SysTick_Handler+0x28>)
1a0024ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0024d2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0024d4:	2300      	movs	r3, #0
1a0024d6:	f383 8811 	msr	BASEPRI, r3
}
1a0024da:	bd08      	pop	{r3, pc}
1a0024dc:	e000ed04 	.word	0xe000ed04

1a0024e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0024e0:	4a08      	ldr	r2, [pc, #32]	; (1a002504 <vPortSetupTimerInterrupt+0x24>)
1a0024e2:	2300      	movs	r3, #0
1a0024e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0024e6:	4908      	ldr	r1, [pc, #32]	; (1a002508 <vPortSetupTimerInterrupt+0x28>)
1a0024e8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0024ea:	4b08      	ldr	r3, [pc, #32]	; (1a00250c <vPortSetupTimerInterrupt+0x2c>)
1a0024ec:	681b      	ldr	r3, [r3, #0]
1a0024ee:	4908      	ldr	r1, [pc, #32]	; (1a002510 <vPortSetupTimerInterrupt+0x30>)
1a0024f0:	fba1 1303 	umull	r1, r3, r1, r3
1a0024f4:	099b      	lsrs	r3, r3, #6
1a0024f6:	3b01      	subs	r3, #1
1a0024f8:	4906      	ldr	r1, [pc, #24]	; (1a002514 <vPortSetupTimerInterrupt+0x34>)
1a0024fa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0024fc:	2307      	movs	r3, #7
1a0024fe:	6013      	str	r3, [r2, #0]
}
1a002500:	4770      	bx	lr
1a002502:	bf00      	nop
1a002504:	e000e010 	.word	0xe000e010
1a002508:	e000e018 	.word	0xe000e018
1a00250c:	10002bf4 	.word	0x10002bf4
1a002510:	10624dd3 	.word	0x10624dd3
1a002514:	e000e014 	.word	0xe000e014

1a002518 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002518:	4b3a      	ldr	r3, [pc, #232]	; (1a002604 <xPortStartScheduler+0xec>)
1a00251a:	681a      	ldr	r2, [r3, #0]
1a00251c:	4b3a      	ldr	r3, [pc, #232]	; (1a002608 <xPortStartScheduler+0xf0>)
1a00251e:	429a      	cmp	r2, r3
1a002520:	d00d      	beq.n	1a00253e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002522:	4b38      	ldr	r3, [pc, #224]	; (1a002604 <xPortStartScheduler+0xec>)
1a002524:	681a      	ldr	r2, [r3, #0]
1a002526:	4b39      	ldr	r3, [pc, #228]	; (1a00260c <xPortStartScheduler+0xf4>)
1a002528:	429a      	cmp	r2, r3
1a00252a:	d111      	bne.n	1a002550 <xPortStartScheduler+0x38>
	__asm volatile
1a00252c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002530:	f383 8811 	msr	BASEPRI, r3
1a002534:	f3bf 8f6f 	isb	sy
1a002538:	f3bf 8f4f 	dsb	sy
1a00253c:	e7fe      	b.n	1a00253c <xPortStartScheduler+0x24>
1a00253e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002542:	f383 8811 	msr	BASEPRI, r3
1a002546:	f3bf 8f6f 	isb	sy
1a00254a:	f3bf 8f4f 	dsb	sy
1a00254e:	e7fe      	b.n	1a00254e <xPortStartScheduler+0x36>
{
1a002550:	b510      	push	{r4, lr}
1a002552:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002554:	4b2e      	ldr	r3, [pc, #184]	; (1a002610 <xPortStartScheduler+0xf8>)
1a002556:	781a      	ldrb	r2, [r3, #0]
1a002558:	b2d2      	uxtb	r2, r2
1a00255a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00255c:	22ff      	movs	r2, #255	; 0xff
1a00255e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002560:	781b      	ldrb	r3, [r3, #0]
1a002562:	b2db      	uxtb	r3, r3
1a002564:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002568:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00256c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002570:	4a28      	ldr	r2, [pc, #160]	; (1a002614 <xPortStartScheduler+0xfc>)
1a002572:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002574:	4b28      	ldr	r3, [pc, #160]	; (1a002618 <xPortStartScheduler+0x100>)
1a002576:	2207      	movs	r2, #7
1a002578:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00257a:	e009      	b.n	1a002590 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00257c:	4a26      	ldr	r2, [pc, #152]	; (1a002618 <xPortStartScheduler+0x100>)
1a00257e:	6813      	ldr	r3, [r2, #0]
1a002580:	3b01      	subs	r3, #1
1a002582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002584:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002588:	005b      	lsls	r3, r3, #1
1a00258a:	b2db      	uxtb	r3, r3
1a00258c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002590:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002594:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002598:	d1f0      	bne.n	1a00257c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00259a:	4b1f      	ldr	r3, [pc, #124]	; (1a002618 <xPortStartScheduler+0x100>)
1a00259c:	681b      	ldr	r3, [r3, #0]
1a00259e:	2b04      	cmp	r3, #4
1a0025a0:	d008      	beq.n	1a0025b4 <xPortStartScheduler+0x9c>
1a0025a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025a6:	f383 8811 	msr	BASEPRI, r3
1a0025aa:	f3bf 8f6f 	isb	sy
1a0025ae:	f3bf 8f4f 	dsb	sy
1a0025b2:	e7fe      	b.n	1a0025b2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0025b4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0025b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0025ba:	4a17      	ldr	r2, [pc, #92]	; (1a002618 <xPortStartScheduler+0x100>)
1a0025bc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0025be:	9b01      	ldr	r3, [sp, #4]
1a0025c0:	b2db      	uxtb	r3, r3
1a0025c2:	4a13      	ldr	r2, [pc, #76]	; (1a002610 <xPortStartScheduler+0xf8>)
1a0025c4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0025c6:	4b15      	ldr	r3, [pc, #84]	; (1a00261c <xPortStartScheduler+0x104>)
1a0025c8:	681a      	ldr	r2, [r3, #0]
1a0025ca:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0025ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0025d0:	681a      	ldr	r2, [r3, #0]
1a0025d2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0025d6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0025d8:	f7ff ff82 	bl	1a0024e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0025dc:	2400      	movs	r4, #0
1a0025de:	4b10      	ldr	r3, [pc, #64]	; (1a002620 <xPortStartScheduler+0x108>)
1a0025e0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0025e2:	f7ff fec1 	bl	1a002368 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0025e6:	4a0f      	ldr	r2, [pc, #60]	; (1a002624 <xPortStartScheduler+0x10c>)
1a0025e8:	6813      	ldr	r3, [r2, #0]
1a0025ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0025ee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0025f0:	f7ff fea6 	bl	1a002340 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0025f4:	f7ff f9c2 	bl	1a00197c <vTaskSwitchContext>
	prvTaskExitError();
1a0025f8:	f7ff fe82 	bl	1a002300 <prvTaskExitError>
}
1a0025fc:	4620      	mov	r0, r4
1a0025fe:	b002      	add	sp, #8
1a002600:	bd10      	pop	{r4, pc}
1a002602:	bf00      	nop
1a002604:	e000ed00 	.word	0xe000ed00
1a002608:	410fc271 	.word	0x410fc271
1a00260c:	410fc270 	.word	0x410fc270
1a002610:	e000e400 	.word	0xe000e400
1a002614:	10002af8 	.word	0x10002af8
1a002618:	10002afc 	.word	0x10002afc
1a00261c:	e000ed20 	.word	0xe000ed20
1a002620:	10000004 	.word	0x10000004
1a002624:	e000ef34 	.word	0xe000ef34

1a002628 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002628:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00262c:	2b0f      	cmp	r3, #15
1a00262e:	d90f      	bls.n	1a002650 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002630:	4a10      	ldr	r2, [pc, #64]	; (1a002674 <vPortValidateInterruptPriority+0x4c>)
1a002632:	5c9b      	ldrb	r3, [r3, r2]
1a002634:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002636:	4a10      	ldr	r2, [pc, #64]	; (1a002678 <vPortValidateInterruptPriority+0x50>)
1a002638:	7812      	ldrb	r2, [r2, #0]
1a00263a:	429a      	cmp	r2, r3
1a00263c:	d908      	bls.n	1a002650 <vPortValidateInterruptPriority+0x28>
1a00263e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002642:	f383 8811 	msr	BASEPRI, r3
1a002646:	f3bf 8f6f 	isb	sy
1a00264a:	f3bf 8f4f 	dsb	sy
1a00264e:	e7fe      	b.n	1a00264e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002650:	4b0a      	ldr	r3, [pc, #40]	; (1a00267c <vPortValidateInterruptPriority+0x54>)
1a002652:	681b      	ldr	r3, [r3, #0]
1a002654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002658:	4a09      	ldr	r2, [pc, #36]	; (1a002680 <vPortValidateInterruptPriority+0x58>)
1a00265a:	6812      	ldr	r2, [r2, #0]
1a00265c:	4293      	cmp	r3, r2
1a00265e:	d908      	bls.n	1a002672 <vPortValidateInterruptPriority+0x4a>
1a002660:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002664:	f383 8811 	msr	BASEPRI, r3
1a002668:	f3bf 8f6f 	isb	sy
1a00266c:	f3bf 8f4f 	dsb	sy
1a002670:	e7fe      	b.n	1a002670 <vPortValidateInterruptPriority+0x48>
	}
1a002672:	4770      	bx	lr
1a002674:	e000e3f0 	.word	0xe000e3f0
1a002678:	10002af8 	.word	0x10002af8
1a00267c:	e000ed0c 	.word	0xe000ed0c
1a002680:	10002afc 	.word	0x10002afc

1a002684 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002684:	4b04      	ldr	r3, [pc, #16]	; (1a002698 <cyclesCounterInit+0x14>)
1a002686:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a002688:	4b04      	ldr	r3, [pc, #16]	; (1a00269c <cyclesCounterInit+0x18>)
1a00268a:	681a      	ldr	r2, [r3, #0]
1a00268c:	6813      	ldr	r3, [r2, #0]
1a00268e:	f043 0301 	orr.w	r3, r3, #1
1a002692:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002694:	2001      	movs	r0, #1
1a002696:	4770      	bx	lr
1a002698:	10000008 	.word	0x10000008
1a00269c:	1000000c 	.word	0x1000000c

1a0026a0 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0026a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0026a4:	0083      	lsls	r3, r0, #2
1a0026a6:	4a03      	ldr	r2, [pc, #12]	; (1a0026b4 <uartTxReady+0x14>)
1a0026a8:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0026aa:	6958      	ldr	r0, [r3, #20]
}
1a0026ac:	f000 0020 	and.w	r0, r0, #32
1a0026b0:	4770      	bx	lr
1a0026b2:	bf00      	nop
1a0026b4:	1a0040ac 	.word	0x1a0040ac

1a0026b8 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0026b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0026bc:	0083      	lsls	r3, r0, #2
1a0026be:	4a02      	ldr	r2, [pc, #8]	; (1a0026c8 <uartTxWrite+0x10>)
1a0026c0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0026c2:	6019      	str	r1, [r3, #0]
}
1a0026c4:	4770      	bx	lr
1a0026c6:	bf00      	nop
1a0026c8:	1a0040ac 	.word	0x1a0040ac

1a0026cc <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0026cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0026d0:	4680      	mov	r8, r0
1a0026d2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0026d4:	4c19      	ldr	r4, [pc, #100]	; (1a00273c <uartInit+0x70>)
1a0026d6:	0045      	lsls	r5, r0, #1
1a0026d8:	182a      	adds	r2, r5, r0
1a0026da:	0093      	lsls	r3, r2, #2
1a0026dc:	18e6      	adds	r6, r4, r3
1a0026de:	58e7      	ldr	r7, [r4, r3]
1a0026e0:	4638      	mov	r0, r7
1a0026e2:	f000 fcd3 	bl	1a00308c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0026e6:	4649      	mov	r1, r9
1a0026e8:	4638      	mov	r0, r7
1a0026ea:	f000 fcf9 	bl	1a0030e0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0026ee:	2307      	movs	r3, #7
1a0026f0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0026f2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0026f4:	2301      	movs	r3, #1
1a0026f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0026f8:	7930      	ldrb	r0, [r6, #4]
1a0026fa:	7973      	ldrb	r3, [r6, #5]
1a0026fc:	79b2      	ldrb	r2, [r6, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0026fe:	f042 0218 	orr.w	r2, r2, #24
1a002702:	490f      	ldr	r1, [pc, #60]	; (1a002740 <uartInit+0x74>)
1a002704:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00270c:	79f0      	ldrb	r0, [r6, #7]
1a00270e:	7a33      	ldrb	r3, [r6, #8]
1a002710:	7a72      	ldrb	r2, [r6, #9]
1a002712:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002716:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00271e:	f1b8 0f01 	cmp.w	r8, #1
1a002722:	d001      	beq.n	1a002728 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002728:	4a06      	ldr	r2, [pc, #24]	; (1a002744 <uartInit+0x78>)
1a00272a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00272c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002730:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002732:	221a      	movs	r2, #26
1a002734:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002738:	e7f4      	b.n	1a002724 <uartInit+0x58>
1a00273a:	bf00      	nop
1a00273c:	1a0040ac 	.word	0x1a0040ac
1a002740:	40086000 	.word	0x40086000
1a002744:	40081000 	.word	0x40081000

1a002748 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a002748:	b538      	push	{r3, r4, r5, lr}
1a00274a:	4604      	mov	r4, r0
1a00274c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00274e:	4620      	mov	r0, r4
1a002750:	f7ff ffa6 	bl	1a0026a0 <uartTxReady>
1a002754:	2800      	cmp	r0, #0
1a002756:	d0fa      	beq.n	1a00274e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a002758:	4629      	mov	r1, r5
1a00275a:	4620      	mov	r0, r4
1a00275c:	f7ff ffac 	bl	1a0026b8 <uartTxWrite>
}
1a002760:	bd38      	pop	{r3, r4, r5, pc}

1a002762 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002762:	b538      	push	{r3, r4, r5, lr}
1a002764:	4605      	mov	r5, r0
1a002766:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a002768:	e003      	b.n	1a002772 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a00276a:	4628      	mov	r0, r5
1a00276c:	f7ff ffec 	bl	1a002748 <uartWriteByte>
      str++;
1a002770:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a002772:	7821      	ldrb	r1, [r4, #0]
1a002774:	2900      	cmp	r1, #0
1a002776:	d1f8      	bne.n	1a00276a <uartWriteString+0x8>
   }
}
1a002778:	bd38      	pop	{r3, r4, r5, pc}
1a00277a:	Address 0x000000001a00277a is out of bounds.


1a00277c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00277c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a002780:	4908      	ldr	r1, [pc, #32]	; (1a0027a4 <tickerCallback+0x28>)
1a002782:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002786:	f112 0b01 	adds.w	fp, r2, #1
1a00278a:	f143 0c00 	adc.w	ip, r3, #0
1a00278e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002792:	4b05      	ldr	r3, [pc, #20]	; (1a0027a8 <tickerCallback+0x2c>)
1a002794:	681b      	ldr	r3, [r3, #0]
1a002796:	b113      	cbz	r3, 1a00279e <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002798:	4a04      	ldr	r2, [pc, #16]	; (1a0027ac <tickerCallback+0x30>)
1a00279a:	6810      	ldr	r0, [r2, #0]
1a00279c:	4798      	blx	r3
   }
}
1a00279e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0027a2:	bf00      	nop
1a0027a4:	10002b08 	.word	0x10002b08
1a0027a8:	10002b10 	.word	0x10002b10
1a0027ac:	10002b00 	.word	0x10002b00

1a0027b0 <tickInit>:
{
1a0027b0:	b510      	push	{r4, lr}
1a0027b2:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a0027b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0027f0 <tickInit+0x40>)
1a0027b6:	9301      	str	r3, [sp, #4]
1a0027b8:	4b0e      	ldr	r3, [pc, #56]	; (1a0027f4 <tickInit+0x44>)
1a0027ba:	9300      	str	r3, [sp, #0]
1a0027bc:	2300      	movs	r3, #0
1a0027be:	2201      	movs	r2, #1
1a0027c0:	4601      	mov	r1, r0
1a0027c2:	480d      	ldr	r0, [pc, #52]	; (1a0027f8 <tickInit+0x48>)
1a0027c4:	f7ff fbfa 	bl	1a001fbc <xTimerCreateStatic>
         if (h == NULL)
1a0027c8:	b178      	cbz	r0, 1a0027ea <tickInit+0x3a>
1a0027ca:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a0027cc:	f7fe ff52 	bl	1a001674 <xTaskGetTickCount>
1a0027d0:	2300      	movs	r3, #0
1a0027d2:	9300      	str	r3, [sp, #0]
1a0027d4:	4602      	mov	r2, r0
1a0027d6:	2101      	movs	r1, #1
1a0027d8:	4620      	mov	r0, r4
1a0027da:	f7ff fc15 	bl	1a002008 <xTimerGenericCommand>
1a0027de:	2801      	cmp	r0, #1
1a0027e0:	bf14      	ite	ne
1a0027e2:	2000      	movne	r0, #0
1a0027e4:	2001      	moveq	r0, #1
}
1a0027e6:	b002      	add	sp, #8
1a0027e8:	bd10      	pop	{r4, pc}
            return 0;
1a0027ea:	2000      	movs	r0, #0
1a0027ec:	e7fb      	b.n	1a0027e6 <tickInit+0x36>
1a0027ee:	bf00      	nop
1a0027f0:	10002b14 	.word	0x10002b14
1a0027f4:	1a00277d 	.word	0x1a00277d
1a0027f8:	1a0040f4 	.word	0x1a0040f4

1a0027fc <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0027fc:	e7fe      	b.n	1a0027fc <errorOcurred>

1a0027fe <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0027fe:	4770      	bx	lr

1a002800 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002800:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002802:	2400      	movs	r4, #0
1a002804:	e001      	b.n	1a00280a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002806:	3401      	adds	r4, #1
1a002808:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00280a:	2c03      	cmp	r4, #3
1a00280c:	d812      	bhi.n	1a002834 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00280e:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002810:	4b09      	ldr	r3, [pc, #36]	; (1a002838 <TIMER0_IRQHandler+0x38>)
1a002812:	681a      	ldr	r2, [r3, #0]
1a002814:	f004 010f 	and.w	r1, r4, #15
1a002818:	2301      	movs	r3, #1
1a00281a:	408b      	lsls	r3, r1
1a00281c:	421a      	tst	r2, r3
1a00281e:	d0f2      	beq.n	1a002806 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002820:	4b06      	ldr	r3, [pc, #24]	; (1a00283c <TIMER0_IRQHandler+0x3c>)
1a002822:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002826:	2000      	movs	r0, #0
1a002828:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00282a:	2301      	movs	r3, #1
1a00282c:	40ab      	lsls	r3, r5
1a00282e:	4a02      	ldr	r2, [pc, #8]	; (1a002838 <TIMER0_IRQHandler+0x38>)
1a002830:	6013      	str	r3, [r2, #0]
1a002832:	e7e8      	b.n	1a002806 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002834:	bd38      	pop	{r3, r4, r5, pc}
1a002836:	bf00      	nop
1a002838:	40084000 	.word	0x40084000
1a00283c:	10000010 	.word	0x10000010

1a002840 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002840:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002842:	2400      	movs	r4, #0
1a002844:	e001      	b.n	1a00284a <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002846:	3401      	adds	r4, #1
1a002848:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00284a:	2c03      	cmp	r4, #3
1a00284c:	d813      	bhi.n	1a002876 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00284e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002850:	4b09      	ldr	r3, [pc, #36]	; (1a002878 <TIMER1_IRQHandler+0x38>)
1a002852:	681a      	ldr	r2, [r3, #0]
1a002854:	f004 010f 	and.w	r1, r4, #15
1a002858:	2301      	movs	r3, #1
1a00285a:	408b      	lsls	r3, r1
1a00285c:	421a      	tst	r2, r3
1a00285e:	d0f2      	beq.n	1a002846 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002860:	1d23      	adds	r3, r4, #4
1a002862:	4a06      	ldr	r2, [pc, #24]	; (1a00287c <TIMER1_IRQHandler+0x3c>)
1a002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002868:	2000      	movs	r0, #0
1a00286a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00286c:	2301      	movs	r3, #1
1a00286e:	40ab      	lsls	r3, r5
1a002870:	4a01      	ldr	r2, [pc, #4]	; (1a002878 <TIMER1_IRQHandler+0x38>)
1a002872:	6013      	str	r3, [r2, #0]
1a002874:	e7e7      	b.n	1a002846 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002876:	bd38      	pop	{r3, r4, r5, pc}
1a002878:	40085000 	.word	0x40085000
1a00287c:	10000010 	.word	0x10000010

1a002880 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002880:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002882:	2400      	movs	r4, #0
1a002884:	e001      	b.n	1a00288a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002886:	3401      	adds	r4, #1
1a002888:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00288a:	2c03      	cmp	r4, #3
1a00288c:	d814      	bhi.n	1a0028b8 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00288e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002890:	4b0a      	ldr	r3, [pc, #40]	; (1a0028bc <TIMER2_IRQHandler+0x3c>)
1a002892:	681a      	ldr	r2, [r3, #0]
1a002894:	f004 010f 	and.w	r1, r4, #15
1a002898:	2301      	movs	r3, #1
1a00289a:	408b      	lsls	r3, r1
1a00289c:	421a      	tst	r2, r3
1a00289e:	d0f2      	beq.n	1a002886 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0028a0:	f104 0308 	add.w	r3, r4, #8
1a0028a4:	4a06      	ldr	r2, [pc, #24]	; (1a0028c0 <TIMER2_IRQHandler+0x40>)
1a0028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0028aa:	2000      	movs	r0, #0
1a0028ac:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0028ae:	2301      	movs	r3, #1
1a0028b0:	40ab      	lsls	r3, r5
1a0028b2:	4a02      	ldr	r2, [pc, #8]	; (1a0028bc <TIMER2_IRQHandler+0x3c>)
1a0028b4:	6013      	str	r3, [r2, #0]
1a0028b6:	e7e6      	b.n	1a002886 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0028b8:	bd38      	pop	{r3, r4, r5, pc}
1a0028ba:	bf00      	nop
1a0028bc:	400c3000 	.word	0x400c3000
1a0028c0:	10000010 	.word	0x10000010

1a0028c4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0028c4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0028c6:	2400      	movs	r4, #0
1a0028c8:	e001      	b.n	1a0028ce <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0028ca:	3401      	adds	r4, #1
1a0028cc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0028ce:	2c03      	cmp	r4, #3
1a0028d0:	d814      	bhi.n	1a0028fc <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0028d2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0028d4:	4b0a      	ldr	r3, [pc, #40]	; (1a002900 <TIMER3_IRQHandler+0x3c>)
1a0028d6:	681a      	ldr	r2, [r3, #0]
1a0028d8:	f004 010f 	and.w	r1, r4, #15
1a0028dc:	2301      	movs	r3, #1
1a0028de:	408b      	lsls	r3, r1
1a0028e0:	421a      	tst	r2, r3
1a0028e2:	d0f2      	beq.n	1a0028ca <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0028e4:	f104 030c 	add.w	r3, r4, #12
1a0028e8:	4a06      	ldr	r2, [pc, #24]	; (1a002904 <TIMER3_IRQHandler+0x40>)
1a0028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0028ee:	2000      	movs	r0, #0
1a0028f0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0028f2:	2301      	movs	r3, #1
1a0028f4:	40ab      	lsls	r3, r5
1a0028f6:	4a02      	ldr	r2, [pc, #8]	; (1a002900 <TIMER3_IRQHandler+0x3c>)
1a0028f8:	6013      	str	r3, [r2, #0]
1a0028fa:	e7e6      	b.n	1a0028ca <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0028fc:	bd38      	pop	{r3, r4, r5, pc}
1a0028fe:	bf00      	nop
1a002900:	400c4000 	.word	0x400c4000
1a002904:	10000010 	.word	0x10000010

1a002908 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002908:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00290a:	4d0b      	ldr	r5, [pc, #44]	; (1a002938 <gpioObtainPinInit+0x30>)
1a00290c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002910:	182c      	adds	r4, r5, r0
1a002912:	5628      	ldrsb	r0, [r5, r0]
1a002914:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002916:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00291a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00291c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002920:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002922:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002926:	9b02      	ldr	r3, [sp, #8]
1a002928:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00292a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00292e:	9b03      	ldr	r3, [sp, #12]
1a002930:	701a      	strb	r2, [r3, #0]
}
1a002932:	bc30      	pop	{r4, r5}
1a002934:	4770      	bx	lr
1a002936:	bf00      	nop
1a002938:	1a004100 	.word	0x1a004100

1a00293c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00293c:	b570      	push	{r4, r5, r6, lr}
1a00293e:	b084      	sub	sp, #16
1a002940:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002942:	2300      	movs	r3, #0
1a002944:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002948:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00294c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002950:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002954:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002958:	f10d 030b 	add.w	r3, sp, #11
1a00295c:	9301      	str	r3, [sp, #4]
1a00295e:	ab03      	add	r3, sp, #12
1a002960:	9300      	str	r3, [sp, #0]
1a002962:	f10d 030d 	add.w	r3, sp, #13
1a002966:	f10d 020e 	add.w	r2, sp, #14
1a00296a:	f10d 010f 	add.w	r1, sp, #15
1a00296e:	f7ff ffcb 	bl	1a002908 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002972:	2c05      	cmp	r4, #5
1a002974:	f200 80a5 	bhi.w	1a002ac2 <gpioInit+0x186>
1a002978:	e8df f004 	tbb	[pc, r4]
1a00297c:	45278109 	.word	0x45278109
1a002980:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002982:	4851      	ldr	r0, [pc, #324]	; (1a002ac8 <gpioInit+0x18c>)
1a002984:	f000 ffa0 	bl	1a0038c8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002988:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00298a:	b004      	add	sp, #16
1a00298c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00298e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002992:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002996:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00299a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00299e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0029a2:	494a      	ldr	r1, [pc, #296]	; (1a002acc <gpioInit+0x190>)
1a0029a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0029a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0029ac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0029b0:	2001      	movs	r0, #1
1a0029b2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0029b6:	4c44      	ldr	r4, [pc, #272]	; (1a002ac8 <gpioInit+0x18c>)
1a0029b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0029bc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0029c0:	ea22 0201 	bic.w	r2, r2, r1
1a0029c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0029c8:	e7df      	b.n	1a00298a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0029ca:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0029ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0029d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0029d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0029da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0029de:	493b      	ldr	r1, [pc, #236]	; (1a002acc <gpioInit+0x190>)
1a0029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0029e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0029e8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0029ec:	2001      	movs	r0, #1
1a0029ee:	fa00 f102 	lsl.w	r1, r0, r2
1a0029f2:	4c35      	ldr	r4, [pc, #212]	; (1a002ac8 <gpioInit+0x18c>)
1a0029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0029f8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0029fc:	ea22 0201 	bic.w	r2, r2, r1
1a002a00:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002a04:	e7c1      	b.n	1a00298a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002a06:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002a0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002a0e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002a12:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002a16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002a1a:	492c      	ldr	r1, [pc, #176]	; (1a002acc <gpioInit+0x190>)
1a002a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002a20:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002a24:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002a28:	2001      	movs	r0, #1
1a002a2a:	fa00 f102 	lsl.w	r1, r0, r2
1a002a2e:	4c26      	ldr	r4, [pc, #152]	; (1a002ac8 <gpioInit+0x18c>)
1a002a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002a34:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002a38:	ea22 0201 	bic.w	r2, r2, r1
1a002a3c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002a40:	e7a3      	b.n	1a00298a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002a42:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002a46:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002a4a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002a4e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002a52:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002a56:	491d      	ldr	r1, [pc, #116]	; (1a002acc <gpioInit+0x190>)
1a002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002a5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002a60:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002a64:	2001      	movs	r0, #1
1a002a66:	fa00 f102 	lsl.w	r1, r0, r2
1a002a6a:	4c17      	ldr	r4, [pc, #92]	; (1a002ac8 <gpioInit+0x18c>)
1a002a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002a70:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002a74:	ea22 0201 	bic.w	r2, r2, r1
1a002a78:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002a7c:	e785      	b.n	1a00298a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002a7e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002a82:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002a86:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002a8a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002a8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002a92:	490e      	ldr	r1, [pc, #56]	; (1a002acc <gpioInit+0x190>)
1a002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002a98:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002a9c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002aa0:	2001      	movs	r0, #1
1a002aa2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a002aa6:	4b08      	ldr	r3, [pc, #32]	; (1a002ac8 <gpioInit+0x18c>)
1a002aa8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002aac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002ab0:	4331      	orrs	r1, r6
1a002ab2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a002ab6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a002ab8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002abc:	2100      	movs	r1, #0
1a002abe:	5499      	strb	r1, [r3, r2]
1a002ac0:	e763      	b.n	1a00298a <gpioInit+0x4e>
      ret_val = 0;
1a002ac2:	2000      	movs	r0, #0
1a002ac4:	e761      	b.n	1a00298a <gpioInit+0x4e>
1a002ac6:	bf00      	nop
1a002ac8:	400f4000 	.word	0x400f4000
1a002acc:	40086000 	.word	0x40086000

1a002ad0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002ad0:	b510      	push	{r4, lr}
1a002ad2:	b084      	sub	sp, #16
1a002ad4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002ad6:	2300      	movs	r3, #0
1a002ad8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002adc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002ae0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002ae4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002ae8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002aec:	f10d 030b 	add.w	r3, sp, #11
1a002af0:	9301      	str	r3, [sp, #4]
1a002af2:	ab03      	add	r3, sp, #12
1a002af4:	9300      	str	r3, [sp, #0]
1a002af6:	f10d 030d 	add.w	r3, sp, #13
1a002afa:	f10d 020e 	add.w	r2, sp, #14
1a002afe:	f10d 010f 	add.w	r1, sp, #15
1a002b02:	f7ff ff01 	bl	1a002908 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002b06:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002b0a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002b0e:	3400      	adds	r4, #0
1a002b10:	bf18      	it	ne
1a002b12:	2401      	movne	r4, #1
1a002b14:	015b      	lsls	r3, r3, #5
1a002b16:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002b1a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002b1e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002b20:	2001      	movs	r0, #1
1a002b22:	b004      	add	sp, #16
1a002b24:	bd10      	pop	{r4, pc}

1a002b26 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002b26:	b500      	push	{lr}
1a002b28:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002b2a:	2300      	movs	r3, #0
1a002b2c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002b30:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002b34:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002b38:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002b3c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002b40:	f10d 030b 	add.w	r3, sp, #11
1a002b44:	9301      	str	r3, [sp, #4]
1a002b46:	ab03      	add	r3, sp, #12
1a002b48:	9300      	str	r3, [sp, #0]
1a002b4a:	f10d 030d 	add.w	r3, sp, #13
1a002b4e:	f10d 020e 	add.w	r2, sp, #14
1a002b52:	f10d 010f 	add.w	r1, sp, #15
1a002b56:	f7ff fed7 	bl	1a002908 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002b5a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002b5e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a002b62:	015b      	lsls	r3, r3, #5
1a002b64:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002b68:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002b6c:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a002b6e:	3000      	adds	r0, #0
1a002b70:	bf18      	it	ne
1a002b72:	2001      	movne	r0, #1
1a002b74:	b005      	add	sp, #20
1a002b76:	f85d fb04 	ldr.w	pc, [sp], #4
1a002b7a:	Address 0x000000001a002b7a is out of bounds.


1a002b7c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002b7c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002b7e:	4b04      	ldr	r3, [pc, #16]	; (1a002b90 <USB0_IRQHandler+0x14>)
1a002b80:	681b      	ldr	r3, [r3, #0]
1a002b82:	681b      	ldr	r3, [r3, #0]
1a002b84:	68db      	ldr	r3, [r3, #12]
1a002b86:	4a03      	ldr	r2, [pc, #12]	; (1a002b94 <USB0_IRQHandler+0x18>)
1a002b88:	6810      	ldr	r0, [r2, #0]
1a002b8a:	4798      	blx	r3
}
1a002b8c:	bd08      	pop	{r3, pc}
1a002b8e:	bf00      	nop
1a002b90:	10002bf0 	.word	0x10002bf0
1a002b94:	10002b44 	.word	0x10002b44

1a002b98 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002b98:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002b9a:	f000 fb99 	bl	1a0032d0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002b9e:	4b3a      	ldr	r3, [pc, #232]	; (1a002c88 <boardInit+0xf0>)
1a002ba0:	6818      	ldr	r0, [r3, #0]
1a002ba2:	f7ff fd6f 	bl	1a002684 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002ba6:	2001      	movs	r0, #1
1a002ba8:	2100      	movs	r1, #0
1a002baa:	f7ff fe01 	bl	1a0027b0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a002bae:	2105      	movs	r1, #5
1a002bb0:	2000      	movs	r0, #0
1a002bb2:	f7ff fec3 	bl	1a00293c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002bb6:	2100      	movs	r1, #0
1a002bb8:	2024      	movs	r0, #36	; 0x24
1a002bba:	f7ff febf 	bl	1a00293c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002bbe:	2100      	movs	r1, #0
1a002bc0:	2025      	movs	r0, #37	; 0x25
1a002bc2:	f7ff febb 	bl	1a00293c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002bc6:	2100      	movs	r1, #0
1a002bc8:	2026      	movs	r0, #38	; 0x26
1a002bca:	f7ff feb7 	bl	1a00293c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002bce:	2100      	movs	r1, #0
1a002bd0:	2027      	movs	r0, #39	; 0x27
1a002bd2:	f7ff feb3 	bl	1a00293c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002bd6:	2101      	movs	r1, #1
1a002bd8:	2028      	movs	r0, #40	; 0x28
1a002bda:	f7ff feaf 	bl	1a00293c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002bde:	2101      	movs	r1, #1
1a002be0:	2029      	movs	r0, #41	; 0x29
1a002be2:	f7ff feab 	bl	1a00293c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002be6:	2101      	movs	r1, #1
1a002be8:	202a      	movs	r0, #42	; 0x2a
1a002bea:	f7ff fea7 	bl	1a00293c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002bee:	2101      	movs	r1, #1
1a002bf0:	202b      	movs	r0, #43	; 0x2b
1a002bf2:	f7ff fea3 	bl	1a00293c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a002bf6:	2101      	movs	r1, #1
1a002bf8:	202c      	movs	r0, #44	; 0x2c
1a002bfa:	f7ff fe9f 	bl	1a00293c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002bfe:	2101      	movs	r1, #1
1a002c00:	202d      	movs	r0, #45	; 0x2d
1a002c02:	f7ff fe9b 	bl	1a00293c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a002c06:	2100      	movs	r1, #0
1a002c08:	202e      	movs	r0, #46	; 0x2e
1a002c0a:	f7ff fe97 	bl	1a00293c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002c0e:	2100      	movs	r1, #0
1a002c10:	202f      	movs	r0, #47	; 0x2f
1a002c12:	f7ff fe93 	bl	1a00293c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a002c16:	2100      	movs	r1, #0
1a002c18:	2030      	movs	r0, #48	; 0x30
1a002c1a:	f7ff fe8f 	bl	1a00293c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002c1e:	2100      	movs	r1, #0
1a002c20:	2031      	movs	r0, #49	; 0x31
1a002c22:	f7ff fe8b 	bl	1a00293c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a002c26:	2100      	movs	r1, #0
1a002c28:	2032      	movs	r0, #50	; 0x32
1a002c2a:	f7ff fe87 	bl	1a00293c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002c2e:	2100      	movs	r1, #0
1a002c30:	2033      	movs	r0, #51	; 0x33
1a002c32:	f7ff fe83 	bl	1a00293c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a002c36:	2100      	movs	r1, #0
1a002c38:	2034      	movs	r0, #52	; 0x34
1a002c3a:	f7ff fe7f 	bl	1a00293c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002c3e:	2100      	movs	r1, #0
1a002c40:	2035      	movs	r0, #53	; 0x35
1a002c42:	f7ff fe7b 	bl	1a00293c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002c46:	2101      	movs	r1, #1
1a002c48:	2036      	movs	r0, #54	; 0x36
1a002c4a:	f7ff fe77 	bl	1a00293c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a002c4e:	2101      	movs	r1, #1
1a002c50:	2037      	movs	r0, #55	; 0x37
1a002c52:	f7ff fe73 	bl	1a00293c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002c56:	2101      	movs	r1, #1
1a002c58:	2038      	movs	r0, #56	; 0x38
1a002c5a:	f7ff fe6f 	bl	1a00293c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a002c5e:	2101      	movs	r1, #1
1a002c60:	2039      	movs	r0, #57	; 0x39
1a002c62:	f7ff fe6b 	bl	1a00293c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002c66:	2101      	movs	r1, #1
1a002c68:	203a      	movs	r0, #58	; 0x3a
1a002c6a:	f7ff fe67 	bl	1a00293c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a002c6e:	2101      	movs	r1, #1
1a002c70:	203b      	movs	r0, #59	; 0x3b
1a002c72:	f7ff fe63 	bl	1a00293c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002c76:	2101      	movs	r1, #1
1a002c78:	203c      	movs	r0, #60	; 0x3c
1a002c7a:	f7ff fe5f 	bl	1a00293c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a002c7e:	2101      	movs	r1, #1
1a002c80:	203d      	movs	r0, #61	; 0x3d
1a002c82:	f7ff fe5b 	bl	1a00293c <gpioInit>

}
1a002c86:	bd08      	pop	{r3, pc}
1a002c88:	10002bf4 	.word	0x10002bf4

1a002c8c <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002c8c:	b508      	push	{r3, lr}
1a002c8e:	460b      	mov	r3, r1
   *printer = uart;
1a002c90:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a002c92:	4611      	mov	r1, r2
1a002c94:	4618      	mov	r0, r3
1a002c96:	f7ff fd19 	bl	1a0026cc <uartInit>
}
1a002c9a:	bd08      	pop	{r3, pc}

1a002c9c <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a002c9c:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a002c9e:	f7ff fd60 	bl	1a002762 <uartWriteString>
}
1a002ca2:	bd08      	pop	{r3, pc}

1a002ca4 <printEnter>:

void printEnter( print_t printer )
{
1a002ca4:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a002ca6:	4902      	ldr	r1, [pc, #8]	; (1a002cb0 <printEnter+0xc>)
1a002ca8:	f7ff fd5b 	bl	1a002762 <uartWriteString>
}
1a002cac:	bd08      	pop	{r3, pc}
1a002cae:	bf00      	nop
1a002cb0:	1a004238 	.word	0x1a004238

1a002cb4 <printIntFormat>:


// Print Integer

void printIntFormat( print_t printer, int64_t number, numberFormat_t format )
{
1a002cb4:	b510      	push	{r4, lr}
1a002cb6:	b092      	sub	sp, #72	; 0x48
1a002cb8:	4604      	mov	r4, r0
1a002cba:	4610      	mov	r0, r2
1a002cbc:	4619      	mov	r1, r3

   char strNumber[65];

   if( int64ToString( number, strNumber, format ) ) {
1a002cbe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
1a002cc2:	aa01      	add	r2, sp, #4
1a002cc4:	f000 f808 	bl	1a002cd8 <int64ToString>
1a002cc8:	b908      	cbnz	r0, 1a002cce <printIntFormat+0x1a>
      uartWriteString( printer, strNumber );
   }
}
1a002cca:	b012      	add	sp, #72	; 0x48
1a002ccc:	bd10      	pop	{r4, pc}
      uartWriteString( printer, strNumber );
1a002cce:	a901      	add	r1, sp, #4
1a002cd0:	4620      	mov	r0, r4
1a002cd2:	f7ff fd46 	bl	1a002762 <uartWriteString>
}
1a002cd6:	e7f8      	b.n	1a002cca <printIntFormat+0x16>

1a002cd8 <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a002cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002cdc:	4614      	mov	r4, r2
1a002cde:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a002ce0:	3b02      	subs	r3, #2
1a002ce2:	b2db      	uxtb	r3, r3
1a002ce4:	2b22      	cmp	r3, #34	; 0x22
1a002ce6:	d803      	bhi.n	1a002cf0 <int64ToString+0x18>
1a002ce8:	4680      	mov	r8, r0
1a002cea:	4689      	mov	r9, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a002cec:	4615      	mov	r5, r2
1a002cee:	e005      	b.n	1a002cfc <int64ToString+0x24>
      *result = '\0';
1a002cf0:	2000      	movs	r0, #0
1a002cf2:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a002cf4:	e034      	b.n	1a002d60 <int64ToString+0x88>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a002cf6:	4635      	mov	r5, r6
      value /= (int64_t)base;
1a002cf8:	4680      	mov	r8, r0
1a002cfa:	4689      	mov	r9, r1
1a002cfc:	fa5f f68a 	uxtb.w	r6, sl
1a002d00:	2700      	movs	r7, #0
1a002d02:	4632      	mov	r2, r6
1a002d04:	463b      	mov	r3, r7
1a002d06:	4640      	mov	r0, r8
1a002d08:	4649      	mov	r1, r9
1a002d0a:	f000 ff65 	bl	1a003bd8 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a002d0e:	fba6 bc00 	umull	fp, ip, r6, r0
1a002d12:	ebb8 020b 	subs.w	r2, r8, fp
1a002d16:	f112 0b23 	adds.w	fp, r2, #35	; 0x23
1a002d1a:	1c6e      	adds	r6, r5, #1
1a002d1c:	4b11      	ldr	r3, [pc, #68]	; (1a002d64 <int64ToString+0x8c>)
1a002d1e:	eb0b 0203 	add.w	r2, fp, r3
1a002d22:	7813      	ldrb	r3, [r2, #0]
1a002d24:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a002d26:	ea50 0301 	orrs.w	r3, r0, r1
1a002d2a:	d1e4      	bne.n	1a002cf6 <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a002d2c:	f1b8 0f00 	cmp.w	r8, #0
1a002d30:	f179 0300 	sbcs.w	r3, r9, #0
1a002d34:	db03      	blt.n	1a002d3e <int64ToString+0x66>
   *ptr-- = '\0';
1a002d36:	1e73      	subs	r3, r6, #1
1a002d38:	2200      	movs	r2, #0
1a002d3a:	7032      	strb	r2, [r6, #0]
   while(ptr1 < ptr) {
1a002d3c:	e00d      	b.n	1a002d5a <int64ToString+0x82>
   if (tmp_value < 0) *ptr++ = '-';
1a002d3e:	1cae      	adds	r6, r5, #2
1a002d40:	232d      	movs	r3, #45	; 0x2d
1a002d42:	706b      	strb	r3, [r5, #1]
1a002d44:	e7f7      	b.n	1a002d36 <int64ToString+0x5e>
      tmp_char = *ptr;
1a002d46:	461a      	mov	r2, r3
1a002d48:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a002d4c:	4621      	mov	r1, r4
1a002d4e:	f811 5b01 	ldrb.w	r5, [r1], #1
1a002d52:	701d      	strb	r5, [r3, #0]
      *ptr1++ = tmp_char;
1a002d54:	7020      	strb	r0, [r4, #0]
1a002d56:	460c      	mov	r4, r1
      *ptr--= *ptr1;
1a002d58:	4613      	mov	r3, r2
   while(ptr1 < ptr) {
1a002d5a:	42a3      	cmp	r3, r4
1a002d5c:	d8f3      	bhi.n	1a002d46 <int64ToString+0x6e>
   }
   return TRUE;
1a002d5e:	2001      	movs	r0, #1
}
1a002d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002d64:	1a00423c 	.word	0x1a00423c

1a002d68 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002d68:	2301      	movs	r3, #1
1a002d6a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002d6e:	4b01      	ldr	r3, [pc, #4]	; (1a002d74 <clearInterrupt+0xc>)
1a002d70:	6258      	str	r0, [r3, #36]	; 0x24
}
1a002d72:	4770      	bx	lr
1a002d74:	40087000 	.word	0x40087000

1a002d78 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002d7a:	4b12      	ldr	r3, [pc, #72]	; (1a002dc4 <serveInterrupt+0x4c>)
1a002d7c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a002d7e:	4b12      	ldr	r3, [pc, #72]	; (1a002dc8 <serveInterrupt+0x50>)
1a002d80:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a002d82:	2301      	movs	r3, #1
1a002d84:	4083      	lsls	r3, r0
1a002d86:	420b      	tst	r3, r1
1a002d88:	d111      	bne.n	1a002dae <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002d8a:	4910      	ldr	r1, [pc, #64]	; (1a002dcc <serveInterrupt+0x54>)
1a002d8c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002d8e:	4d10      	ldr	r5, [pc, #64]	; (1a002dd0 <serveInterrupt+0x58>)
1a002d90:	0051      	lsls	r1, r2, #1
1a002d92:	188f      	adds	r7, r1, r2
1a002d94:	00fc      	lsls	r4, r7, #3
1a002d96:	4627      	mov	r7, r4
1a002d98:	442c      	add	r4, r5
1a002d9a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002d9c:	6864      	ldr	r4, [r4, #4]
1a002d9e:	1b36      	subs	r6, r6, r4
1a002da0:	443d      	add	r5, r7
1a002da2:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002da4:	4a08      	ldr	r2, [pc, #32]	; (1a002dc8 <serveInterrupt+0x50>)
1a002da6:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002da8:	f7ff ffde 	bl	1a002d68 <clearInterrupt>
}
1a002dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002dae:	4907      	ldr	r1, [pc, #28]	; (1a002dcc <serveInterrupt+0x54>)
1a002db0:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002db2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a002db6:	00d1      	lsls	r1, r2, #3
1a002db8:	4a05      	ldr	r2, [pc, #20]	; (1a002dd0 <serveInterrupt+0x58>)
1a002dba:	440a      	add	r2, r1
1a002dbc:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a002dbe:	4a02      	ldr	r2, [pc, #8]	; (1a002dc8 <serveInterrupt+0x50>)
1a002dc0:	61d3      	str	r3, [r2, #28]
1a002dc2:	e7f1      	b.n	1a002da8 <serveInterrupt+0x30>
1a002dc4:	1a004284 	.word	0x1a004284
1a002dc8:	40087000 	.word	0x40087000
1a002dcc:	40084000 	.word	0x40084000
1a002dd0:	10000050 	.word	0x10000050

1a002dd4 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a002dd4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002dd6:	2000      	movs	r0, #0
1a002dd8:	f7ff ffce 	bl	1a002d78 <serveInterrupt>
}
1a002ddc:	bd08      	pop	{r3, pc}

1a002dde <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a002dde:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a002de0:	2001      	movs	r0, #1
1a002de2:	f7ff ffc9 	bl	1a002d78 <serveInterrupt>
}
1a002de6:	bd08      	pop	{r3, pc}

1a002de8 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a002de8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a002dea:	2002      	movs	r0, #2
1a002dec:	f7ff ffc4 	bl	1a002d78 <serveInterrupt>
}
1a002df0:	bd08      	pop	{r3, pc}
1a002df2:	Address 0x000000001a002df2 is out of bounds.


1a002df4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002df4:	2200      	movs	r2, #0
1a002df6:	2a05      	cmp	r2, #5
1a002df8:	d819      	bhi.n	1a002e2e <Board_LED_Init+0x3a>
{
1a002dfa:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002dfc:	490c      	ldr	r1, [pc, #48]	; (1a002e30 <Board_LED_Init+0x3c>)
1a002dfe:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002e02:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002e06:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a002e08:	4b0a      	ldr	r3, [pc, #40]	; (1a002e34 <Board_LED_Init+0x40>)
1a002e0a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002e0e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002e12:	2001      	movs	r0, #1
1a002e14:	40a0      	lsls	r0, r4
1a002e16:	4301      	orrs	r1, r0
1a002e18:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002e1c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002e20:	2100      	movs	r1, #0
1a002e22:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002e24:	3201      	adds	r2, #1
1a002e26:	2a05      	cmp	r2, #5
1a002e28:	d9e8      	bls.n	1a002dfc <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002e2a:	bc70      	pop	{r4, r5, r6}
1a002e2c:	4770      	bx	lr
1a002e2e:	4770      	bx	lr
1a002e30:	1a004294 	.word	0x1a004294
1a002e34:	400f4000 	.word	0x400f4000

1a002e38 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e38:	2300      	movs	r3, #0
1a002e3a:	2b03      	cmp	r3, #3
1a002e3c:	d816      	bhi.n	1a002e6c <Board_TEC_Init+0x34>
{
1a002e3e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002e40:	490b      	ldr	r1, [pc, #44]	; (1a002e70 <Board_TEC_Init+0x38>)
1a002e42:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002e46:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002e4a:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002e4c:	4c09      	ldr	r4, [pc, #36]	; (1a002e74 <Board_TEC_Init+0x3c>)
1a002e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e52:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002e56:	2001      	movs	r0, #1
1a002e58:	40a8      	lsls	r0, r5
1a002e5a:	ea21 0100 	bic.w	r1, r1, r0
1a002e5e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e62:	3301      	adds	r3, #1
1a002e64:	2b03      	cmp	r3, #3
1a002e66:	d9eb      	bls.n	1a002e40 <Board_TEC_Init+0x8>
    }
}
1a002e68:	bc30      	pop	{r4, r5}
1a002e6a:	4770      	bx	lr
1a002e6c:	4770      	bx	lr
1a002e6e:	bf00      	nop
1a002e70:	1a00428c 	.word	0x1a00428c
1a002e74:	400f4000 	.word	0x400f4000

1a002e78 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002e78:	2300      	movs	r3, #0
1a002e7a:	2b08      	cmp	r3, #8
1a002e7c:	d816      	bhi.n	1a002eac <Board_GPIO_Init+0x34>
{
1a002e7e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002e80:	490b      	ldr	r1, [pc, #44]	; (1a002eb0 <Board_GPIO_Init+0x38>)
1a002e82:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002e86:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002e8a:	784d      	ldrb	r5, [r1, #1]
1a002e8c:	4c09      	ldr	r4, [pc, #36]	; (1a002eb4 <Board_GPIO_Init+0x3c>)
1a002e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e92:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002e96:	2001      	movs	r0, #1
1a002e98:	40a8      	lsls	r0, r5
1a002e9a:	ea21 0100 	bic.w	r1, r1, r0
1a002e9e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ea2:	3301      	adds	r3, #1
1a002ea4:	2b08      	cmp	r3, #8
1a002ea6:	d9eb      	bls.n	1a002e80 <Board_GPIO_Init+0x8>
    }
}
1a002ea8:	bc30      	pop	{r4, r5}
1a002eaa:	4770      	bx	lr
1a002eac:	4770      	bx	lr
1a002eae:	bf00      	nop
1a002eb0:	1a0042a0 	.word	0x1a0042a0
1a002eb4:	400f4000 	.word	0x400f4000

1a002eb8 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a002eb8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002eba:	4c0b      	ldr	r4, [pc, #44]	; (1a002ee8 <Board_SPI_Init+0x30>)
1a002ebc:	4620      	mov	r0, r4
1a002ebe:	f000 fe2b 	bl	1a003b18 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002ec2:	6863      	ldr	r3, [r4, #4]
1a002ec4:	f023 0304 	bic.w	r3, r3, #4
1a002ec8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002eca:	6823      	ldr	r3, [r4, #0]
1a002ecc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002ed0:	f043 0307 	orr.w	r3, r3, #7
1a002ed4:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002ed6:	4905      	ldr	r1, [pc, #20]	; (1a002eec <Board_SPI_Init+0x34>)
1a002ed8:	4620      	mov	r0, r4
1a002eda:	f000 fdfe 	bl	1a003ada <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002ede:	6863      	ldr	r3, [r4, #4]
1a002ee0:	f043 0302 	orr.w	r3, r3, #2
1a002ee4:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a002ee6:	bd10      	pop	{r4, pc}
1a002ee8:	400c5000 	.word	0x400c5000
1a002eec:	000186a0 	.word	0x000186a0

1a002ef0 <Board_I2C_Init>:
{
1a002ef0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002ef2:	2000      	movs	r0, #0
1a002ef4:	f000 fda4 	bl	1a003a40 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002ef8:	4b04      	ldr	r3, [pc, #16]	; (1a002f0c <Board_I2C_Init+0x1c>)
1a002efa:	f640 0208 	movw	r2, #2056	; 0x808
1a002efe:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002f02:	4903      	ldr	r1, [pc, #12]	; (1a002f10 <Board_I2C_Init+0x20>)
1a002f04:	2000      	movs	r0, #0
1a002f06:	f000 fdad 	bl	1a003a64 <Chip_I2C_SetClockRate>
}
1a002f0a:	bd08      	pop	{r3, pc}
1a002f0c:	40086000 	.word	0x40086000
1a002f10:	000f4240 	.word	0x000f4240

1a002f14 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a002f14:	b510      	push	{r4, lr}
1a002f16:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002f18:	4c08      	ldr	r4, [pc, #32]	; (1a002f3c <Board_ADC_Init+0x28>)
1a002f1a:	4669      	mov	r1, sp
1a002f1c:	4620      	mov	r0, r4
1a002f1e:	f000 f997 	bl	1a003250 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002f22:	4a07      	ldr	r2, [pc, #28]	; (1a002f40 <Board_ADC_Init+0x2c>)
1a002f24:	4669      	mov	r1, sp
1a002f26:	4620      	mov	r0, r4
1a002f28:	f000 f9b2 	bl	1a003290 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002f2c:	2200      	movs	r2, #0
1a002f2e:	4669      	mov	r1, sp
1a002f30:	4620      	mov	r0, r4
1a002f32:	f000 f9c6 	bl	1a0032c2 <Chip_ADC_SetResolution>
}
1a002f36:	b002      	add	sp, #8
1a002f38:	bd10      	pop	{r4, pc}
1a002f3a:	bf00      	nop
1a002f3c:	400e3000 	.word	0x400e3000
1a002f40:	00061a80 	.word	0x00061a80

1a002f44 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002f44:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002f46:	4c07      	ldr	r4, [pc, #28]	; (1a002f64 <Board_Debug_Init+0x20>)
1a002f48:	4620      	mov	r0, r4
1a002f4a:	f000 f89f 	bl	1a00308c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002f4e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002f52:	4620      	mov	r0, r4
1a002f54:	f000 f8e4 	bl	1a003120 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a002f58:	2303      	movs	r3, #3
1a002f5a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002f5c:	2301      	movs	r3, #1
1a002f5e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002f60:	bd10      	pop	{r4, pc}
1a002f62:	bf00      	nop
1a002f64:	400c1000 	.word	0x400c1000

1a002f68 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002f68:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002f6a:	f7ff ffeb 	bl	1a002f44 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002f6e:	4808      	ldr	r0, [pc, #32]	; (1a002f90 <Board_Init+0x28>)
1a002f70:	f000 fcaa 	bl	1a0038c8 <Chip_GPIO_Init>

   Board_LED_Init();
1a002f74:	f7ff ff3e 	bl	1a002df4 <Board_LED_Init>
   Board_TEC_Init();
1a002f78:	f7ff ff5e 	bl	1a002e38 <Board_TEC_Init>
   Board_SPI_Init();
1a002f7c:	f7ff ff9c 	bl	1a002eb8 <Board_SPI_Init>
   Board_GPIO_Init();
1a002f80:	f7ff ff7a 	bl	1a002e78 <Board_GPIO_Init>
   Board_I2C_Init();
1a002f84:	f7ff ffb4 	bl	1a002ef0 <Board_I2C_Init>
   Board_ADC_Init();
1a002f88:	f7ff ffc4 	bl	1a002f14 <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a002f8c:	bd08      	pop	{r3, pc}
1a002f8e:	bf00      	nop
1a002f90:	400f4000 	.word	0x400f4000

1a002f94 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a002f94:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a002f96:	4a04      	ldr	r2, [pc, #16]	; (1a002fa8 <SystemInit+0x14>)
1a002f98:	4b04      	ldr	r3, [pc, #16]	; (1a002fac <SystemInit+0x18>)
1a002f9a:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a002f9c:	f000 fc6a 	bl	1a003874 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a002fa0:	f000 f858 	bl	1a003054 <Board_SystemInit>
}
1a002fa4:	bd08      	pop	{r3, pc}
1a002fa6:	bf00      	nop
1a002fa8:	1a000000 	.word	0x1a000000
1a002fac:	e000ed08 	.word	0xe000ed08

1a002fb0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002fb0:	2300      	movs	r3, #0
1a002fb2:	2b1c      	cmp	r3, #28
1a002fb4:	d812      	bhi.n	1a002fdc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002fb6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002fb8:	4a09      	ldr	r2, [pc, #36]	; (1a002fe0 <Board_SetupMuxing+0x30>)
1a002fba:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002fbe:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002fc2:	784a      	ldrb	r2, [r1, #1]
1a002fc4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002fc6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002fca:	4906      	ldr	r1, [pc, #24]	; (1a002fe4 <Board_SetupMuxing+0x34>)
1a002fcc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002fd0:	3301      	adds	r3, #1
1a002fd2:	2b1c      	cmp	r3, #28
1a002fd4:	d9f0      	bls.n	1a002fb8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002fda:	4770      	bx	lr
1a002fdc:	4770      	bx	lr
1a002fde:	bf00      	nop
1a002fe0:	1a0042bc 	.word	0x1a0042bc
1a002fe4:	40086000 	.word	0x40086000

1a002fe8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002fe8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002fea:	4a17      	ldr	r2, [pc, #92]	; (1a003048 <Board_SetupClocking+0x60>)
1a002fec:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002ff4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002ff8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002ffc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003004:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003008:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00300c:	2201      	movs	r2, #1
1a00300e:	490f      	ldr	r1, [pc, #60]	; (1a00304c <Board_SetupClocking+0x64>)
1a003010:	2006      	movs	r0, #6
1a003012:	f000 fc5b 	bl	1a0038cc <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003016:	2400      	movs	r4, #0
1a003018:	b14c      	cbz	r4, 1a00302e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00301a:	4b0b      	ldr	r3, [pc, #44]	; (1a003048 <Board_SetupClocking+0x60>)
1a00301c:	685a      	ldr	r2, [r3, #4]
1a00301e:	f022 020c 	bic.w	r2, r2, #12
1a003022:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003024:	685a      	ldr	r2, [r3, #4]
1a003026:	f042 0203 	orr.w	r2, r2, #3
1a00302a:	605a      	str	r2, [r3, #4]
}
1a00302c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00302e:	4808      	ldr	r0, [pc, #32]	; (1a003050 <Board_SetupClocking+0x68>)
1a003030:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003034:	2301      	movs	r3, #1
1a003036:	788a      	ldrb	r2, [r1, #2]
1a003038:	7849      	ldrb	r1, [r1, #1]
1a00303a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00303e:	f000 fb75 	bl	1a00372c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003042:	3401      	adds	r4, #1
1a003044:	e7e8      	b.n	1a003018 <Board_SetupClocking+0x30>
1a003046:	bf00      	nop
1a003048:	40043000 	.word	0x40043000
1a00304c:	0c28cb00 	.word	0x0c28cb00
1a003050:	1a0042b8 	.word	0x1a0042b8

1a003054 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003054:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003056:	f7ff ffab 	bl	1a002fb0 <Board_SetupMuxing>
    Board_SetupClocking();
1a00305a:	f7ff ffc5 	bl	1a002fe8 <Board_SetupClocking>
}
1a00305e:	bd08      	pop	{r3, pc}

1a003060 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003060:	4b09      	ldr	r3, [pc, #36]	; (1a003088 <Chip_UART_GetIndex+0x28>)
1a003062:	4298      	cmp	r0, r3
1a003064:	d009      	beq.n	1a00307a <Chip_UART_GetIndex+0x1a>
1a003066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00306a:	4298      	cmp	r0, r3
1a00306c:	d007      	beq.n	1a00307e <Chip_UART_GetIndex+0x1e>
1a00306e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003072:	4298      	cmp	r0, r3
1a003074:	d005      	beq.n	1a003082 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003076:	2000      	movs	r0, #0
1a003078:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00307a:	2002      	movs	r0, #2
1a00307c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00307e:	2003      	movs	r0, #3
1a003080:	4770      	bx	lr
			return 1;
1a003082:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003084:	4770      	bx	lr
1a003086:	bf00      	nop
1a003088:	400c1000 	.word	0x400c1000

1a00308c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00308c:	b530      	push	{r4, r5, lr}
1a00308e:	b083      	sub	sp, #12
1a003090:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003092:	f7ff ffe5 	bl	1a003060 <Chip_UART_GetIndex>
1a003096:	2301      	movs	r3, #1
1a003098:	461a      	mov	r2, r3
1a00309a:	4619      	mov	r1, r3
1a00309c:	4d0e      	ldr	r5, [pc, #56]	; (1a0030d8 <Chip_UART_Init+0x4c>)
1a00309e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0030a2:	f000 fb89 	bl	1a0037b8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0030a6:	2307      	movs	r3, #7
1a0030a8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0030aa:	2300      	movs	r3, #0
1a0030ac:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0030ae:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0030b0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0030b2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0030b4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0030b6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0030b8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0030ba:	4b08      	ldr	r3, [pc, #32]	; (1a0030dc <Chip_UART_Init+0x50>)
1a0030bc:	429c      	cmp	r4, r3
1a0030be:	d006      	beq.n	1a0030ce <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0030c0:	2303      	movs	r3, #3
1a0030c2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0030c4:	2310      	movs	r3, #16
1a0030c6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0030c8:	9b01      	ldr	r3, [sp, #4]
}
1a0030ca:	b003      	add	sp, #12
1a0030cc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0030ce:	2300      	movs	r3, #0
1a0030d0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0030d2:	69a3      	ldr	r3, [r4, #24]
1a0030d4:	9301      	str	r3, [sp, #4]
1a0030d6:	e7f3      	b.n	1a0030c0 <Chip_UART_Init+0x34>
1a0030d8:	1a004338 	.word	0x1a004338
1a0030dc:	40082000 	.word	0x40082000

1a0030e0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0030e0:	b538      	push	{r3, r4, r5, lr}
1a0030e2:	4605      	mov	r5, r0
1a0030e4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0030e6:	f7ff ffbb 	bl	1a003060 <Chip_UART_GetIndex>
1a0030ea:	4b0c      	ldr	r3, [pc, #48]	; (1a00311c <Chip_UART_SetBaud+0x3c>)
1a0030ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0030f0:	f000 fb9a 	bl	1a003828 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0030f4:	0123      	lsls	r3, r4, #4
1a0030f6:	fbb0 f3f3 	udiv	r3, r0, r3
1a0030fa:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0030fc:	68ea      	ldr	r2, [r5, #12]
1a0030fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003102:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003104:	6029      	str	r1, [r5, #0]
1a003106:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00310a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00310c:	68ea      	ldr	r2, [r5, #12]
1a00310e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003112:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003114:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003118:	0900      	lsrs	r0, r0, #4
1a00311a:	bd38      	pop	{r3, r4, r5, pc}
1a00311c:	1a004330 	.word	0x1a004330

1a003120 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003124:	b083      	sub	sp, #12
1a003126:	4683      	mov	fp, r0
1a003128:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00312a:	f7ff ff99 	bl	1a003060 <Chip_UART_GetIndex>
1a00312e:	4b35      	ldr	r3, [pc, #212]	; (1a003204 <Chip_UART_SetBaudFDR+0xe4>)
1a003130:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003134:	f000 fb78 	bl	1a003828 <Chip_Clock_GetRate>
1a003138:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00313a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00313e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003140:	2300      	movs	r3, #0
1a003142:	9301      	str	r3, [sp, #4]
1a003144:	46a2      	mov	sl, r4
1a003146:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003148:	e02a      	b.n	1a0031a0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00314a:	4242      	negs	r2, r0
				div ++;
1a00314c:	1c4b      	adds	r3, r1, #1
1a00314e:	e017      	b.n	1a003180 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003150:	b30a      	cbz	r2, 1a003196 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003152:	4617      	mov	r7, r2
			sd = d;
1a003154:	9501      	str	r5, [sp, #4]
			sm = m;
1a003156:	46a2      	mov	sl, r4
			sdiv = div;
1a003158:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00315a:	3501      	adds	r5, #1
1a00315c:	42ac      	cmp	r4, r5
1a00315e:	d91e      	bls.n	1a00319e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003160:	0933      	lsrs	r3, r6, #4
1a003162:	0730      	lsls	r0, r6, #28
1a003164:	fba4 0100 	umull	r0, r1, r4, r0
1a003168:	fb04 1103 	mla	r1, r4, r3, r1
1a00316c:	1962      	adds	r2, r4, r5
1a00316e:	fb08 f202 	mul.w	r2, r8, r2
1a003172:	2300      	movs	r3, #0
1a003174:	f000 fd80 	bl	1a003c78 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003178:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00317a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00317c:	2800      	cmp	r0, #0
1a00317e:	dbe4      	blt.n	1a00314a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003180:	4297      	cmp	r7, r2
1a003182:	d3ea      	bcc.n	1a00315a <Chip_UART_SetBaudFDR+0x3a>
1a003184:	2b00      	cmp	r3, #0
1a003186:	d0e8      	beq.n	1a00315a <Chip_UART_SetBaudFDR+0x3a>
1a003188:	0c19      	lsrs	r1, r3, #16
1a00318a:	d1e6      	bne.n	1a00315a <Chip_UART_SetBaudFDR+0x3a>
1a00318c:	2b02      	cmp	r3, #2
1a00318e:	d8df      	bhi.n	1a003150 <Chip_UART_SetBaudFDR+0x30>
1a003190:	2d00      	cmp	r5, #0
1a003192:	d0dd      	beq.n	1a003150 <Chip_UART_SetBaudFDR+0x30>
1a003194:	e7e1      	b.n	1a00315a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003196:	4617      	mov	r7, r2
			sd = d;
1a003198:	9501      	str	r5, [sp, #4]
			sm = m;
1a00319a:	46a2      	mov	sl, r4
			sdiv = div;
1a00319c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00319e:	3401      	adds	r4, #1
1a0031a0:	b11f      	cbz	r7, 1a0031aa <Chip_UART_SetBaudFDR+0x8a>
1a0031a2:	2c0f      	cmp	r4, #15
1a0031a4:	d801      	bhi.n	1a0031aa <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0031a6:	2500      	movs	r5, #0
1a0031a8:	e7d8      	b.n	1a00315c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0031aa:	f1b9 0f00 	cmp.w	r9, #0
1a0031ae:	d024      	beq.n	1a0031fa <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0031b0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0031b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0031b8:	f8cb 300c 	str.w	r3, [fp, #12]
1a0031bc:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0031c0:	f8cb 3000 	str.w	r3, [fp]
1a0031c4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0031c8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0031cc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0031d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0031d4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0031d8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0031dc:	b2db      	uxtb	r3, r3
1a0031de:	9901      	ldr	r1, [sp, #4]
1a0031e0:	f001 020f 	and.w	r2, r1, #15
1a0031e4:	4313      	orrs	r3, r2
1a0031e6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0031ea:	0933      	lsrs	r3, r6, #4
1a0031ec:	fb0a f303 	mul.w	r3, sl, r3
1a0031f0:	448a      	add	sl, r1
1a0031f2:	fb09 f90a 	mul.w	r9, r9, sl
1a0031f6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0031fa:	4648      	mov	r0, r9
1a0031fc:	b003      	add	sp, #12
1a0031fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003202:	bf00      	nop
1a003204:	1a004330 	.word	0x1a004330

1a003208 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003208:	4b03      	ldr	r3, [pc, #12]	; (1a003218 <Chip_ADC_GetClockIndex+0x10>)
1a00320a:	4298      	cmp	r0, r3
1a00320c:	d001      	beq.n	1a003212 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00320e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003210:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003212:	2004      	movs	r0, #4
1a003214:	4770      	bx	lr
1a003216:	bf00      	nop
1a003218:	400e4000 	.word	0x400e4000

1a00321c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00321c:	b570      	push	{r4, r5, r6, lr}
1a00321e:	460d      	mov	r5, r1
1a003220:	4614      	mov	r4, r2
1a003222:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003224:	f7ff fff0 	bl	1a003208 <Chip_ADC_GetClockIndex>
1a003228:	f000 fafe 	bl	1a003828 <Chip_Clock_GetRate>
	if (burstMode) {
1a00322c:	b965      	cbnz	r5, 1a003248 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00322e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003232:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003236:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00323a:	0064      	lsls	r4, r4, #1
1a00323c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003240:	b2c0      	uxtb	r0, r0
1a003242:	3801      	subs	r0, #1
	return div;
}
1a003244:	b2c0      	uxtb	r0, r0
1a003246:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003248:	fb04 f406 	mul.w	r4, r4, r6
1a00324c:	e7f3      	b.n	1a003236 <getClkDiv+0x1a>
1a00324e:	Address 0x000000001a00324e is out of bounds.


1a003250 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003250:	b538      	push	{r3, r4, r5, lr}
1a003252:	4605      	mov	r5, r0
1a003254:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003256:	f7ff ffd7 	bl	1a003208 <Chip_ADC_GetClockIndex>
1a00325a:	2301      	movs	r3, #1
1a00325c:	461a      	mov	r2, r3
1a00325e:	4619      	mov	r1, r3
1a003260:	f000 faaa 	bl	1a0037b8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003264:	2100      	movs	r1, #0
1a003266:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003268:	4a08      	ldr	r2, [pc, #32]	; (1a00328c <Chip_ADC_Init+0x3c>)
1a00326a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00326c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00326e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003270:	230b      	movs	r3, #11
1a003272:	4628      	mov	r0, r5
1a003274:	f7ff ffd2 	bl	1a00321c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003278:	0200      	lsls	r0, r0, #8
1a00327a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00327e:	7920      	ldrb	r0, [r4, #4]
1a003280:	0440      	lsls	r0, r0, #17
1a003282:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003286:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003288:	6028      	str	r0, [r5, #0]
}
1a00328a:	bd38      	pop	{r3, r4, r5, pc}
1a00328c:	00061a80 	.word	0x00061a80

1a003290 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003290:	b570      	push	{r4, r5, r6, lr}
1a003292:	4605      	mov	r5, r0
1a003294:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003296:	6804      	ldr	r4, [r0, #0]
1a003298:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00329c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0032a0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0032a2:	790b      	ldrb	r3, [r1, #4]
1a0032a4:	f1c3 030b 	rsb	r3, r3, #11
1a0032a8:	b2db      	uxtb	r3, r3
1a0032aa:	7949      	ldrb	r1, [r1, #5]
1a0032ac:	f7ff ffb6 	bl	1a00321c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0032b0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0032b4:	7930      	ldrb	r0, [r6, #4]
1a0032b6:	0440      	lsls	r0, r0, #17
1a0032b8:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0032bc:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0032be:	6028      	str	r0, [r5, #0]
}
1a0032c0:	bd70      	pop	{r4, r5, r6, pc}

1a0032c2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0032c2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0032c4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0032c6:	680a      	ldr	r2, [r1, #0]
1a0032c8:	f7ff ffe2 	bl	1a003290 <Chip_ADC_SetSampleRate>
}
1a0032cc:	bd08      	pop	{r3, pc}
1a0032ce:	Address 0x000000001a0032ce is out of bounds.


1a0032d0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0032d0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0032d2:	2069      	movs	r0, #105	; 0x69
1a0032d4:	f000 faa8 	bl	1a003828 <Chip_Clock_GetRate>
1a0032d8:	4b01      	ldr	r3, [pc, #4]	; (1a0032e0 <SystemCoreClockUpdate+0x10>)
1a0032da:	6018      	str	r0, [r3, #0]
}
1a0032dc:	bd08      	pop	{r3, pc}
1a0032de:	bf00      	nop
1a0032e0:	10002bf4 	.word	0x10002bf4

1a0032e4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0032e4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0032e6:	680b      	ldr	r3, [r1, #0]
1a0032e8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0032ec:	d002      	beq.n	1a0032f4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0032ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0032f2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0032f4:	4607      	mov	r7, r0
1a0032f6:	2501      	movs	r5, #1
1a0032f8:	e03b      	b.n	1a003372 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0032fa:	694b      	ldr	r3, [r1, #20]
1a0032fc:	fb03 f302 	mul.w	r3, r3, r2
1a003300:	fbb3 f3f5 	udiv	r3, r3, r5
1a003304:	e014      	b.n	1a003330 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003306:	461c      	mov	r4, r3
1a003308:	e020      	b.n	1a00334c <pll_calc_divs+0x68>
		return -val;
1a00330a:	f1cc 0c00 	rsb	ip, ip, #0
1a00330e:	e020      	b.n	1a003352 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a003310:	3201      	adds	r2, #1
1a003312:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003316:	dc26      	bgt.n	1a003366 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003318:	680c      	ldr	r4, [r1, #0]
1a00331a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00331e:	d0ec      	beq.n	1a0032fa <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003320:	1c73      	adds	r3, r6, #1
1a003322:	fa02 fc03 	lsl.w	ip, r2, r3
1a003326:	694b      	ldr	r3, [r1, #20]
1a003328:	fb03 f30c 	mul.w	r3, r3, ip
1a00332c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003330:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a003380 <pll_calc_divs+0x9c>
1a003334:	4563      	cmp	r3, ip
1a003336:	d9eb      	bls.n	1a003310 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003338:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003384 <pll_calc_divs+0xa0>
1a00333c:	4563      	cmp	r3, ip
1a00333e:	d812      	bhi.n	1a003366 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a003340:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003344:	d1df      	bne.n	1a003306 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003346:	1c74      	adds	r4, r6, #1
1a003348:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a00334c:	ebb0 0c04 	subs.w	ip, r0, r4
1a003350:	d4db      	bmi.n	1a00330a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a003352:	4567      	cmp	r7, ip
1a003354:	d9dc      	bls.n	1a003310 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a003356:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003358:	1c77      	adds	r7, r6, #1
1a00335a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00335c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00335e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003360:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003362:	4667      	mov	r7, ip
1a003364:	e7d4      	b.n	1a003310 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003366:	3601      	adds	r6, #1
1a003368:	2e03      	cmp	r6, #3
1a00336a:	dc01      	bgt.n	1a003370 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a00336c:	2201      	movs	r2, #1
1a00336e:	e7d0      	b.n	1a003312 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a003370:	3501      	adds	r5, #1
1a003372:	2d04      	cmp	r5, #4
1a003374:	dc01      	bgt.n	1a00337a <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003376:	2600      	movs	r6, #0
1a003378:	e7f6      	b.n	1a003368 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00337a:	bcf0      	pop	{r4, r5, r6, r7}
1a00337c:	4770      	bx	lr
1a00337e:	bf00      	nop
1a003380:	094c5eff 	.word	0x094c5eff
1a003384:	1312d000 	.word	0x1312d000

1a003388 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003388:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00338a:	b099      	sub	sp, #100	; 0x64
1a00338c:	4605      	mov	r5, r0
1a00338e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003390:	225c      	movs	r2, #92	; 0x5c
1a003392:	2100      	movs	r1, #0
1a003394:	a801      	add	r0, sp, #4
1a003396:	f000 fe1e 	bl	1a003fd6 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00339a:	2380      	movs	r3, #128	; 0x80
1a00339c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00339e:	6963      	ldr	r3, [r4, #20]
1a0033a0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0033a2:	7923      	ldrb	r3, [r4, #4]
1a0033a4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0033a8:	4669      	mov	r1, sp
1a0033aa:	4628      	mov	r0, r5
1a0033ac:	f7ff ff9a 	bl	1a0032e4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0033b0:	9b06      	ldr	r3, [sp, #24]
1a0033b2:	42ab      	cmp	r3, r5
1a0033b4:	d027      	beq.n	1a003406 <pll_get_frac+0x7e>
	if (val < 0)
1a0033b6:	1aeb      	subs	r3, r5, r3
1a0033b8:	d42e      	bmi.n	1a003418 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0033ba:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0033bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0033be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0033c2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0033c4:	6963      	ldr	r3, [r4, #20]
1a0033c6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0033c8:	7923      	ldrb	r3, [r4, #4]
1a0033ca:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0033ce:	a910      	add	r1, sp, #64	; 0x40
1a0033d0:	4628      	mov	r0, r5
1a0033d2:	f7ff ff87 	bl	1a0032e4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0033d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0033d8:	42ab      	cmp	r3, r5
1a0033da:	d01f      	beq.n	1a00341c <pll_get_frac+0x94>
	if (val < 0)
1a0033dc:	1aeb      	subs	r3, r5, r3
1a0033de:	d425      	bmi.n	1a00342c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0033e0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0033e2:	4b2b      	ldr	r3, [pc, #172]	; (1a003490 <pll_get_frac+0x108>)
1a0033e4:	429d      	cmp	r5, r3
1a0033e6:	d923      	bls.n	1a003430 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0033e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0033ea:	1aed      	subs	r5, r5, r3
1a0033ec:	d433      	bmi.n	1a003456 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0033ee:	42ae      	cmp	r6, r5
1a0033f0:	dc3b      	bgt.n	1a00346a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0033f2:	42be      	cmp	r6, r7
1a0033f4:	dc31      	bgt.n	1a00345a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0033f6:	466d      	mov	r5, sp
1a0033f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003404:	e006      	b.n	1a003414 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003406:	466d      	mov	r5, sp
1a003408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00340a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00340c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003414:	b019      	add	sp, #100	; 0x64
1a003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003418:	425b      	negs	r3, r3
1a00341a:	e7ce      	b.n	1a0033ba <pll_get_frac+0x32>
		*ppll = pll[2];
1a00341c:	ad10      	add	r5, sp, #64	; 0x40
1a00341e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003422:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003426:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00342a:	e7f3      	b.n	1a003414 <pll_get_frac+0x8c>
		return -val;
1a00342c:	425b      	negs	r3, r3
1a00342e:	e7d7      	b.n	1a0033e0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003430:	2340      	movs	r3, #64	; 0x40
1a003432:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003434:	6963      	ldr	r3, [r4, #20]
1a003436:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003438:	a908      	add	r1, sp, #32
1a00343a:	4628      	mov	r0, r5
1a00343c:	f7ff ff52 	bl	1a0032e4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003442:	42ab      	cmp	r3, r5
1a003444:	d1d0      	bne.n	1a0033e8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003446:	ad08      	add	r5, sp, #32
1a003448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00344a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00344c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003454:	e7de      	b.n	1a003414 <pll_get_frac+0x8c>
		return -val;
1a003456:	426d      	negs	r5, r5
1a003458:	e7c9      	b.n	1a0033ee <pll_get_frac+0x66>
			*ppll = pll[2];
1a00345a:	ad10      	add	r5, sp, #64	; 0x40
1a00345c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00345e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003460:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003468:	e7d4      	b.n	1a003414 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00346a:	42af      	cmp	r7, r5
1a00346c:	db07      	blt.n	1a00347e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00346e:	ad08      	add	r5, sp, #32
1a003470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003474:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00347c:	e7ca      	b.n	1a003414 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00347e:	ad10      	add	r5, sp, #64	; 0x40
1a003480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003484:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00348c:	e7c2      	b.n	1a003414 <pll_get_frac+0x8c>
1a00348e:	bf00      	nop
1a003490:	068e7780 	.word	0x068e7780

1a003494 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003494:	b430      	push	{r4, r5}
1a003496:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003498:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00349a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00349c:	e000      	b.n	1a0034a0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00349e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0034a0:	281c      	cmp	r0, #28
1a0034a2:	d118      	bne.n	1a0034d6 <Chip_Clock_FindBaseClock+0x42>
1a0034a4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0034a8:	0051      	lsls	r1, r2, #1
1a0034aa:	4a0c      	ldr	r2, [pc, #48]	; (1a0034dc <Chip_Clock_FindBaseClock+0x48>)
1a0034ac:	440a      	add	r2, r1
1a0034ae:	7914      	ldrb	r4, [r2, #4]
1a0034b0:	4284      	cmp	r4, r0
1a0034b2:	d010      	beq.n	1a0034d6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0034b4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0034b8:	004a      	lsls	r2, r1, #1
1a0034ba:	4908      	ldr	r1, [pc, #32]	; (1a0034dc <Chip_Clock_FindBaseClock+0x48>)
1a0034bc:	5a8a      	ldrh	r2, [r1, r2]
1a0034be:	42aa      	cmp	r2, r5
1a0034c0:	d8ed      	bhi.n	1a00349e <Chip_Clock_FindBaseClock+0xa>
1a0034c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0034c6:	0051      	lsls	r1, r2, #1
1a0034c8:	4a04      	ldr	r2, [pc, #16]	; (1a0034dc <Chip_Clock_FindBaseClock+0x48>)
1a0034ca:	440a      	add	r2, r1
1a0034cc:	8852      	ldrh	r2, [r2, #2]
1a0034ce:	42aa      	cmp	r2, r5
1a0034d0:	d3e5      	bcc.n	1a00349e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0034d2:	4620      	mov	r0, r4
1a0034d4:	e7e4      	b.n	1a0034a0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0034d6:	bc30      	pop	{r4, r5}
1a0034d8:	4770      	bx	lr
1a0034da:	bf00      	nop
1a0034dc:	1a00434c 	.word	0x1a00434c

1a0034e0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0034e0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0034e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0034e6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0034e8:	4a0d      	ldr	r2, [pc, #52]	; (1a003520 <Chip_Clock_EnableCrystal+0x40>)
1a0034ea:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0034ec:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0034f0:	6992      	ldr	r2, [r2, #24]
1a0034f2:	428a      	cmp	r2, r1
1a0034f4:	d001      	beq.n	1a0034fa <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0034f6:	4a0a      	ldr	r2, [pc, #40]	; (1a003520 <Chip_Clock_EnableCrystal+0x40>)
1a0034f8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0034fa:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0034fe:	4a09      	ldr	r2, [pc, #36]	; (1a003524 <Chip_Clock_EnableCrystal+0x44>)
1a003500:	6811      	ldr	r1, [r2, #0]
1a003502:	4a09      	ldr	r2, [pc, #36]	; (1a003528 <Chip_Clock_EnableCrystal+0x48>)
1a003504:	4291      	cmp	r1, r2
1a003506:	d901      	bls.n	1a00350c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003508:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00350c:	4a04      	ldr	r2, [pc, #16]	; (1a003520 <Chip_Clock_EnableCrystal+0x40>)
1a00350e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003510:	9b01      	ldr	r3, [sp, #4]
1a003512:	1e5a      	subs	r2, r3, #1
1a003514:	9201      	str	r2, [sp, #4]
1a003516:	2b00      	cmp	r3, #0
1a003518:	d1fa      	bne.n	1a003510 <Chip_Clock_EnableCrystal+0x30>
}
1a00351a:	b002      	add	sp, #8
1a00351c:	4770      	bx	lr
1a00351e:	bf00      	nop
1a003520:	40050000 	.word	0x40050000
1a003524:	1a0042b4 	.word	0x1a0042b4
1a003528:	01312cff 	.word	0x01312cff

1a00352c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00352c:	3012      	adds	r0, #18
1a00352e:	4b05      	ldr	r3, [pc, #20]	; (1a003544 <Chip_Clock_GetDividerSource+0x18>)
1a003530:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003534:	f010 0f01 	tst.w	r0, #1
1a003538:	d102      	bne.n	1a003540 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00353a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00353e:	4770      	bx	lr
		return CLKINPUT_PD;
1a003540:	2011      	movs	r0, #17
}
1a003542:	4770      	bx	lr
1a003544:	40050000 	.word	0x40050000

1a003548 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003548:	f100 0212 	add.w	r2, r0, #18
1a00354c:	4b03      	ldr	r3, [pc, #12]	; (1a00355c <Chip_Clock_GetDividerDivisor+0x14>)
1a00354e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003552:	4b03      	ldr	r3, [pc, #12]	; (1a003560 <Chip_Clock_GetDividerDivisor+0x18>)
1a003554:	5c18      	ldrb	r0, [r3, r0]
}
1a003556:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00355a:	4770      	bx	lr
1a00355c:	40050000 	.word	0x40050000
1a003560:	1a004344 	.word	0x1a004344

1a003564 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003564:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003566:	2810      	cmp	r0, #16
1a003568:	d80a      	bhi.n	1a003580 <Chip_Clock_GetClockInputHz+0x1c>
1a00356a:	e8df f000 	tbb	[pc, r0]
1a00356e:	0b42      	.short	0x0b42
1a003570:	091f160d 	.word	0x091f160d
1a003574:	2b282522 	.word	0x2b282522
1a003578:	322e0909 	.word	0x322e0909
1a00357c:	3a36      	.short	0x3a36
1a00357e:	3e          	.byte	0x3e
1a00357f:	00          	.byte	0x00
	uint32_t rate = 0;
1a003580:	2000      	movs	r0, #0
1a003582:	e038      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003584:	481e      	ldr	r0, [pc, #120]	; (1a003600 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003586:	e036      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003588:	4b1e      	ldr	r3, [pc, #120]	; (1a003604 <Chip_Clock_GetClockInputHz+0xa0>)
1a00358a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00358e:	f003 0307 	and.w	r3, r3, #7
1a003592:	2b04      	cmp	r3, #4
1a003594:	d130      	bne.n	1a0035f8 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003596:	2000      	movs	r0, #0
1a003598:	e02d      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00359a:	4b1a      	ldr	r3, [pc, #104]	; (1a003604 <Chip_Clock_GetClockInputHz+0xa0>)
1a00359c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0035a0:	f003 0307 	and.w	r3, r3, #7
1a0035a4:	2b04      	cmp	r3, #4
1a0035a6:	d029      	beq.n	1a0035fc <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0035a8:	4817      	ldr	r0, [pc, #92]	; (1a003608 <Chip_Clock_GetClockInputHz+0xa4>)
1a0035aa:	e024      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0035ac:	4b17      	ldr	r3, [pc, #92]	; (1a00360c <Chip_Clock_GetClockInputHz+0xa8>)
1a0035ae:	6818      	ldr	r0, [r3, #0]
		break;
1a0035b0:	e021      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0035b2:	4b17      	ldr	r3, [pc, #92]	; (1a003610 <Chip_Clock_GetClockInputHz+0xac>)
1a0035b4:	6818      	ldr	r0, [r3, #0]
		break;
1a0035b6:	e01e      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0035b8:	4b16      	ldr	r3, [pc, #88]	; (1a003614 <Chip_Clock_GetClockInputHz+0xb0>)
1a0035ba:	6818      	ldr	r0, [r3, #0]
		break;
1a0035bc:	e01b      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0035be:	4b15      	ldr	r3, [pc, #84]	; (1a003614 <Chip_Clock_GetClockInputHz+0xb0>)
1a0035c0:	6858      	ldr	r0, [r3, #4]
		break;
1a0035c2:	e018      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0035c4:	f000 f86a 	bl	1a00369c <Chip_Clock_GetMainPLLHz>
		break;
1a0035c8:	e015      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0035ca:	2100      	movs	r1, #0
1a0035cc:	f000 f89c 	bl	1a003708 <Chip_Clock_GetDivRate>
		break;
1a0035d0:	e011      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0035d2:	2101      	movs	r1, #1
1a0035d4:	f000 f898 	bl	1a003708 <Chip_Clock_GetDivRate>
		break;
1a0035d8:	e00d      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0035da:	2102      	movs	r1, #2
1a0035dc:	f000 f894 	bl	1a003708 <Chip_Clock_GetDivRate>
		break;
1a0035e0:	e009      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0035e2:	2103      	movs	r1, #3
1a0035e4:	f000 f890 	bl	1a003708 <Chip_Clock_GetDivRate>
		break;
1a0035e8:	e005      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0035ea:	2104      	movs	r1, #4
1a0035ec:	f000 f88c 	bl	1a003708 <Chip_Clock_GetDivRate>
		break;
1a0035f0:	e001      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0035f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0035f6:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0035f8:	4803      	ldr	r0, [pc, #12]	; (1a003608 <Chip_Clock_GetClockInputHz+0xa4>)
1a0035fa:	e7fc      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0035fc:	4806      	ldr	r0, [pc, #24]	; (1a003618 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0035fe:	e7fa      	b.n	1a0035f6 <Chip_Clock_GetClockInputHz+0x92>
1a003600:	00b71b00 	.word	0x00b71b00
1a003604:	40043000 	.word	0x40043000
1a003608:	017d7840 	.word	0x017d7840
1a00360c:	1a004288 	.word	0x1a004288
1a003610:	1a0042b4 	.word	0x1a0042b4
1a003614:	10002b48 	.word	0x10002b48
1a003618:	02faf080 	.word	0x02faf080

1a00361c <Chip_Clock_CalcMainPLLValue>:
{
1a00361c:	b538      	push	{r3, r4, r5, lr}
1a00361e:	4605      	mov	r5, r0
1a003620:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003622:	7908      	ldrb	r0, [r1, #4]
1a003624:	f7ff ff9e 	bl	1a003564 <Chip_Clock_GetClockInputHz>
1a003628:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00362a:	4b19      	ldr	r3, [pc, #100]	; (1a003690 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00362c:	442b      	add	r3, r5
1a00362e:	4a19      	ldr	r2, [pc, #100]	; (1a003694 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003630:	4293      	cmp	r3, r2
1a003632:	d821      	bhi.n	1a003678 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003634:	b318      	cbz	r0, 1a00367e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003636:	2380      	movs	r3, #128	; 0x80
1a003638:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00363a:	2300      	movs	r3, #0
1a00363c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00363e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003640:	fbb5 f3f0 	udiv	r3, r5, r0
1a003644:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003646:	4a14      	ldr	r2, [pc, #80]	; (1a003698 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003648:	4295      	cmp	r5, r2
1a00364a:	d903      	bls.n	1a003654 <Chip_Clock_CalcMainPLLValue+0x38>
1a00364c:	fb03 f000 	mul.w	r0, r3, r0
1a003650:	42a8      	cmp	r0, r5
1a003652:	d007      	beq.n	1a003664 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003654:	4621      	mov	r1, r4
1a003656:	4628      	mov	r0, r5
1a003658:	f7ff fe96 	bl	1a003388 <pll_get_frac>
		if (!ppll->nsel) {
1a00365c:	68a3      	ldr	r3, [r4, #8]
1a00365e:	b18b      	cbz	r3, 1a003684 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003660:	3b01      	subs	r3, #1
1a003662:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003664:	6923      	ldr	r3, [r4, #16]
1a003666:	b183      	cbz	r3, 1a00368a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003668:	68e2      	ldr	r2, [r4, #12]
1a00366a:	b10a      	cbz	r2, 1a003670 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00366c:	3a01      	subs	r2, #1
1a00366e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003670:	3b01      	subs	r3, #1
1a003672:	6123      	str	r3, [r4, #16]
	return 0;
1a003674:	2000      	movs	r0, #0
}
1a003676:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00367c:	e7fb      	b.n	1a003676 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00367e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003682:	e7f8      	b.n	1a003676 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003688:	e7f5      	b.n	1a003676 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00368a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00368e:	e7f2      	b.n	1a003676 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003690:	ff6b3a10 	.word	0xff6b3a10
1a003694:	0b940510 	.word	0x0b940510
1a003698:	094c5eff 	.word	0x094c5eff

1a00369c <Chip_Clock_GetMainPLLHz>:
{
1a00369c:	b530      	push	{r4, r5, lr}
1a00369e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0036a0:	4d17      	ldr	r5, [pc, #92]	; (1a003700 <Chip_Clock_GetMainPLLHz+0x64>)
1a0036a2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0036a4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0036a8:	f7ff ff5c 	bl	1a003564 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0036ac:	4b15      	ldr	r3, [pc, #84]	; (1a003704 <Chip_Clock_GetMainPLLHz+0x68>)
1a0036ae:	681b      	ldr	r3, [r3, #0]
1a0036b0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0036b2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0036b4:	f013 0f01 	tst.w	r3, #1
1a0036b8:	d01f      	beq.n	1a0036fa <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0036ba:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0036be:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0036c2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0036c6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0036ca:	3301      	adds	r3, #1
	n = nsel + 1;
1a0036cc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0036ce:	f10d 0c08 	add.w	ip, sp, #8
1a0036d2:	4461      	add	r1, ip
1a0036d4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0036d8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0036dc:	d108      	bne.n	1a0036f0 <Chip_Clock_GetMainPLLHz+0x54>
1a0036de:	b93d      	cbnz	r5, 1a0036f0 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0036e0:	0049      	lsls	r1, r1, #1
1a0036e2:	fbb3 f3f1 	udiv	r3, r3, r1
1a0036e6:	fbb0 f0f2 	udiv	r0, r0, r2
1a0036ea:	fb00 f003 	mul.w	r0, r0, r3
1a0036ee:	e005      	b.n	1a0036fc <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0036f0:	fbb0 f0f2 	udiv	r0, r0, r2
1a0036f4:	fb03 f000 	mul.w	r0, r3, r0
1a0036f8:	e000      	b.n	1a0036fc <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0036fa:	2000      	movs	r0, #0
}
1a0036fc:	b003      	add	sp, #12
1a0036fe:	bd30      	pop	{r4, r5, pc}
1a003700:	40050000 	.word	0x40050000
1a003704:	1a004340 	.word	0x1a004340

1a003708 <Chip_Clock_GetDivRate>:
{
1a003708:	b538      	push	{r3, r4, r5, lr}
1a00370a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00370c:	4608      	mov	r0, r1
1a00370e:	f7ff ff0d 	bl	1a00352c <Chip_Clock_GetDividerSource>
1a003712:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003714:	4620      	mov	r0, r4
1a003716:	f7ff ff17 	bl	1a003548 <Chip_Clock_GetDividerDivisor>
1a00371a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00371c:	4628      	mov	r0, r5
1a00371e:	f7ff ff21 	bl	1a003564 <Chip_Clock_GetClockInputHz>
1a003722:	3401      	adds	r4, #1
}
1a003724:	fbb0 f0f4 	udiv	r0, r0, r4
1a003728:	bd38      	pop	{r3, r4, r5, pc}
1a00372a:	Address 0x000000001a00372a is out of bounds.


1a00372c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00372c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00372e:	f100 0416 	add.w	r4, r0, #22
1a003732:	00a4      	lsls	r4, r4, #2
1a003734:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003738:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00373c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00373e:	281b      	cmp	r0, #27
1a003740:	d813      	bhi.n	1a00376a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003742:	2911      	cmp	r1, #17
1a003744:	d01a      	beq.n	1a00377c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003746:	4d0e      	ldr	r5, [pc, #56]	; (1a003780 <Chip_Clock_SetBaseClock+0x54>)
1a003748:	4025      	ands	r5, r4

			if (autoblocken) {
1a00374a:	b10a      	cbz	r2, 1a003750 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00374c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003750:	b10b      	cbz	r3, 1a003756 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003752:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003756:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00375a:	3016      	adds	r0, #22
1a00375c:	0080      	lsls	r0, r0, #2
1a00375e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003762:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003766:	6045      	str	r5, [r0, #4]
1a003768:	e008      	b.n	1a00377c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00376a:	f044 0401 	orr.w	r4, r4, #1
1a00376e:	3016      	adds	r0, #22
1a003770:	0080      	lsls	r0, r0, #2
1a003772:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003776:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00377a:	6044      	str	r4, [r0, #4]
	}
}
1a00377c:	bc30      	pop	{r4, r5}
1a00377e:	4770      	bx	lr
1a003780:	e0fff7fe 	.word	0xe0fff7fe

1a003784 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003784:	281b      	cmp	r0, #27
1a003786:	d80c      	bhi.n	1a0037a2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003788:	3016      	adds	r0, #22
1a00378a:	0080      	lsls	r0, r0, #2
1a00378c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003790:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003794:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003796:	f010 0f01 	tst.w	r0, #1
1a00379a:	d104      	bne.n	1a0037a6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00379c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0037a0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0037a2:	2011      	movs	r0, #17
1a0037a4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0037a6:	2011      	movs	r0, #17
}
1a0037a8:	4770      	bx	lr

1a0037aa <Chip_Clock_GetBaseClocktHz>:
{
1a0037aa:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0037ac:	f7ff ffea 	bl	1a003784 <Chip_Clock_GetBaseClock>
1a0037b0:	f7ff fed8 	bl	1a003564 <Chip_Clock_GetClockInputHz>
}
1a0037b4:	bd08      	pop	{r3, pc}
1a0037b6:	Address 0x000000001a0037b6 is out of bounds.


1a0037b8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0037b8:	b969      	cbnz	r1, 1a0037d6 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0037ba:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0037bc:	b10a      	cbz	r2, 1a0037c2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0037be:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0037c2:	2b02      	cmp	r3, #2
1a0037c4:	d009      	beq.n	1a0037da <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0037c6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0037ca:	d209      	bcs.n	1a0037e0 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0037cc:	3020      	adds	r0, #32
1a0037ce:	4b07      	ldr	r3, [pc, #28]	; (1a0037ec <Chip_Clock_EnableOpts+0x34>)
1a0037d0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0037d4:	4770      	bx	lr
		reg |= (1 << 1);
1a0037d6:	2103      	movs	r1, #3
1a0037d8:	e7f0      	b.n	1a0037bc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0037da:	f041 0120 	orr.w	r1, r1, #32
1a0037de:	e7f2      	b.n	1a0037c6 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0037e0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0037e4:	4b02      	ldr	r3, [pc, #8]	; (1a0037f0 <Chip_Clock_EnableOpts+0x38>)
1a0037e6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0037ea:	4770      	bx	lr
1a0037ec:	40051000 	.word	0x40051000
1a0037f0:	40052000 	.word	0x40052000

1a0037f4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0037f4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0037f8:	d208      	bcs.n	1a00380c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0037fa:	4a09      	ldr	r2, [pc, #36]	; (1a003820 <Chip_Clock_Enable+0x2c>)
1a0037fc:	3020      	adds	r0, #32
1a0037fe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003802:	f043 0301 	orr.w	r3, r3, #1
1a003806:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00380a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00380c:	4a05      	ldr	r2, [pc, #20]	; (1a003824 <Chip_Clock_Enable+0x30>)
1a00380e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003812:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003816:	f043 0301 	orr.w	r3, r3, #1
1a00381a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00381e:	4770      	bx	lr
1a003820:	40051000 	.word	0x40051000
1a003824:	40052000 	.word	0x40052000

1a003828 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003828:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00382a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00382e:	d309      	bcc.n	1a003844 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003830:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003834:	4a0d      	ldr	r2, [pc, #52]	; (1a00386c <Chip_Clock_GetRate+0x44>)
1a003836:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00383a:	f014 0f01 	tst.w	r4, #1
1a00383e:	d107      	bne.n	1a003850 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003840:	2000      	movs	r0, #0
	}

	return rate;
}
1a003842:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003844:	f100 0320 	add.w	r3, r0, #32
1a003848:	4a09      	ldr	r2, [pc, #36]	; (1a003870 <Chip_Clock_GetRate+0x48>)
1a00384a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00384e:	e7f4      	b.n	1a00383a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003850:	f7ff fe20 	bl	1a003494 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003854:	f7ff ffa9 	bl	1a0037aa <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003858:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00385c:	d103      	bne.n	1a003866 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00385e:	2301      	movs	r3, #1
		rate = rate / div;
1a003860:	fbb0 f0f3 	udiv	r0, r0, r3
1a003864:	e7ed      	b.n	1a003842 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003866:	2302      	movs	r3, #2
1a003868:	e7fa      	b.n	1a003860 <Chip_Clock_GetRate+0x38>
1a00386a:	bf00      	nop
1a00386c:	40052000 	.word	0x40052000
1a003870:	40051000 	.word	0x40051000

1a003874 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a003874:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a003876:	4b0f      	ldr	r3, [pc, #60]	; (1a0038b4 <fpuInit+0x40>)
1a003878:	681b      	ldr	r3, [r3, #0]
1a00387a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a00387c:	4b0e      	ldr	r3, [pc, #56]	; (1a0038b8 <fpuInit+0x44>)
1a00387e:	681b      	ldr	r3, [r3, #0]
1a003880:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003882:	9a02      	ldr	r2, [sp, #8]
1a003884:	4b0d      	ldr	r3, [pc, #52]	; (1a0038bc <fpuInit+0x48>)
1a003886:	429a      	cmp	r2, r3
1a003888:	d00c      	beq.n	1a0038a4 <fpuInit+0x30>
1a00388a:	2300      	movs	r3, #0

	if (vfpPresent) {
1a00388c:	b143      	cbz	r3, 1a0038a0 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a00388e:	4a0c      	ldr	r2, [pc, #48]	; (1a0038c0 <fpuInit+0x4c>)
1a003890:	6813      	ldr	r3, [r2, #0]
1a003892:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a003894:	9b03      	ldr	r3, [sp, #12]
1a003896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00389a:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a00389c:	9b03      	ldr	r3, [sp, #12]
1a00389e:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0038a0:	b004      	add	sp, #16
1a0038a2:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0038a4:	9a01      	ldr	r2, [sp, #4]
1a0038a6:	4b07      	ldr	r3, [pc, #28]	; (1a0038c4 <fpuInit+0x50>)
1a0038a8:	429a      	cmp	r2, r3
1a0038aa:	d001      	beq.n	1a0038b0 <fpuInit+0x3c>
1a0038ac:	2300      	movs	r3, #0
1a0038ae:	e7ed      	b.n	1a00388c <fpuInit+0x18>
1a0038b0:	2301      	movs	r3, #1
1a0038b2:	e7eb      	b.n	1a00388c <fpuInit+0x18>
1a0038b4:	e000ef40 	.word	0xe000ef40
1a0038b8:	e000ef44 	.word	0xe000ef44
1a0038bc:	10110021 	.word	0x10110021
1a0038c0:	e000ed88 	.word	0xe000ed88
1a0038c4:	11000011 	.word	0x11000011

1a0038c8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0038c8:	4770      	bx	lr
1a0038ca:	Address 0x000000001a0038ca is out of bounds.


1a0038cc <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0038cc:	b570      	push	{r4, r5, r6, lr}
1a0038ce:	b08a      	sub	sp, #40	; 0x28
1a0038d0:	4605      	mov	r5, r0
1a0038d2:	460e      	mov	r6, r1
1a0038d4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0038d6:	f242 7310 	movw	r3, #10000	; 0x2710
1a0038da:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0038dc:	2806      	cmp	r0, #6
1a0038de:	d018      	beq.n	1a003912 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0038e0:	2300      	movs	r3, #0
1a0038e2:	2201      	movs	r2, #1
1a0038e4:	4629      	mov	r1, r5
1a0038e6:	2004      	movs	r0, #4
1a0038e8:	f7ff ff20 	bl	1a00372c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0038ec:	4a49      	ldr	r2, [pc, #292]	; (1a003a14 <Chip_SetupCoreClock+0x148>)
1a0038ee:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0038f0:	f043 0301 	orr.w	r3, r3, #1
1a0038f4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0038f6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0038fa:	a901      	add	r1, sp, #4
1a0038fc:	4630      	mov	r0, r6
1a0038fe:	f7ff fe8d 	bl	1a00361c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003902:	4b45      	ldr	r3, [pc, #276]	; (1a003a18 <Chip_SetupCoreClock+0x14c>)
1a003904:	429e      	cmp	r6, r3
1a003906:	d916      	bls.n	1a003936 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003908:	9b01      	ldr	r3, [sp, #4]
1a00390a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00390e:	d003      	beq.n	1a003918 <Chip_SetupCoreClock+0x4c>
1a003910:	e7fe      	b.n	1a003910 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003912:	f7ff fde5 	bl	1a0034e0 <Chip_Clock_EnableCrystal>
1a003916:	e7e3      	b.n	1a0038e0 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003918:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00391c:	d005      	beq.n	1a00392a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00391e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003922:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003924:	2500      	movs	r5, #0
			direct = 1;
1a003926:	2601      	movs	r6, #1
1a003928:	e007      	b.n	1a00393a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00392a:	9b04      	ldr	r3, [sp, #16]
1a00392c:	3301      	adds	r3, #1
1a00392e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003930:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003932:	2600      	movs	r6, #0
1a003934:	e001      	b.n	1a00393a <Chip_SetupCoreClock+0x6e>
1a003936:	2500      	movs	r5, #0
1a003938:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00393a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00393e:	9b01      	ldr	r3, [sp, #4]
1a003940:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003944:	9a05      	ldr	r2, [sp, #20]
1a003946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00394a:	9a03      	ldr	r2, [sp, #12]
1a00394c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003950:	9a04      	ldr	r2, [sp, #16]
1a003952:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003956:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00395a:	4a2e      	ldr	r2, [pc, #184]	; (1a003a14 <Chip_SetupCoreClock+0x148>)
1a00395c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00395e:	4b2d      	ldr	r3, [pc, #180]	; (1a003a14 <Chip_SetupCoreClock+0x148>)
1a003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003962:	f013 0f01 	tst.w	r3, #1
1a003966:	d0fa      	beq.n	1a00395e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003968:	2300      	movs	r3, #0
1a00396a:	2201      	movs	r2, #1
1a00396c:	2109      	movs	r1, #9
1a00396e:	2004      	movs	r0, #4
1a003970:	f7ff fedc 	bl	1a00372c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003974:	b1fe      	cbz	r6, 1a0039b6 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003976:	f242 7310 	movw	r3, #10000	; 0x2710
1a00397a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00397c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00397e:	1e5a      	subs	r2, r3, #1
1a003980:	9209      	str	r2, [sp, #36]	; 0x24
1a003982:	2b00      	cmp	r3, #0
1a003984:	d1fa      	bne.n	1a00397c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003986:	9b01      	ldr	r3, [sp, #4]
1a003988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00398c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00398e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003992:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003996:	9a05      	ldr	r2, [sp, #20]
1a003998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00399c:	9a03      	ldr	r2, [sp, #12]
1a00399e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0039a2:	9a04      	ldr	r2, [sp, #16]
1a0039a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0039a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0039ac:	4a19      	ldr	r2, [pc, #100]	; (1a003a14 <Chip_SetupCoreClock+0x148>)
1a0039ae:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0039b0:	b36c      	cbz	r4, 1a003a0e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0039b2:	2400      	movs	r4, #0
1a0039b4:	e029      	b.n	1a003a0a <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0039b6:	2d00      	cmp	r5, #0
1a0039b8:	d0fa      	beq.n	1a0039b0 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0039ba:	f242 7310 	movw	r3, #10000	; 0x2710
1a0039be:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0039c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0039c2:	1e5a      	subs	r2, r3, #1
1a0039c4:	9209      	str	r2, [sp, #36]	; 0x24
1a0039c6:	2b00      	cmp	r3, #0
1a0039c8:	d1fa      	bne.n	1a0039c0 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0039ca:	9b04      	ldr	r3, [sp, #16]
1a0039cc:	1e5a      	subs	r2, r3, #1
1a0039ce:	9204      	str	r2, [sp, #16]
1a0039d0:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0039d4:	9b01      	ldr	r3, [sp, #4]
1a0039d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0039da:	9905      	ldr	r1, [sp, #20]
1a0039dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0039e0:	9903      	ldr	r1, [sp, #12]
1a0039e2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0039e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0039ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0039ee:	4a09      	ldr	r2, [pc, #36]	; (1a003a14 <Chip_SetupCoreClock+0x148>)
1a0039f0:	6453      	str	r3, [r2, #68]	; 0x44
1a0039f2:	e7dd      	b.n	1a0039b0 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0039f4:	4809      	ldr	r0, [pc, #36]	; (1a003a1c <Chip_SetupCoreClock+0x150>)
1a0039f6:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0039fa:	78cb      	ldrb	r3, [r1, #3]
1a0039fc:	788a      	ldrb	r2, [r1, #2]
1a0039fe:	7849      	ldrb	r1, [r1, #1]
1a003a00:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003a04:	f7ff fe92 	bl	1a00372c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003a08:	3401      	adds	r4, #1
1a003a0a:	2c11      	cmp	r4, #17
1a003a0c:	d9f2      	bls.n	1a0039f4 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003a0e:	b00a      	add	sp, #40	; 0x28
1a003a10:	bd70      	pop	{r4, r5, r6, pc}
1a003a12:	bf00      	nop
1a003a14:	40050000 	.word	0x40050000
1a003a18:	068e7780 	.word	0x068e7780
1a003a1c:	1a0043b8 	.word	0x1a0043b8

1a003a20 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003a20:	2901      	cmp	r1, #1
1a003a22:	d000      	beq.n	1a003a26 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003a24:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003a26:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003a2a:	0082      	lsls	r2, r0, #2
1a003a2c:	4b03      	ldr	r3, [pc, #12]	; (1a003a3c <Chip_I2C_EventHandler+0x1c>)
1a003a2e:	4413      	add	r3, r2
1a003a30:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003a32:	7d13      	ldrb	r3, [r2, #20]
1a003a34:	b2db      	uxtb	r3, r3
1a003a36:	2b04      	cmp	r3, #4
1a003a38:	d0fb      	beq.n	1a003a32 <Chip_I2C_EventHandler+0x12>
1a003a3a:	e7f3      	b.n	1a003a24 <Chip_I2C_EventHandler+0x4>
1a003a3c:	10000098 	.word	0x10000098

1a003a40 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003a40:	b570      	push	{r4, r5, r6, lr}
1a003a42:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003a44:	4e06      	ldr	r6, [pc, #24]	; (1a003a60 <Chip_I2C_Init+0x20>)
1a003a46:	00c4      	lsls	r4, r0, #3
1a003a48:	1a22      	subs	r2, r4, r0
1a003a4a:	0093      	lsls	r3, r2, #2
1a003a4c:	4433      	add	r3, r6
1a003a4e:	8898      	ldrh	r0, [r3, #4]
1a003a50:	f7ff fed0 	bl	1a0037f4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003a54:	1b64      	subs	r4, r4, r5
1a003a56:	00a3      	lsls	r3, r4, #2
1a003a58:	58f3      	ldr	r3, [r6, r3]
1a003a5a:	226c      	movs	r2, #108	; 0x6c
1a003a5c:	619a      	str	r2, [r3, #24]
}
1a003a5e:	bd70      	pop	{r4, r5, r6, pc}
1a003a60:	10000098 	.word	0x10000098

1a003a64 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a68:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003a6a:	4e0b      	ldr	r6, [pc, #44]	; (1a003a98 <Chip_I2C_SetClockRate+0x34>)
1a003a6c:	00c5      	lsls	r5, r0, #3
1a003a6e:	1a2b      	subs	r3, r5, r0
1a003a70:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003a74:	eb06 0308 	add.w	r3, r6, r8
1a003a78:	8898      	ldrh	r0, [r3, #4]
1a003a7a:	f7ff fed5 	bl	1a003828 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003a7e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003a82:	f856 3008 	ldr.w	r3, [r6, r8]
1a003a86:	0842      	lsrs	r2, r0, #1
1a003a88:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003a8a:	f856 3008 	ldr.w	r3, [r6, r8]
1a003a8e:	691a      	ldr	r2, [r3, #16]
1a003a90:	1a80      	subs	r0, r0, r2
1a003a92:	6158      	str	r0, [r3, #20]
}
1a003a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003a98:	10000098 	.word	0x10000098

1a003a9c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003a9c:	4b03      	ldr	r3, [pc, #12]	; (1a003aac <Chip_SSP_GetClockIndex+0x10>)
1a003a9e:	4298      	cmp	r0, r3
1a003aa0:	d001      	beq.n	1a003aa6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003aa2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003aa4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003aa6:	20a5      	movs	r0, #165	; 0xa5
1a003aa8:	4770      	bx	lr
1a003aaa:	bf00      	nop
1a003aac:	400c5000 	.word	0x400c5000

1a003ab0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003ab0:	4b04      	ldr	r3, [pc, #16]	; (1a003ac4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003ab2:	4298      	cmp	r0, r3
1a003ab4:	d002      	beq.n	1a003abc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003ab6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003aba:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003abc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003ac0:	4770      	bx	lr
1a003ac2:	bf00      	nop
1a003ac4:	400c5000 	.word	0x400c5000

1a003ac8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003ac8:	6803      	ldr	r3, [r0, #0]
1a003aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003ace:	0209      	lsls	r1, r1, #8
1a003ad0:	b289      	uxth	r1, r1
1a003ad2:	4319      	orrs	r1, r3
1a003ad4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003ad6:	6102      	str	r2, [r0, #16]
}
1a003ad8:	4770      	bx	lr

1a003ada <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003ada:	b570      	push	{r4, r5, r6, lr}
1a003adc:	4606      	mov	r6, r0
1a003ade:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003ae0:	f7ff ffe6 	bl	1a003ab0 <Chip_SSP_GetPeriphClockIndex>
1a003ae4:	f7ff fea0 	bl	1a003828 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003ae8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003aee:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003af0:	e000      	b.n	1a003af4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003af2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003af4:	42ab      	cmp	r3, r5
1a003af6:	d90b      	bls.n	1a003b10 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003af8:	1c4c      	adds	r4, r1, #1
1a003afa:	fb02 f304 	mul.w	r3, r2, r4
1a003afe:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003b02:	429d      	cmp	r5, r3
1a003b04:	d2f6      	bcs.n	1a003af4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003b06:	2cff      	cmp	r4, #255	; 0xff
1a003b08:	d9f3      	bls.n	1a003af2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003b0a:	3202      	adds	r2, #2
				cr0_div = 0;
1a003b0c:	2100      	movs	r1, #0
1a003b0e:	e7f1      	b.n	1a003af4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003b10:	4630      	mov	r0, r6
1a003b12:	f7ff ffd9 	bl	1a003ac8 <Chip_SSP_SetClockRate>
}
1a003b16:	bd70      	pop	{r4, r5, r6, pc}

1a003b18 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003b18:	b510      	push	{r4, lr}
1a003b1a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003b1c:	f7ff ffbe 	bl	1a003a9c <Chip_SSP_GetClockIndex>
1a003b20:	f7ff fe68 	bl	1a0037f4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003b24:	4620      	mov	r0, r4
1a003b26:	f7ff ffc3 	bl	1a003ab0 <Chip_SSP_GetPeriphClockIndex>
1a003b2a:	f7ff fe63 	bl	1a0037f4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003b2e:	6863      	ldr	r3, [r4, #4]
1a003b30:	f023 0304 	bic.w	r3, r3, #4
1a003b34:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003b36:	6823      	ldr	r3, [r4, #0]
1a003b38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003b3c:	f043 0307 	orr.w	r3, r3, #7
1a003b40:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003b42:	4902      	ldr	r1, [pc, #8]	; (1a003b4c <Chip_SSP_Init+0x34>)
1a003b44:	4620      	mov	r0, r4
1a003b46:	f7ff ffc8 	bl	1a003ada <Chip_SSP_SetBitRate>
}
1a003b4a:	bd10      	pop	{r4, pc}
1a003b4c:	000186a0 	.word	0x000186a0

1a003b50 <ResetISR>:
void ResetISR(void) {
1a003b50:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a003b52:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a003b54:	4b18      	ldr	r3, [pc, #96]	; (1a003bb8 <ResetISR+0x68>)
1a003b56:	4a19      	ldr	r2, [pc, #100]	; (1a003bbc <ResetISR+0x6c>)
1a003b58:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003b5a:	3304      	adds	r3, #4
1a003b5c:	4a18      	ldr	r2, [pc, #96]	; (1a003bc0 <ResetISR+0x70>)
1a003b5e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003b60:	2300      	movs	r3, #0
1a003b62:	e005      	b.n	1a003b70 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a003b64:	4a17      	ldr	r2, [pc, #92]	; (1a003bc4 <ResetISR+0x74>)
1a003b66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a003b6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003b6e:	3301      	adds	r3, #1
1a003b70:	2b07      	cmp	r3, #7
1a003b72:	d9f7      	bls.n	1a003b64 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a003b74:	b662      	cpsie	i
    SystemInit();
1a003b76:	f7ff fa0d 	bl	1a002f94 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a003b7a:	4b13      	ldr	r3, [pc, #76]	; (1a003bc8 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a003b7c:	e007      	b.n	1a003b8e <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a003b7e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a003b82:	689a      	ldr	r2, [r3, #8]
1a003b84:	6859      	ldr	r1, [r3, #4]
1a003b86:	6818      	ldr	r0, [r3, #0]
1a003b88:	f7fc fb00 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a003b8c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a003b8e:	4a0f      	ldr	r2, [pc, #60]	; (1a003bcc <ResetISR+0x7c>)
1a003b90:	4293      	cmp	r3, r2
1a003b92:	d3f4      	bcc.n	1a003b7e <ResetISR+0x2e>
1a003b94:	e006      	b.n	1a003ba4 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a003b96:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a003b98:	6859      	ldr	r1, [r3, #4]
1a003b9a:	f854 0b08 	ldr.w	r0, [r4], #8
1a003b9e:	f7fc fb04 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a003ba2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a003ba4:	4a0a      	ldr	r2, [pc, #40]	; (1a003bd0 <ResetISR+0x80>)
1a003ba6:	4293      	cmp	r3, r2
1a003ba8:	d3f5      	bcc.n	1a003b96 <ResetISR+0x46>
    __libc_init_array();
1a003baa:	f000 f9e5 	bl	1a003f78 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a003bae:	f7ff f9db 	bl	1a002f68 <Board_Init>
    main();
1a003bb2:	f7fc fdc5 	bl	1a000740 <main>
1a003bb6:	e7fe      	b.n	1a003bb6 <ResetISR+0x66>
1a003bb8:	40053100 	.word	0x40053100
1a003bbc:	10df1000 	.word	0x10df1000
1a003bc0:	01dff7ff 	.word	0x01dff7ff
1a003bc4:	e000e280 	.word	0xe000e280
1a003bc8:	1a000114 	.word	0x1a000114
1a003bcc:	1a000150 	.word	0x1a000150
1a003bd0:	1a000178 	.word	0x1a000178

1a003bd4 <_init>:
void _init(void) {}
1a003bd4:	4770      	bx	lr
1a003bd6:	Address 0x000000001a003bd6 is out of bounds.


1a003bd8 <__aeabi_ldivmod>:
1a003bd8:	b97b      	cbnz	r3, 1a003bfa <__aeabi_ldivmod+0x22>
1a003bda:	b972      	cbnz	r2, 1a003bfa <__aeabi_ldivmod+0x22>
1a003bdc:	2900      	cmp	r1, #0
1a003bde:	bfbe      	ittt	lt
1a003be0:	2000      	movlt	r0, #0
1a003be2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a003be6:	e006      	blt.n	1a003bf6 <__aeabi_ldivmod+0x1e>
1a003be8:	bf08      	it	eq
1a003bea:	2800      	cmpeq	r0, #0
1a003bec:	bf1c      	itt	ne
1a003bee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a003bf2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003bf6:	f000 b9bd 	b.w	1a003f74 <__aeabi_idiv0>
1a003bfa:	f1ad 0c08 	sub.w	ip, sp, #8
1a003bfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003c02:	2900      	cmp	r1, #0
1a003c04:	db09      	blt.n	1a003c1a <__aeabi_ldivmod+0x42>
1a003c06:	2b00      	cmp	r3, #0
1a003c08:	db1a      	blt.n	1a003c40 <__aeabi_ldivmod+0x68>
1a003c0a:	f000 f84d 	bl	1a003ca8 <__udivmoddi4>
1a003c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003c16:	b004      	add	sp, #16
1a003c18:	4770      	bx	lr
1a003c1a:	4240      	negs	r0, r0
1a003c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003c20:	2b00      	cmp	r3, #0
1a003c22:	db1b      	blt.n	1a003c5c <__aeabi_ldivmod+0x84>
1a003c24:	f000 f840 	bl	1a003ca8 <__udivmoddi4>
1a003c28:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003c30:	b004      	add	sp, #16
1a003c32:	4240      	negs	r0, r0
1a003c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003c38:	4252      	negs	r2, r2
1a003c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003c3e:	4770      	bx	lr
1a003c40:	4252      	negs	r2, r2
1a003c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003c46:	f000 f82f 	bl	1a003ca8 <__udivmoddi4>
1a003c4a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003c52:	b004      	add	sp, #16
1a003c54:	4240      	negs	r0, r0
1a003c56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003c5a:	4770      	bx	lr
1a003c5c:	4252      	negs	r2, r2
1a003c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003c62:	f000 f821 	bl	1a003ca8 <__udivmoddi4>
1a003c66:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003c6e:	b004      	add	sp, #16
1a003c70:	4252      	negs	r2, r2
1a003c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003c76:	4770      	bx	lr

1a003c78 <__aeabi_uldivmod>:
1a003c78:	b953      	cbnz	r3, 1a003c90 <__aeabi_uldivmod+0x18>
1a003c7a:	b94a      	cbnz	r2, 1a003c90 <__aeabi_uldivmod+0x18>
1a003c7c:	2900      	cmp	r1, #0
1a003c7e:	bf08      	it	eq
1a003c80:	2800      	cmpeq	r0, #0
1a003c82:	bf1c      	itt	ne
1a003c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003c8c:	f000 b972 	b.w	1a003f74 <__aeabi_idiv0>
1a003c90:	f1ad 0c08 	sub.w	ip, sp, #8
1a003c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003c98:	f000 f806 	bl	1a003ca8 <__udivmoddi4>
1a003c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003ca4:	b004      	add	sp, #16
1a003ca6:	4770      	bx	lr

1a003ca8 <__udivmoddi4>:
1a003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003cac:	9e08      	ldr	r6, [sp, #32]
1a003cae:	4604      	mov	r4, r0
1a003cb0:	4688      	mov	r8, r1
1a003cb2:	2b00      	cmp	r3, #0
1a003cb4:	d14b      	bne.n	1a003d4e <__udivmoddi4+0xa6>
1a003cb6:	428a      	cmp	r2, r1
1a003cb8:	4615      	mov	r5, r2
1a003cba:	d967      	bls.n	1a003d8c <__udivmoddi4+0xe4>
1a003cbc:	fab2 f282 	clz	r2, r2
1a003cc0:	b14a      	cbz	r2, 1a003cd6 <__udivmoddi4+0x2e>
1a003cc2:	f1c2 0720 	rsb	r7, r2, #32
1a003cc6:	fa01 f302 	lsl.w	r3, r1, r2
1a003cca:	fa20 f707 	lsr.w	r7, r0, r7
1a003cce:	4095      	lsls	r5, r2
1a003cd0:	ea47 0803 	orr.w	r8, r7, r3
1a003cd4:	4094      	lsls	r4, r2
1a003cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003cda:	0c23      	lsrs	r3, r4, #16
1a003cdc:	fbb8 f7fe 	udiv	r7, r8, lr
1a003ce0:	fa1f fc85 	uxth.w	ip, r5
1a003ce4:	fb0e 8817 	mls	r8, lr, r7, r8
1a003ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003cec:	fb07 f10c 	mul.w	r1, r7, ip
1a003cf0:	4299      	cmp	r1, r3
1a003cf2:	d909      	bls.n	1a003d08 <__udivmoddi4+0x60>
1a003cf4:	18eb      	adds	r3, r5, r3
1a003cf6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003cfa:	f080 811b 	bcs.w	1a003f34 <__udivmoddi4+0x28c>
1a003cfe:	4299      	cmp	r1, r3
1a003d00:	f240 8118 	bls.w	1a003f34 <__udivmoddi4+0x28c>
1a003d04:	3f02      	subs	r7, #2
1a003d06:	442b      	add	r3, r5
1a003d08:	1a5b      	subs	r3, r3, r1
1a003d0a:	b2a4      	uxth	r4, r4
1a003d0c:	fbb3 f0fe 	udiv	r0, r3, lr
1a003d10:	fb0e 3310 	mls	r3, lr, r0, r3
1a003d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003d18:	fb00 fc0c 	mul.w	ip, r0, ip
1a003d1c:	45a4      	cmp	ip, r4
1a003d1e:	d909      	bls.n	1a003d34 <__udivmoddi4+0x8c>
1a003d20:	192c      	adds	r4, r5, r4
1a003d22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003d26:	f080 8107 	bcs.w	1a003f38 <__udivmoddi4+0x290>
1a003d2a:	45a4      	cmp	ip, r4
1a003d2c:	f240 8104 	bls.w	1a003f38 <__udivmoddi4+0x290>
1a003d30:	3802      	subs	r0, #2
1a003d32:	442c      	add	r4, r5
1a003d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003d38:	eba4 040c 	sub.w	r4, r4, ip
1a003d3c:	2700      	movs	r7, #0
1a003d3e:	b11e      	cbz	r6, 1a003d48 <__udivmoddi4+0xa0>
1a003d40:	40d4      	lsrs	r4, r2
1a003d42:	2300      	movs	r3, #0
1a003d44:	e9c6 4300 	strd	r4, r3, [r6]
1a003d48:	4639      	mov	r1, r7
1a003d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003d4e:	428b      	cmp	r3, r1
1a003d50:	d909      	bls.n	1a003d66 <__udivmoddi4+0xbe>
1a003d52:	2e00      	cmp	r6, #0
1a003d54:	f000 80eb 	beq.w	1a003f2e <__udivmoddi4+0x286>
1a003d58:	2700      	movs	r7, #0
1a003d5a:	e9c6 0100 	strd	r0, r1, [r6]
1a003d5e:	4638      	mov	r0, r7
1a003d60:	4639      	mov	r1, r7
1a003d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003d66:	fab3 f783 	clz	r7, r3
1a003d6a:	2f00      	cmp	r7, #0
1a003d6c:	d147      	bne.n	1a003dfe <__udivmoddi4+0x156>
1a003d6e:	428b      	cmp	r3, r1
1a003d70:	d302      	bcc.n	1a003d78 <__udivmoddi4+0xd0>
1a003d72:	4282      	cmp	r2, r0
1a003d74:	f200 80fa 	bhi.w	1a003f6c <__udivmoddi4+0x2c4>
1a003d78:	1a84      	subs	r4, r0, r2
1a003d7a:	eb61 0303 	sbc.w	r3, r1, r3
1a003d7e:	2001      	movs	r0, #1
1a003d80:	4698      	mov	r8, r3
1a003d82:	2e00      	cmp	r6, #0
1a003d84:	d0e0      	beq.n	1a003d48 <__udivmoddi4+0xa0>
1a003d86:	e9c6 4800 	strd	r4, r8, [r6]
1a003d8a:	e7dd      	b.n	1a003d48 <__udivmoddi4+0xa0>
1a003d8c:	b902      	cbnz	r2, 1a003d90 <__udivmoddi4+0xe8>
1a003d8e:	deff      	udf	#255	; 0xff
1a003d90:	fab2 f282 	clz	r2, r2
1a003d94:	2a00      	cmp	r2, #0
1a003d96:	f040 808f 	bne.w	1a003eb8 <__udivmoddi4+0x210>
1a003d9a:	1b49      	subs	r1, r1, r5
1a003d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003da0:	fa1f f885 	uxth.w	r8, r5
1a003da4:	2701      	movs	r7, #1
1a003da6:	fbb1 fcfe 	udiv	ip, r1, lr
1a003daa:	0c23      	lsrs	r3, r4, #16
1a003dac:	fb0e 111c 	mls	r1, lr, ip, r1
1a003db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003db4:	fb08 f10c 	mul.w	r1, r8, ip
1a003db8:	4299      	cmp	r1, r3
1a003dba:	d907      	bls.n	1a003dcc <__udivmoddi4+0x124>
1a003dbc:	18eb      	adds	r3, r5, r3
1a003dbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003dc2:	d202      	bcs.n	1a003dca <__udivmoddi4+0x122>
1a003dc4:	4299      	cmp	r1, r3
1a003dc6:	f200 80cd 	bhi.w	1a003f64 <__udivmoddi4+0x2bc>
1a003dca:	4684      	mov	ip, r0
1a003dcc:	1a59      	subs	r1, r3, r1
1a003dce:	b2a3      	uxth	r3, r4
1a003dd0:	fbb1 f0fe 	udiv	r0, r1, lr
1a003dd4:	fb0e 1410 	mls	r4, lr, r0, r1
1a003dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003ddc:	fb08 f800 	mul.w	r8, r8, r0
1a003de0:	45a0      	cmp	r8, r4
1a003de2:	d907      	bls.n	1a003df4 <__udivmoddi4+0x14c>
1a003de4:	192c      	adds	r4, r5, r4
1a003de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003dea:	d202      	bcs.n	1a003df2 <__udivmoddi4+0x14a>
1a003dec:	45a0      	cmp	r8, r4
1a003dee:	f200 80b6 	bhi.w	1a003f5e <__udivmoddi4+0x2b6>
1a003df2:	4618      	mov	r0, r3
1a003df4:	eba4 0408 	sub.w	r4, r4, r8
1a003df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003dfc:	e79f      	b.n	1a003d3e <__udivmoddi4+0x96>
1a003dfe:	f1c7 0c20 	rsb	ip, r7, #32
1a003e02:	40bb      	lsls	r3, r7
1a003e04:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003e08:	ea4e 0e03 	orr.w	lr, lr, r3
1a003e0c:	fa01 f407 	lsl.w	r4, r1, r7
1a003e10:	fa20 f50c 	lsr.w	r5, r0, ip
1a003e14:	fa21 f30c 	lsr.w	r3, r1, ip
1a003e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003e1c:	4325      	orrs	r5, r4
1a003e1e:	fbb3 f9f8 	udiv	r9, r3, r8
1a003e22:	0c2c      	lsrs	r4, r5, #16
1a003e24:	fb08 3319 	mls	r3, r8, r9, r3
1a003e28:	fa1f fa8e 	uxth.w	sl, lr
1a003e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003e30:	fb09 f40a 	mul.w	r4, r9, sl
1a003e34:	429c      	cmp	r4, r3
1a003e36:	fa02 f207 	lsl.w	r2, r2, r7
1a003e3a:	fa00 f107 	lsl.w	r1, r0, r7
1a003e3e:	d90b      	bls.n	1a003e58 <__udivmoddi4+0x1b0>
1a003e40:	eb1e 0303 	adds.w	r3, lr, r3
1a003e44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003e48:	f080 8087 	bcs.w	1a003f5a <__udivmoddi4+0x2b2>
1a003e4c:	429c      	cmp	r4, r3
1a003e4e:	f240 8084 	bls.w	1a003f5a <__udivmoddi4+0x2b2>
1a003e52:	f1a9 0902 	sub.w	r9, r9, #2
1a003e56:	4473      	add	r3, lr
1a003e58:	1b1b      	subs	r3, r3, r4
1a003e5a:	b2ad      	uxth	r5, r5
1a003e5c:	fbb3 f0f8 	udiv	r0, r3, r8
1a003e60:	fb08 3310 	mls	r3, r8, r0, r3
1a003e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003e68:	fb00 fa0a 	mul.w	sl, r0, sl
1a003e6c:	45a2      	cmp	sl, r4
1a003e6e:	d908      	bls.n	1a003e82 <__udivmoddi4+0x1da>
1a003e70:	eb1e 0404 	adds.w	r4, lr, r4
1a003e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003e78:	d26b      	bcs.n	1a003f52 <__udivmoddi4+0x2aa>
1a003e7a:	45a2      	cmp	sl, r4
1a003e7c:	d969      	bls.n	1a003f52 <__udivmoddi4+0x2aa>
1a003e7e:	3802      	subs	r0, #2
1a003e80:	4474      	add	r4, lr
1a003e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003e86:	fba0 8902 	umull	r8, r9, r0, r2
1a003e8a:	eba4 040a 	sub.w	r4, r4, sl
1a003e8e:	454c      	cmp	r4, r9
1a003e90:	46c2      	mov	sl, r8
1a003e92:	464b      	mov	r3, r9
1a003e94:	d354      	bcc.n	1a003f40 <__udivmoddi4+0x298>
1a003e96:	d051      	beq.n	1a003f3c <__udivmoddi4+0x294>
1a003e98:	2e00      	cmp	r6, #0
1a003e9a:	d069      	beq.n	1a003f70 <__udivmoddi4+0x2c8>
1a003e9c:	ebb1 050a 	subs.w	r5, r1, sl
1a003ea0:	eb64 0403 	sbc.w	r4, r4, r3
1a003ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003ea8:	40fd      	lsrs	r5, r7
1a003eaa:	40fc      	lsrs	r4, r7
1a003eac:	ea4c 0505 	orr.w	r5, ip, r5
1a003eb0:	e9c6 5400 	strd	r5, r4, [r6]
1a003eb4:	2700      	movs	r7, #0
1a003eb6:	e747      	b.n	1a003d48 <__udivmoddi4+0xa0>
1a003eb8:	f1c2 0320 	rsb	r3, r2, #32
1a003ebc:	fa20 f703 	lsr.w	r7, r0, r3
1a003ec0:	4095      	lsls	r5, r2
1a003ec2:	fa01 f002 	lsl.w	r0, r1, r2
1a003ec6:	fa21 f303 	lsr.w	r3, r1, r3
1a003eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003ece:	4338      	orrs	r0, r7
1a003ed0:	0c01      	lsrs	r1, r0, #16
1a003ed2:	fbb3 f7fe 	udiv	r7, r3, lr
1a003ed6:	fa1f f885 	uxth.w	r8, r5
1a003eda:	fb0e 3317 	mls	r3, lr, r7, r3
1a003ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003ee2:	fb07 f308 	mul.w	r3, r7, r8
1a003ee6:	428b      	cmp	r3, r1
1a003ee8:	fa04 f402 	lsl.w	r4, r4, r2
1a003eec:	d907      	bls.n	1a003efe <__udivmoddi4+0x256>
1a003eee:	1869      	adds	r1, r5, r1
1a003ef0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003ef4:	d22f      	bcs.n	1a003f56 <__udivmoddi4+0x2ae>
1a003ef6:	428b      	cmp	r3, r1
1a003ef8:	d92d      	bls.n	1a003f56 <__udivmoddi4+0x2ae>
1a003efa:	3f02      	subs	r7, #2
1a003efc:	4429      	add	r1, r5
1a003efe:	1acb      	subs	r3, r1, r3
1a003f00:	b281      	uxth	r1, r0
1a003f02:	fbb3 f0fe 	udiv	r0, r3, lr
1a003f06:	fb0e 3310 	mls	r3, lr, r0, r3
1a003f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003f0e:	fb00 f308 	mul.w	r3, r0, r8
1a003f12:	428b      	cmp	r3, r1
1a003f14:	d907      	bls.n	1a003f26 <__udivmoddi4+0x27e>
1a003f16:	1869      	adds	r1, r5, r1
1a003f18:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003f1c:	d217      	bcs.n	1a003f4e <__udivmoddi4+0x2a6>
1a003f1e:	428b      	cmp	r3, r1
1a003f20:	d915      	bls.n	1a003f4e <__udivmoddi4+0x2a6>
1a003f22:	3802      	subs	r0, #2
1a003f24:	4429      	add	r1, r5
1a003f26:	1ac9      	subs	r1, r1, r3
1a003f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003f2c:	e73b      	b.n	1a003da6 <__udivmoddi4+0xfe>
1a003f2e:	4637      	mov	r7, r6
1a003f30:	4630      	mov	r0, r6
1a003f32:	e709      	b.n	1a003d48 <__udivmoddi4+0xa0>
1a003f34:	4607      	mov	r7, r0
1a003f36:	e6e7      	b.n	1a003d08 <__udivmoddi4+0x60>
1a003f38:	4618      	mov	r0, r3
1a003f3a:	e6fb      	b.n	1a003d34 <__udivmoddi4+0x8c>
1a003f3c:	4541      	cmp	r1, r8
1a003f3e:	d2ab      	bcs.n	1a003e98 <__udivmoddi4+0x1f0>
1a003f40:	ebb8 0a02 	subs.w	sl, r8, r2
1a003f44:	eb69 020e 	sbc.w	r2, r9, lr
1a003f48:	3801      	subs	r0, #1
1a003f4a:	4613      	mov	r3, r2
1a003f4c:	e7a4      	b.n	1a003e98 <__udivmoddi4+0x1f0>
1a003f4e:	4660      	mov	r0, ip
1a003f50:	e7e9      	b.n	1a003f26 <__udivmoddi4+0x27e>
1a003f52:	4618      	mov	r0, r3
1a003f54:	e795      	b.n	1a003e82 <__udivmoddi4+0x1da>
1a003f56:	4667      	mov	r7, ip
1a003f58:	e7d1      	b.n	1a003efe <__udivmoddi4+0x256>
1a003f5a:	4681      	mov	r9, r0
1a003f5c:	e77c      	b.n	1a003e58 <__udivmoddi4+0x1b0>
1a003f5e:	3802      	subs	r0, #2
1a003f60:	442c      	add	r4, r5
1a003f62:	e747      	b.n	1a003df4 <__udivmoddi4+0x14c>
1a003f64:	f1ac 0c02 	sub.w	ip, ip, #2
1a003f68:	442b      	add	r3, r5
1a003f6a:	e72f      	b.n	1a003dcc <__udivmoddi4+0x124>
1a003f6c:	4638      	mov	r0, r7
1a003f6e:	e708      	b.n	1a003d82 <__udivmoddi4+0xda>
1a003f70:	4637      	mov	r7, r6
1a003f72:	e6e9      	b.n	1a003d48 <__udivmoddi4+0xa0>

1a003f74 <__aeabi_idiv0>:
1a003f74:	4770      	bx	lr
1a003f76:	bf00      	nop

1a003f78 <__libc_init_array>:
1a003f78:	b570      	push	{r4, r5, r6, lr}
1a003f7a:	4e0d      	ldr	r6, [pc, #52]	; (1a003fb0 <__libc_init_array+0x38>)
1a003f7c:	4c0d      	ldr	r4, [pc, #52]	; (1a003fb4 <__libc_init_array+0x3c>)
1a003f7e:	1ba4      	subs	r4, r4, r6
1a003f80:	10a4      	asrs	r4, r4, #2
1a003f82:	2500      	movs	r5, #0
1a003f84:	42a5      	cmp	r5, r4
1a003f86:	d109      	bne.n	1a003f9c <__libc_init_array+0x24>
1a003f88:	4e0b      	ldr	r6, [pc, #44]	; (1a003fb8 <__libc_init_array+0x40>)
1a003f8a:	4c0c      	ldr	r4, [pc, #48]	; (1a003fbc <__libc_init_array+0x44>)
1a003f8c:	f7ff fe22 	bl	1a003bd4 <_init>
1a003f90:	1ba4      	subs	r4, r4, r6
1a003f92:	10a4      	asrs	r4, r4, #2
1a003f94:	2500      	movs	r5, #0
1a003f96:	42a5      	cmp	r5, r4
1a003f98:	d105      	bne.n	1a003fa6 <__libc_init_array+0x2e>
1a003f9a:	bd70      	pop	{r4, r5, r6, pc}
1a003f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003fa0:	4798      	blx	r3
1a003fa2:	3501      	adds	r5, #1
1a003fa4:	e7ee      	b.n	1a003f84 <__libc_init_array+0xc>
1a003fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003faa:	4798      	blx	r3
1a003fac:	3501      	adds	r5, #1
1a003fae:	e7f2      	b.n	1a003f96 <__libc_init_array+0x1e>
1a003fb0:	1a004400 	.word	0x1a004400
1a003fb4:	1a004400 	.word	0x1a004400
1a003fb8:	1a004400 	.word	0x1a004400
1a003fbc:	1a004400 	.word	0x1a004400

1a003fc0 <memcpy>:
1a003fc0:	b510      	push	{r4, lr}
1a003fc2:	1e43      	subs	r3, r0, #1
1a003fc4:	440a      	add	r2, r1
1a003fc6:	4291      	cmp	r1, r2
1a003fc8:	d100      	bne.n	1a003fcc <memcpy+0xc>
1a003fca:	bd10      	pop	{r4, pc}
1a003fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003fd4:	e7f7      	b.n	1a003fc6 <memcpy+0x6>

1a003fd6 <memset>:
1a003fd6:	4402      	add	r2, r0
1a003fd8:	4603      	mov	r3, r0
1a003fda:	4293      	cmp	r3, r2
1a003fdc:	d100      	bne.n	1a003fe0 <memset+0xa>
1a003fde:	4770      	bx	lr
1a003fe0:	f803 1b01 	strb.w	r1, [r3], #1
1a003fe4:	e7f9      	b.n	1a003fda <memset+0x4>
1a003fe6:	ffff 6174 	vsra.u32	q11, q10, #1
1a003fea:	6b73      	.short	0x6b73
1a003fec:	5664654c 	.word	0x5664654c
1a003ff0:	61697261 	.word	0x61697261
1a003ff4:	00656c62 	.word	0x00656c62
1a003ff8:	6b736174 	.word	0x6b736174
1a003ffc:	4166654d 	.word	0x4166654d
1a004000:	7269746e 	.word	0x7269746e
1a004004:	6f626572 	.word	0x6f626572
1a004008:	00006574 	.word	0x00006574
1a00400c:	6b736174 	.word	0x6b736174
1a004010:	696e6553 	.word	0x696e6553
1a004014:	65546c61 	.word	0x65546c61
1a004018:	31616c63 	.word	0x31616c63
1a00401c:	00000000 	.word	0x00000000
1a004020:	6b736174 	.word	0x6b736174
1a004024:	696e6553 	.word	0x696e6553
1a004028:	65546c61 	.word	0x65546c61
1a00402c:	32616c63 	.word	0x32616c63
1a004030:	00000000 	.word	0x00000000
1a004034:	6b736174 	.word	0x6b736174
1a004038:	696e6553 	.word	0x696e6553
1a00403c:	65546c61 	.word	0x65546c61
1a004040:	33616c63 	.word	0x33616c63
1a004044:	00000000 	.word	0x00000000
1a004048:	6b736174 	.word	0x6b736174
1a00404c:	696e6553 	.word	0x696e6553
1a004050:	65546c61 	.word	0x65546c61
1a004054:	34616c63 	.word	0x34616c63
1a004058:	00000000 	.word	0x00000000
1a00405c:	63696e49 	.word	0x63696e49
1a004060:	646e6169 	.word	0x646e6169
1a004064:	6373206f 	.word	0x6373206f
1a004068:	75646568 	.word	0x75646568
1a00406c:	0072656c 	.word	0x0072656c
1a004070:	2046454d 	.word	0x2046454d
1a004074:	61666544 	.word	0x61666544
1a004078:	0d746c75 	.word	0x0d746c75
1a00407c:	ffff000a 	.word	0xffff000a
1a004080:	6d656954 	.word	0x6d656954
1a004084:	65206f70 	.word	0x65206f70
1a004088:	6e65636e 	.word	0x6e65636e
1a00408c:	6f646964 	.word	0x6f646964
1a004090:	0020203a 	.word	0x0020203a
1a004094:	454c4449 	.word	0x454c4449
1a004098:	ffffff00 	.word	0xffffff00
1a00409c:	51726d54 	.word	0x51726d54
1a0040a0:	ffffff00 	.word	0xffffff00
1a0040a4:	20726d54 	.word	0x20726d54
1a0040a8:	00637653 	.word	0x00637653

1a0040ac <lpcUarts>:
1a0040ac:	40081000 06020406 00180205 40081000     ...@...........@
1a0040bc:	09070509 00180706 40082000 00000000     ......... .@....
1a0040cc:	00190000 400c1000 07060107 001a0602     .......@........
1a0040dc:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0040ec:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0040fc:	0072656d                                mer.

1a004100 <gpioPinsInit>:
1a004100:	02000104 00050701 05010d03 04080100     ................
1a004110:	02020002 02000304 00000403 04070002     ................
1a004120:	030c0300 09050402 05040103 04030208     ................
1a004130:	04020305 06040504 0802000c 03000b06     ................
1a004140:	00090607 07060503 060f0504 03030004     ................
1a004150:	02000404 00050404 06040502 04060200     ................
1a004160:	0c050408 05040a04 0003010e 14010a00     ................
1a004170:	010f0000 0d000012 00001101 0010010c     ................
1a004180:	07070300 000f0300 01000001 00000000     ................
1a004190:	000a0600 08060603 06100504 04030005     ................
1a0041a0:	03000106 04090400 04010d05 010b0000     ................
1a0041b0:	0200000f 00000001 00010104 02010800     ................
1a0041c0:	01090000 09010006 05040002 04010200     ................
1a0041d0:	02020105 02020504 0e00000a 01000b02     ................
1a0041e0:	000c020b 00040c01 04000200 01020001     ................
1a0041f0:	02000204 00030402 03070302 070b0300     ................
1a004200:	0c030004 03000507 0006070d 01020e03     ................
1a004210:	04010504 06020006 02000504 00040405     ................
1a004220:	08040402 040c0504 0d050409 05040a04     ................
1a004230:	0005010e ffff0801 ff000a0d 7778797a     ............zyxw
1a004240:	73747576 6f707172 6b6c6d6e 6768696a     vutsrqponmlkjihg
1a004250:	63646566 38396162 34353637 30313233     fedcba9876543210
1a004260:	34333231 38373635 63626139 67666564     123456789abcdefg
1a004270:	6b6a6968 6f6e6d6c 73727170 77767574     hijklmnopqrstuvw
1a004280:	007a7978                                xyz.

1a004284 <ultrasonicSensorsIrqMap>:
1a004284:	ff020100                                ....

1a004288 <ExtRateIn>:
1a004288:	00000000                                ....

1a00428c <GpioButtons>:
1a00428c:	08000400 09010900                       ........

1a004294 <GpioLeds>:
1a004294:	01050005 0e000205 0c010b01              ............

1a0042a0 <GpioPorts>:
1a0042a0:	03030003 0f050403 05031005 07030603     ................
1a0042b0:	ffff0802                                ....

1a0042b4 <OscRateIn>:
1a0042b4:	00b71b00                                ....

1a0042b8 <InitClkStates>:
1a0042b8:	01010f01                                ....

1a0042bc <pinmuxing>:
1a0042bc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0042cc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0042dc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0042ec:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0042fc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00430c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00431c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00432c:	00570206                                ..W.

1a004330 <UART_BClock>:
1a004330:	01a201c2 01620182                       ......b.

1a004338 <UART_PClock>:
1a004338:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004348:	000000ff                                ....

1a00434c <periph_to_base>:
1a00434c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00435c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00436c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00437c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00438c:	01820013 00120182 01a201a2 01c20011     ................
1a00439c:	001001c2 01e201e2 0202000f 000e0202     ................
1a0043ac:	02220222 0223000d 001c0223              "."...#.#...

1a0043b8 <InitClkStates>:
1a0043b8:	00010100 00010909 0001090a 01010701     ................
1a0043c8:	00010902 00010906 0101090c 0001090d     ................
1a0043d8:	0001090e 0001090f 00010910 00010911     ................
1a0043e8:	00010912 00010913 00011114 00011119     ................
1a0043f8:	0001111a 0001111b                       ........
